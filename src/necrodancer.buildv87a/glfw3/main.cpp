
#include "main.h"

//${CONFIG_BEGIN}
#define CFG_BINARY_FILES *.bin|*.dat
#define CFG_BRL_DATABUFFER_IMPLEMENTED 1
#define CFG_BRL_FILESTREAM_IMPLEMENTED 1
#define CFG_BRL_FILESYSTEM_IMPLEMENTED 1
#define CFG_BRL_GAMETARGET_IMPLEMENTED 1
#define CFG_BRL_OS_IMPLEMENTED 1
#define CFG_BRL_STREAM_IMPLEMENTED 1
#define CFG_BRL_THREAD_IMPLEMENTED 1
#define CFG_CD 
#define CFG_CONFIG release
#define CFG_CPP_GC_MODE 1
#define CFG_GLFW_GCC_MSIZE_WINNT 32
#define CFG_GLFW_SWAP_INTERVAL -1
#define CFG_GLFW_USE_MINGW 1
#define CFG_GLFW_VERSION 3
#define CFG_GLFW_WINDOW_DECORATED 1
#define CFG_GLFW_WINDOW_FLOATING 0
#define CFG_GLFW_WINDOW_FULLSCREEN 0
#define CFG_GLFW_WINDOW_HEIGHT 480
#define CFG_GLFW_WINDOW_RESIZABLE 0
#define CFG_GLFW_WINDOW_SAMPLES 0
#define CFG_GLFW_WINDOW_TITLE Monkey Game
#define CFG_GLFW_WINDOW_WIDTH 640
#define CFG_HOST winnt
#define CFG_IMAGE_FILES *.png|*.jpg
#define CFG_LANG cpp
#define CFG_MODPATH 
#define CFG_MOJO_AUTO_SUSPEND_ENABLED 1
#define CFG_MOJO_DRIVER_IMPLEMENTED 1
#define CFG_MOJO_IMAGE_FILTERING_ENABLED 1
#define CFG_MUSIC_FILES *.wav|*.ogg
#define CFG_OPENGL_DEPTH_BUFFER_ENABLED 0
#define CFG_OPENGL_GLES20_ENABLED 0
#define CFG_SAFEMODE 0
#define CFG_SOUND_FILES *.wav|*.ogg
#define CFG_TARGET glfw
#define CFG_TEXT_FILES *.txt|*.xml|*.json
//${CONFIG_END}

//${TRANSCODE_BEGIN}

#include <wctype.h>
#include <locale.h>
#include <windows.h>
#include <cstdio>
#include <vector>

// C++ Monkey runtime.
//
// Placed into the public domain 24/02/2011.
// No warranty implied; use at your own risk.

//***** Monkey Types *****

typedef wchar_t Char;
template<class T> class Array;
class String;
class Object;

#if CFG_CPP_DOUBLE_PRECISION_FLOATS
typedef double Float;
#define FLOAT(X) X
#else
typedef float Float;
#define FLOAT(X) X##f
#endif

void dbg_error( const char *p );

#if !_MSC_VER
#define sprintf_s sprintf
#define sscanf_s sscanf
#endif

//***** GC Config *****

#if CFG_CPP_GC_DEBUG
#define DEBUG_GC 1
#else
#define DEBUG_GC 0
#endif

// GC mode:
//
// 0 = disabled
// 1 = Incremental GC every OnWhatever
// 2 = Incremental GC every allocation
//
#ifndef CFG_CPP_GC_MODE
#define CFG_CPP_GC_MODE 1
#endif

//How many bytes alloced to trigger GC
//
#ifndef CFG_CPP_GC_TRIGGER
#define CFG_CPP_GC_TRIGGER 8*1024*1024
#endif

//GC_MODE 2 needs to track locals on a stack - this may need to be bumped if your app uses a LOT of locals, eg: is heavily recursive...
//
#ifndef CFG_CPP_GC_MAX_LOCALS
#define CFG_CPP_GC_MAX_LOCALS 8192
#endif

// ***** GC *****

#if _WIN32

int gc_micros(){
	static int f;
	static LARGE_INTEGER pcf;
	if( !f ){
		if( QueryPerformanceFrequency( &pcf ) && pcf.QuadPart>=1000000L ){
			pcf.QuadPart/=1000000L;
			f=1;
		}else{
			f=-1;
		}
	}
	if( f>0 ){
		LARGE_INTEGER pc;
		if( QueryPerformanceCounter( &pc ) ) return pc.QuadPart/pcf.QuadPart;
		f=-1;
	}
	return 0;// timeGetTime()*1000;
}

#elif __APPLE__

#include <mach/mach_time.h>

int gc_micros(){
	static int f;
	static mach_timebase_info_data_t timeInfo;
	if( !f ){
		mach_timebase_info( &timeInfo );
		timeInfo.denom*=1000L;
		f=1;
	}
	return mach_absolute_time()*timeInfo.numer/timeInfo.denom;
}

#else

int gc_micros(){
	return 0;
}

#endif

#define gc_mark_roots gc_mark

void gc_mark_roots();

struct gc_object;

gc_object *gc_object_alloc( int size );
void gc_object_free( gc_object *p );

struct gc_object{
	gc_object *succ;
	gc_object *pred;
	int flags;
	
	virtual ~gc_object(){
	}
	
	virtual void mark(){
	}
	
	void *operator new( size_t size ){
		return gc_object_alloc( size );
	}
	
	void operator delete( void *p ){
		gc_object_free( (gc_object*)p );
	}
};

gc_object gc_free_list;
gc_object gc_marked_list;
gc_object gc_unmarked_list;
gc_object gc_queued_list;	//doesn't really need to be doubly linked...

int gc_free_bytes;
int gc_marked_bytes;
int gc_alloced_bytes;
int gc_max_alloced_bytes;
int gc_new_bytes;
int gc_markbit=1;

gc_object *gc_cache[8];

void gc_collect_all();
void gc_mark_queued( int n );

#define GC_CLEAR_LIST( LIST ) ((LIST).succ=(LIST).pred=&(LIST))

#define GC_LIST_IS_EMPTY( LIST ) ((LIST).succ==&(LIST))

#define GC_REMOVE_NODE( NODE ){\
(NODE)->pred->succ=(NODE)->succ;\
(NODE)->succ->pred=(NODE)->pred;}

#define GC_INSERT_NODE( NODE,SUCC ){\
(NODE)->pred=(SUCC)->pred;\
(NODE)->succ=(SUCC);\
(SUCC)->pred->succ=(NODE);\
(SUCC)->pred=(NODE);}

void gc_init1(){
	GC_CLEAR_LIST( gc_free_list );
	GC_CLEAR_LIST( gc_marked_list );
	GC_CLEAR_LIST( gc_unmarked_list);
	GC_CLEAR_LIST( gc_queued_list );
}

void gc_init2(){
	gc_mark_roots();
}

#if CFG_CPP_GC_MODE==2

int gc_ctor_nest;
gc_object *gc_locals[CFG_CPP_GC_MAX_LOCALS],**gc_locals_sp=gc_locals;

struct gc_ctor{
	gc_ctor(){ ++gc_ctor_nest; }
	~gc_ctor(){ --gc_ctor_nest; }
};

struct gc_enter{
	gc_object **sp;
	gc_enter():sp(gc_locals_sp){
	}
	~gc_enter(){
#if DEBUG_GC
		static int max_locals;
		int n=gc_locals_sp-gc_locals;
		if( n>max_locals ){
			max_locals=n;
			printf( "max_locals=%i\n",n );
		}
#endif		
		gc_locals_sp=sp;
	}
};

#define GC_CTOR gc_ctor _c;
#define GC_ENTER gc_enter _e;

#else

struct gc_ctor{
};
struct gc_enter{
};

#define GC_CTOR
#define GC_ENTER

#endif

//Can be modified off thread!
static volatile int gc_ext_new_bytes;

#if _MSC_VER
#define atomic_add(P,V) InterlockedExchangeAdd((volatile unsigned int*)P,V)			//(*(P)+=(V))
#define atomic_sub(P,V) InterlockedExchangeSubtract((volatile unsigned int*)P,V)	//(*(P)-=(V))
#else
#define atomic_add(P,V) __sync_fetch_and_add(P,V)
#define atomic_sub(P,V) __sync_fetch_and_sub(P,V)
#endif

//Careful! May be called off thread!
//
void gc_ext_malloced( int size ){
	atomic_add( &gc_ext_new_bytes,size );
}

void gc_object_free( gc_object *p ){

	int size=p->flags & ~7;
	gc_free_bytes-=size;
	
	if( size<64 ){
		p->succ=gc_cache[size>>3];
		gc_cache[size>>3]=p;
	}else{
		free( p );
	}
}

void gc_flush_free( int size ){

	int t=gc_free_bytes-size;
	if( t<0 ) t=0;
	
	//ignore bytes freed by released strings
	int new_bytes=gc_new_bytes;
	
	while( gc_free_bytes>t ){
	
		gc_object *p=gc_free_list.succ;

		GC_REMOVE_NODE( p );

#if DEBUG_GC
//		printf( "deleting @%p\n",p );fflush( stdout );
//		p->flags|=4;
//		continue;
#endif
		delete p;
	}
	
	gc_new_bytes=new_bytes;
}

gc_object *gc_object_alloc( int size ){

	size=(size+7)&~7;
	
	gc_new_bytes+=size;
	
#if CFG_CPP_GC_MODE==2

	if( !gc_ctor_nest ){

#if DEBUG_GC
		int ms=gc_micros();
#endif
		if( gc_new_bytes+gc_ext_new_bytes>(CFG_CPP_GC_TRIGGER) ){
			atomic_sub( &gc_ext_new_bytes,gc_ext_new_bytes );
			gc_collect_all();
			gc_new_bytes=0;
		}else{
			gc_mark_queued( (long long)(gc_new_bytes)*(gc_alloced_bytes-gc_new_bytes)/(CFG_CPP_GC_TRIGGER)+gc_new_bytes );
		}

#if DEBUG_GC
		ms=gc_micros()-ms;
		if( ms>=100 ) {printf( "gc time:%i\n",ms );fflush( stdout );}
#endif
	}
	
#endif

	gc_flush_free( size );

	gc_object *p;
	if( size<64 && (p=gc_cache[size>>3]) ){
		gc_cache[size>>3]=p->succ;
	}else{
		p=(gc_object*)malloc( size );
	}
	
	p->flags=size|gc_markbit;
	GC_INSERT_NODE( p,&gc_unmarked_list );

	gc_alloced_bytes+=size;
	if( gc_alloced_bytes>gc_max_alloced_bytes ) gc_max_alloced_bytes=gc_alloced_bytes;
	
#if CFG_CPP_GC_MODE==2
	*gc_locals_sp++=p;
#endif

	return p;
}

#if DEBUG_GC

template<class T> gc_object *to_gc_object( T *t ){
	gc_object *p=dynamic_cast<gc_object*>(t);
	if( p && (p->flags & 4) ){
		printf( "gc error : object already deleted @%p\n",p );fflush( stdout );
		exit(-1);
	}
	return p;
}

#else

#define to_gc_object(t) dynamic_cast<gc_object*>(t)

#endif

template<class T> T *gc_retain( T *t ){
#if CFG_CPP_GC_MODE==2
	*gc_locals_sp++=to_gc_object( t );
#endif
	return t;
}

template<class T> void gc_mark( T *t ){

	gc_object *p=to_gc_object( t );
	
	if( p && (p->flags & 3)==gc_markbit ){
		p->flags^=1;
		GC_REMOVE_NODE( p );
		GC_INSERT_NODE( p,&gc_marked_list );
		gc_marked_bytes+=(p->flags & ~7);
		p->mark();
	}
}

template<class T> void gc_mark_q( T *t ){

	gc_object *p=to_gc_object( t );
	
	if( p && (p->flags & 3)==gc_markbit ){
		p->flags^=1;
		GC_REMOVE_NODE( p );
		GC_INSERT_NODE( p,&gc_queued_list );
	}
}

template<class T,class V> void gc_assign( T *&lhs,V *rhs ){

	gc_object *p=to_gc_object( rhs );
	
	if( p && (p->flags & 3)==gc_markbit ){
		p->flags^=1;
		GC_REMOVE_NODE( p );
		GC_INSERT_NODE( p,&gc_queued_list );
	}
	lhs=rhs;
}

void gc_mark_locals(){

#if CFG_CPP_GC_MODE==2
	for( gc_object **pp=gc_locals;pp!=gc_locals_sp;++pp ){
		gc_object *p=*pp;
		if( p && (p->flags & 3)==gc_markbit ){
			p->flags^=1;
			GC_REMOVE_NODE( p );
			GC_INSERT_NODE( p,&gc_marked_list );
			gc_marked_bytes+=(p->flags & ~7);
			p->mark();
		}
	}
#endif	
}

void gc_mark_queued( int n ){
	while( gc_marked_bytes<n && !GC_LIST_IS_EMPTY( gc_queued_list ) ){
		gc_object *p=gc_queued_list.succ;
		GC_REMOVE_NODE( p );
		GC_INSERT_NODE( p,&gc_marked_list );
		gc_marked_bytes+=(p->flags & ~7);
		p->mark();
	}
}

void gc_validate_list( gc_object &list,const char *msg ){
	gc_object *node=list.succ;
	while( node ){
		if( node==&list ) return;
		if( !node->pred ) break;
		if( node->pred->succ!=node ) break;
		node=node->succ;
	}
	if( msg ){
		puts( msg );fflush( stdout );
	}
	puts( "LIST ERROR!" );
	exit(-1);
}

//returns reclaimed bytes
void gc_sweep(){

	int reclaimed_bytes=gc_alloced_bytes-gc_marked_bytes;
	
	if( reclaimed_bytes ){
	
		//append unmarked list to end of free list
		gc_object *head=gc_unmarked_list.succ;
		gc_object *tail=gc_unmarked_list.pred;
		gc_object *succ=&gc_free_list;
		gc_object *pred=succ->pred;
		
		head->pred=pred;
		tail->succ=succ;
		pred->succ=head;
		succ->pred=tail;
		
		gc_free_bytes+=reclaimed_bytes;
	}

	//move marked to unmarked.
	if( GC_LIST_IS_EMPTY( gc_marked_list ) ){
		GC_CLEAR_LIST( gc_unmarked_list );
	}else{
		gc_unmarked_list.succ=gc_marked_list.succ;
		gc_unmarked_list.pred=gc_marked_list.pred;
		gc_unmarked_list.succ->pred=gc_unmarked_list.pred->succ=&gc_unmarked_list;
		GC_CLEAR_LIST( gc_marked_list );
	}
	
	//adjust sizes
	gc_alloced_bytes=gc_marked_bytes;
	gc_marked_bytes=0;
	gc_markbit^=1;
}

void gc_collect_all(){

//	puts( "Mark locals" );
	gc_mark_locals();

//	puts( "Marked queued" );
	gc_mark_queued( 0x7fffffff );

//	puts( "Sweep" );
	gc_sweep();

//	puts( "Mark roots" );
	gc_mark_roots();

#if DEBUG_GC
	gc_validate_list( gc_marked_list,"Validating gc_marked_list"  );
	gc_validate_list( gc_unmarked_list,"Validating gc_unmarked_list"  );
	gc_validate_list( gc_free_list,"Validating gc_free_list" );
#endif

}

void gc_collect(){
	
#if CFG_CPP_GC_MODE==1

#if DEBUG_GC
	int ms=gc_micros();
#endif

	if( gc_new_bytes+gc_ext_new_bytes>(CFG_CPP_GC_TRIGGER) ){
		atomic_sub( &gc_ext_new_bytes,gc_ext_new_bytes );
		gc_collect_all();
		gc_new_bytes=0;
	}else{
		gc_mark_queued( (long long)(gc_new_bytes)*(gc_alloced_bytes-gc_new_bytes)/(CFG_CPP_GC_TRIGGER)+gc_new_bytes );
	}

#if DEBUG_GC
	ms=gc_micros()-ms;
//	if( ms>=100 ) {printf( "gc time:%i\n",ms );fflush( stdout );}
	if( ms>10 ) {printf( "gc time:%i\n",ms );fflush( stdout );}
#endif

#endif
}

// ***** Array *****

template<class T> T *t_memcpy( T *dst,const T *src,int n ){
	memcpy( dst,src,n*sizeof(T) );
	return dst+n;
}

template<class T> T *t_memset( T *dst,int val,int n ){
	memset( dst,val,n*sizeof(T) );
	return dst+n;
}

template<class T> int t_memcmp( const T *x,const T *y,int n ){
	return memcmp( x,y,n*sizeof(T) );
}

template<class T> int t_strlen( const T *p ){
	const T *q=p++;
	while( *q++ ){}
	return q-p;
}

template<class T> T *t_create( int n,T *p ){
	t_memset( p,0,n );
	return p+n;
}

template<class T> T *t_create( int n,T *p,const T *q ){
	t_memcpy( p,q,n );
	return p+n;
}

template<class T> void t_destroy( int n,T *p ){
}

template<class T> void gc_mark_elements( int n,T *p ){
}

template<class T> void gc_mark_elements( int n,T **p ){
	for( int i=0;i<n;++i ) gc_mark( p[i] );
}

template<class T> class Array{
public:
	Array():rep( &nullRep ){
	}

	//Uses default...
//	Array( const Array<T> &t )...
	
	Array( int length ):rep( Rep::alloc( length ) ){
		t_create( rep->length,rep->data );
	}
	
	Array( const T *p,int length ):rep( Rep::alloc(length) ){
		t_create( rep->length,rep->data,p );
	}
	
	~Array(){
	}

	//Uses default...
//	Array &operator=( const Array &t )...
	
	int Length()const{ 
		return rep->length; 
	}
	
	T &At( int index ){
		if( index<0 || index>=rep->length ) dbg_error( "Array index out of range" );
		return rep->data[index]; 
	}
	
	const T &At( int index )const{
		if( index<0 || index>=rep->length ) dbg_error( "Array index out of range" );
		return rep->data[index]; 
	}
	
	T &operator[]( int index ){
		return rep->data[index]; 
	}

	const T &operator[]( int index )const{
		return rep->data[index]; 
	}
	
	Array Slice( int from,int term )const{
		int len=rep->length;
		if( from<0 ){ 
			from+=len;
			if( from<0 ) from=0;
		}else if( from>len ){
			from=len;
		}
		if( term<0 ){
			term+=len;
		}else if( term>len ){
			term=len;
		}
		if( term<=from ) return Array();
		return Array( rep->data+from,term-from );
	}

	Array Slice( int from )const{
		return Slice( from,rep->length );
	}
	
	Array Resize( int newlen )const{
		if( newlen<=0 ) return Array();
		int n=rep->length;
		if( newlen<n ) n=newlen;
		Rep *p=Rep::alloc( newlen );
		T *q=p->data;
		q=t_create( n,q,rep->data );
		q=t_create( (newlen-n),q );
		return Array( p );
	}
	
private:
	struct Rep : public gc_object{
		int length;
		T data[0];
		
		Rep():length(0){
			flags=3;
		}
		
		Rep( int length ):length(length){
		}
		
		~Rep(){
			t_destroy( length,data );
		}
		
		void mark(){
			gc_mark_elements( length,data );
		}
		
		static Rep *alloc( int length ){
			if( !length ) return &nullRep;
			void *p=gc_object_alloc( sizeof(Rep)+length*sizeof(T) );
			return ::new(p) Rep( length );
		}
		
	};
	Rep *rep;
	
	static Rep nullRep;
	
	template<class C> friend void gc_mark( Array<C> t );
	template<class C> friend void gc_mark_q( Array<C> t );
	template<class C> friend Array<C> gc_retain( Array<C> t );
	template<class C> friend void gc_assign( Array<C> &lhs,Array<C> rhs );
	template<class C> friend void gc_mark_elements( int n,Array<C> *p );
	
	Array( Rep *rep ):rep(rep){
	}
};

template<class T> typename Array<T>::Rep Array<T>::nullRep;

template<class T> Array<T> *t_create( int n,Array<T> *p ){
	for( int i=0;i<n;++i ) *p++=Array<T>();
	return p;
}

template<class T> Array<T> *t_create( int n,Array<T> *p,const Array<T> *q ){
	for( int i=0;i<n;++i ) *p++=*q++;
	return p;
}

template<class T> void gc_mark( Array<T> t ){
	gc_mark( t.rep );
}

template<class T> void gc_mark_q( Array<T> t ){
	gc_mark_q( t.rep );
}

template<class T> Array<T> gc_retain( Array<T> t ){
#if CFG_CPP_GC_MODE==2
	gc_retain( t.rep );
#endif
	return t;
}

template<class T> void gc_assign( Array<T> &lhs,Array<T> rhs ){
	gc_mark( rhs.rep );
	lhs=rhs;
}

template<class T> void gc_mark_elements( int n,Array<T> *p ){
	for( int i=0;i<n;++i ) gc_mark( p[i].rep );
}
		
// ***** String *****

static const char *_str_load_err;

class String{
public:
	String():rep( &nullRep ){
	}
	
	String( const String &t ):rep( t.rep ){
		rep->retain();
	}

	String( int n ){
		char buf[256];
		sprintf_s( buf,"%i",n );
		rep=Rep::alloc( t_strlen(buf) );
		for( int i=0;i<rep->length;++i ) rep->data[i]=buf[i];
	}
	
	String( Float n ){
		char buf[256];
		
		//would rather use snprintf, but it's doing weird things in MingW.
		//
		sprintf_s( buf,"%.17lg",n );
		//
		char *p;
		for( p=buf;*p;++p ){
			if( *p=='.' || *p=='e' ) break;
		}
		if( !*p ){
			*p++='.';
			*p++='0';
			*p=0;
		}

		rep=Rep::alloc( t_strlen(buf) );
		for( int i=0;i<rep->length;++i ) rep->data[i]=buf[i];
	}

	String( Char ch,int length ):rep( Rep::alloc(length) ){
		for( int i=0;i<length;++i ) rep->data[i]=ch;
	}

	String( const Char *p ):rep( Rep::alloc(t_strlen(p)) ){
		t_memcpy( rep->data,p,rep->length );
	}

	String( const Char *p,int length ):rep( Rep::alloc(length) ){
		t_memcpy( rep->data,p,rep->length );
	}
	
#if __OBJC__	
	String( NSString *nsstr ):rep( Rep::alloc([nsstr length]) ){
		unichar *buf=(unichar*)malloc( rep->length * sizeof(unichar) );
		[nsstr getCharacters:buf range:NSMakeRange(0,rep->length)];
		for( int i=0;i<rep->length;++i ) rep->data[i]=buf[i];
		free( buf );
	}
#endif

#if __cplusplus_winrt
	String( Platform::String ^str ):rep( Rep::alloc(str->Length()) ){
		for( int i=0;i<rep->length;++i ) rep->data[i]=str->Data()[i];
	}
#endif

	~String(){
		rep->release();
	}
	
	template<class C> String( const C *p ):rep( Rep::alloc(t_strlen(p)) ){
		for( int i=0;i<rep->length;++i ) rep->data[i]=p[i];
	}
	
	template<class C> String( const C *p,int length ):rep( Rep::alloc(length) ){
		for( int i=0;i<rep->length;++i ) rep->data[i]=p[i];
	}
	
	String Copy()const{
		Rep *crep=Rep::alloc( rep->length );
		t_memcpy( crep->data,rep->data,rep->length );
		return String( crep );
	}
	
	int Length()const{
		return rep->length;
	}
	
	const Char *Data()const{
		return rep->data;
	}
	
	Char At( int index )const{
		if( index<0 || index>=rep->length ) dbg_error( "Character index out of range" );
		return rep->data[index]; 
	}
	
	Char operator[]( int index )const{
		return rep->data[index];
	}
	
	String &operator=( const String &t ){
		t.rep->retain();
		rep->release();
		rep=t.rep;
		return *this;
	}
	
	String &operator+=( const String &t ){
		return operator=( *this+t );
	}
	
	int Compare( const String &t )const{
		int n=rep->length<t.rep->length ? rep->length : t.rep->length;
		for( int i=0;i<n;++i ){
			if( int q=(int)(rep->data[i])-(int)(t.rep->data[i]) ) return q;
		}
		return rep->length-t.rep->length;
	}
	
	bool operator==( const String &t )const{
		return rep->length==t.rep->length && t_memcmp( rep->data,t.rep->data,rep->length )==0;
	}
	
	bool operator!=( const String &t )const{
		return rep->length!=t.rep->length || t_memcmp( rep->data,t.rep->data,rep->length )!=0;
	}
	
	bool operator<( const String &t )const{
		return Compare( t )<0;
	}
	
	bool operator<=( const String &t )const{
		return Compare( t )<=0;
	}
	
	bool operator>( const String &t )const{
		return Compare( t )>0;
	}
	
	bool operator>=( const String &t )const{
		return Compare( t )>=0;
	}
	
	String operator+( const String &t )const{
		if( !rep->length ) return t;
		if( !t.rep->length ) return *this;
		Rep *p=Rep::alloc( rep->length+t.rep->length );
		Char *q=p->data;
		q=t_memcpy( q,rep->data,rep->length );
		q=t_memcpy( q,t.rep->data,t.rep->length );
		return String( p );
	}
	
	int Find( String find,int start=0 )const{
		if( start<0 ) start=0;
		while( start+find.rep->length<=rep->length ){
			if( !t_memcmp( rep->data+start,find.rep->data,find.rep->length ) ) return start;
			++start;
		}
		return -1;
	}
	
	int FindLast( String find )const{
		int start=rep->length-find.rep->length;
		while( start>=0 ){
			if( !t_memcmp( rep->data+start,find.rep->data,find.rep->length ) ) return start;
			--start;
		}
		return -1;
	}
	
	int FindLast( String find,int start )const{
		if( start>rep->length-find.rep->length ) start=rep->length-find.rep->length;
		while( start>=0 ){
			if( !t_memcmp( rep->data+start,find.rep->data,find.rep->length ) ) return start;
			--start;
		}
		return -1;
	}
	
	String Trim()const{
		int i=0,i2=rep->length;
		while( i<i2 && rep->data[i]<=32 ) ++i;
		while( i2>i && rep->data[i2-1]<=32 ) --i2;
		if( i==0 && i2==rep->length ) return *this;
		return String( rep->data+i,i2-i );
	}

	Array<String> Split( String sep )const{
	
		if( !sep.rep->length ){
			Array<String> bits( rep->length );
			for( int i=0;i<rep->length;++i ){
				bits[i]=String( (Char)(*this)[i],1 );
			}
			return bits;
		}
		
		int i=0,i2,n=1;
		while( (i2=Find( sep,i ))!=-1 ){
			++n;
			i=i2+sep.rep->length;
		}
		Array<String> bits( n );
		if( n==1 ){
			bits[0]=*this;
			return bits;
		}
		i=0;n=0;
		while( (i2=Find( sep,i ))!=-1 ){
			bits[n++]=Slice( i,i2 );
			i=i2+sep.rep->length;
		}
		bits[n]=Slice( i );
		return bits;
	}

	String Join( Array<String> bits )const{
		if( bits.Length()==0 ) return String();
		if( bits.Length()==1 ) return bits[0];
		int newlen=rep->length * (bits.Length()-1);
		for( int i=0;i<bits.Length();++i ){
			newlen+=bits[i].rep->length;
		}
		Rep *p=Rep::alloc( newlen );
		Char *q=p->data;
		q=t_memcpy( q,bits[0].rep->data,bits[0].rep->length );
		for( int i=1;i<bits.Length();++i ){
			q=t_memcpy( q,rep->data,rep->length );
			q=t_memcpy( q,bits[i].rep->data,bits[i].rep->length );
		}
		return String( p );
	}

	String Replace( String find,String repl )const{
		int i=0,i2,newlen=0;
		while( (i2=Find( find,i ))!=-1 ){
			newlen+=(i2-i)+repl.rep->length;
			i=i2+find.rep->length;
		}
		if( !i ) return *this;
		newlen+=rep->length-i;
		Rep *p=Rep::alloc( newlen );
		Char *q=p->data;
		i=0;
		while( (i2=Find( find,i ))!=-1 ){
			q=t_memcpy( q,rep->data+i,i2-i );
			q=t_memcpy( q,repl.rep->data,repl.rep->length );
			i=i2+find.rep->length;
		}
		q=t_memcpy( q,rep->data+i,rep->length-i );
		return String( p );
	}

	String ToLower()const{
		for( int i=0;i<rep->length;++i ){
			Char t=towlower( rep->data[i] );
			if( t==rep->data[i] ) continue;
			Rep *p=Rep::alloc( rep->length );
			Char *q=p->data;
			t_memcpy( q,rep->data,i );
			for( q[i++]=t;i<rep->length;++i ){
				q[i]=towlower( rep->data[i] );
			}
			return String( p );
		}
		return *this;
	}

	String ToUpper()const{
		for( int i=0;i<rep->length;++i ){
			Char t=towupper( rep->data[i] );
			if( t==rep->data[i] ) continue;
			Rep *p=Rep::alloc( rep->length );
			Char *q=p->data;
			t_memcpy( q,rep->data,i );
			for( q[i++]=t;i<rep->length;++i ){
				q[i]=towupper( rep->data[i] );
			}
			return String( p );
		}
		return *this;
	}
	
	bool Contains( String sub )const{
		return Find( sub )!=-1;
	}

	bool StartsWith( String sub )const{
		return sub.rep->length<=rep->length && !t_memcmp( rep->data,sub.rep->data,sub.rep->length );
	}

	bool EndsWith( String sub )const{
		return sub.rep->length<=rep->length && !t_memcmp( rep->data+rep->length-sub.rep->length,sub.rep->data,sub.rep->length );
	}
	
	String Slice( int from,int term )const{
		int len=rep->length;
		if( from<0 ){
			from+=len;
			if( from<0 ) from=0;
		}else if( from>len ){
			from=len;
		}
		if( term<0 ){
			term+=len;
		}else if( term>len ){
			term=len;
		}
		if( term<from ) return String();
		if( from==0 && term==len ) return *this;
		return String( rep->data+from,term-from );
	}

	String Slice( int from )const{
		return Slice( from,rep->length );
	}
	
	Array<int> ToChars()const{
		Array<int> chars( rep->length );
		for( int i=0;i<rep->length;++i ) chars[i]=rep->data[i];
		return chars;
	}
	
	int ToInt()const{
		char buf[64];
		return atoi( ToCString<char>( buf,sizeof(buf) ) );
	}
	
	Float ToFloat()const{
		char buf[256];
		return atof( ToCString<char>( buf,sizeof(buf) ) );
	}

	template<class C> class CString{
		struct Rep{
			int refs;
			C data[1];
		};
		Rep *_rep;
		static Rep _nul;
	public:
		template<class T> CString( const T *data,int length ){
			_rep=(Rep*)malloc( length*sizeof(C)+sizeof(Rep) );
			_rep->refs=1;
			_rep->data[length]=0;
			for( int i=0;i<length;++i ){
				_rep->data[i]=(C)data[i];
			}
		}
		CString():_rep( new Rep ){
			_rep->refs=1;
		}
		CString( const CString &c ):_rep(c._rep){
			++_rep->refs;
		}
		~CString(){
			if( !--_rep->refs ) free( _rep );
		}
		CString &operator=( const CString &c ){
			++c._rep->refs;
			if( !--_rep->refs ) free( _rep );
			_rep=c._rep;
			return *this;
		}
		operator const C*()const{ 
			return _rep->data;
		}
	};
	
	template<class C> CString<C> ToCString()const{
		return CString<C>( rep->data,rep->length );
	}

	template<class C> C *ToCString( C *p,int length )const{
		if( --length>rep->length ) length=rep->length;
		for( int i=0;i<length;++i ) p[i]=rep->data[i];
		p[length]=0;
		return p;
	}
	
#if __OBJC__	
	NSString *ToNSString()const{
		return [NSString stringWithCharacters:ToCString<unichar>() length:rep->length];
	}
#endif

#if __cplusplus_winrt
	Platform::String ^ToWinRTString()const{
		return ref new Platform::String( rep->data,rep->length );
	}
#endif
	CString<char> ToUtf8()const{
		std::vector<unsigned char> buf;
		Save( buf );
		return CString<char>( &buf[0],buf.size() );
	}

	bool Save( FILE *fp )const{
		std::vector<unsigned char> buf;
		Save( buf );
		return buf.size() ? fwrite( &buf[0],1,buf.size(),fp )==buf.size() : true;
	}
	
	void Save( std::vector<unsigned char> &buf )const{
	
		Char *p=rep->data;
		Char *e=p+rep->length;
		
		while( p<e ){
			Char c=*p++;
			if( c<0x80 ){
				buf.push_back( c );
			}else if( c<0x800 ){
				buf.push_back( 0xc0 | (c>>6) );
				buf.push_back( 0x80 | (c & 0x3f) );
			}else{
				buf.push_back( 0xe0 | (c>>12) );
				buf.push_back( 0x80 | ((c>>6) & 0x3f) );
				buf.push_back( 0x80 | (c & 0x3f) );
			}
		}
	}
	
	static String FromChars( Array<int> chars ){
		int n=chars.Length();
		Rep *p=Rep::alloc( n );
		for( int i=0;i<n;++i ){
			p->data[i]=chars[i];
		}
		return String( p );
	}

	static String Load( FILE *fp ){
		unsigned char tmp[4096];
		std::vector<unsigned char> buf;
		for(;;){
			int n=fread( tmp,1,4096,fp );
			if( n>0 ) buf.insert( buf.end(),tmp,tmp+n );
			if( n!=4096 ) break;
		}
		return buf.size() ? String::Load( &buf[0],buf.size() ) : String();
	}
	
	static String Load( unsigned char *p,int n ){
	
		_str_load_err=0;
		
		unsigned char *e=p+n;
		std::vector<Char> chars;
		
		int t0=n>0 ? p[0] : -1;
		int t1=n>1 ? p[1] : -1;

		if( t0==0xfe && t1==0xff ){
			p+=2;
			while( p<e-1 ){
				int c=*p++;
				chars.push_back( (c<<8)|*p++ );
			}
		}else if( t0==0xff && t1==0xfe ){
			p+=2;
			while( p<e-1 ){
				int c=*p++;
				chars.push_back( (*p++<<8)|c );
			}
		}else{
			int t2=n>2 ? p[2] : -1;
			if( t0==0xef && t1==0xbb && t2==0xbf ) p+=3;
			unsigned char *q=p;
			bool fail=false;
			while( p<e ){
				unsigned int c=*p++;
				if( c & 0x80 ){
					if( (c & 0xe0)==0xc0 ){
						if( p>=e || (p[0] & 0xc0)!=0x80 ){
							fail=true;
							break;
						}
						c=((c & 0x1f)<<6) | (p[0] & 0x3f);
						p+=1;
					}else if( (c & 0xf0)==0xe0 ){
						if( p+1>=e || (p[0] & 0xc0)!=0x80 || (p[1] & 0xc0)!=0x80 ){
							fail=true;
							break;
						}
						c=((c & 0x0f)<<12) | ((p[0] & 0x3f)<<6) | (p[1] & 0x3f);
						p+=2;
					}else{
						fail=true;
						break;
					}
				}
				chars.push_back( c );
			}
			if( fail ){
				_str_load_err="Invalid UTF-8";
				return String( q,n );
			}
		}
		return chars.size() ? String( &chars[0],chars.size() ) : String();
	}

private:
	
	struct Rep{
		int refs;
		int length;
		Char data[0];
		
		Rep():refs(1),length(0){
		}
		
		Rep( int length ):refs(1),length(length){
		}
		
		void retain(){
			++refs;
		}
		
		void release(){
			if( --refs || this==&nullRep ) return;
			gc_new_bytes-=sizeof(Rep)+length*sizeof(Char);
			free( this );
		}

		static Rep *alloc( int length ){
			if( !length ) return &nullRep;
			void *p=malloc( sizeof(Rep)+length*sizeof(Char) );
			gc_new_bytes+=sizeof(Rep)+length*sizeof(Char);
			return new(p) Rep( length );
		}
	};
	Rep *rep;
	
	static Rep nullRep;
	
	String( Rep *rep ):rep(rep){
	}
};

String::Rep String::nullRep;

String *t_create( int n,String *p ){
	for( int i=0;i<n;++i ) new( &p[i] ) String();
	return p+n;
}

String *t_create( int n,String *p,const String *q ){
	for( int i=0;i<n;++i ) new( &p[i] ) String( q[i] );
	return p+n;
}

void t_destroy( int n,String *p ){
	for( int i=0;i<n;++i ) p[i].~String();
}

// ***** Object *****

String dbg_stacktrace();

class Object : public gc_object{
public:
	virtual bool Equals( Object *obj ){
		return this==obj;
	}
	
	virtual int Compare( Object *obj ){
		return (char*)this-(char*)obj;
	}
	
	virtual String debug(){
		return "+Object\n";
	}
};

class ThrowableObject : public Object{
#ifndef NDEBUG
public:
	String stackTrace;
	ThrowableObject():stackTrace( dbg_stacktrace() ){}
#endif
};

struct gc_interface{
	virtual ~gc_interface(){}
};

//***** Debugger *****

//#define Error bbError
//#define Print bbPrint

int bbPrint( String t );

#define dbg_stream stderr

#if _MSC_VER
#define dbg_typeof decltype
#else
#define dbg_typeof __typeof__
#endif 

struct dbg_func;
struct dbg_var_type;

static int dbg_suspend;
static int dbg_stepmode;

const char *dbg_info;
String dbg_exstack;

static void *dbg_var_buf[65536*3];
static void **dbg_var_ptr=dbg_var_buf;

static dbg_func *dbg_func_buf[1024];
static dbg_func **dbg_func_ptr=dbg_func_buf;

String dbg_type( bool *p ){
	return "Bool";
}

String dbg_type( int *p ){
	return "Int";
}

String dbg_type( Float *p ){
	return "Float";
}

String dbg_type( String *p ){
	return "String";
}

template<class T> String dbg_type( T **p ){
	return "Object";
}

template<class T> String dbg_type( Array<T> *p ){
	return dbg_type( &(*p)[0] )+"[]";
}

String dbg_value( bool *p ){
	return *p ? "True" : "False";
}

String dbg_value( int *p ){
	return String( *p );
}

String dbg_value( Float *p ){
	return String( *p );
}

String dbg_value( String *p ){
	String t=*p;
	if( t.Length()>100 ) t=t.Slice( 0,100 )+"...";
	t=t.Replace( "\"","~q" );
	t=t.Replace( "\t","~t" );
	t=t.Replace( "\n","~n" );
	t=t.Replace( "\r","~r" );
	return String("\"")+t+"\"";
}

template<class T> String dbg_value( T **t ){
	Object *p=dynamic_cast<Object*>( *t );
	char buf[64];
	sprintf_s( buf,"%p",p );
	return String("@") + (buf[0]=='0' && buf[1]=='x' ? buf+2 : buf );
}

template<class T> String dbg_value( Array<T> *p ){
	String t="[";
	int n=(*p).Length();
	if( n>100 ) n=100;
	for( int i=0;i<n;++i ){
		if( i ) t+=",";
		t+=dbg_value( &(*p)[i] );
	}
	return t+"]";
}

String dbg_ptr_value( void *p ){
	char buf[64];
	sprintf_s( buf,"%p",p );
	return (buf[0]=='0' && buf[1]=='x' ? buf+2 : buf );
}

template<class T> String dbg_decl( const char *id,T *ptr ){
	return String( id )+":"+dbg_type(ptr)+"="+dbg_value(ptr)+"\n";
}

struct dbg_var_type{
	virtual String type( void *p )=0;
	virtual String value( void *p )=0;
};

template<class T> struct dbg_var_type_t : public dbg_var_type{

	String type( void *p ){
		return dbg_type( (T*)p );
	}
	
	String value( void *p ){
		return dbg_value( (T*)p );
	}
	
	static dbg_var_type_t<T> info;
};
template<class T> dbg_var_type_t<T> dbg_var_type_t<T>::info;

struct dbg_blk{
	void **var_ptr;
	
	dbg_blk():var_ptr(dbg_var_ptr){
		if( dbg_stepmode=='l' ) --dbg_suspend;
	}
	
	~dbg_blk(){
		if( dbg_stepmode=='l' ) ++dbg_suspend;
		dbg_var_ptr=var_ptr;
	}
};

struct dbg_func : public dbg_blk{
	const char *id;
	const char *info;

	dbg_func( const char *p ):id(p),info(dbg_info){
		*dbg_func_ptr++=this;
		if( dbg_stepmode=='s' ) --dbg_suspend;
	}
	
	~dbg_func(){
		if( dbg_stepmode=='s' ) ++dbg_suspend;
		--dbg_func_ptr;
		dbg_info=info;
	}
};

int dbg_print( String t ){
	static char *buf;
	static int len;
	int n=t.Length();
	if( n+100>len ){
		len=n+100;
		free( buf );
		buf=(char*)malloc( len );
	}
	buf[n]='\n';
	for( int i=0;i<n;++i ) buf[i]=t[i];
	fwrite( buf,n+1,1,dbg_stream );
	fflush( dbg_stream );
	return 0;
}

void dbg_callstack(){

	void **var_ptr=dbg_var_buf;
	dbg_func **func_ptr=dbg_func_buf;
	
	while( var_ptr!=dbg_var_ptr ){
		while( func_ptr!=dbg_func_ptr && var_ptr==(*func_ptr)->var_ptr ){
			const char *id=(*func_ptr++)->id;
			const char *info=func_ptr!=dbg_func_ptr ? (*func_ptr)->info : dbg_info;
			fprintf( dbg_stream,"+%s;%s\n",id,info );
		}
		void *vp=*var_ptr++;
		const char *nm=(const char*)*var_ptr++;
		dbg_var_type *ty=(dbg_var_type*)*var_ptr++;
		dbg_print( String(nm)+":"+ty->type(vp)+"="+ty->value(vp) );
	}
	while( func_ptr!=dbg_func_ptr ){
		const char *id=(*func_ptr++)->id;
		const char *info=func_ptr!=dbg_func_ptr ? (*func_ptr)->info : dbg_info;
		fprintf( dbg_stream,"+%s;%s\n",id,info );
	}
}

String dbg_stacktrace(){
	if( !dbg_info || !dbg_info[0] ) return "";
	String str=String( dbg_info )+"\n";
	dbg_func **func_ptr=dbg_func_ptr;
	if( func_ptr==dbg_func_buf ) return str;
	while( --func_ptr!=dbg_func_buf ){
		str+=String( (*func_ptr)->info )+"\n";
	}
	return str;
}

void dbg_throw( const char *err ){
	dbg_exstack=dbg_stacktrace();
	throw err;
}

void dbg_stop(){

#if TARGET_OS_IPHONE
	dbg_throw( "STOP" );
#endif

	fprintf( dbg_stream,"{{~~%s~~}}\n",dbg_info );
	dbg_callstack();
	dbg_print( "" );
	
	for(;;){

		char buf[256];
		char *e=fgets( buf,256,stdin );
		if( !e ) exit( -1 );
		
		e=strchr( buf,'\n' );
		if( !e ) exit( -1 );
		
		*e=0;
		
		Object *p;
		
		switch( buf[0] ){
		case '?':
			break;
		case 'r':	//run
			dbg_suspend=0;		
			dbg_stepmode=0;
			return;
		case 's':	//step
			dbg_suspend=1;
			dbg_stepmode='s';
			return;
		case 'e':	//enter func
			dbg_suspend=1;
			dbg_stepmode='e';
			return;
		case 'l':	//leave block
			dbg_suspend=0;
			dbg_stepmode='l';
			return;
		case '@':	//dump object
			p=0;
			sscanf_s( buf+1,"%p",&p );
			if( p ){
				dbg_print( p->debug() );
			}else{
				dbg_print( "" );
			}
			break;
		case 'q':	//quit!
			exit( 0 );
			break;			
		default:
			printf( "????? %s ?????",buf );fflush( stdout );
			exit( -1 );
		}
	}
}

void dbg_error( const char *err ){

#if TARGET_OS_IPHONE
	dbg_throw( err );
#endif

	for(;;){
		bbPrint( String("Monkey Runtime Error : ")+err );
		bbPrint( dbg_stacktrace() );
		dbg_stop();
	}
}

#define DBG_INFO(X) dbg_info=(X);if( dbg_suspend>0 ) dbg_stop();

#define DBG_ENTER(P) dbg_func _dbg_func(P);

#define DBG_BLOCK() dbg_blk _dbg_blk;

#define DBG_GLOBAL( ID,NAME )	//TODO!

#define DBG_LOCAL( ID,NAME )\
*dbg_var_ptr++=&ID;\
*dbg_var_ptr++=(void*)NAME;\
*dbg_var_ptr++=&dbg_var_type_t<dbg_typeof(ID)>::info;

//**** main ****

int argc;
const char **argv;

Float D2R=0.017453292519943295f;
Float R2D=57.29577951308232f;

int bbPrint( String t ){

	static std::vector<unsigned char> buf;
	buf.clear();
	t.Save( buf );
	buf.push_back( '\n' );
	buf.push_back( 0 );
	
#if __cplusplus_winrt	//winrt?

#if CFG_WINRT_PRINT_ENABLED
	OutputDebugStringA( (const char*)&buf[0] );
#endif

#elif _WIN32			//windows?

	fputs( (const char*)&buf[0],stdout );
	fflush( stdout );

#elif __APPLE__			//macos/ios?

	fputs( (const char*)&buf[0],stdout );
	fflush( stdout );
	
#elif __linux			//linux?

#if CFG_ANDROID_NDK_PRINT_ENABLED
	LOGI( (const char*)&buf[0] );
#else
	fputs( (const char*)&buf[0],stdout );
	fflush( stdout );
#endif

#endif

	return 0;
}

class BBExitApp{
};

int bbError( String err ){
	if( !err.Length() ){
#if __cplusplus_winrt
		throw BBExitApp();
#else
		exit( 0 );
#endif
	}
	dbg_error( err.ToCString<char>() );
	return 0;
}

int bbDebugLog( String t ){
	bbPrint( t );
	return 0;
}

int bbDebugStop(){
	dbg_stop();
	return 0;
}

int bbInit();
int bbMain();

#if _MSC_VER

static void _cdecl seTranslator( unsigned int ex,EXCEPTION_POINTERS *p ){

	switch( ex ){
	case EXCEPTION_ACCESS_VIOLATION:dbg_error( "Memory access violation" );
	case EXCEPTION_ILLEGAL_INSTRUCTION:dbg_error( "Illegal instruction" );
	case EXCEPTION_INT_DIVIDE_BY_ZERO:dbg_error( "Integer divide by zero" );
	case EXCEPTION_STACK_OVERFLOW:dbg_error( "Stack overflow" );
	}
	dbg_error( "Unknown exception" );
}

#else

void sighandler( int sig  ){
	switch( sig ){
	case SIGSEGV:dbg_error( "Memory access violation" );
	case SIGILL:dbg_error( "Illegal instruction" );
	case SIGFPE:dbg_error( "Floating point exception" );
#if !_WIN32
	case SIGBUS:dbg_error( "Bus error" );
#endif	
	}
	dbg_error( "Unknown signal" );
}

#endif

//entry point call by target main()...
//
int bb_std_main( int argc,const char **argv ){

	::argc=argc;
	::argv=argv;
	
#if _MSC_VER

	_set_se_translator( seTranslator );

#else
	
	signal( SIGSEGV,sighandler );
	signal( SIGILL,sighandler );
	signal( SIGFPE,sighandler );
#if !_WIN32
	signal( SIGBUS,sighandler );
#endif

#endif

	if( !setlocale( LC_CTYPE,"en_US.UTF-8" ) ){
		setlocale( LC_CTYPE,"" );
	}

	gc_init1();

	bbInit();
	
	gc_init2();

	bbMain();

	return 0;
}


//***** game.h *****

struct BBGameEvent{
	enum{
		None=0,
		KeyDown=1,KeyUp=2,KeyChar=3,
		MouseDown=4,MouseUp=5,MouseMove=6,
		TouchDown=7,TouchUp=8,TouchMove=9,
		MotionAccel=10
	};
};

class BBGameDelegate : public Object{
public:
	virtual void StartGame(){}
	virtual void SuspendGame(){}
	virtual void ResumeGame(){}
	virtual void UpdateGame(){}
	virtual void RenderGame(){}
	virtual void KeyEvent( int event,int data ){}
	virtual void MouseEvent( int event,int data,Float x,Float y ){}
	virtual void TouchEvent( int event,int data,Float x,Float y ){}
	virtual void MotionEvent( int event,int data,Float x,Float y,Float z ){}
	virtual void DiscardGraphics(){}
};

struct BBDisplayMode : public Object{
	int width;
	int height;
	int depth;
	int hertz;
	int flags;
	BBDisplayMode( int width=0,int height=0,int depth=0,int hertz=0,int flags=0 ):width(width),height(height),depth(depth),hertz(hertz),flags(flags){}
};

class BBGame{
public:
	BBGame();
	virtual ~BBGame(){}
	
	// ***** Extern *****
	static BBGame *Game(){ return _game; }
	
	virtual void SetDelegate( BBGameDelegate *delegate );
	virtual BBGameDelegate *Delegate(){ return _delegate; }
	
	virtual void SetKeyboardEnabled( bool enabled );
	virtual bool KeyboardEnabled();
	
	virtual void SetUpdateRate( int updateRate );
	virtual int UpdateRate();
	
	virtual bool Started(){ return _started; }
	virtual bool Suspended(){ return _suspended; }
	
	virtual int Millisecs();
	virtual void GetDate( Array<int> date );
	virtual int SaveState( String state );
	virtual String LoadState();
	virtual String LoadString( String path );
	virtual int CountJoysticks( bool update );
	virtual bool PollJoystick( int port,Array<Float> joyx,Array<Float> joyy,Array<Float> joyz,Array<bool> buttons );
	virtual void OpenUrl( String url );
	virtual void SetMouseVisible( bool visible );
	
	virtual int GetDeviceWidth(){ return 0; }
	virtual int GetDeviceHeight(){ return 0; }
	virtual void SetDeviceWindow( int width,int height,int flags ){}
	virtual Array<BBDisplayMode*> GetDisplayModes(){ return Array<BBDisplayMode*>(); }
	virtual BBDisplayMode *GetDesktopMode(){ return 0; }
	virtual void SetSwapInterval( int interval ){}

	// ***** Native *****
	virtual String PathToFilePath( String path );
	virtual FILE *OpenFile( String path,String mode );
	virtual unsigned char *LoadData( String path,int *plength );
	virtual unsigned char *LoadImageData( String path,int *width,int *height,int *depth ){ return 0; }
	virtual unsigned char *LoadAudioData( String path,int *length,int *channels,int *format,int *hertz ){ return 0; }
	
	//***** Internal *****
	virtual void Die( ThrowableObject *ex );
	virtual void gc_collect();
	virtual void StartGame();
	virtual void SuspendGame();
	virtual void ResumeGame();
	virtual void UpdateGame();
	virtual void RenderGame();
	virtual void KeyEvent( int ev,int data );
	virtual void MouseEvent( int ev,int data,float x,float y );
	virtual void TouchEvent( int ev,int data,float x,float y );
	virtual void MotionEvent( int ev,int data,float x,float y,float z );
	virtual void DiscardGraphics();
	
protected:

	static BBGame *_game;

	BBGameDelegate *_delegate;
	bool _keyboardEnabled;
	int _updateRate;
	bool _started;
	bool _suspended;
};

//***** game.cpp *****

BBGame *BBGame::_game;

BBGame::BBGame():
_delegate( 0 ),
_keyboardEnabled( false ),
_updateRate( 0 ),
_started( false ),
_suspended( false ){
	_game=this;
}

void BBGame::SetDelegate( BBGameDelegate *delegate ){
	_delegate=delegate;
}

void BBGame::SetKeyboardEnabled( bool enabled ){
	_keyboardEnabled=enabled;
}

bool BBGame::KeyboardEnabled(){
	return _keyboardEnabled;
}

void BBGame::SetUpdateRate( int updateRate ){
	_updateRate=updateRate;
}

int BBGame::UpdateRate(){
	return _updateRate;
}

int BBGame::Millisecs(){
	return 0;
}

void BBGame::GetDate( Array<int> date ){
	int n=date.Length();
	if( n>0 ){
		time_t t=time( 0 );
		
#if _MSC_VER
		struct tm tii;
		struct tm *ti=&tii;
		localtime_s( ti,&t );
#else
		struct tm *ti=localtime( &t );
#endif

		date[0]=ti->tm_year+1900;
		if( n>1 ){ 
			date[1]=ti->tm_mon+1;
			if( n>2 ){
				date[2]=ti->tm_mday;
				if( n>3 ){
					date[3]=ti->tm_hour;
					if( n>4 ){
						date[4]=ti->tm_min;
						if( n>5 ){
							date[5]=ti->tm_sec;
							if( n>6 ){
								date[6]=0;
							}
						}
					}
				}
			}
		}
	}
}

int BBGame::SaveState( String state ){
	if( FILE *f=OpenFile( "./.monkeystate","wb" ) ){
		bool ok=state.Save( f );
		fclose( f );
		return ok ? 0 : -2;
	}
	return -1;
}

String BBGame::LoadState(){
	if( FILE *f=OpenFile( "./.monkeystate","rb" ) ){
		String str=String::Load( f );
		fclose( f );
		return str;
	}
	return "";
}

String BBGame::LoadString( String path ){
	if( FILE *fp=OpenFile( path,"rb" ) ){
		String str=String::Load( fp );
		fclose( fp );
		return str;
	}
	return "";
}

int BBGame::CountJoysticks( bool update ){
	return 0;
}

bool BBGame::PollJoystick( int port,Array<Float> joyx,Array<Float> joyy,Array<Float> joyz,Array<bool> buttons ){
	return false;
}

void BBGame::OpenUrl( String url ){
}

void BBGame::SetMouseVisible( bool visible ){
}

//***** C++ Game *****

String BBGame::PathToFilePath( String path ){
	return path;
}

FILE *BBGame::OpenFile( String path,String mode ){
	path=PathToFilePath( path );
	if( path=="" ) return 0;
	
#if __cplusplus_winrt
	path=path.Replace( "/","\\" );
	FILE *f;
	if( _wfopen_s( &f,path.ToCString<wchar_t>(),mode.ToCString<wchar_t>() ) ) return 0;
	return f;
#elif _WIN32
	return _wfopen( path.ToCString<wchar_t>(),mode.ToCString<wchar_t>() );
#else
	return fopen( path.ToCString<char>(),mode.ToCString<char>() );
#endif
}

unsigned char *BBGame::LoadData( String path,int *plength ){

	FILE *f=OpenFile( path,"rb" );
	if( !f ) return 0;

	const int BUF_SZ=4096;
	std::vector<void*> tmps;
	int length=0;
	
	for(;;){
		void *p=malloc( BUF_SZ );
		int n=fread( p,1,BUF_SZ,f );
		tmps.push_back( p );
		length+=n;
		if( n!=BUF_SZ ) break;
	}
	fclose( f );
	
	unsigned char *data=(unsigned char*)malloc( length );
	unsigned char *p=data;
	
	int sz=length;
	for( int i=0;i<tmps.size();++i ){
		int n=sz>BUF_SZ ? BUF_SZ : sz;
		memcpy( p,tmps[i],n );
		free( tmps[i] );
		sz-=n;
		p+=n;
	}
	
	*plength=length;
	
	gc_ext_malloced( length );
	
	return data;
}

//***** INTERNAL *****

void BBGame::Die( ThrowableObject *ex ){
	bbPrint( "Monkey Runtime Error : Uncaught Monkey Exception" );
#ifndef NDEBUG
	bbPrint( ex->stackTrace );
#endif
	exit( -1 );
}

void BBGame::gc_collect(){
	gc_mark( _delegate );
	::gc_collect();
}

void BBGame::StartGame(){

	if( _started ) return;
	_started=true;
	
	try{
		_delegate->StartGame();
	}catch( ThrowableObject *ex ){
		Die( ex );
	}
	gc_collect();
}

void BBGame::SuspendGame(){

	if( !_started || _suspended ) return;
	_suspended=true;
	
	try{
		_delegate->SuspendGame();
	}catch( ThrowableObject *ex ){
		Die( ex );
	}
	gc_collect();
}

void BBGame::ResumeGame(){

	if( !_started || !_suspended ) return;
	_suspended=false;
	
	try{
		_delegate->ResumeGame();
	}catch( ThrowableObject *ex ){
		Die( ex );
	}
	gc_collect();
}

void BBGame::UpdateGame(){

	if( !_started || _suspended ) return;
	
	try{
		_delegate->UpdateGame();
	}catch( ThrowableObject *ex ){
		Die( ex );
	}
	gc_collect();
}

void BBGame::RenderGame(){

	if( !_started ) return;
	
	try{
		_delegate->RenderGame();
	}catch( ThrowableObject *ex ){
		Die( ex );
	}
	gc_collect();
}

void BBGame::KeyEvent( int ev,int data ){

	if( !_started ) return;
	
	try{
		_delegate->KeyEvent( ev,data );
	}catch( ThrowableObject *ex ){
		Die( ex );
	}
	gc_collect();
}

void BBGame::MouseEvent( int ev,int data,float x,float y ){

	if( !_started ) return;
	
	try{
		_delegate->MouseEvent( ev,data,x,y );
	}catch( ThrowableObject *ex ){
		Die( ex );
	}
	gc_collect();
}

void BBGame::TouchEvent( int ev,int data,float x,float y ){

	if( !_started ) return;
	
	try{
		_delegate->TouchEvent( ev,data,x,y );
	}catch( ThrowableObject *ex ){
		Die( ex );
	}
	gc_collect();
}

void BBGame::MotionEvent( int ev,int data,float x,float y,float z ){

	if( !_started ) return;
	
	try{
		_delegate->MotionEvent( ev,data,x,y,z );
	}catch( ThrowableObject *ex ){
		Die( ex );
	}
	gc_collect();
}

void BBGame::DiscardGraphics(){

	if( !_started ) return;
	
	try{
		_delegate->DiscardGraphics();
	}catch( ThrowableObject *ex ){
		Die( ex );
	}
	gc_collect();
}


//***** wavloader.h *****
//
unsigned char *LoadWAV( FILE *f,int *length,int *channels,int *format,int *hertz );

//***** wavloader.cpp *****
//
static const char *readTag( FILE *f ){
	static char buf[8];
	if( fread( buf,4,1,f )!=1 ) return "";
	buf[4]=0;
	return buf;
}

static int readInt( FILE *f ){
	unsigned char buf[4];
	if( fread( buf,4,1,f )!=1 ) return -1;
	return (buf[3]<<24) | (buf[2]<<16) | (buf[1]<<8) | buf[0];
}

static int readShort( FILE *f ){
	unsigned char buf[2];
	if( fread( buf,2,1,f )!=1 ) return -1;
	return (buf[1]<<8) | buf[0];
}

static void skipBytes( int n,FILE *f ){
	char *p=(char*)malloc( n );
	fread( p,n,1,f );
	free(p);
}

unsigned char *LoadWAV( FILE *f,int *plength,int *pchannels,int *pformat,int *phertz ){
	if( !strcmp( readTag( f ),"RIFF" ) ){
		int len=readInt( f )-8;len=len;
		if( !strcmp( readTag( f ),"WAVE" ) ){
			if( !strcmp( readTag( f ),"fmt " ) ){
				int len2=readInt( f );
				int comp=readShort( f );
				if( comp==1 ){
					int chans=readShort( f );
					int hertz=readInt( f );
					int bytespersec=readInt( f );bytespersec=bytespersec;
					int pad=readShort( f );pad=pad;
					int bits=readShort( f );
					int format=bits/8;
					if( len2>16 ) skipBytes( len2-16,f );
					for(;;){
						const char *p=readTag( f );
						if( feof( f ) ) break;
						int size=readInt( f );
						if( strcmp( p,"data" ) ){
							skipBytes( size,f );
							continue;
						}
						unsigned char *data=(unsigned char*)malloc( size );
						if( fread( data,size,1,f )==1 ){
							*plength=size/(chans*format);
							*pchannels=chans;
							*pformat=format;
							*phertz=hertz;
							return data;
						}
						free( data );
					}
				}
			}
		}
	}
	return 0;
}



//***** oggloader.h *****
unsigned char *LoadOGG( FILE *f,int *length,int *channels,int *format,int *hertz );

//***** oggloader.cpp *****
unsigned char *LoadOGG( FILE *f,int *length,int *channels,int *format,int *hertz ){

	int error;
	stb_vorbis *v=stb_vorbis_open_file( f,0,&error,0 );
	if( !v ) return 0;
	
	stb_vorbis_info info=stb_vorbis_get_info( v );
	
	int limit=info.channels*4096;
	int offset=0,data_len=0,total=limit;

	short *data=(short*)malloc( total*sizeof(short) );
	
	for(;;){
		int n=stb_vorbis_get_frame_short_interleaved( v,info.channels,data+offset,total-offset );
		if( !n ) break;
	
		data_len+=n;
		offset+=n*info.channels;
		
		if( offset+limit>total ){
			total*=2;
			data=(short*)realloc( data,total*sizeof(short) );
		}
	}
	
	*length=data_len;
	*channels=info.channels;
	*format=2;
	*hertz=info.sample_rate;
	
	stb_vorbis_close(v);

	return (unsigned char*)data;
}



//***** glfwgame.h *****

class BBGlfwGame : public BBGame{
public:
	BBGlfwGame();
	
	static BBGlfwGame *GlfwGame(){ return _glfwGame; }
	
	virtual void SetUpdateRate( int hertz );
	virtual int Millisecs();
	virtual int CountJoysticks( bool update );
	virtual bool PollJoystick( int port,Array<Float> joyx,Array<Float> joyy,Array<Float> joyz,Array<bool> buttons );
	virtual void OpenUrl( String url );
	virtual void SetMouseVisible( bool visible );
		
	virtual int GetDeviceWidth(){ return _width; }
	virtual int GetDeviceHeight(){ return _height; }
	virtual void SetDeviceWindow( int width,int height,int flags );
	virtual void SetSwapInterval( int interval );
	virtual Array<BBDisplayMode*> GetDisplayModes();
	virtual BBDisplayMode *GetDesktopMode();

	virtual String PathToFilePath( String path );
	virtual unsigned char *LoadImageData( String path,int *width,int *height,int *format );
	virtual unsigned char *LoadAudioData( String path,int *length,int *channels,int *format,int *hertz );
	
	void Run();
	
	GLFWwindow *GetGLFWwindow(){ return _window; }
		
private:
	static BBGlfwGame *_glfwGame;
	
	GLFWvidmode _desktopMode;
	
	GLFWwindow *_window;
	int _width;
	int _height;
	int _swapInterval;
	bool _focus;

	double _updatePeriod;
	double _nextUpdate;
	
	String _baseDir;
	String _internalDir;
	
	int _joys[4];
	int _numJoys;
	bool _joysCounted;
	
	double GetTime();
	void Sleep( double time );
	void UpdateEvents();

//	void SetGlfwWindow( int width,int height,int red,int green,int blue,int alpha,int depth,int stencil,bool fullscreen );
		
	static int TransKey( int key );
	static int KeyToChar( int key );
	
	static void OnKey( GLFWwindow *window,int key,int scancode,int action,int mods );
	static void OnChar( GLFWwindow *window,unsigned int chr );
	static void OnMouseButton( GLFWwindow *window,int button,int action,int mods );
	static void OnCursorPos( GLFWwindow *window,double x,double y );
	static void OnWindowClose( GLFWwindow *window );
	static void OnWindowSize( GLFWwindow *window,int width,int height );
};

//***** glfwgame.cpp *****

#include <errno.h>

#define _QUOTE(X) #X
#define _STRINGIZE( X ) _QUOTE(X)

enum{
	VKEY_BACKSPACE=8,VKEY_TAB,
	VKEY_ENTER=13,
	VKEY_SHIFT=16,
	VKEY_CONTROL=17,
	VKEY_ESCAPE=27,
	VKEY_SPACE=32,
	VKEY_PAGE_UP=33,VKEY_PAGE_DOWN,VKEY_END,VKEY_HOME,
	VKEY_LEFT=37,VKEY_UP,VKEY_RIGHT,VKEY_DOWN,
	VKEY_INSERT=45,VKEY_DELETE,
	VKEY_0=48,VKEY_1,VKEY_2,VKEY_3,VKEY_4,VKEY_5,VKEY_6,VKEY_7,VKEY_8,VKEY_9,
	VKEY_A=65,VKEY_B,VKEY_C,VKEY_D,VKEY_E,VKEY_F,VKEY_G,VKEY_H,VKEY_I,VKEY_J,
	VKEY_K,VKEY_L,VKEY_M,VKEY_N,VKEY_O,VKEY_P,VKEY_Q,VKEY_R,VKEY_S,VKEY_T,
	VKEY_U,VKEY_V,VKEY_W,VKEY_X,VKEY_Y,VKEY_Z,
	
	VKEY_LSYS=91,VKEY_RSYS,
	
	VKEY_NUM0=96,VKEY_NUM1,VKEY_NUM2,VKEY_NUM3,VKEY_NUM4,
	VKEY_NUM5,VKEY_NUM6,VKEY_NUM7,VKEY_NUM8,VKEY_NUM9,
	VKEY_NUMMULTIPLY=106,VKEY_NUMADD,VKEY_NUMSLASH,
	VKEY_NUMSUBTRACT,VKEY_NUMDECIMAL,VKEY_NUMDIVIDE,

	VKEY_F1=112,VKEY_F2,VKEY_F3,VKEY_F4,VKEY_F5,VKEY_F6,
	VKEY_F7,VKEY_F8,VKEY_F9,VKEY_F10,VKEY_F11,VKEY_F12,

	VKEY_LEFT_SHIFT=160,VKEY_RIGHT_SHIFT,
	VKEY_LEFT_CONTROL=162,VKEY_RIGHT_CONTROL,
	VKEY_LEFT_ALT=164,VKEY_RIGHT_ALT,

	VKEY_TILDE=192,VKEY_MINUS=189,VKEY_EQUALS=187,
	VKEY_OPENBRACKET=219,VKEY_BACKSLASH=220,VKEY_CLOSEBRACKET=221,
	VKEY_SEMICOLON=186,VKEY_QUOTES=222,
	VKEY_COMMA=188,VKEY_PERIOD=190,VKEY_SLASH=191
};

void Init_GL_Exts();

int glfwGraphicsSeq=0;

BBGlfwGame *BBGlfwGame::_glfwGame;

BBGlfwGame::BBGlfwGame():_window(0),_width(0),_height(0),_swapInterval(1),_focus(true),_updatePeriod(0),_nextUpdate(0),_numJoys(0),_joysCounted(false){
	_glfwGame=this;

	memset( &_desktopMode,0,sizeof(_desktopMode) );	
	const GLFWvidmode *vmode=glfwGetVideoMode( glfwGetPrimaryMonitor() );
	if( vmode ) _desktopMode=*vmode;
}

void BBGlfwGame::SetUpdateRate( int updateRate ){
	BBGame::SetUpdateRate( updateRate );
	if( _updateRate ) _updatePeriod=1.0/_updateRate;
	_nextUpdate=0;
}

int BBGlfwGame::Millisecs(){
	return int( GetTime()*1000.0 );
}

int BBGlfwGame::CountJoysticks( bool update ){

	if( !update && _joysCounted ) return _numJoys;

	_joysCounted=true;

	_numJoys=0;

	for( int joy=0;joy<16 && _numJoys<4;++joy ){
		if( glfwJoystickPresent( joy ) ) _joys[_numJoys++]=joy;
	}
	
	return _numJoys;
}

bool BBGlfwGame::PollJoystick( int port,Array<Float> joyx,Array<Float> joyy,Array<Float> joyz,Array<bool> buttons ){

	CountJoysticks( false );
	
	if( port<0 || port>=_numJoys ) return false;
	
	port=_joys[port];
	
	//read axes
	int n_axes=0;
	const float *axes=glfwGetJoystickAxes( port,&n_axes );
	if( !axes ) return false;
	
	//read buttons
	int n_buts=0;
	const unsigned char *buts=glfwGetJoystickButtons( port,&n_buts );
	if( !buts ) return false;

	//Ugh...
	const int *dev_axes;
	const int *dev_buttons;
	
#if _WIN32
	
	//xbox 360 controller
	const int xbox360_axes[]={0,0x41,2,4,0x43,0x42,999};
	const int xbox360_buttons[]={0,1,2,3,4,5,6,7,13,10,11,12,8,9,999};
	
	//logitech dual action
	const int logitech_axes[]={0,1,0x86,2,0x43,0x87,999};
	const int logitech_buttons[]={1,2,0,3,4,5,8,9,15,12,13,14,10,11,999};
	
	if( n_axes==5 && n_buts==14 ){
		dev_axes=xbox360_axes;
		dev_buttons=xbox360_buttons;
	}else{
		dev_axes=logitech_axes;
		dev_buttons=logitech_buttons;
	}
	
#else

	//xbox 360 controller
	const int xbox360_axes[]={0,0x41,0x14,2,0x43,0x15,999};
	const int xbox360_buttons[]={11,12,13,14,8,9,5,4,2,0,3,1,6,7,10,999};

	//ps3 controller
	const int ps3_axes[]={0,0x41,0x88,2,0x43,0x89,999};
	const int ps3_buttons[]={14,13,15,12,10,11,0,3,7,4,5,6,1,2,16,999};

	//logitech dual action
	const int logitech_axes[]={0,0x41,0x86,2,0x43,0x87,999};
	const int logitech_buttons[]={1,2,0,3,4,5,8,9,15,12,13,14,10,11,999};

	if( n_axes==6 && n_buts==15 ){
		dev_axes=xbox360_axes;
		dev_buttons=xbox360_buttons;
	}else if( n_axes==4 && n_buts==19 ){
		dev_axes=ps3_axes;
		dev_buttons=ps3_buttons;
	}else{
		dev_axes=logitech_axes;
		dev_buttons=logitech_buttons;
	}

#endif

	const int *p=dev_axes;
	
	float joys[6]={0,0,0,0,0,0};
	
	for( int i=0;i<6 && p[i]!=999;++i ){
		int j=p[i]&0xf,k=p[i]&~0xf;
		if( k==0x10 ){
			joys[i]=(axes[j]+1)/2;
		}else if( k==0x20 ){
			joys[i]=(1-axes[j])/2;
		}else if( k==0x40 ){
			joys[i]=-axes[j];
		}else if( k==0x80 ){
			joys[i]=(buts[j]==GLFW_PRESS);
		}else{
			joys[i]=axes[j];
		}
	}
	
	joyx[0]=joys[0];joyy[0]=joys[1];joyz[0]=joys[2];
	joyx[1]=joys[3];joyy[1]=joys[4];joyz[1]=joys[5];
	
	p=dev_buttons;
	
	for( int i=0;i<32;++i ) buttons[i]=false;
	
	for( int i=0;i<32 && p[i]!=999;++i ){
		int j=p[i];
		if( j<0 ) j+=n_buts;
		buttons[i]=(buts[j]==GLFW_PRESS);
	}

	return true;
}

void BBGlfwGame::OpenUrl( String url ){
#if _WIN32
	ShellExecute( HWND_DESKTOP,"open",url.ToCString<char>(),0,0,SW_SHOWNORMAL );
#elif __APPLE__
	if( CFURLRef cfurl=CFURLCreateWithBytes( 0,url.ToCString<UInt8>(),url.Length(),kCFStringEncodingASCII,0 ) ){
		LSOpenCFURLRef( cfurl,0 );
		CFRelease( cfurl );
	}
#elif __linux
	system( ( String( "xdg-open \"" )+url+"\"" ).ToCString<char>() );
#endif
}

void BBGlfwGame::SetMouseVisible( bool visible ){
	if( visible ){
		glfwSetInputMode( _window,GLFW_CURSOR,GLFW_CURSOR_NORMAL );
	}else{
		glfwSetInputMode( _window,GLFW_CURSOR,GLFW_CURSOR_HIDDEN );
	}
}

String BBGlfwGame::PathToFilePath( String path ){

	if( !_baseDir.Length() ){
	
		String appPath;

#if _WIN32
		WCHAR buf[MAX_PATH+1];
		GetModuleFileNameW( GetModuleHandleW(0),buf,MAX_PATH );
		buf[MAX_PATH]=0;appPath=String( buf ).Replace( "\\","/" );

#elif __APPLE__

		char buf[PATH_MAX+1];
		uint32_t size=sizeof( buf );
		_NSGetExecutablePath( buf,&size );
		buf[PATH_MAX]=0;appPath=String( buf ).Replace( "/./","/" );
	
#elif __linux
		char lnk[PATH_MAX+1],buf[PATH_MAX];
		sprintf( lnk,"/proc/%i/exe",getpid() );
		int n=readlink( lnk,buf,PATH_MAX );
		if( n<0 || n>=PATH_MAX ) abort();
		appPath=String( buf,n );

#endif
		int i=appPath.FindLast( "/" );if( i==-1 ) abort();
		_baseDir=appPath.Slice( 0,i );
		
#if __APPLE__
		if( _baseDir.EndsWith( ".app/Contents/MacOS" ) ) _baseDir=_baseDir.Slice( 0,-5 )+"Resources";
#endif
//		bbPrint( String( "_baseDir=" )+_baseDir );
	}
	
	if( !path.StartsWith( "monkey:" ) ){
		return path;
	}else if( path.StartsWith( "monkey://data/" ) ){
		return _baseDir+"/data/"+path.Slice( 14 );
	}else if( path.StartsWith( "monkey://internal/" ) ){
		if( !_internalDir.Length() ){
#ifdef CFG_GLFW_APP_LABEL

#if _WIN32
			_internalDir=String( getenv( "APPDATA" ) );
#elif __APPLE__
			_internalDir=String( getenv( "HOME" ) )+"/Library/Application Support";
#elif __linux
			_internalDir=String( getenv( "HOME" ) )+"/.config";
			mkdir( _internalDir.ToCString<char>(),0777 );
#endif

#ifdef CFG_GLFW_APP_PUBLISHER
			_internalDir=_internalDir+"/"+_STRINGIZE( CFG_GLFW_APP_PUBLISHER );
#if _WIN32
			_wmkdir( _internalDir.ToCString<wchar_t>() );
#else
			mkdir( _internalDir.ToCString<char>(),0777 );
#endif
#endif

			_internalDir=_internalDir+"/"+_STRINGIZE( CFG_GLFW_APP_LABEL );
#if _WIN32
			_wmkdir( _internalDir.ToCString<wchar_t>() );
#else
			mkdir( _internalDir.ToCString<char>(),0777 );
#endif

#else
			_internalDir=_baseDir+"/internal";
#endif			
//			bbPrint( String( "_internalDir=" )+_internalDir );
		}
		return _internalDir+"/"+path.Slice( 18 );
	}else if( path.StartsWith( "monkey://external/" ) ){
		return _baseDir+"/external/"+path.Slice( 18 );
	}
	return "";
}

unsigned char *BBGlfwGame::LoadImageData( String path,int *width,int *height,int *depth ){

	FILE *f=OpenFile( path,"rb" );
	if( !f ) return 0;
	
	unsigned char *data=stbi_load_from_file( f,width,height,depth,0 );
	fclose( f );
	
	if( data ) gc_ext_malloced( (*width)*(*height)*(*depth) );
	
	return data;
}

unsigned char *BBGlfwGame::LoadAudioData( String path,int *length,int *channels,int *format,int *hertz ){

	FILE *f=OpenFile( path,"rb" );
	if( !f ) return 0;
	
	unsigned char *data=0;
	
	if( path.ToLower().EndsWith( ".wav" ) ){
		data=LoadWAV( f,length,channels,format,hertz );
	}else if( path.ToLower().EndsWith( ".ogg" ) ){
		data=LoadOGG( f,length,channels,format,hertz );
	}
	fclose( f );
	
	if( data ) gc_ext_malloced( (*length)*(*channels)*(*format) );
	
	return data;
}

//glfw key to monkey key!
int BBGlfwGame::TransKey( int key ){

	if( key>='0' && key<='9' ) return key;
	if( key>='A' && key<='Z' ) return key;

	switch( key ){
	case ' ':return VKEY_SPACE;
	case ';':return VKEY_SEMICOLON;
	case '=':return VKEY_EQUALS;
	case ',':return VKEY_COMMA;
	case '-':return VKEY_MINUS;
	case '.':return VKEY_PERIOD;
	case '/':return VKEY_SLASH;
	case '~':return VKEY_TILDE;
	case '[':return VKEY_OPENBRACKET;
	case ']':return VKEY_CLOSEBRACKET;
	case '\"':return VKEY_QUOTES;
	case '\\':return VKEY_BACKSLASH;
	
	case '`':return VKEY_TILDE;
	case '\'':return VKEY_QUOTES;

	case GLFW_KEY_LEFT_SHIFT:
	case GLFW_KEY_RIGHT_SHIFT:return VKEY_SHIFT;
	case GLFW_KEY_LEFT_CONTROL:
	case GLFW_KEY_RIGHT_CONTROL:return VKEY_CONTROL;
	
//	case GLFW_KEY_LEFT_SHIFT:return VKEY_LEFT_SHIFT;
//	case GLFW_KEY_RIGHT_SHIFT:return VKEY_RIGHT_SHIFT;
//	case GLFW_KEY_LCTRL:return VKEY_LCONTROL;
//	case GLFW_KEY_RCTRL:return VKEY_RCONTROL;
	
	case GLFW_KEY_BACKSPACE:return VKEY_BACKSPACE;
	case GLFW_KEY_TAB:return VKEY_TAB;
	case GLFW_KEY_ENTER:return VKEY_ENTER;
	case GLFW_KEY_ESCAPE:return VKEY_ESCAPE;
	case GLFW_KEY_INSERT:return VKEY_INSERT;
	case GLFW_KEY_DELETE:return VKEY_DELETE;
	case GLFW_KEY_PAGE_UP:return VKEY_PAGE_UP;
	case GLFW_KEY_PAGE_DOWN:return VKEY_PAGE_DOWN;
	case GLFW_KEY_HOME:return VKEY_HOME;
	case GLFW_KEY_END:return VKEY_END;
	case GLFW_KEY_UP:return VKEY_UP;
	case GLFW_KEY_DOWN:return VKEY_DOWN;
	case GLFW_KEY_LEFT:return VKEY_LEFT;
	case GLFW_KEY_RIGHT:return VKEY_RIGHT;
	
	case GLFW_KEY_KP_0:return VKEY_NUM0;
	case GLFW_KEY_KP_1:return VKEY_NUM1;
	case GLFW_KEY_KP_2:return VKEY_NUM2;
	case GLFW_KEY_KP_3:return VKEY_NUM3;
	case GLFW_KEY_KP_4:return VKEY_NUM4;
	case GLFW_KEY_KP_5:return VKEY_NUM5;
	case GLFW_KEY_KP_6:return VKEY_NUM6;
	case GLFW_KEY_KP_7:return VKEY_NUM7;
	case GLFW_KEY_KP_8:return VKEY_NUM8;
	case GLFW_KEY_KP_9:return VKEY_NUM9;
	case GLFW_KEY_KP_DIVIDE:return VKEY_NUMDIVIDE;
	case GLFW_KEY_KP_MULTIPLY:return VKEY_NUMMULTIPLY;
	case GLFW_KEY_KP_SUBTRACT:return VKEY_NUMSUBTRACT;
	case GLFW_KEY_KP_ADD:return VKEY_NUMADD;
	case GLFW_KEY_KP_DECIMAL:return VKEY_NUMDECIMAL;
	
	case GLFW_KEY_F1:return VKEY_F1;
	case GLFW_KEY_F2:return VKEY_F2;
	case GLFW_KEY_F3:return VKEY_F3;
	case GLFW_KEY_F4:return VKEY_F4;
	case GLFW_KEY_F5:return VKEY_F5;
	case GLFW_KEY_F6:return VKEY_F6;
	case GLFW_KEY_F7:return VKEY_F7;
	case GLFW_KEY_F8:return VKEY_F8;
	case GLFW_KEY_F9:return VKEY_F9;
	case GLFW_KEY_F10:return VKEY_F10;
	case GLFW_KEY_F11:return VKEY_F11;
	case GLFW_KEY_F12:return VKEY_F12;
	}
	return 0;
}

//monkey key to special monkey char
int BBGlfwGame::KeyToChar( int key ){
	switch( key ){
	case VKEY_BACKSPACE:
	case VKEY_TAB:
	case VKEY_ENTER:
	case VKEY_ESCAPE:
		return key;
	case VKEY_PAGE_UP:
	case VKEY_PAGE_DOWN:
	case VKEY_END:
	case VKEY_HOME:
	case VKEY_LEFT:
	case VKEY_UP:
	case VKEY_RIGHT:
	case VKEY_DOWN:
	case VKEY_INSERT:
		return key | 0x10000;
	case VKEY_DELETE:
		return 127;
	}
	return 0;
}

void BBGlfwGame::OnKey( GLFWwindow *window,int key,int scancode,int action,int mods ){

	key=TransKey( key );
	if( !key ) return;
	
	switch( action ){
	case GLFW_PRESS:
	case GLFW_REPEAT:
		_glfwGame->KeyEvent( BBGameEvent::KeyDown,key );
		if( int chr=KeyToChar( key ) ) _glfwGame->KeyEvent( BBGameEvent::KeyChar,chr );
		break;
	case GLFW_RELEASE:
		_glfwGame->KeyEvent( BBGameEvent::KeyUp,key );
		break;
	}
}

void BBGlfwGame::OnChar( GLFWwindow *window,unsigned int chr ){

	_glfwGame->KeyEvent( BBGameEvent::KeyChar,chr );
}

void BBGlfwGame::OnMouseButton( GLFWwindow *window,int button,int action,int mods ){
	switch( button ){
	case GLFW_MOUSE_BUTTON_LEFT:button=0;break;
	case GLFW_MOUSE_BUTTON_RIGHT:button=1;break;
	case GLFW_MOUSE_BUTTON_MIDDLE:button=2;break;
	default:return;
	}
	double x=0,y=0;
	glfwGetCursorPos( window,&x,&y );
	switch( action ){
	case GLFW_PRESS:
		_glfwGame->MouseEvent( BBGameEvent::MouseDown,button,x,y );
		break;
	case GLFW_RELEASE:
		_glfwGame->MouseEvent( BBGameEvent::MouseUp,button,x,y );
		break;
	}
}

void BBGlfwGame::OnCursorPos( GLFWwindow *window,double x,double y ){
	_glfwGame->MouseEvent( BBGameEvent::MouseMove,-1,x,y );
}

void BBGlfwGame::OnWindowClose( GLFWwindow *window ){
	glfwSetWindowShouldClose( _glfwGame->_window,0 );
	_glfwGame->KeyEvent( BBGameEvent::KeyDown,0x1b0 );
	_glfwGame->KeyEvent( BBGameEvent::KeyUp,0x1b0 );
}

void BBGlfwGame::OnWindowSize( GLFWwindow *window,int width,int height ){

	_glfwGame->_width=width;
	_glfwGame->_height=height;
	
#if CFG_GLFW_WINDOW_RENDER_WHILE_RESIZING && !__linux
	_glfwGame->RenderGame();
	glfwSwapBuffers( _glfwGame->_window );
	_glfwGame->_nextUpdate=0;
#endif
}

void BBGlfwGame::SetDeviceWindow( int width,int height,int flags ){

	_focus=false;

	if( _window ){
		for( int i=0;i<=GLFW_KEY_LAST;++i ){
			int key=TransKey( i );
			if( key && glfwGetKey( _window,i )==GLFW_PRESS ) KeyEvent( BBGameEvent::KeyUp,key );
		}
		glfwDestroyWindow( _window );
		_window=0;
	}

	bool fullscreen=(flags & 1);
	bool resizable=(flags & 2);
	bool decorated=(flags & 4);
	bool floating=(flags & 8);
	bool depthbuffer=(flags & 16);
	bool doublebuffer=!(flags & 32);
	bool secondmonitor=(flags & 64);
	bool usestencil=(flags & 128);

	glfwWindowHint( GLFW_RED_BITS,8 );
	glfwWindowHint( GLFW_GREEN_BITS,8 );
	glfwWindowHint( GLFW_BLUE_BITS,8 );
	glfwWindowHint( GLFW_ALPHA_BITS,0 );
	glfwWindowHint( GLFW_DEPTH_BITS,depthbuffer ? 32 : 0 );
	glfwWindowHint( GLFW_STENCIL_BITS,usestencil ? 8 : 0 );
	glfwWindowHint( GLFW_RESIZABLE,resizable );
	glfwWindowHint( GLFW_DECORATED,decorated );
	glfwWindowHint( GLFW_FLOATING,floating );
	glfwWindowHint( GLFW_VISIBLE,fullscreen );
	glfwWindowHint( GLFW_DOUBLEBUFFER,doublebuffer );
	glfwWindowHint( GLFW_SAMPLES,CFG_GLFW_WINDOW_SAMPLES );
	glfwWindowHint( GLFW_REFRESH_RATE,60 );
	
	GLFWmonitor *monitor=0;
	if( fullscreen ){
		int monitorid=secondmonitor ? 1 : 0;
		int count=0;
		GLFWmonitor **monitors=glfwGetMonitors( &count );
		if( monitorid>=count ) monitorid=count-1;
		monitor=monitors[monitorid];
	}
	
	_window=glfwCreateWindow( width,height,_STRINGIZE(CFG_GLFW_WINDOW_TITLE),monitor,0 );
	if( !_window ){
		bbPrint( "glfwCreateWindow FAILED!" );
		abort();
	}
	
	_width=width;
	_height=height;
	
	++glfwGraphicsSeq;

	if( !fullscreen ){	
		glfwSetWindowPos( _window,(_desktopMode.width-width)/2,(_desktopMode.height-height)/2 );
		glfwShowWindow( _window );
	}
	
	glfwMakeContextCurrent( _window );
	
	if( _swapInterval>=0 ) glfwSwapInterval( _swapInterval );

#if CFG_OPENGL_INIT_EXTENSIONS
	Init_GL_Exts();
#endif

	glfwSetKeyCallback( _window,OnKey );
	glfwSetCharCallback( _window,OnChar );
	glfwSetMouseButtonCallback( _window,OnMouseButton );
	glfwSetCursorPosCallback( _window,OnCursorPos );
	glfwSetWindowCloseCallback(	_window,OnWindowClose );
	glfwSetWindowSizeCallback(_window,OnWindowSize );
}

void BBGlfwGame::SetSwapInterval( int interval ){

	_swapInterval=interval;
	
	if( _swapInterval>=0 && _window ) glfwSwapInterval( _swapInterval );
}

Array<BBDisplayMode*> BBGlfwGame::GetDisplayModes(){
	int count=0;
	const GLFWvidmode *vmodes=glfwGetVideoModes( glfwGetPrimaryMonitor(),&count );
	Array<BBDisplayMode*> modes( count );
	int n=0;
	for( int i=0;i<count;++i ){
		const GLFWvidmode *vmode=&vmodes[i];
		if( vmode->refreshRate && vmode->refreshRate!=60 ) continue;
		modes[n++]=new BBDisplayMode( vmode->width,vmode->height );
	}
	return modes.Slice(0,n);
}

BBDisplayMode *BBGlfwGame::GetDesktopMode(){ 
	return new BBDisplayMode( _desktopMode.width,_desktopMode.height ); 
}

double BBGlfwGame::GetTime(){
	return glfwGetTime();
}

void BBGlfwGame::Sleep( double time ){
#if _WIN32
	WaitForSingleObject( GetCurrentThread(),(DWORD)( time*1000.0 ) );
#else
	timespec ts,rem;
	ts.tv_sec=floor(time);
	ts.tv_nsec=(time-floor(time))*1000000000.0;
	while( nanosleep( &ts,&rem )==EINTR ){
		ts=rem;
	}
#endif
}

void BBGlfwGame::UpdateEvents(){

	if( _suspended ){
		glfwWaitEvents();
	}else{
		glfwPollEvents();
	}
	if( glfwGetWindowAttrib( _window,GLFW_FOCUSED ) ){
		_focus=true;
		if( _suspended ){
			ResumeGame();
			_nextUpdate=0;
		}
	}else if( glfwGetWindowAttrib( _window,GLFW_ICONIFIED ) || CFG_MOJO_AUTO_SUSPEND_ENABLED ){
		if( _focus && !_suspended ){
			SuspendGame();
			_nextUpdate=0;
		}
	}
}

void BBGlfwGame::Run(){

#if	CFG_GLFW_WINDOW_WIDTH && CFG_GLFW_WINDOW_HEIGHT

	int flags=0;
#if CFG_GLFW_WINDOW_FULLSCREEN
	flags|=1;
#endif
#if CFG_GLFW_WINDOW_RESIZABLE
	flags|=2;
#endif
#if CFG_GLFW_WINDOW_DECORATED
	flags|=4;
#endif
#if CFG_GLFW_WINDOW_FLOATING
	flags|=8;
#endif
#if CFG_OPENGL_DEPTH_BUFFER_ENABLED
	flags|=16;
#endif

	SetDeviceWindow( CFG_GLFW_WINDOW_WIDTH,CFG_GLFW_WINDOW_HEIGHT,flags );

#endif

	StartGame();
	
	while( !glfwWindowShouldClose( _window ) ){
	
		RenderGame();
		
		glfwSwapBuffers( _window );
		
		//Wait for next update
		if( _nextUpdate ){
			double delay=_nextUpdate-GetTime();
			if( delay>0 ) Sleep( delay );
		}
		
		//Update user events
		UpdateEvents();

		//App suspended?		
		if( _suspended ){
			continue;
		}

		//'Go nuts' mode!
		if( !_updateRate ){
			UpdateGame();
			continue;
		}
		
		//Reset update timer?
		if( !_nextUpdate ){
			_nextUpdate=GetTime();
		}
		
		//Catch up updates...
		int i=0;
		for( ;i<4;++i ){
		
			UpdateGame();
			if( !_nextUpdate ) break;
			
			_nextUpdate+=_updatePeriod;
			
			if( _nextUpdate>GetTime() ) break;
		}
		
		if( i==4 ) _nextUpdate=0;
	}
}



//***** monkeygame.h *****

class BBMonkeyGame : public BBGlfwGame{
public:
	static void Main( int args,const char *argv[] );
};

//***** monkeygame.cpp *****

#define _QUOTE(X) #X
#define _STRINGIZE(X) _QUOTE(X)

static void onGlfwError( int err,const char *msg ){
	printf( "GLFW Error: err=%i, msg=%s\n",err,msg );
	fflush( stdout );
}

void BBMonkeyGame::Main( int argc,const char *argv[] ){

	glfwSetErrorCallback( onGlfwError );
	
	if( !glfwInit() ){
		puts( "glfwInit failed" );
		exit( -1 );
	}

	BBMonkeyGame *game=new BBMonkeyGame();
	
	try{
	
		bb_std_main( argc,argv );
		
	}catch( ThrowableObject *ex ){
	
		glfwTerminate();
		
		game->Die( ex );
		
		return;
	}

	if( game->Delegate() ) game->Run();
	
	glfwTerminate();
}


// GLFW mojo runtime.
//
// Copyright 2011 Mark Sibly, all rights reserved.
// No warranty implied; use at your own risk.

//***** gxtkGraphics.h *****

class gxtkSurface;

class gxtkGraphics : public Object{
public:

	enum{
		MAX_VERTS=1024,
		MAX_QUADS=(MAX_VERTS/4)
	};

	int width;
	int height;

	int colorARGB;
	float r,g,b,alpha;
	float ix,iy,jx,jy,tx,ty;
	bool tformed;

	float vertices[MAX_VERTS*5];
	unsigned short quadIndices[MAX_QUADS*6];

	int primType;
	int vertCount;
	gxtkSurface *primSurf;
	
	gxtkGraphics();
	
	void Flush();
	float *Begin( int type,int count,gxtkSurface *surf );
	
	//***** GXTK API *****
	virtual int Width();
	virtual int Height();
	
	virtual int  BeginRender();
	virtual void EndRender();
	virtual void DiscardGraphics();

	virtual gxtkSurface *LoadSurface( String path );
	virtual gxtkSurface *CreateSurface( int width,int height );
	virtual bool LoadSurface__UNSAFE__( gxtkSurface *surface,String path );
	
	virtual int Cls( float r,float g,float b );
	virtual int SetAlpha( float alpha );
	virtual int SetColor( float r,float g,float b );
	virtual int SetBlend( int blend );
	virtual int SetScissor( int x,int y,int w,int h );
	virtual int SetMatrix( float ix,float iy,float jx,float jy,float tx,float ty );
	
	virtual int DrawPoint( float x,float y );
	virtual int DrawRect( float x,float y,float w,float h );
	virtual int DrawLine( float x1,float y1,float x2,float y2 );
	virtual int DrawOval( float x1,float y1,float x2,float y2 );
	virtual int DrawPoly( Array<Float> verts );
	virtual int DrawPoly2( Array<Float> verts,gxtkSurface *surface,int srcx,int srcy );
	virtual int DrawSurface( gxtkSurface *surface,float x,float y );
	virtual int DrawSurface2( gxtkSurface *surface,float x,float y,int srcx,int srcy,int srcw,int srch );
	
	virtual int ReadPixels( Array<int> pixels,int x,int y,int width,int height,int offset,int pitch );
	virtual int WritePixels2( gxtkSurface *surface,Array<int> pixels,int x,int y,int width,int height,int offset,int pitch );
};

class gxtkSurface : public Object{
public:
	unsigned char *data;
	int width;
	int height;
	int depth;
	int format;
	int seq;
	
	GLuint texture;
	float uscale;
	float vscale;
	
	gxtkSurface();
	
	void SetData( unsigned char *data,int width,int height,int depth );
	void SetSubData( int x,int y,int w,int h,unsigned *src,int pitch );
	void Bind();
	
	~gxtkSurface();
	
	//***** GXTK API *****
	virtual int Discard();
	virtual int Width();
	virtual int Height();
	virtual int Loaded();
	virtual void OnUnsafeLoadComplete();
};

//***** gxtkGraphics.cpp *****

#ifndef GL_BGRA
#define GL_BGRA  0x80e1
#endif

#ifndef GL_CLAMP_TO_EDGE
#define GL_CLAMP_TO_EDGE 0x812f
#endif

#ifndef GL_GENERATE_MIPMAP
#define GL_GENERATE_MIPMAP 0x8191
#endif

static int Pow2Size( int n ){
	int i=1;
	while( i<n ) i+=i;
	return i;
}

gxtkGraphics::gxtkGraphics(){

	width=height=0;
	vertCount=0;
	
#ifdef _glfw3_h_
	GLFWwindow *window=BBGlfwGame::GlfwGame()->GetGLFWwindow();
	if( window ) glfwGetWindowSize( BBGlfwGame::GlfwGame()->GetGLFWwindow(),&width,&height );
#else
	glfwGetWindowSize( &width,&height );
#endif
	
	if( CFG_OPENGL_GLES20_ENABLED ) return;
	
	for( int i=0;i<MAX_QUADS;++i ){
		quadIndices[i*6  ]=(short)(i*4);
		quadIndices[i*6+1]=(short)(i*4+1);
		quadIndices[i*6+2]=(short)(i*4+2);
		quadIndices[i*6+3]=(short)(i*4);
		quadIndices[i*6+4]=(short)(i*4+2);
		quadIndices[i*6+5]=(short)(i*4+3);
	}
}

void gxtkGraphics::Flush(){
	if( !vertCount ) return;

	if( primSurf ){
		glEnable( GL_TEXTURE_2D );
		primSurf->Bind();
	}
		
	switch( primType ){
	case 1:
		glDrawArrays( GL_POINTS,0,vertCount );
		break;
	case 2:
		glDrawArrays( GL_LINES,0,vertCount );
		break;
	case 3:
		glDrawArrays( GL_TRIANGLES,0,vertCount );
		break;
	case 4:
		glDrawElements( GL_TRIANGLES,vertCount/4*6,GL_UNSIGNED_SHORT,quadIndices );
		break;
	default:
		for( int j=0;j<vertCount;j+=primType ){
			glDrawArrays( GL_TRIANGLE_FAN,j,primType );
		}
		break;
	}

	if( primSurf ){
		glDisable( GL_TEXTURE_2D );
	}

	vertCount=0;
}

float *gxtkGraphics::Begin( int type,int count,gxtkSurface *surf ){
	if( primType!=type || primSurf!=surf || vertCount+count>MAX_VERTS ){
		Flush();
		primType=type;
		primSurf=surf;
	}
	float *vp=vertices+vertCount*5;
	vertCount+=count;
	return vp;
}

//***** GXTK API *****

int gxtkGraphics::Width(){
	return width;
}

int gxtkGraphics::Height(){
	return height;
}

int gxtkGraphics::BeginRender(){

	width=height=0;
#ifdef _glfw3_h_
	glfwGetWindowSize( BBGlfwGame::GlfwGame()->GetGLFWwindow(),&width,&height );
#else
	glfwGetWindowSize( &width,&height );
#endif

#if CFG_OPENGL_GLES20_ENABLED
	return 0;
#else

	glViewport( 0,0,width,height );

	glMatrixMode( GL_PROJECTION );
	glLoadIdentity();
	glOrtho( 0,width,height,0,-1,1 );
	glMatrixMode( GL_MODELVIEW );
	glLoadIdentity();
	
	glEnableClientState( GL_VERTEX_ARRAY );
	glVertexPointer( 2,GL_FLOAT,20,&vertices[0] );	
	
	glEnableClientState( GL_TEXTURE_COORD_ARRAY );
	glTexCoordPointer( 2,GL_FLOAT,20,&vertices[2] );
	
	glEnableClientState( GL_COLOR_ARRAY );
	glColorPointer( 4,GL_UNSIGNED_BYTE,20,&vertices[4] );
	
	glEnable( GL_BLEND );
	glBlendFunc( GL_ONE,GL_ONE_MINUS_SRC_ALPHA );
	
	glDisable( GL_TEXTURE_2D );
	
	vertCount=0;
	
	return 1;
	
#endif
}

void gxtkGraphics::EndRender(){
	if( !CFG_OPENGL_GLES20_ENABLED ) Flush();
}

void gxtkGraphics::DiscardGraphics(){
}

int gxtkGraphics::Cls( float r,float g,float b ){
	vertCount=0;

	glClearColor( r/255.0f,g/255.0f,b/255.0f,1 );
	glClear( GL_COLOR_BUFFER_BIT );

	return 0;
}

int gxtkGraphics::SetAlpha( float alpha ){
	this->alpha=alpha;
	
	int a=int(alpha*255);
	
	colorARGB=(a<<24) | (int(b*alpha)<<16) | (int(g*alpha)<<8) | int(r*alpha);
	
	return 0;
}

int gxtkGraphics::SetColor( float r,float g,float b ){
	this->r=r;
	this->g=g;
	this->b=b;

	int a=int(alpha*255);
	
	colorARGB=(a<<24) | (int(b*alpha)<<16) | (int(g*alpha)<<8) | int(r*alpha);
	
	return 0;
}

int gxtkGraphics::SetBlend( int blend ){

	Flush();
	
	switch( blend ){
	case 1:
		glBlendFunc( GL_ONE,GL_ONE );
		break;
	default:
		glBlendFunc( GL_ONE,GL_ONE_MINUS_SRC_ALPHA );
	}

	return 0;
}

int gxtkGraphics::SetScissor( int x,int y,int w,int h ){

	Flush();
	
	if( x!=0 || y!=0 || w!=Width() || h!=Height() ){
		glEnable( GL_SCISSOR_TEST );
		y=Height()-y-h;
		glScissor( x,y,w,h );
	}else{
		glDisable( GL_SCISSOR_TEST );
	}
	return 0;
}

int gxtkGraphics::SetMatrix( float ix,float iy,float jx,float jy,float tx,float ty ){

	tformed=(ix!=1 || iy!=0 || jx!=0 || jy!=1 || tx!=0 || ty!=0);

	this->ix=ix;this->iy=iy;this->jx=jx;this->jy=jy;this->tx=tx;this->ty=ty;

	return 0;
}

int gxtkGraphics::DrawPoint( float x,float y ){

	if( tformed ){
		float px=x;
		x=px * ix + y * jx + tx;
		y=px * iy + y * jy + ty;
	}
	
	float *vp=Begin( 1,1,0 );
	
	vp[0]=x+.5f;vp[1]=y+.5f;(int&)vp[4]=colorARGB;

	return 0;	
}
	
int gxtkGraphics::DrawLine( float x0,float y0,float x1,float y1 ){

	if( tformed ){
		float tx0=x0,tx1=x1;
		x0=tx0 * ix + y0 * jx + tx;y0=tx0 * iy + y0 * jy + ty;
		x1=tx1 * ix + y1 * jx + tx;y1=tx1 * iy + y1 * jy + ty;
	}
	
	float *vp=Begin( 2,2,0 );

	vp[0]=x0+.5f;vp[1]=y0+.5f;(int&)vp[4]=colorARGB;
	vp[5]=x1+.5f;vp[6]=y1+.5f;(int&)vp[9]=colorARGB;
	
	return 0;
}

int gxtkGraphics::DrawRect( float x,float y,float w,float h ){

	float x0=x,x1=x+w,x2=x+w,x3=x;
	float y0=y,y1=y,y2=y+h,y3=y+h;

	if( tformed ){
		float tx0=x0,tx1=x1,tx2=x2,tx3=x3;
		x0=tx0 * ix + y0 * jx + tx;y0=tx0 * iy + y0 * jy + ty;
		x1=tx1 * ix + y1 * jx + tx;y1=tx1 * iy + y1 * jy + ty;
		x2=tx2 * ix + y2 * jx + tx;y2=tx2 * iy + y2 * jy + ty;
		x3=tx3 * ix + y3 * jx + tx;y3=tx3 * iy + y3 * jy + ty;
	}
	
	float *vp=Begin( 4,4,0 );

	vp[0 ]=x0;vp[1 ]=y0;(int&)vp[4 ]=colorARGB;
	vp[5 ]=x1;vp[6 ]=y1;(int&)vp[9 ]=colorARGB;
	vp[10]=x2;vp[11]=y2;(int&)vp[14]=colorARGB;
	vp[15]=x3;vp[16]=y3;(int&)vp[19]=colorARGB;

	return 0;
}

int gxtkGraphics::DrawOval( float x,float y,float w,float h ){
	
	float xr=w/2.0f;
	float yr=h/2.0f;

	int n;
	if( tformed ){
		float dx_x=xr * ix;
		float dx_y=xr * iy;
		float dx=sqrtf( dx_x*dx_x+dx_y*dx_y );
		float dy_x=yr * jx;
		float dy_y=yr * jy;
		float dy=sqrtf( dy_x*dy_x+dy_y*dy_y );
		n=(int)( dx+dy );
	}else{
		n=(int)( fabs( xr )+fabs( yr ) );
	}
	
	if( n<12 ){
		n=12;
	}else if( n>MAX_VERTS ){
		n=MAX_VERTS;
	}else{
		n&=~3;
	}

	float x0=x+xr,y0=y+yr;
	
	float *vp=Begin( n,n,0 );

	for( int i=0;i<n;++i ){
	
		float th=i * 6.28318531f / n;

		float px=x0+cosf( th ) * xr;
		float py=y0-sinf( th ) * yr;
		
		if( tformed ){
			float ppx=px;
			px=ppx * ix + py * jx + tx;
			py=ppx * iy + py * jy + ty;
		}
		
		vp[0]=px;vp[1]=py;(int&)vp[4]=colorARGB;
		vp+=5;
	}
	
	return 0;
}

int gxtkGraphics::DrawPoly( Array<Float> verts ){

	int n=verts.Length()/2;
	if( n<1 || n>MAX_VERTS ) return 0;
	
	float *vp=Begin( n,n,0 );
	
	for( int i=0;i<n;++i ){
		int j=i*2;
		if( tformed ){
			vp[0]=verts[j] * ix + verts[j+1] * jx + tx;
			vp[1]=verts[j] * iy + verts[j+1] * jy + ty;
		}else{
			vp[0]=verts[j];
			vp[1]=verts[j+1];
		}
		(int&)vp[4]=colorARGB;
		vp+=5;
	}

	return 0;
}

int gxtkGraphics::DrawPoly2( Array<Float> verts,gxtkSurface *surface,int srcx,int srcy ){

	int n=verts.Length()/4;
	if( n<1 || n>MAX_VERTS ) return 0;
		
	float *vp=Begin( n,n,surface );
	
	for( int i=0;i<n;++i ){
		int j=i*4;
		if( tformed ){
			vp[0]=verts[j] * ix + verts[j+1] * jx + tx;
			vp[1]=verts[j] * iy + verts[j+1] * jy + ty;
		}else{
			vp[0]=verts[j];
			vp[1]=verts[j+1];
		}
		vp[2]=(srcx+verts[j+2])*surface->uscale;
		vp[3]=(srcy+verts[j+3])*surface->vscale;
		(int&)vp[4]=colorARGB;
		vp+=5;
	}
	
	return 0;
}

int gxtkGraphics::DrawSurface( gxtkSurface *surf,float x,float y ){
	
	float w=surf->Width();
	float h=surf->Height();
	float x0=x,x1=x+w,x2=x+w,x3=x;
	float y0=y,y1=y,y2=y+h,y3=y+h;
	float u0=0,u1=w*surf->uscale;
	float v0=0,v1=h*surf->vscale;

	if( tformed ){
		float tx0=x0,tx1=x1,tx2=x2,tx3=x3;
		x0=tx0 * ix + y0 * jx + tx;y0=tx0 * iy + y0 * jy + ty;
		x1=tx1 * ix + y1 * jx + tx;y1=tx1 * iy + y1 * jy + ty;
		x2=tx2 * ix + y2 * jx + tx;y2=tx2 * iy + y2 * jy + ty;
		x3=tx3 * ix + y3 * jx + tx;y3=tx3 * iy + y3 * jy + ty;
	}
	
	float *vp=Begin( 4,4,surf );
	
	vp[0 ]=x0;vp[1 ]=y0;vp[2 ]=u0;vp[3 ]=v0;(int&)vp[4 ]=colorARGB;
	vp[5 ]=x1;vp[6 ]=y1;vp[7 ]=u1;vp[8 ]=v0;(int&)vp[9 ]=colorARGB;
	vp[10]=x2;vp[11]=y2;vp[12]=u1;vp[13]=v1;(int&)vp[14]=colorARGB;
	vp[15]=x3;vp[16]=y3;vp[17]=u0;vp[18]=v1;(int&)vp[19]=colorARGB;
	
	return 0;
}

int gxtkGraphics::DrawSurface2( gxtkSurface *surf,float x,float y,int srcx,int srcy,int srcw,int srch ){
	
	float w=srcw;
	float h=srch;
	float x0=x,x1=x+w,x2=x+w,x3=x;
	float y0=y,y1=y,y2=y+h,y3=y+h;
	float u0=srcx*surf->uscale,u1=(srcx+srcw)*surf->uscale;
	float v0=srcy*surf->vscale,v1=(srcy+srch)*surf->vscale;

	if( tformed ){
		float tx0=x0,tx1=x1,tx2=x2,tx3=x3;
		x0=tx0 * ix + y0 * jx + tx;y0=tx0 * iy + y0 * jy + ty;
		x1=tx1 * ix + y1 * jx + tx;y1=tx1 * iy + y1 * jy + ty;
		x2=tx2 * ix + y2 * jx + tx;y2=tx2 * iy + y2 * jy + ty;
		x3=tx3 * ix + y3 * jx + tx;y3=tx3 * iy + y3 * jy + ty;
	}
	
	float *vp=Begin( 4,4,surf );
	
	vp[0 ]=x0;vp[1 ]=y0;vp[2 ]=u0;vp[3 ]=v0;(int&)vp[4 ]=colorARGB;
	vp[5 ]=x1;vp[6 ]=y1;vp[7 ]=u1;vp[8 ]=v0;(int&)vp[9 ]=colorARGB;
	vp[10]=x2;vp[11]=y2;vp[12]=u1;vp[13]=v1;(int&)vp[14]=colorARGB;
	vp[15]=x3;vp[16]=y3;vp[17]=u0;vp[18]=v1;(int&)vp[19]=colorARGB;
	
	return 0;
}
	
int gxtkGraphics::ReadPixels( Array<int> pixels,int x,int y,int width,int height,int offset,int pitch ){

	Flush();

	unsigned *p=(unsigned*)malloc(width*height*4);

	glReadPixels( x,this->height-y-height,width,height,GL_BGRA,GL_UNSIGNED_BYTE,p );
	
	for( int py=0;py<height;++py ){
		memcpy( &pixels[offset+py*pitch],&p[(height-py-1)*width],width*4 );
	}
	
	free( p );
	
	return 0;
}

int gxtkGraphics::WritePixels2( gxtkSurface *surface,Array<int> pixels,int x,int y,int width,int height,int offset,int pitch ){

	surface->SetSubData( x,y,width,height,(unsigned*)&pixels[offset],pitch );
	
	return 0;
}

//***** gxtkSurface *****

gxtkSurface::gxtkSurface():data(0),width(0),height(0),depth(0),format(0),seq(-1),texture(0),uscale(0),vscale(0){
}

gxtkSurface::~gxtkSurface(){
	Discard();
}

int gxtkSurface::Discard(){
	if( seq==glfwGraphicsSeq ){
		glDeleteTextures( 1,&texture );
		seq=-1;
	}
	if( data ){
		free( data );
		data=0;
	}
	return 0;
}

int gxtkSurface::Width(){
	return width;
}

int gxtkSurface::Height(){
	return height;
}

int gxtkSurface::Loaded(){
	return 1;
}

//Careful! Can't call any GL here as it may be executing off-thread.
//
void gxtkSurface::SetData( unsigned char *data,int width,int height,int depth ){

	this->data=data;
	this->width=width;
	this->height=height;
	this->depth=depth;
	
	unsigned char *p=data;
	int n=width*height;
	
	switch( depth ){
	case 1:
		format=GL_LUMINANCE;
		break;
	case 2:
		format=GL_LUMINANCE_ALPHA;
		if( data ){
			while( n-- ){	//premultiply alpha
				p[0]=p[0]*p[1]/255;
				p+=2;
			}
		}
		break;
	case 3:
		format=GL_RGB;
		break;
	case 4:
		format=GL_RGBA;
		if( data ){
			while( n-- ){	//premultiply alpha
				p[0]=p[0]*p[3]/255;
				p[1]=p[1]*p[3]/255;
				p[2]=p[2]*p[3]/255;
				p+=4;
			}
		}
		break;
	}
}

void gxtkSurface::SetSubData( int x,int y,int w,int h,unsigned *src,int pitch ){
	if( format!=GL_RGBA ) return;
	
	if( !data ) data=(unsigned char*)malloc( width*height*4 );
	
	unsigned *dst=(unsigned*)data+y*width+x;
	
	for( int py=0;py<h;++py ){
		unsigned *d=dst+py*width;
		unsigned *s=src+py*pitch;
		for( int px=0;px<w;++px ){
			unsigned p=*s++;
			unsigned a=p>>24;
			*d++=(a<<24) | ((p>>0&0xff)*a/255<<16) | ((p>>8&0xff)*a/255<<8) | ((p>>16&0xff)*a/255);
		}
	}
	
	if( seq==glfwGraphicsSeq ){
		glBindTexture( GL_TEXTURE_2D,texture );
		glPixelStorei( GL_UNPACK_ALIGNMENT,1 );
		if( width==pitch ){
			glTexSubImage2D( GL_TEXTURE_2D,0,x,y,w,h,format,GL_UNSIGNED_BYTE,dst );
		}else{
			for( int py=0;py<h;++py ){
				glTexSubImage2D( GL_TEXTURE_2D,0,x,y+py,w,1,format,GL_UNSIGNED_BYTE,dst+py*width );
			}
		}
	}
}

void gxtkSurface::Bind(){

	if( !glfwGraphicsSeq ) return;
	
	if( seq==glfwGraphicsSeq ){
		glBindTexture( GL_TEXTURE_2D,texture );
		return;
	}
	
	seq=glfwGraphicsSeq;
	
	glGenTextures( 1,&texture );
	glBindTexture( GL_TEXTURE_2D,texture );
	
	if( CFG_MOJO_IMAGE_FILTERING_ENABLED ){
		glTexParameteri( GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR );
		glTexParameteri( GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR );
	}else{
		glTexParameteri( GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_NEAREST );
		glTexParameteri( GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_NEAREST );
	}

	glTexParameteri( GL_TEXTURE_2D,GL_TEXTURE_WRAP_S,GL_CLAMP_TO_EDGE );
	glTexParameteri( GL_TEXTURE_2D,GL_TEXTURE_WRAP_T,GL_CLAMP_TO_EDGE );

	int texwidth=width;
	int texheight=height;
	
	glTexImage2D( GL_TEXTURE_2D,0,format,texwidth,texheight,0,format,GL_UNSIGNED_BYTE,0 );
	if( glGetError()!=GL_NO_ERROR ){
		texwidth=Pow2Size( width );
		texheight=Pow2Size( height );
		glTexImage2D( GL_TEXTURE_2D,0,format,texwidth,texheight,0,format,GL_UNSIGNED_BYTE,0 );
	}
	
	uscale=1.0/texwidth;
	vscale=1.0/texheight;
	
	if( data ){
		glPixelStorei( GL_UNPACK_ALIGNMENT,1 );
		glTexSubImage2D( GL_TEXTURE_2D,0,0,0,width,height,format,GL_UNSIGNED_BYTE,data );
	}
}

void gxtkSurface::OnUnsafeLoadComplete(){
	Bind();
}

bool gxtkGraphics::LoadSurface__UNSAFE__( gxtkSurface *surface,String path ){

	int width,height,depth;
	unsigned char *data=BBGlfwGame::GlfwGame()->LoadImageData( path,&width,&height,&depth );
	if( !data ) return false;
	
	surface->SetData( data,width,height,depth );
	return true;
}

gxtkSurface *gxtkGraphics::LoadSurface( String path ){
	gxtkSurface *surf=new gxtkSurface();
	if( !LoadSurface__UNSAFE__( surf,path ) ) return 0;
	surf->Bind();
	return surf;
}

gxtkSurface *gxtkGraphics::CreateSurface( int width,int height ){
	gxtkSurface *surf=new gxtkSurface();
	surf->SetData( 0,width,height,4 );
	surf->Bind();
	return surf;
}

//***** gxtkAudio.h *****

class gxtkSample;

class gxtkChannel{
public:
	ALuint source;
	gxtkSample *sample;
	int flags;
	int state;
	
	int AL_Source();
};

class gxtkAudio : public Object{
public:
	static gxtkAudio *audio;
	
	ALCdevice *alcDevice;
	ALCcontext *alcContext;
	gxtkChannel channels[33];

	gxtkAudio();

	virtual void mark();

	//***** GXTK API *****
	virtual int Suspend();
	virtual int Resume();

	virtual gxtkSample *LoadSample( String path );
	virtual bool LoadSample__UNSAFE__( gxtkSample *sample,String path );
	
	virtual int PlaySample( gxtkSample *sample,int channel,int flags );

	virtual int StopChannel( int channel );
	virtual int PauseChannel( int channel );
	virtual int ResumeChannel( int channel );
	virtual int ChannelState( int channel );
	virtual int SetVolume( int channel,float volume );
	virtual int SetPan( int channel,float pan );
	virtual int SetRate( int channel,float rate );
	
	virtual int PlayMusic( String path,int flags );
	virtual int StopMusic();
	virtual int PauseMusic();
	virtual int ResumeMusic();
	virtual int MusicState();
	virtual int SetMusicVolume( float volume );
};

class gxtkSample : public Object{
public:
	ALuint al_buffer;

	gxtkSample();
	gxtkSample( ALuint buf );
	~gxtkSample();
	
	void SetBuffer( ALuint buf );
	
	//***** GXTK API *****
	virtual int Discard();
};

//***** gxtkAudio.cpp *****

gxtkAudio *gxtkAudio::audio;

static std::vector<ALuint> discarded;

static void FlushDiscarded(){

	if( !discarded.size() ) return;
	
	for( int i=0;i<33;++i ){
		gxtkChannel *chan=&gxtkAudio::audio->channels[i];
		if( chan->state ){
			int state=0;
			alGetSourcei( chan->source,AL_SOURCE_STATE,&state );
			if( state==AL_STOPPED ) alSourcei( chan->source,AL_BUFFER,0 );
		}
	}
	
	std::vector<ALuint> out;
	
	for( int i=0;i<discarded.size();++i ){
		ALuint buf=discarded[i];
		alDeleteBuffers( 1,&buf );
		ALenum err=alGetError();
		if( err==AL_NO_ERROR ){
//			printf( "alDeleteBuffers OK!\n" );fflush( stdout );
		}else{
//			printf( "alDeleteBuffers failed...\n" );fflush( stdout );
			out.push_back( buf );
		}
	}
	discarded=out;
}

int gxtkChannel::AL_Source(){
	if( source ) return source;

	alGetError();
	alGenSources( 1,&source );
	if( alGetError()==AL_NO_ERROR ) return source;
	
	//couldn't create source...steal a free source...?
	//
	source=0;
	for( int i=0;i<32;++i ){
		gxtkChannel *chan=&gxtkAudio::audio->channels[i];
		if( !chan->source || gxtkAudio::audio->ChannelState( i ) ) continue;
//		puts( "Stealing source!" );
		source=chan->source;
		chan->source=0;
		break;
	}
	return source;
}

gxtkAudio::gxtkAudio(){

	audio=this;
	
	alcDevice=alcOpenDevice( 0 );
	if( !alcDevice ){
		alcDevice=alcOpenDevice( "Generic Hardware" );
		if( !alcDevice ) alcDevice=alcOpenDevice( "Generic Software" );
	}

//	bbPrint( "opening openal device" );
	if( alcDevice ){
		if( (alcContext=alcCreateContext( alcDevice,0 )) ){
			if( (alcMakeContextCurrent( alcContext )) ){
				//alc all go!
			}else{
				bbPrint( "OpenAl error: alcMakeContextCurrent failed" );
			}
		}else{
			bbPrint( "OpenAl error: alcCreateContext failed" );
		}
	}else{
		bbPrint( "OpenAl error: alcOpenDevice failed" );
	}

	alDistanceModel( AL_NONE );
	
	memset( channels,0,sizeof(channels) );

	channels[32].AL_Source();
}

void gxtkAudio::mark(){
	for( int i=0;i<33;++i ){
		gxtkChannel *chan=&channels[i];
		if( chan->state!=0 ){
			int state=0;
			alGetSourcei( chan->source,AL_SOURCE_STATE,&state );
			if( state!=AL_STOPPED ) gc_mark( chan->sample );
		}
	}
}

int gxtkAudio::Suspend(){
	for( int i=0;i<33;++i ){
		gxtkChannel *chan=&channels[i];
		if( chan->state==1 ){
			int state=0;
			alGetSourcei( chan->source,AL_SOURCE_STATE,&state );
			if( state==AL_PLAYING ) alSourcePause( chan->source );
		}
	}
	return 0;
}

int gxtkAudio::Resume(){
	for( int i=0;i<33;++i ){
		gxtkChannel *chan=&channels[i];
		if( chan->state==1 ){
			int state=0;
			alGetSourcei( chan->source,AL_SOURCE_STATE,&state );
			if( state==AL_PAUSED ) alSourcePlay( chan->source );
		}
	}
	return 0;
}

bool gxtkAudio::LoadSample__UNSAFE__( gxtkSample *sample,String path ){

	int length=0;
	int channels=0;
	int format=0;
	int hertz=0;
	unsigned char *data=BBGlfwGame::GlfwGame()->LoadAudioData( path,&length,&channels,&format,&hertz );
	if( !data ) return false;
	
	int al_format=0;
	if( format==1 && channels==1 ){
		al_format=AL_FORMAT_MONO8;
	}else if( format==1 && channels==2 ){
		al_format=AL_FORMAT_STEREO8;
	}else if( format==2 && channels==1 ){
		al_format=AL_FORMAT_MONO16;
	}else if( format==2 && channels==2 ){
		al_format=AL_FORMAT_STEREO16;
	}
	
	int size=length*channels*format;
	
	ALuint al_buffer;
	alGenBuffers( 1,&al_buffer );
	alBufferData( al_buffer,al_format,data,size,hertz );
	free( data );
	
	sample->SetBuffer( al_buffer );
	return true;
}

gxtkSample *gxtkAudio::LoadSample( String path ){
	FlushDiscarded();
	gxtkSample *sample=new gxtkSample();
	if( !LoadSample__UNSAFE__( sample,path ) ) return 0;
	return sample;
}

int gxtkAudio::PlaySample( gxtkSample *sample,int channel,int flags ){

	FlushDiscarded();
	
	gxtkChannel *chan=&channels[channel];
	
	if( !chan->AL_Source() ) return -1;
	
	alSourceStop( chan->source );
	alSourcei( chan->source,AL_BUFFER,sample->al_buffer );
	alSourcei( chan->source,AL_LOOPING,flags ? 1 : 0 );
	alSourcePlay( chan->source );
	
	gc_assign( chan->sample,sample );

	chan->flags=flags;
	chan->state=1;

	return 0;
}

int gxtkAudio::StopChannel( int channel ){
	gxtkChannel *chan=&channels[channel];

	if( chan->state!=0 ){
		alSourceStop( chan->source );
		chan->state=0;
	}
	return 0;
}

int gxtkAudio::PauseChannel( int channel ){
	gxtkChannel *chan=&channels[channel];

	if( chan->state==1 ){
		int state=0;
		alGetSourcei( chan->source,AL_SOURCE_STATE,&state );
		if( state==AL_STOPPED ){
			chan->state=0;
		}else{
			alSourcePause( chan->source );
			chan->state=2;
		}
	}
	return 0;
}

int gxtkAudio::ResumeChannel( int channel ){
	gxtkChannel *chan=&channels[channel];

	if( chan->state==2 ){
		alSourcePlay( chan->source );
		chan->state=1;
	}
	return 0;
}

int gxtkAudio::ChannelState( int channel ){
	gxtkChannel *chan=&channels[channel];
	
	if( chan->state==1 ){
		int state=0;
		alGetSourcei( chan->source,AL_SOURCE_STATE,&state );
		if( state==AL_STOPPED ) chan->state=0;
	}
	return chan->state;
}

int gxtkAudio::SetVolume( int channel,float volume ){
	gxtkChannel *chan=&channels[channel];

	alSourcef( chan->AL_Source(),AL_GAIN,volume );
	return 0;
}

int gxtkAudio::SetPan( int channel,float pan ){
	gxtkChannel *chan=&channels[channel];
	
	float x=sinf( pan ),y=0,z=-cosf( pan );
	alSource3f( chan->AL_Source(),AL_POSITION,x,y,z );
	return 0;
}

int gxtkAudio::SetRate( int channel,float rate ){
	gxtkChannel *chan=&channels[channel];

	alSourcef( chan->AL_Source(),AL_PITCH,rate );
	return 0;
}

int gxtkAudio::PlayMusic( String path,int flags ){
	StopMusic();
	
	gxtkSample *music=LoadSample( path );
	if( !music ) return -1;
	
	PlaySample( music,32,flags );
	return 0;
}

int gxtkAudio::StopMusic(){
	StopChannel( 32 );
	return 0;
}

int gxtkAudio::PauseMusic(){
	PauseChannel( 32 );
	return 0;
}

int gxtkAudio::ResumeMusic(){
	ResumeChannel( 32 );
	return 0;
}

int gxtkAudio::MusicState(){
	return ChannelState( 32 );
}

int gxtkAudio::SetMusicVolume( float volume ){
	SetVolume( 32,volume );
	return 0;
}

gxtkSample::gxtkSample():
al_buffer(0){
}

gxtkSample::gxtkSample( ALuint buf ):
al_buffer(buf){
}

gxtkSample::~gxtkSample(){
	Discard();
}

void gxtkSample::SetBuffer( ALuint buf ){
	al_buffer=buf;
}

int gxtkSample::Discard(){
	if( al_buffer ){
		discarded.push_back( al_buffer );
		al_buffer=0;
	}
	return 0;
}

// Stdcpp trans.system runtime.
//
// Placed into the public domain 24/02/2011.
// No warranty implied; use as your own risk.

#if _WIN32

#ifndef PATH_MAX
#define PATH_MAX MAX_PATH
#endif

typedef WCHAR OS_CHAR;
typedef struct _stat stat_t;

#define mkdir( X,Y ) _wmkdir( X )
#define rmdir _wrmdir
#define remove _wremove
#define rename _wrename
#define stat _wstat
#define _fopen _wfopen
#define putenv _wputenv
#define getenv _wgetenv
#define system _wsystem
#define chdir _wchdir
#define getcwd _wgetcwd
#define realpath(X,Y) _wfullpath( Y,X,PATH_MAX )	//Note: first args SWAPPED to be posix-like!
#define opendir _wopendir
#define readdir _wreaddir
#define closedir _wclosedir
#define DIR _WDIR
#define dirent _wdirent

#elif __APPLE__

typedef char OS_CHAR;
typedef struct stat stat_t;

#define _fopen fopen

#elif __linux

/*
#include <unistd.h>
#include <sys/stat.h>
#include <dirent.h>
*/

typedef char OS_CHAR;
typedef struct stat stat_t;

#define _fopen fopen

#endif

static String _appPath;
static Array<String> _appArgs;

static String::CString<char> C_STR( const String &t ){
	return t.ToCString<char>();
}

static String::CString<OS_CHAR> OS_STR( const String &t ){
	return t.ToCString<OS_CHAR>();
}

String HostOS(){
#if _WIN32
	return "winnt";
#elif __APPLE__
	return "macos";
#elif __linux
	return "linux";
#else
	return "";
#endif
}

String RealPath( String path ){
	std::vector<OS_CHAR> buf( PATH_MAX+1 );
	if( realpath( OS_STR( path ),&buf[0] ) ){}
	buf[buf.size()-1]=0;
	for( int i=0;i<PATH_MAX && buf[i];++i ){
		if( buf[i]=='\\' ) buf[i]='/';
		
	}
	return String( &buf[0] );
}

String AppPath(){

	if( _appPath.Length() ) return _appPath;
	
#if _WIN32

	OS_CHAR buf[PATH_MAX+1];
	GetModuleFileNameW( GetModuleHandleW(0),buf,PATH_MAX );
	buf[PATH_MAX]=0;
	_appPath=String( buf );
	
#elif __APPLE__

	char buf[PATH_MAX];
	uint32_t size=sizeof( buf );
	_NSGetExecutablePath( buf,&size );
	buf[PATH_MAX-1]=0;
	_appPath=String( buf );
	
#elif __linux

	char lnk[PATH_MAX],buf[PATH_MAX];
	pid_t pid=getpid();
	sprintf( lnk,"/proc/%i/exe",pid );
	int i=readlink( lnk,buf,PATH_MAX );
	if( i>0 && i<PATH_MAX ){
		buf[i]=0;
		_appPath=String( buf );
	}

#endif

	_appPath=RealPath( _appPath );
	return _appPath;
}

Array<String> AppArgs(){
	if( _appArgs.Length() ) return _appArgs;
	_appArgs=Array<String>( argc );
	for( int i=0;i<argc;++i ){
		_appArgs[i]=String( argv[i] );
	}
	return _appArgs;
}
	
int FileType( String path ){
	stat_t st;
	if( stat( OS_STR(path),&st ) ) return 0;
	switch( st.st_mode & S_IFMT ){
	case S_IFREG : return 1;
	case S_IFDIR : return 2;
	}
	return 0;
}

int FileSize( String path ){
	stat_t st;
	if( stat( OS_STR(path),&st ) ) return -1;
	return st.st_size;
}

int FileTime( String path ){
	stat_t st;
	if( stat( OS_STR(path),&st ) ) return -1;
	return st.st_mtime;
}

String LoadString( String path ){
	if( FILE *fp=_fopen( OS_STR(path),OS_STR("rb") ) ){
		String str=String::Load( fp );
		if( _str_load_err ){
			bbPrint( String( _str_load_err )+" in file: "+path );
		}
		fclose( fp );
		return str;
	}
	return "";
}
	
int SaveString( String str,String path ){
	if( FILE *fp=_fopen( OS_STR(path),OS_STR("wb") ) ){
		bool ok=str.Save( fp );
		fclose( fp );
		return ok ? 0 : -2;
	}else{
//		printf( "FOPEN 'wb' for SaveString '%s' failed\n",C_STR( path ) );
		fflush( stdout );
	}
	return -1;
}

Array<String> LoadDir( String path ){
	std::vector<String> files;
	
#if _WIN32

	WIN32_FIND_DATAW filedata;
	HANDLE handle=FindFirstFileW( OS_STR(path+"/*"),&filedata );
	if( handle!=INVALID_HANDLE_VALUE ){
		do{
			String f=filedata.cFileName;
			if( f=="." || f==".." ) continue;
			files.push_back( f );
		}while( FindNextFileW( handle,&filedata ) );
		FindClose( handle );
	}else{
//		printf( "FindFirstFileW for LoadDir(%s) failed\n",C_STR(path) );
		fflush( stdout );
	}
	
#else

	if( DIR *dir=opendir( OS_STR(path) ) ){
		while( dirent *ent=readdir( dir ) ){
			String f=ent->d_name;
			if( f=="." || f==".." ) continue;
			files.push_back( f );
		}
		closedir( dir );
	}else{
//		printf( "opendir for LoadDir(%s) failed\n",C_STR(path) );
		fflush( stdout );
	}

#endif

	return files.size() ? Array<String>( &files[0],files.size() ) : Array<String>();
}
	
int CopyFile( String srcpath,String dstpath ){

#if _WIN32

	if( CopyFileW( OS_STR(srcpath),OS_STR(dstpath),FALSE ) ) return 1;
	return 0;
	
#elif __APPLE__

	// Would like to use COPY_ALL here, but it breaks trans on MacOS - produces weird 'pch out of date' error with copied projects.
	//
	// Ranlib strikes back!
	//
	if( copyfile( OS_STR(srcpath),OS_STR(dstpath),0,COPYFILE_DATA )>=0 ) return 1;
	return 0;
	
#else

	int err=-1;
	if( FILE *srcp=_fopen( OS_STR( srcpath ),OS_STR( "rb" ) ) ){
		err=-2;
		if( FILE *dstp=_fopen( OS_STR( dstpath ),OS_STR( "wb" ) ) ){
			err=0;
			char buf[1024];
			while( int n=fread( buf,1,1024,srcp ) ){
				if( fwrite( buf,1,n,dstp )!=n ){
					err=-3;
					break;
				}
			}
			fclose( dstp );
		}else{
//			printf( "FOPEN 'wb' for CopyFile(%s,%s) failed\n",C_STR(srcpath),C_STR(dstpath) );
			fflush( stdout );
		}
		fclose( srcp );
	}else{
//		printf( "FOPEN 'rb' for CopyFile(%s,%s) failed\n",C_STR(srcpath),C_STR(dstpath) );
		fflush( stdout );
	}
	return err==0;
	
#endif
}

int ChangeDir( String path ){
	return chdir( OS_STR(path) );
}

String CurrentDir(){
	std::vector<OS_CHAR> buf( PATH_MAX+1 );
	if( getcwd( &buf[0],buf.size() ) ){}
	buf[buf.size()-1]=0;
	return String( &buf[0] );
}

int CreateDir( String path ){
	mkdir( OS_STR( path ),0777 );
	return FileType(path)==2;
}

int DeleteDir( String path ){
	rmdir( OS_STR(path) );
	return FileType(path)==0;
}

int DeleteFile( String path ){
	remove( OS_STR(path) );
	return FileType(path)==0;
}

int SetEnv( String name,String value ){
#if _WIN32
	return putenv( OS_STR( name+"="+value ) );
#else
	if( value.Length() ) return setenv( OS_STR( name ),OS_STR( value ),1 );
	unsetenv( OS_STR( name ) );
	return 0;
#endif
}

String GetEnv( String name ){
	if( OS_CHAR *p=getenv( OS_STR(name) ) ) return String( p );
	return "";
}

int Execute( String cmd ){

#if _WIN32

	cmd=String("cmd /S /C \"")+cmd+"\"";

	PROCESS_INFORMATION pi={0};
	STARTUPINFOW si={sizeof(si)};

	if( !CreateProcessW( 0,(WCHAR*)(const OS_CHAR*)OS_STR(cmd),0,0,1,CREATE_DEFAULT_ERROR_MODE,0,0,&si,&pi ) ) return -1;

	WaitForSingleObject( pi.hProcess,INFINITE );

	int res=GetExitCodeProcess( pi.hProcess,(DWORD*)&res ) ? res : -1;

	CloseHandle( pi.hProcess );
	CloseHandle( pi.hThread );

	return res;

#else

	return system( OS_STR(cmd) );

#endif
}

int ExitApp( int retcode ){
	exit( retcode );
	return 0;
}


// ***** thread.h *****

#if __cplusplus_winrt

using namespace Windows::System::Threading;

#endif

class BBThread : public Object{
public:
	Object *result;
	
	BBThread();
	
	virtual void Start();
	virtual bool IsRunning();
	
	virtual Object *Result();
	virtual void SetResult( Object *result );
	
	static  String Strdup( const String &str );
	
	virtual void Run__UNSAFE__();
	
	
private:

	enum{
		INIT=0,
		RUNNING=1,
		FINISHED=2
	};

	
	int _state;
	Object *_result;
	
#if __cplusplus_winrt

	friend class Launcher;

	class Launcher{
	
		friend class BBThread;
		BBThread *_thread;
		
		Launcher( BBThread *thread ):_thread(thread){
		}
		
		public:
		
		void operator()( IAsyncAction ^operation ){
			_thread->Run__UNSAFE__();
			_thread->_state=FINISHED;
		} 
	};
	
#elif _WIN32

	static DWORD WINAPI run( void *p );
	
#else

	static void *run( void *p );
	
#endif

};

// ***** thread.cpp *****

BBThread::BBThread():_state( INIT ),_result( 0 ){
}

bool BBThread::IsRunning(){
	return _state==RUNNING;
}

Object *BBThread::Result(){
	return _result;
}

void BBThread::SetResult( Object *result ){
	_result=result;
}

String BBThread::Strdup( const String &str ){
	return str.Copy();
}

void BBThread::Run__UNSAFE__(){
}

#if __cplusplus_winrt

void BBThread::Start(){
	if( _state==RUNNING ) return;
	
	_result=0;
	_state=RUNNING;
	
	Launcher launcher( this );
	
	auto handler=ref new WorkItemHandler( launcher );
	
	ThreadPool::RunAsync( handler );
}

#elif _WIN32

void BBThread::Start(){
	if( _state==RUNNING ) return;
	
	_result=0;
	_state=RUNNING;
	
	DWORD _id;
	HANDLE _handle;

	if( _handle=CreateThread( 0,0,run,this,0,&_id ) ){
		CloseHandle( _handle );
		return;
	}
	
	puts( "CreateThread failed!" );
	exit( -1 );
}

DWORD WINAPI BBThread::run( void *p ){
	BBThread *thread=(BBThread*)p;

	thread->Run__UNSAFE__();
	
	thread->_state=FINISHED;
	return 0;
}

#else

void BBThread::Start(){
	if( _state==RUNNING ) return;
	
	_result=0;
	_state=RUNNING;
	
	pthread_t _handle;
	
	if( !pthread_create( &_handle,0,run,this ) ){
		pthread_detach( _handle );
		return;
	}
	
	puts( "pthread_create failed!" );
	exit( -1 );
}

void *BBThread::run( void *p ){
	BBThread *thread=(BBThread*)p;

	thread->Run__UNSAFE__();

	thread->_state=FINISHED;
	return 0;
}

#endif


// ***** databuffer.h *****

class BBDataBuffer : public Object{
public:
	
	BBDataBuffer();
	
	~BBDataBuffer();
	
	bool _New( int length,void *data=0 );
	
	bool _Load( String path );
	
	void _LoadAsync( const String &path,BBThread *thread );

	void Discard();
	
	const void *ReadPointer( int offset=0 ){
		return _data+offset;
	}
	
	void *WritePointer( int offset=0 ){
		return _data+offset;
	}
	
	int Length(){
		return _length;
	}
	
	void PokeByte( int addr,int value ){
		*(_data+addr)=value;
	}

	void PokeShort( int addr,int value ){
		*(short*)(_data+addr)=value;
	}
	
	void PokeInt( int addr,int value ){
		*(int*)(_data+addr)=value;
	}
	
	void PokeFloat( int addr,float value ){
		*(float*)(_data+addr)=value;
	}

	int PeekByte( int addr ){
		return *(_data+addr);
	}
	
	int PeekShort( int addr ){
		return *(short*)(_data+addr);
	}
	
	int PeekInt( int addr ){
		return *(int*)(_data+addr);
	}
	
	float PeekFloat( int addr ){
		return *(float*)(_data+addr);
	}
	
private:
	signed char *_data;
	int _length;
};

// ***** databuffer.cpp *****

BBDataBuffer::BBDataBuffer():_data(0),_length(0){
}

BBDataBuffer::~BBDataBuffer(){
	if( _data ) free( _data );
}

bool BBDataBuffer::_New( int length,void *data ){
	if( _data ) return false;
	if( !data ) data=malloc( length );
	_data=(signed char*)data;
	_length=length;
	return true;
}

bool BBDataBuffer::_Load( String path ){
	if( _data ) return false;
	
	_data=(signed char*)BBGame::Game()->LoadData( path,&_length );
	if( !_data ) return false;
	
	return true;
}

void BBDataBuffer::_LoadAsync( const String &cpath,BBThread *thread ){

	String path=cpath.Copy();
	
	if( _Load( path ) ) thread->SetResult( this );
}

void BBDataBuffer::Discard(){
	if( !_data ) return;
	free( _data );
	_data=0;
	_length=0;
}


// ***** stream.h *****

class BBStream : public Object{
public:

	virtual int Eof(){
		return 0;
	}

	virtual void Close(){
	}

	virtual int Length(){
		return 0;
	}
	
	virtual int Position(){
		return 0;
	}
	
	virtual int Seek( int position ){
		return 0;
	}
	
	virtual int Read( BBDataBuffer *buffer,int offset,int count ){
		return 0;
	}

	virtual int Write( BBDataBuffer *buffer,int offset,int count ){
		return 0;
	}
};

// ***** stream.cpp *****


// ***** filestream.h *****

class BBFileStream : public BBStream{
public:

	BBFileStream();
	~BBFileStream();

	void Close();
	int Eof();
	int Length();
	int Position();
	int Seek( int position );
	int Read( BBDataBuffer *buffer,int offset,int count );
	int Write( BBDataBuffer *buffer,int offset,int count );

	bool Open( String path,String mode );
	
private:
	FILE *_file;
	int _position;
	int _length;
};

// ***** filestream.cpp *****

BBFileStream::BBFileStream():_file(0),_position(0),_length(0){
}

BBFileStream::~BBFileStream(){
	if( _file ) fclose( _file );
}

bool BBFileStream::Open( String path,String mode ){
	if( _file ) return false;

	String fmode;	
	if( mode=="r" ){
		fmode="rb";
	}else if( mode=="w" ){
		fmode="wb";
	}else if( mode=="u" ){
		fmode="rb+";
	}else{
		return false;
	}

	_file=BBGame::Game()->OpenFile( path,fmode );
	if( !_file && mode=="u" ) _file=BBGame::Game()->OpenFile( path,"wb+" );
	if( !_file ) return false;
	
	fseek( _file,0,SEEK_END );
	_length=ftell( _file );
	fseek( _file,0,SEEK_SET );
	_position=0;
	
	return true;
}

void BBFileStream::Close(){
	if( !_file ) return;
	
	fclose( _file );
	_file=0;
	_position=0;
	_length=0;
}

int BBFileStream::Eof(){
	if( !_file ) return -1;
	
	return _position==_length;
}

int BBFileStream::Length(){
	return _length;
}

int BBFileStream::Position(){
	return _position;
}

int BBFileStream::Seek( int position ){
	if( !_file ) return 0;
	
	fseek( _file,position,SEEK_SET );
	_position=ftell( _file );
	return _position;
}

int BBFileStream::Read( BBDataBuffer *buffer,int offset,int count ){
	if( !_file ) return 0;
	
	int n=fread( buffer->WritePointer(offset),1,count,_file );
	_position+=n;
	return n;
}

int BBFileStream::Write( BBDataBuffer *buffer,int offset,int count ){
	if( !_file ) return 0;
	
	int n=fwrite( buffer->ReadPointer(offset),1,count,_file );
	_position+=n;
	if( _position>_length ) _length=_position;
	return n;
}

String globalAppFolder;

String GetAppFolder()
{
    return globalAppFolder;
}


// Stdcpp trans.system runtime.
//
// Placed into the public domain 24/02/2011.
// No warranty implied; use as your own risk.

#if _WIN32

#define mkdir( X,Y ) _wmkdir( X )
#define rmdir _wrmdir
#define remove _wremove
#define rename _wrename
#define stat _wstat
#define _fopen _wfopen

#else

#define _fopen fopen

#endif

class BBFileSystem{

#if _WIN32
	typedef wchar_t OS_CHAR;
	typedef struct _stat stat_t;
#else
	typedef char OS_CHAR;
	typedef struct stat stat_t;
#endif

	static String::CString<char> C_STR( const String &t ){
		return t.ToCString<char>();
	}
	
	static String::CString<OS_CHAR> OS_STR( const String &t ){
		return t.ToCString<OS_CHAR>();
	}
	
	public:
	
	static String FixPath( String path ){
		return BBGame::Game()->PathToFilePath( path );
	}
	
	static String RealPath( String path ){
#if _WIN32
		OS_CHAR buf[ MAX_PATH+1 ];
		GetFullPathNameW( OS_STR(path),MAX_PATH,buf,0 );
		return String( buf );
#else
		OS_CHAR buf[ PATH_MAX+1 ];
		realpath( OS_STR( path ),buf );
		return String( buf );
/*		
		std::vector<OS_CHAR> buf( PATH_MAX+1 );
		if( realpath( OS_STR( path ),&buf[0] ) ){}
		buf[buf.size()-1]=0;
		for( int i=0;i<PATH_MAX && buf[i];++i ){
			if( buf[i]=='\\' ) buf[i]='/';
			
		}
		return String( &buf[0] );
*/
#endif
	}
	
	static int FileType( String path ){
		stat_t st;
		if( stat( OS_STR(path),&st ) ) return 0;
		switch( st.st_mode & S_IFMT ){
		case S_IFREG : return 1;
		case S_IFDIR : return 2;
		}
		return 0;
	}
	
	static int FileSize( String path ){
		stat_t st;
		if( stat( OS_STR(path),&st ) ) return 0;
		return st.st_size;
	}
	
	static int FileTime( String path ){
		stat_t st;
		if( stat( OS_STR(path),&st ) ) return 0;
		return st.st_mtime;
	}
	
	static bool DeleteFile( String path ){
		remove( OS_STR(path) );
		return FileType(path)==0;
	}
		
	static bool CopyFile( String srcpath,String dstpath ){
	
#if _WIN32
		return CopyFileW( OS_STR(srcpath),OS_STR(dstpath),FALSE );
#elif __APPLE__
	
		// Would like to use COPY_ALL here, but it breaks trans on MacOS - produces weird 'pch out of date' error with copied projects.
		//
		// Ranlib strikes back!
		//
		return copyfile( OS_STR(srcpath),OS_STR(dstpath),0,COPYFILE_DATA )>=0;
#else
		int err=-1;
		if( FILE *srcp=_fopen( OS_STR( srcpath ),OS_STR("rb") ) ){
			err=-2;
			if( FILE *dstp=_fopen( OS_STR( dstpath ),OS_STR("wb") ) ){
				err=0;
				char buf[1024];
				while( int n=fread( buf,1,1024,srcp ) ){
					if( fwrite( buf,1,n,dstp )!=n ){
						err=-3;
						break;
					}
				}
				fclose( dstp );
			}else{
//				printf( "FOPEN 'wb' for CopyFile(%s,%s) failed\n",C_STR(srcpath),C_STR(dstpath) );
				fflush( stdout );
			}
			fclose( srcp );
		}else{
//			printf( "FOPEN 'rb' for CopyFile(%s,%s) failed\n",C_STR(srcpath),C_STR(dstpath) )
;			fflush( stdout );
		}
		return err==0;
#endif
	}
	
	static bool CreateFile( String path ){
		if( FILE *f=_fopen( OS_STR( path ),OS_STR( "wb" ) ) ){
			fclose( f );
			return true;
		}
		return false;
	}
	
	static bool CreateDir( String path ){
		mkdir( OS_STR( path ),0777 );
		return FileType(path)==2;
	}
	
	static bool DeleteDir( String path ){
		rmdir( OS_STR(path) );
		return FileType(path)==0;
	}
	
	static Array<String> LoadDir( String path ){
		std::vector<String> files;
		
#if _WIN32
		WIN32_FIND_DATAW filedata;
		HANDLE handle=FindFirstFileW( OS_STR(path+"/*"),&filedata );
		if( handle!=INVALID_HANDLE_VALUE ){
			do{
				String f=filedata.cFileName;
				if( f=="." || f==".." ) continue;
				files.push_back( f );
			}while( FindNextFileW( handle,&filedata ) );
			FindClose( handle );
		}else{
//			printf( "FindFirstFileW for LoadDir(%s) failed\n",C_STR(path) );
			fflush( stdout );
		}
#else
		if( DIR *dir=opendir( OS_STR(path) ) ){
			while( dirent *ent=readdir( dir ) ){
				String f=ent->d_name;
				if( f=="." || f==".." ) continue;
				files.push_back( f );
			}
			closedir( dir );
		}else{
//			printf( "opendir for LoadDir(%s) failed\n",C_STR(path) );
			fflush( stdout );
		}
#endif
		return files.size() ? Array<String>( &files[0],files.size() ) : Array<String>();
	}
};

std::vector<unsigned char> logBuffer;

void AppendToLog(const String &line, const String &path, bool flush)
{
    line.Save(logBuffer);

    if (flush)
    {
        String modes = String("ab");
        FILE *file = fopen(path.ToCString<char>(), modes.ToCString<char>());
        if (file)
        {
            line.Save(file);
        }
        else
        {
            printf("FOPENFOPEN 'ab' for AppendToLog '%s' failed\n", path.ToCString<char>());
            fflush(stdout);
        }
    }
}

class c_App;
class c_NecroDancerGame;
class c_GameDelegate;
class c_Image;
class c_GraphicsContext;
class c_Frame;
class c_InputDevice;
class c_JoyState;
class c_DisplayMode;
class c_Map;
class c_IntMap;
class c_Stack;
class c_Node;
class c_BBGameEvent;
class c_Util;
class c_TextLog;
class c_GameData;
class c_Logger;
class c_Stream;
class c_FileStream;
class c_LogLevel;
class c_DataBuffer;
class c_StreamError;
class c_StreamWriteError;
class c_XMLError;
class c_XMLNode;
class c_XMLDoc;
class c_XMLStringBuffer;
class c_List;
class c_Node2;
class c_HeadNode;
class c_Map2;
class c_StringMap;
class c_Node3;
class c_XMLAttributeQuery;
class c_XMLAttributeQueryItem;
class c_XMLAttribute;
class c_Map3;
class c_StringMap2;
class c_Node4;
class c_MapValues;
class c_ValueEnumerator;
class c_GuiContainer;
class c_Controller;
class c_ControllerGame;
class c_Tweenable;
class c_Sprite;
class c_GUI_gameplay;
class c_Input;
class c_Character;
class c_Spells;
class c_Map4;
class c_StringMap3;
class c_Stack2;
class c_SpellType;
class c_LevelType;
class c_Level;
class c_LevelObject;
class c_RenderableObject;
class c_Entity;
class c_MobileEntity;
class c_Player;
class c_ControllerLevelEditor;
class c_Map5;
class c_IntMap2;
class c_Node5;
class c_Map6;
class c_IntMap3;
class c_Node6;
class c_Shrine;
class c_Set;
class c_IntSet;
class c_Map7;
class c_IntMap4;
class c_Node7;
class c_RNG;
class c_List2;
class c_Node8;
class c_HeadNode2;
class c_ParticleSystem;
class c_List3;
class c_Node9;
class c_HeadNode3;
class c_FamiliarFixed;
class c_List4;
class c_Node10;
class c_HeadNode4;
class c_Enumerator;
class c_Familiar;
class c_Item;
class c_SaleItem;
class c_Chest;
class c_Enemy;
class c_Crate;
class c_List5;
class c_Node11;
class c_HeadNode5;
class c_Gargoyle;
class c_List6;
class c_Node12;
class c_HeadNode6;
class c_List7;
class c_Node13;
class c_HeadNode7;
class c_Leprechaun;
class c_Chain;
class c_Enumerator2;
class c_Flyaway;
class c_Camera;
class c_Callback;
class c_BossBattleType;
class c_Stairs_callback;
class c_ControllerCutscene;
class c_Map8;
class c_StringMap4;
class c_Node14;
class c_Map9;
class c_StringMap5;
class c_Node15;
class c_Set2;
class c_StringSet;
class c_Map10;
class c_StringMap6;
class c_Node16;
class c_ItemList;
class c_Node17;
class c_Weapon;
class c_ItemType;
class c_Enumerator3;
class c_Map11;
class c_IntMap5;
class c_Node18;
class c_WeaponPoint;
class c_List8;
class c_Node19;
class c_HeadNode8;
class c_List9;
class c_Node20;
class c_HeadNode9;
class c_PlayerHealth;
class c_Map12;
class c_StringMap7;
class c_Node21;
class c_SoulFamiliar;
class c_List10;
class c_Node22;
class c_HeadNode10;
class c_Audio;
class c_Point2;
class c_ItemData;
class c_TextSprite;
class c_Bouncer;
class c_Replay;
class c_Point;
class c_StackEx;
class c_List11;
class c_EnemyList;
class c_Node23;
class c_HeadNode11;
class c_Enumerator4;
class c_Enumerator5;
class c_ReplayData;
class c_Node24;
class c_IntStack;
class c_Enumerator6;
class c_Tile;
class c_Map13;
class c_IntMap6;
class c_Map14;
class c_IntMap7;
class c_NodeEnumerator;
class c_Node25;
class c_NodeEnumerator2;
class c_Node26;
class c_List12;
class c_Node27;
class c_HeadNode12;
class c_MinibossTileData;
class c_List13;
class c_Node28;
class c_HeadNode13;
class c_RoomData;
class c_List14;
class c_Node29;
class c_HeadNode14;
class c_Trap;
class c_List15;
class c_TrapList;
class c_Node30;
class c_HeadNode15;
class c_List16;
class c_Node31;
class c_HeadNode16;
class c_List17;
class c_IntList;
class c_Node32;
class c_HeadNode17;
class c_NPC;
class c_Transmogrifier;
class c_Conjurer;
class c_Shriner;
class c_Pawnbroker;
class c_Map15;
class c_ExitMap;
class c_Node33;
class c_TilesetType;
class c_RoomType;
class c_TileType;
class c_TileData;
class c_List18;
class c_Node34;
class c_HeadNode18;
class c_Enumerator7;
class c_Enumerator8;
class c_Stack3;
class c_StringStack;
class c_NodeEnumerator3;
class c_Sarcophagus;
class c_BeatAnimationData;
class c_Map16;
class c_IntMap8;
class c_Node35;
class c_List19;
class c_Node36;
class c_HeadNode19;
class c_KingConga;
class c_ZombieSnake;
class c_Ghost;
class c_Bat;
class c_SkeletonMage;
class c_Armadillo;
class c_Hellhound;
class c_Yeti;
class c_Goblin;
class c_ElementalBase;
class c_IceElemental;
class c_FireElemental;
class c_Blademaster;
class c_Harpy;
class c_Warlock;
class c_GoblinBomber;
class c_ElectricMage;
class c_Devil;
class c_EvilEye;
class c_SpikeTrap;
class c_TrapType;
class c_SpeedUpTrap;
class c_ConfuseTrap;
class c_DeathMetal;
class c_EnemyType;
class c_Slime;
class c_Skeleton;
class c_EnemyClamper;
class c_Monkey;
class c_Enumerator9;
class c_List20;
class c_Node37;
class c_HeadNode20;
class c_Enumerator10;
class c_Bomb;
class c_List21;
class c_Node38;
class c_HeadNode21;
class c_Enumerator11;
class c_Zombie;
class c_Wraith;
class c_TrapChest;
class c_IItemPredicate;
class c_StandardItemPredicate;
class c_ArmoredSkeleton;
class c_Mushroom;
class c_Golem;
class c_Clone;
class c_TarMonster;
class c_Mole;
class c_MoleDirt;
class c_ParticleSystemData;
class c_Wight;
class c_FakeWall;
class c_MushroomLight;
class c_SkeletonKnight;
class c_Beetle;
class c_ShoveMonster;
class c_Ghast;
class c_TrapCauldron;
class c_Cauldron;
class c_SleepingGoblin;
class c_Ghoul;
class c_Lich;
class c_Pixie;
class c_Spider;
class c_Mummy;
class c_Necrodancer;
class c_BatMiniboss;
class c_Dragon;
class c_Banshee;
class c_Minotaur;
class c_Nightmare;
class c_Mommy;
class c_Ogre;
class c_MetroGnome;
class c_Shopkeeper;
class c_List22;
class c_Node39;
class c_HeadNode22;
class c_ShopkeeperGhost;
class c_Skull;
class c_Fortissimole;
class c_Pawn;
class c_Knight;
class c_Bishop;
class c_Rook;
class c_Queen;
class c_WaterBall;
class c_Gorgon;
class c_ZombieElectric;
class c_Orc;
class c_BounceTrap;
class c_BounceTrapDirection;
class c_King;
class c_Octoboss;
class c_Tentacle;
class c_Bell;
class c_List23;
class c_Node40;
class c_HeadNode23;
class c_DeadRinger;
class c_Rect;
class c_Stack4;
class c_StackEx2;
class c_IntPointStack;
class c_Stack5;
class c_Enumerator12;
class c_Enumerator13;
class c_TileObject;
class c_List24;
class c_Node41;
class c_HeadNode24;
class c_Enumerator14;
class c_Direction;
class c_TrapObject;
class c_List25;
class c_Node42;
class c_HeadNode25;
class c_Enumerator15;
class c_TrapDoor;
class c_TeleportTrap;
class c_SlowDownTrap;
class c_BombTrap;
class c_ScatterTrap;
class c_FireTrap;
class c_List26;
class c_IntPointList;
class c_Node43;
class c_HeadNode26;
class c_Enumerator16;
class c_SpecialRoomType;
class c_TravelRune;
class c_TravelRuneType;
class c_Medic;
class c_List27;
class c_Node44;
class c_HeadNode27;
class c_Thing;
class c_WeightedPicker;
class c_Stack6;
class c_UncertaintyWeaponPredicate;
class c_UncertaintyRingPredicate;
class c_List28;
class c_Node45;
class c_HeadNode28;
class c_EnemyObject;
class c_List29;
class c_Node46;
class c_HeadNode29;
class c_Enumerator17;
class c_ItemObject;
class c_List30;
class c_Node47;
class c_HeadNode30;
class c_Enumerator18;
class c_ChestObject;
class c_List31;
class c_Node48;
class c_HeadNode31;
class c_Enumerator19;
class c_List32;
class c_Node49;
class c_HeadNode32;
class c_ChestColor;
class c_SaleChest;
class c_List33;
class c_Node50;
class c_HeadNode33;
class c_CrateObject;
class c_List34;
class c_Node51;
class c_HeadNode34;
class c_Enumerator20;
class c_ShrineObject;
class c_List35;
class c_Node52;
class c_HeadNode35;
class c_Enumerator21;
class c_SwarmSarcophagus;
class c_RoomBase;
class c_BlobRoom;
class c_Set3;
class c_IntPointSet;
class c_Map17;
class c_IntPointMap;
class c_Node53;
class c_KeyEnumerator;
class c_MapKeys;
class c_Stack7;
class c_Enumerator22;
class c_RectRoom;
class c_PortalSeg;
class c_Stack8;
class c_StackEx3;
class c_Enumerator23;
class c_RoomWithDoor;
class c_Enumerator24;
class c_Stack9;
class c_StackEx4;
class c_IntPointMap2;
class c_Stack10;
class c_Enumerator25;
class c_SecretRoomData;
class c_Enumerator26;
class c_Poltergeist;
class c_ABTeleportTrap;
class c_StackEx5;
class c_EnemyBaseType;
class c_ToughSarcophagus;
class c_Enumerator27;
class c_Enumerator28;
class c_Enumerator29;
class c_Weaponmaster;
class c_DiamondDealer;
class c_Beastmaster;
class c_Merlin;
class c_Bossmaster;
class c_MapKeys2;
class c_KeyEnumerator2;
class c_BackwardsStack;
class c_BackwardsEnumerator;
class c_DecorativeFireTrap;
class c_Switch;
class c_List36;
class c_Node54;
class c_HeadNode36;
class c_ControllerPopUp;
class c_GuiComponent;
class c_TextLabel;
class c_OptionList;
class c_ControllerPostGame;
class c_ControllerBossIntro;
class c_ControllerMainMenu;
class c_ISteamApps;
class c_ControllerIntro;
class c_ControllerInputPopup;
class c_Enumerator30;
class c_TextInput;
class c_InputValue;
class c_ControllerPause;
class c_Doppelganger;
class c_List37;
class c_Node55;
class c_HeadNode37;
class c_Enumerator31;
class c_List38;
class c_Node56;
class c_HeadNode38;
class c_Enumerator32;
class c_Enumerator33;
class c_Swarm;
class c_CrystalShards;
class c_Minimap;
class c_List39;
class c_Node57;
class c_HeadNode39;
class c_Enumerator34;
class c_List40;
class c_Node58;
class c_HeadNode40;
class c_List41;
class c_Node59;
class c_HeadNode41;
class c_ConductorBattery;
class c_App : public Object{
	public:
	c_App();
	c_App* m_new();
	int p_OnResize();
	virtual int p_OnCreate();
	virtual int p_OnSuspend();
	virtual int p_OnResume();
	virtual int p_OnUpdate();
	int p_OnLoading();
	virtual int p_OnRender();
	int p_OnClose();
	int p_OnBack();
	void mark();
};
class c_NecroDancerGame : public c_App{
	public:
	c_NecroDancerGame();
	c_NecroDancerGame* m_new();
	static void m_UpdateScreenSize(bool);
	int p_OnCreate();
	int p_OnRender();
	int p_OnResume();
	int p_OnSuspend();
	void p_TestSeededAllZonesMode(int,String);
	int p_OnUpdate();
	void mark();
};
extern c_App* bb_app__app;
class c_GameDelegate : public BBGameDelegate{
	public:
	gxtkGraphics* m__graphics;
	gxtkAudio* m__audio;
	c_InputDevice* m__input;
	c_GameDelegate();
	c_GameDelegate* m_new();
	void StartGame();
	void SuspendGame();
	void ResumeGame();
	void UpdateGame();
	void RenderGame();
	void KeyEvent(int,int);
	void MouseEvent(int,int,Float,Float);
	void TouchEvent(int,int,Float,Float);
	void MotionEvent(int,int,Float,Float,Float);
	void DiscardGraphics();
	void mark();
};
extern c_GameDelegate* bb_app__delegate;
extern BBGame* bb_app__game;
int bbMain();
extern gxtkGraphics* bb_graphics_device;
int bb_graphics_SetGraphicsDevice(gxtkGraphics*);
class c_Image : public Object{
	public:
	gxtkSurface* m_surface;
	int m_width;
	int m_height;
	Array<c_Frame* > m_frames;
	int m_flags;
	Float m_tx;
	Float m_ty;
	c_Image* m_source;
	c_Image();
	static int m_DefaultFlags;
	c_Image* m_new();
	int p_SetHandle(Float,Float);
	int p_ApplyFlags(int);
	c_Image* p_Init(gxtkSurface*,int,int);
	c_Image* p_Init2(gxtkSurface*,int,int,int,int,int,int,c_Image*,int,int,int,int);
	void mark();
};
class c_GraphicsContext : public Object{
	public:
	c_Image* m_defaultFont;
	c_Image* m_font;
	int m_firstChar;
	int m_matrixSp;
	Float m_ix;
	Float m_iy;
	Float m_jx;
	Float m_jy;
	Float m_tx;
	Float m_ty;
	int m_tformed;
	int m_matDirty;
	Float m_color_r;
	Float m_color_g;
	Float m_color_b;
	Float m_alpha;
	int m_blend;
	Float m_scissor_x;
	Float m_scissor_y;
	Float m_scissor_width;
	Float m_scissor_height;
	c_GraphicsContext();
	c_GraphicsContext* m_new();
	void mark();
};
extern c_GraphicsContext* bb_graphics_context;
String bb_data_FixDataPath(String);
class c_Frame : public Object{
	public:
	int m_x;
	int m_y;
	c_Frame();
	c_Frame* m_new(int,int);
	c_Frame* m_new2();
	void mark();
};
c_Image* bb_graphics_LoadImage(String,int,int);
c_Image* bb_graphics_LoadImage2(String,int,int,int,int);
int bb_graphics_SetFont(c_Image*,int);
extern gxtkAudio* bb_audio2_device;
int bb_audio2_SetAudioDevice(gxtkAudio*);
class c_InputDevice : public Object{
	public:
	Array<c_JoyState* > m__joyStates;
	Array<bool > m__keyDown;
	int m__keyHitPut;
	Array<int > m__keyHitQueue;
	Array<int > m__keyHit;
	int m__charGet;
	int m__charPut;
	Array<int > m__charQueue;
	Float m__mouseX;
	Float m__mouseY;
	Array<Float > m__touchX;
	Array<Float > m__touchY;
	Float m__accelX;
	Float m__accelY;
	Float m__accelZ;
	c_InputDevice();
	c_InputDevice* m_new();
	void p_PutKeyHit(int);
	void p_BeginUpdate();
	void p_EndUpdate();
	void p_KeyEvent(int,int);
	void p_MouseEvent(int,int,Float,Float);
	void p_TouchEvent(int,int,Float,Float);
	void p_MotionEvent(int,int,Float,Float,Float);
	int p_KeyHit(int);
	void mark();
};
class c_JoyState : public Object{
	public:
	Array<Float > m_joyx;
	Array<Float > m_joyy;
	Array<Float > m_joyz;
	Array<bool > m_buttons;
	c_JoyState();
	c_JoyState* m_new();
	void mark();
};
extern c_InputDevice* bb_input_device;
int bb_input_SetInputDevice(c_InputDevice*);
extern int bb_app__devWidth;
extern int bb_app__devHeight;
void bb_app_ValidateDeviceWindow(bool);
class c_DisplayMode : public Object{
	public:
	int m__width;
	int m__height;
	c_DisplayMode();
	c_DisplayMode* m_new(int,int);
	c_DisplayMode* m_new2();
	void mark();
};
class c_Map : public Object{
	public:
	c_Node* m_root;
	c_Map();
	c_Map* m_new();
	virtual int p_Compare(int,int)=0;
	c_Node* p_FindNode(int);
	bool p_Contains(int);
	int p_RotateLeft(c_Node*);
	int p_RotateRight(c_Node*);
	int p_InsertFixup(c_Node*);
	bool p_Set(int,c_DisplayMode*);
	bool p_Insert(int,c_DisplayMode*);
	void mark();
};
class c_IntMap : public c_Map{
	public:
	c_IntMap();
	c_IntMap* m_new();
	int p_Compare(int,int);
	void mark();
};
class c_Stack : public Object{
	public:
	Array<c_DisplayMode* > m_data;
	int m_length;
	c_Stack();
	c_Stack* m_new();
	c_Stack* m_new2(Array<c_DisplayMode* >);
	void p_Push(c_DisplayMode*);
	void p_Push2(Array<c_DisplayMode* >,int,int);
	void p_Push3(Array<c_DisplayMode* >,int);
	Array<c_DisplayMode* > p_ToArray();
	void mark();
};
class c_Node : public Object{
	public:
	int m_key;
	c_Node* m_right;
	c_Node* m_left;
	c_DisplayMode* m_value;
	int m_color;
	c_Node* m_parent;
	c_Node();
	c_Node* m_new(int,c_DisplayMode*,int,c_Node*);
	c_Node* m_new2();
	void mark();
};
extern Array<c_DisplayMode* > bb_app__displayModes;
extern c_DisplayMode* bb_app__desktopMode;
int bb_app_DeviceWidth();
int bb_app_DeviceHeight();
void bb_app_EnumDisplayModes();
extern gxtkGraphics* bb_graphics_renderDevice;
int bb_graphics_SetMatrix(Float,Float,Float,Float,Float,Float);
int bb_graphics_SetMatrix2(Array<Float >);
int bb_graphics_SetColor(Float,Float,Float);
int bb_graphics_SetAlpha(Float);
int bb_graphics_SetBlend(int);
int bb_graphics_SetScissor(Float,Float,Float,Float);
int bb_graphics_BeginRender();
int bb_graphics_EndRender();
class c_BBGameEvent : public Object{
	public:
	c_BBGameEvent();
	void mark();
};
void bb_app_EndApp();
class c_Util : public Object{
	public:
	c_Util();
	static String m_GetVersionString();
	static String m_StringLeft(String,int);
	static void m_SetAppFolder();
	static bool m_IsCharacterActive(int);
	static int m_storedSeed;
	static Float m_RndFloatRange(Float,Float,bool);
	static int m_RndIntRange(int,int,bool,int);
	static int m_RndIntRangeFromZero(int,bool);
	static bool m_RndBool(bool);
	static int m_ParseTextSeed(String);
	static int m_SeedRnd(int);
	static void m_AddMetric(String,String,bool,bool,bool);
	static int m_GetDistSq(int,int,int,int);
	static Float m_GetDist(int,int,int,int);
	static bool m_AreAriaOrCodaActive();
	static Float m_GetDistFromClosestPlayer(int,int,bool);
	static bool m_IsGlobalCollisionAt(int,int,bool,bool,bool,bool,bool);
	static bool m_IsGlobalCollisionAt2(int,int,bool,bool,bool,bool);
	static bool m_IsAnyPlayerAt(int,int);
	static bool m_IsWeaponlessCharacterActive();
	static c_Point* m_GetPointFromDir(int);
	static int m_GetL1Dist(int,int,int,int);
	static bool m_IsBomblessCharacterActive();
	static String m_DirToString(int);
	static String m_GetTimeStringFromMilliseconds(int,bool,bool);
	static bool m_IncrementSteamStat(String,bool,bool,bool,bool);
	static bool m_SetSteamIntStat(String,int,bool,bool,bool);
	static c_Point* m_FindClosestTrulyUnoccupiedSpace(int,int,bool);
	static void m_GetLeaderboardScores(int,int,int,String,bool,bool,bool);
	static Float m_GetDistSqFromObject(int,int,c_RenderableObject*);
	static bool m_IsOnScreen(int,int,Float,Float);
	static bool m_LineSegmentTileIntersect(Float,Float,Float,Float,Float,Float);
	static c_Player* m_GetAnyPlayerAt(int,int);
	static c_List39* m_GetPlayersAt(c_Rect*);
	static c_List39* m_GetPlayersAt2(int,int);
	void mark();
};
class c_TextLog : public Object{
	public:
	c_TextLog();
	static void m_Message(String);
	void mark();
};
class c_GameData : public Object{
	public:
	c_GameData();
	static bool m_GetDebugLogging();
	static bool m_modGamedataChanges;
	static String m_activeMod;
	static bool m_gameDataLoaded;
	static void m_LoadGameDataXML(bool);
	static void m_SetCharUnlocked(int,bool);
	static void m_SetMentorLevelClear(int);
	static bool m_GetEnableCutscenes();
	static int m_GetAlternateSkin(int);
	static bool m_GetUseChoral();
	static int m_GetPlayerHealthMax();
	static void m_SetPlayerCoins(int);
	static void m_SetPlayerDiamonds(int);
	static bool m_GetTutorialComplete();
	static int m_GetDefaultCharacter();
	static bool m_GetDLCPlayed();
	static bool m_GetZone2Unlocked(int);
	static void m_SetDLCPlayed();
	static int m_GetPlayerDiamonds();
	static bool m_IsCharUnlocked(int);
	static void m_Save();
	static bool m_GetLobbyMove();
	static int m_GetNumPendingSpawnItems();
	static bool m_GetDaoustVocals();
	static bool m_GetNPCUnlock(String);
	static bool m_HasFoughtDeadRinger();
	static void m_SetFoughtDeadRinger();
	static bool m_GetItemUnlocked(String,bool);
	static int m_GetPendingSpawnItem(int);
	static void m_RemovePendingSpawnItem(String);
	static void m_SetHavePlayedHardcore(bool);
	static bool m_HasFoughtNecrodancer();
	static void m_SetFoughtNecrodancer();
	static bool m_GetZone2UnlockedCurrentCharacters();
	static void m_SetZone2UnlockedCurrentCharacters();
	static bool m_GetZone3UnlockedCurrentCharacters();
	static void m_SetZone3UnlockedCurrentCharacters();
	static bool m_GetZone4UnlockedCurrentCharacters();
	static void m_SetZone4UnlockedCurrentCharacters();
	static bool m_GetZone1UnlockedCurrentCharacters();
	static void m_SetZone1UnlockedCurrentCharacters();
	static String m_GetDiamondDealerItems();
	static void m_EraseDiamondDealerItems();
	static bool m_GetEnableBossIntros();
	static bool m_LoadPlayerDataXML(bool);
	static int m_GetDefaultMod();
	static bool m_GetShownNocturnaIntro();
	static void m_SetShownNocturnaIntro(bool);
	static bool m_GetVSync();
	static bool m_GetFullscreen();
	static int m_GetResolutionW();
	static int m_GetResolutionH();
	static bool m_GetShownSeizureWarning();
	static void m_SetLobbyMove(bool);
	static void m_SetShowHints(int);
	static int m_GetShowHints();
	static bool m_GetShowDiamondReminder();
	static bool m_GetHavePlayedHardcore();
	static void m_SetHardModeComplete();
	static bool m_GetStoryModeComplete();
	static bool m_GetPhasingModeComplete();
	static bool m_GetMysteryModeComplete();
	static bool m_GetRandomizerModeComplete();
	static bool m_GetHardModeComplete();
	static bool m_GetNoReturnModeComplete();
	static void m_SetNoReturnModeComplete();
	static void m_SetPhasingModeComplete();
	static void m_SetRandomizerModeComplete();
	static void m_SetMysteryModeComplete();
	static void m_SetStoryModeComplete();
	static void m_SetTutorialComplete();
	static int m_GetKeyBinding(int,int);
	static void m_SetKilledEnemy(String,int,bool);
	void mark();
};
class c_Logger : public Object{
	public:
	c_FileStream* m_fs;
	c_Logger();
	void p_Write(String,int);
	void p_WriteLine(String,int);
	void p_WriteLine2(String);
	void p_WriteLine3();
	c_Logger* m_new();
	void p_TraceNotImplemented(String);
	void p_Log(String);
	void p_Assert(bool,String);
	void mark();
};
class c_Stream : public Object{
	public:
	c_Stream();
	c_Stream* m_new();
	virtual int p_Write2(c_DataBuffer*,int,int)=0;
	void p_WriteError();
	void p_WriteAll(c_DataBuffer*,int,int);
	void p_WriteString(String,String);
	void mark();
};
class c_FileStream : public c_Stream{
	public:
	BBFileStream* m__stream;
	c_FileStream();
	static BBFileStream* m_OpenStream(String,String);
	c_FileStream* m_new(String,String);
	c_FileStream* m_new2(BBFileStream*);
	c_FileStream* m_new3();
	static c_FileStream* m_Open(String,String);
	int p_Write2(c_DataBuffer*,int,int);
	void mark();
};
class c_LogLevel : public Object{
	public:
	c_LogLevel();
	void mark();
};
class c_DataBuffer : public BBDataBuffer{
	public:
	c_DataBuffer();
	c_DataBuffer* m_new(int,bool);
	c_DataBuffer* m_new2();
	void p_PokeBytes(int,Array<int >,int,int);
	int p_PokeString(int,String,String);
	void mark();
};
class c_StreamError : public ThrowableObject{
	public:
	c_Stream* m__stream;
	c_StreamError();
	c_StreamError* m_new(c_Stream*);
	c_StreamError* m_new2();
	void mark();
};
class c_StreamWriteError : public c_StreamError{
	public:
	c_StreamWriteError();
	c_StreamWriteError* m_new(c_Stream*);
	c_StreamWriteError* m_new2();
	void mark();
};
extern c_Logger* bb_logger_Debug;
extern bool bb_necrodancergame_DEBUG_LOG_OUTPUT;
extern String bb_textlog_logTimestamp;
void bb_app_GetDate(Array<int >);
Array<int > bb_app_GetDate2();
String bb_textlog_GetTimeString(bool);
String bb_filesystem_FixPath(String);
bool bb_filesystem_CreateDir(String);
String bb_textlog_GetMonthString(int,bool);
String bb_textlog_GetDateString(bool);
void bb_textlog_ForceMessageGlobal(String,bool);
void bb_textlog_MessageGlobal(String,bool);
int bb_math_Min(int,int);
Float bb_math_Min2(Float,Float);
void bb_steam_SteamInit();
void bb_fmod_StartFMOD();
extern int bb_necrodancergame_FRAMES_PER_SEC;
extern int bb_app__updateRate;
void bb_app_SetUpdateRate(int);
extern Float bb_necrodancergame_GLOBAL_SCALE_FACTOR;
class c_XMLError : public Object{
	public:
	bool m_error;
	String m_message;
	int m_line;
	int m_column;
	int m_offset;
	c_XMLError();
	c_XMLError* m_new();
	void p_Reset();
	void p_Set2(String,int,int,int);
	String p_ToString();
	void mark();
};
String bb_app_LoadString(String);
class c_XMLNode : public Object{
	public:
	String m_fullValue;
	bool m_valid;
	bool m_text;
	String m_nameNormalCase;
	String m_nameLowerCase;
	c_XMLDoc* m_doc;
	c_XMLNode* m_parent;
	c_XMLNode* m_lastChild;
	c_XMLNode* m_nextSibling;
	c_XMLNode* m_previousSibling;
	c_XMLNode* m_firstChild;
	c_List* m_children;
	c_Node2* m_parentListNode;
	String m_path;
	c_List* m_pathList;
	c_Node2* m_pathListNode;
	int m_line;
	int m_column;
	int m_offset;
	c_StringMap2* m_attributes;
	c_XMLNode();
	c_XMLNode* m_new(String,bool);
	c_XMLNode* m_new2();
	c_XMLNode* p_AddText(String);
	void p_SetAttribute(String);
	void p_SetAttribute2(String,bool);
	void p_SetAttribute3(String,int);
	void p_SetAttribute4(String,Float);
	void p_SetAttribute5(String,String);
	c_XMLNode* p_AddChild(String,String,String);
	String p_value();
	void p_RebuildValue();
	void p_ProcessRemovedChild(c_XMLNode*);
	void p_Remove();
	void p_Free();
	void p_ClearText();
	void p_value2(String);
	String p_name();
	void p_name2(String);
	c_XMLNode* p_AddChild2(c_XMLNode*,bool);
	c_XMLNode* p_GetChildAtPath(String);
	c_XMLAttribute* p_GetXMLAttribute(String);
	c_XMLNode* p_GetChildAtPath2(String,String);
	String p_GetAttribute(String);
	bool p_GetAttribute2(String,bool);
	int p_GetAttribute3(String,int);
	Float p_GetAttribute4(String,Float);
	String p_GetAttribute5(String,String);
	c_XMLNode* p_GetChild(bool);
	c_XMLNode* p_GetChild2(String,bool);
	c_XMLNode* p_GetChild3(String,String,bool);
	c_List* p_GetChildren(c_List*,bool);
	c_List* p_GetChildren2(String,c_List*,bool);
	c_List* p_GetChildren3(String,String,c_List*,bool);
	c_List* p_GetChildrenWithAttributes(String,c_List*,bool);
	bool p_HasAttribute(String);
	bool p_HasChildren(bool);
	virtual String p_Export(int);
	void p_Export2(int,c_XMLStringBuffer*,int);
	void p_RemoveChild(c_XMLNode*);
	void mark();
};
class c_XMLDoc : public c_XMLNode{
	public:
	c_XMLNode* m_nullNode;
	String m_version;
	String m_encoding;
	c_StringMap* m_paths;
	c_XMLDoc();
	c_XMLDoc* m_new(String,String,String);
	c_XMLDoc* m_new2();
	String p_Export(int);
	void mark();
};
class c_XMLStringBuffer : public Object{
	public:
	int m_chunk;
	int m_count;
	Array<int > m_data;
	int m_dirty;
	String m_cache;
	c_XMLStringBuffer();
	c_XMLStringBuffer* m_new(int);
	int p_Length();
	int p_Last(int);
	void p_Add(int);
	void p_Add2(String);
	void p_Add3(String,int,int);
	void p_Clear();
	bool p_Trim();
	String p_value();
	void mark();
};
class c_List : public Object{
	public:
	c_Node2* m__head;
	c_List();
	c_List* m_new();
	c_Node2* p_AddLast(c_XMLNode*);
	c_List* m_new2(Array<c_XMLNode* >);
	c_XMLNode* p_RemoveLast();
	bool p_Equals(c_XMLNode*,c_XMLNode*);
	c_Node2* p_FindLast(c_XMLNode*,c_Node2*);
	c_Node2* p_FindLast2(c_XMLNode*);
	void p_RemoveLast2(c_XMLNode*);
	bool p_IsEmpty();
	c_XMLNode* p_Last2();
	c_XMLNode* p_First();
	c_Enumerator3* p_ObjectEnumerator();
	int p_Count();
	int p_Clear();
	void mark();
};
class c_Node2 : public Object{
	public:
	c_Node2* m__succ;
	c_Node2* m__pred;
	c_XMLNode* m__data;
	c_Node2();
	c_Node2* m_new(c_Node2*,c_Node2*,c_XMLNode*);
	c_Node2* m_new2();
	int p_Remove();
	void mark();
};
class c_HeadNode : public c_Node2{
	public:
	c_HeadNode();
	c_HeadNode* m_new();
	void mark();
};
bool bb_xml_XMLHasStringAtOffset(String,String,int);
int bb_xml_XMLFindNextAsc(String,int,int);
int bb_xml_XMLFindStringNotInQuotes(String,String,int);
class c_Map2 : public Object{
	public:
	c_Node3* m_root;
	c_Map2();
	c_Map2* m_new();
	virtual int p_Compare2(String,String)=0;
	int p_RotateLeft2(c_Node3*);
	int p_RotateRight2(c_Node3*);
	int p_InsertFixup2(c_Node3*);
	bool p_Set3(String,c_List*);
	bool p_Insert2(String,c_List*);
	c_Node3* p_FindNode2(String);
	c_List* p_Get(String);
	void mark();
};
class c_StringMap : public c_Map2{
	public:
	c_StringMap();
	c_StringMap* m_new();
	int p_Compare2(String,String);
	void mark();
};
class c_Node3 : public Object{
	public:
	String m_key;
	c_Node3* m_right;
	c_Node3* m_left;
	c_List* m_value;
	int m_color;
	c_Node3* m_parent;
	c_Node3();
	c_Node3* m_new(String,c_List*,int,c_Node3*);
	c_Node3* m_new2();
	void mark();
};
class c_XMLAttributeQuery : public Object{
	public:
	int m_count;
	Array<c_XMLAttributeQueryItem* > m_items;
	int m_chunk;
	c_XMLAttributeQuery();
	c_XMLAttributeQuery* m_new(String);
	c_XMLAttributeQuery* m_new2();
	int p_Length();
	bool p_Test(c_XMLNode*);
	void mark();
};
class c_XMLAttributeQueryItem : public Object{
	public:
	String m_id;
	String m_value;
	bool m_required;
	bool m_special;
	c_XMLAttributeQueryItem();
	c_XMLAttributeQueryItem* m_new(String,String,bool,bool);
	c_XMLAttributeQueryItem* m_new2();
	void mark();
};
class c_XMLAttribute : public Object{
	public:
	String m_idLowercase;
	String m_idNormalCase;
	String m_value;
	c_XMLAttribute();
	c_XMLAttribute* m_new(String,String);
	c_XMLAttribute* m_new2();
	void mark();
};
class c_Map3 : public Object{
	public:
	c_Node4* m_root;
	c_Map3();
	c_Map3* m_new();
	virtual int p_Compare2(String,String)=0;
	c_Node4* p_FindNode2(String);
	c_XMLAttribute* p_Get(String);
	int p_RotateLeft3(c_Node4*);
	int p_RotateRight3(c_Node4*);
	int p_InsertFixup3(c_Node4*);
	bool p_Set4(String,c_XMLAttribute*);
	bool p_Insert3(String,c_XMLAttribute*);
	bool p_IsEmpty();
	c_MapValues* p_Values();
	c_Node4* p_FirstNode();
	c_MapKeys2* p_Keys();
	void mark();
};
class c_StringMap2 : public c_Map3{
	public:
	c_StringMap2();
	c_StringMap2* m_new();
	int p_Compare2(String,String);
	void mark();
};
class c_Node4 : public Object{
	public:
	String m_key;
	c_Node4* m_right;
	c_Node4* m_left;
	c_XMLAttribute* m_value;
	int m_color;
	c_Node4* m_parent;
	c_Node4();
	c_Node4* m_new(String,c_XMLAttribute*,int,c_Node4*);
	c_Node4* m_new2();
	c_Node4* p_NextNode();
	void mark();
};
class c_MapValues : public Object{
	public:
	c_Map3* m_map;
	c_MapValues();
	c_MapValues* m_new(c_Map3*);
	c_MapValues* m_new2();
	c_ValueEnumerator* p_ObjectEnumerator();
	void mark();
};
class c_ValueEnumerator : public Object{
	public:
	c_Node4* m_node;
	c_ValueEnumerator();
	c_ValueEnumerator* m_new(c_Node4*);
	c_ValueEnumerator* m_new2();
	bool p_HasNext();
	c_XMLAttribute* p_NextObject();
	void mark();
};
c_XMLDoc* bb_xml_ParseXML(String,c_XMLError*,int);
extern c_XMLDoc* bb_necrodancergame_xmlData;
class c_GuiContainer : public Object{
	public:
	c_GuiContainer();
	c_GuiContainer* m_new();
	void mark();
};
class c_Controller : public c_GuiContainer{
	public:
	c_Controller* m_parent;
	c_Controller();
	static c_Controller* m_currentController;
	c_Controller* m_new();
	virtual void p_RegainFocus()=0;
	static void m_GiveFocus(c_Controller*);
	virtual void p_Update()=0;
	bool p_HasFocus();
	void mark();
};
class c_ControllerGame : public c_Controller{
	public:
	bool m_specialScoreSubmit;
	int m_coinVal;
	int m_timeVal;
	c_TextSprite* m_restartImage;
	c_TextSprite* m_scoresImage;
	c_TextSprite* m_scoresImage2;
	c_TextSprite* m_songEndedImage;
	c_TextSprite* m_songEndedImage2;
	c_Bouncer* m_restartBounce;
	c_TextSprite* m_replayInstructions;
	bool m_ignoreInput;
	int m_pendingScores;
	c_ControllerGame();
	void p_ResetPostDeathReplay();
	c_ControllerGame* m_new();
	void p_RegainFocus();
	void p_Update();
	void mark();
};
int bb_app_Millisecs();
extern int bb_controller_game_totalPlaytimeLastAdded;
extern c_ControllerGame* bb_controller_game_controllerGamePointer;
class c_Tweenable : public Object{
	public:
	Float m_alphaTweenCurrentStep;
	int m_alphaTweenDuration;
	Float m_alphaTweenInitial;
	Float m_alphaTweenFinal;
	c_Tweenable();
	c_Tweenable* m_new();
	void p_SetAlphaTween(Float,Float,int);
	int p_GetTweenDurationRemaining();
	virtual void p_SetCutoffY(int);
	void mark();
};
class c_Sprite : public c_Tweenable{
	public:
	bool m_zSet;
	Float m_z;
	bool m_inWorld;
	Float m_zOff;
	bool m_cutoffYSet;
	Float m_alpha;
	bool m_flipX;
	bool m_flipXWithOffset;
	Float m_renderX;
	Float m_renderLastX;
	Float m_renderY;
	Float m_renderLastY;
	c_Sprite();
	static bool m_scaleToFitScreen;
	c_Sprite* m_new(String,int,int,int,int);
	c_Sprite* m_new2(String,int,int);
	c_Sprite* m_new3(c_Image*);
	c_Sprite* m_new4();
	void p_SetZ(Float);
	void p_InWorld(bool);
	void p_SetZOff(Float);
	void p_SetHandle2(int,int);
	int p_Width();
	int p_Height();
	void p_UnsetCutoffY();
	void p_DiscardTempImage();
	void p_SetFrame(int);
	void p_SetAlphaValue(Float);
	void p_FlipX(bool,bool);
	void p_SetAlphaTweenFromCurrent(Float,int);
	void p_UnSetZ();
	Float p_GetAlphaValue();
	void p_SetScale(Float);
	void p_SetCutoffY(int);
	int p_GetFrame();
	int p_GetNumFrames();
	void mark();
};
extern Array<int > bb_controller_game_lastPlayerMoveBeat;
class c_GUI_gameplay : public Object{
	public:
	c_GUI_gameplay();
	static c_Sprite* m_errorKey;
	void mark();
};
class c_Input : public Object{
	public:
	c_Input();
	static Array<bool > m_stickLeft;
	static Array<bool > m_stickRight;
	static Array<bool > m_stickUp;
	static Array<bool > m_stickDown;
	static Array<Float > m_lastJoyX;
	static Array<Float > m_lastJoyY;
	static Array<bool > m_stickLeft2;
	static Array<bool > m_stickRight2;
	static Array<bool > m_stickUp2;
	static Array<bool > m_stickDown2;
	static Array<Float > m_lastJoyX2;
	static Array<Float > m_lastJoyY2;
	static Array<int > m_movementBuffer;
	static Array<int > m_movementBufferFrame;
	static Array<int > m_offbeatMovementBuffer;
	static Array<int > m_offbeatMovementBufferFrame;
	static Array<int > m_lastBeatMovedOn;
	static Array<int > m_lastOffbeatMovedOn;
	static Array<int > m_lastBeatMissed;
	static Array<int > m_punishmentBeatToSkip;
	static Array<int > m_punishmentBeatToSkipQueue;
	static Array<bool > m_keysHitLastFrame;
	static Array<bool > m_keysHit2FramesAgo;
	static void m_Init();
	static int m_lastBeatSkippedFlyaway;
	static void m_ResetMovementCounters();
	static c_ControllerPopUp* m_popUpController;
	static int m_popupFrame;
	static void m_Update();
	static bool m_GameUpdate();
	static bool m_IsRedefined(int);
	static int m_KeyWasHit(int);
	static void m_UpdateKeysHit();
	void mark();
};
extern bool bb_controller_game_gamePaused;
class c_Character : public Object{
	public:
	c_Character();
	void mark();
};
class c_Spells : public Object{
	public:
	c_Spells();
	static c_StringMap3* m_spellCoolKills;
	static Array<c_Sprite* > m_fireballInWorld;
	static c_Sprite* m_pulseInWorld;
	static c_Stack2* m_pulseAnim;
	static String m_spellSlot1;
	static String m_spellSlot2;
	static void m_InitLearnedSpells();
	static void m_Init();
	void mark();
};
class c_Map4 : public Object{
	public:
	c_Node17* m_root;
	c_Map4();
	c_Map4* m_new();
	int p_Clear();
	virtual int p_Compare2(String,String)=0;
	c_Node17* p_FindNode2(String);
	bool p_Contains2(String);
	int p_Get(String);
	bool p_Update2(String,int);
	int p_RotateLeft4(c_Node17*);
	int p_RotateRight4(c_Node17*);
	int p_InsertFixup4(c_Node17*);
	bool p_Set5(String,int);
	bool p_Insert4(String,int);
	void mark();
};
class c_StringMap3 : public c_Map4{
	public:
	c_StringMap3();
	c_StringMap3* m_new();
	int p_Compare2(String,String);
	void mark();
};
class c_Stack2 : public Object{
	public:
	Array<int > m_data;
	int m_length;
	c_Stack2();
	c_Stack2* m_new();
	c_Stack2* m_new2(Array<int >);
	static int m_NIL;
	void p_Clear();
	void p_Push4(int);
	void p_Push5(Array<int >,int,int);
	void p_Push6(Array<int >,int);
	c_Enumerator6* p_ObjectEnumerator();
	void p_Length2(int);
	int p_Length();
	int p_Get2(int);
	void p_Remove2(int);
	void p_Set6(int,int);
	int p_Pop();
	virtual bool p_Equals2(int,int);
	bool p_Contains(int);
	c_BackwardsStack* p_Backwards();
	void mark();
};
class c_SpellType : public Object{
	public:
	c_SpellType();
	void mark();
};
class c_LevelType : public Object{
	public:
	c_LevelType();
	void mark();
};
class c_Level : public Object{
	public:
	c_Level();
	static bool m_outsideBossChamber;
	static bool m_pacifismModeOn;
	static bool m_shopkeeperDead;
	static bool m_shopkeeperFell;
	static int m_placeLordOnLevel;
	static c_IntMap3* m_placeShrineOnLevel;
	static int m_placeTransmogrifierOnDepth;
	static int m_placeTransmogrifierOnLevel;
	static int m_placeArenaOnLevel;
	static int m_placeArenaOnDepth;
	static bool m_placedArena;
	static int m_placeGlassShopOnLevel;
	static int m_placeGlassShopOnDepth;
	static int m_placeBloodShopOnLevel;
	static int m_placeBloodShopOnDepth;
	static int m_placeFoodShopOnLevel;
	static int m_placeFoodShopOnDepth;
	static int m_placeConjurerOnLevel;
	static int m_placeConjurerOnDepth;
	static int m_placeShrinerOnLevel;
	static int m_placeShrinerOnDepth;
	static int m_placePawnbrokerOnLevel;
	static int m_placePawnbrokerOnDepth;
	static int m_randSeed;
	static int m_nonDeterministicMSStart;
	static c_RNG* m_wholeRunRNG;
	static c_RNG* m_currentFloorRNG;
	static c_IntSet* m_usedBosses;
	static bool m_isSeededMode;
	static bool m_isHardcoreMode;
	static bool m_isDailyChallenge;
	static bool m_isDDRMode;
	static bool m_isSwarmMode;
	static bool m_isNoReturnMode;
	static bool m_isSoulMode;
	static bool m_isFloorIsLavaMode;
	static bool m_isPhasingMode;
	static bool m_isRandomizerMode;
	static bool m_isMysteryMode;
	static bool m_isReplaying;
	static bool m_isTrainingMode;
	static bool m_isBeastmaster;
	static bool m_playedVictoryCutscene;
	static int m_mentorLevel;
	static bool m_isStoryMode;
	static bool m_isDeathlessMode;
	static int m_deathlessWinCount;
	static bool m_isAllCharactersMode;
	static bool m_isAllCharactersDLCMode;
	static int m_continuedRunCoinScore;
	static bool m_lockedShopPlaced;
	static bool m_secretRockRoomPlaced;
	static bool m_isRunNoItemsNoShrines;
	static bool m_placedUrnThisRun;
	static bool m_usedCustomMusic;
	static int m_shopkeeperGhostLevel;
	static int m_shopkeeperGhostDepth;
	static void m_DoRestart_Common(bool,bool);
	static void m_DoRestart();
	static int m_forceBoss;
	static int m_GetMaxDepth();
	static bool m_HaveFinalBoss();
	static bool m_AllCharsAnyComplete();
	static bool m_AllCharsDLCAnyComplete();
	static bool m_isLevelEditor;
	static bool m_isLevelEnding;
	static int m_GetSingleZoneModeFinalBossZone();
	static bool m_creatingMap;
	static c_Replay* m_replay;
	static bool m_IsFinalBossZone();
	static void m_MakeHelper();
	static c_StackEx* m_previousLevelUnkilledStairLockingMinibosses;
	static String m_randSeedString;
	static void m_CreateTutorialMap();
	static void m_CreateCharSelect();
	static void m_CreateBeastmasterZone1();
	static void m_CreateBeastmasterZone2();
	static void m_CreateBeastmasterZone3();
	static void m_CreateBeastmasterZone4();
	static void m_CreateBeastmasterZone5();
	static void m_CreateBossmasterMinibosses();
	static void m_CreateBossmasterBosses();
	static void m_CreateExtraModesSelect();
	static void m_CreateTestMap();
	static void m_CreateLobby();
	static Array<bool > m_allCharsCompletion;
	static bool m_isAllCharsRunNoItemsNoShrines;
	static void m_CreateAllCharsSelect();
	static Array<bool > m_allCharsCompletionDLC;
	static void m_CreateAllCharsDLCSelect();
	static int m_bossNumber;
	static void m_CreateFinalBossBattle3();
	static void m_CreateFinalBossBattle2();
	static c_IntMap7* m_tiles;
	static c_List13* m_minibossFormerWall;
	static c_List14* m_rooms;
	static bool m_addKeyInSecretChest;
	static bool m_startedShrinerFight;
	static c_IntList* m_triggerList;
	static bool m_mapLightValuesInitialized;
	static int m_mapLightValuesCachedFrame;
	static int m_carveX;
	static int m_carveY;
	static bool m_placedAdditionalRedChest;
	static bool m_placedAdditionalWhiteChest;
	static bool m_placedAdditionalBlackChest;
	static bool m_flawlessVictory;
	static bool m_wasMinibossLockedInBattle;
	static c_Transmogrifier* m_transmogrifier;
	static c_Conjurer* m_conjurer;
	static c_Shriner* m_shriner;
	static c_Pawnbroker* m_pawnbroker;
	static bool m_enemiesDropSingleCoinForThisLevel;
	static c_RoomData* m_firstRoom;
	static int m_levelConstraintX;
	static int m_levelConstraintY;
	static int m_levelConstraintW;
	static int m_levelConstraintH;
	static int m_levelConstraintNum;
	static c_ExitMap* m_exits;
	static void m_DeleteMap();
	static bool m_isAnyTar;
	static bool m_isConductorLevel;
	static bool m_levelJustStarted;
	static void m_InitNewMap(bool);
	static void m_DisableLevelConstraints();
	static void m__CreateWalls(c_List18*,int,int,int,int,int);
	static void m__CreateFloor(c_List18*,int,int,int,int,int);
	static int m_shopX;
	static int m_shopY;
	static int m_shopW;
	static int m_shopH;
	static c_Tile* m_GetTileAt(int,int);
	static int m_GetTileTypeAt(int,int);
	static Float m_zone3DividingLineX;
	static Float m_zone3DividingLineY;
	static bool m_IsFinalBoss();
	static bool m_IsWallAt(int,int,bool,bool);
	static bool m_IsWallAt2(int,int);
	static c_IntMap7* m_pendingTiles;
	static c_Tile* m_PlaceTileRemovingExistingTiles(int,int,int,bool,int,bool);
	static c_Tile* m_PlaceTileRemovingExistingTiles2(int,int,int);
	static c_List18* m__CreateRoom(int,int,int,int,int,int,int,int,int,bool,int);
	static int m_lastCreatedRoomType;
	static c_Point* m_GetExitValue(int,int);
	static bool m_IsExit(int,int);
	static void m_DumpMap();
	static bool m_CreateRoom(int,int,int,int,bool,int,int,int,int,int,bool,int,bool,bool);
	static bool m_CreateRoom2(int,int,int,int,bool,int,bool);
	static bool m_CreateRoom3(int,int,int,int,bool,int);
	static void m_EnsureBossTraining(String);
	static void m_AddExit(int,int,int,int);
	static bool m_skipNextPenaltyBox;
	static bool m_WantPenaltyBox();
	static void m_PlaceFirstBossRoom(String,int);
	static void m_PlaceFirstBossRoom2(String);
	static void m_PlaceFirstBossRoom3();
	static void m_SetMagicBarrierAt(int,int,bool);
	static void m_SetMagicBarrier(bool);
	static void m_PaintTriggerInterior(int,int,int,int,int);
	static c_Point* m_GetRandomOffsetPoint();
	static void m_BossMaybeMinibossesAt(int,int,int,int);
	static void m_CreateBossBattle1();
	static void m_ClearMinibossWall();
	static int m_ActivateTrigger(int,c_Entity*,c_RenderableObject*);
	static void m_CreateBossBattle2();
	static void m_CreateBossBattle3();
	static void m_CreateBossBattle4();
	static c_List17* m_charactersJustUnlocked;
	static void m_CreateBossBattle5();
	static void m_FillTiles(c_Rect*,int,int);
	static void m_CreateBossBattle9();
	static void m_CreateBossBattleFrankensteinway();
	static void m_PlacePenaltyBoxEnemies();
	static void m_AddMinibossWall(int,int,int);
	static void m_CreateBossBattle();
	static int m_GetInitialZone();
	static c_StackEx* m_previousLevelMinibosses;
	static bool m_IsFreeLevelForSpecialRoom(int,int);
	static int m_arenaNum;
	static void m_CreateExit(int,int);
	static int m_secretAtX;
	static int m_secretAtY;
	static bool m_IsFloorAt(int,int);
	static bool m_IsFloorAdjacent(int,int);
	static void m_AddCrackedWall(int);
	static int m_specialRoomEntranceX;
	static int m_specialRoomEntranceY;
	static String m_RandomFood();
	static void m_PlaceSecondarySpecialShop(bool,bool);
	static void m_AddSpecialRoom(int,bool);
	static bool m__ReplaceIndestructibleOrphans();
	static void m_CreateIndestructibleBorder();
	static void m_CreateSwarmMap();
	static c_RoomData* m_PlaceFirstRoom();
	static void m_PlaceConnectedWireDoor(c_Point*);
	static bool m_debugForceMonstrousShop;
	static bool m_IsDoorAt(int,int);
	static bool m_IsDoorAdjacent(int,int);
	static void m_PlaceShopItemsAt(int,int,c_Rect*);
	static void m_CreateRoomZone5(c_RoomWithDoor*,int);
	static bool m_IsZone5RoomLegal(c_Rect*);
	static c_RoomWithDoor* m_PlaceRoomZone5(c_PortalSeg*,int,int,int);
	static c_RoomWithDoor* m_PlaceRoomZone52(c_StackEx3*,int,int,int,int);
	static c_RoomWithDoor* m_CreateRoomZone52(c_StackEx3*,int,int,int,int);
	static c_RoomWithDoor* m_CreateRoomZone53(c_StackEx3*,int,int,int);
	static bool m_IsWallAdjacent8(int,int);
	static bool m_IsExitAt(int,int);
	static bool m_PlaceWire(c_Point*,c_Point*);
	static c_Point* m_GetStandardExitCoords();
	static bool m_IsTileTypeAdjacent(int,int,int);
	static c_List26* m_tempTileWalk;
	static void m_RandomWalkOfTempTiles(int,int,int);
	static void m_PadWalls();
	static void m_ProcessSpecialRoom();
	static int m_chestsStillToPlace;
	static bool m_IsSurroundedByDestructibleWalls(int,int);
	static bool m_IsCrackedWallAt(int,int);
	static bool m_IsCrackedWallAdjacent(int,int);
	static c_SecretRoomData* m__CreateSecretRoom(int,int,int,int);
	static void m_PlaceSecretRooms(int);
	static bool m_IsSecretRoom(int);
	static void m_FillVault(c_RoomData*);
	static c_Point* m_GetRandPointInRoomWithOptions(c_RoomBase*,bool,bool,bool,bool,bool,bool);
	static c_Point* m_GetRandPointInRoomWithOptions2(c_RoomBase*,bool,bool,bool);
	static c_Point* m_GetRandPointInRoomWithOptions3(int,int,int,int,bool,bool,bool,bool,bool,bool);
	static c_Point* m_GetRandPointInRoomWithOptions4(int,int,int,int,bool,bool,bool);
	static c_Point* m_GetRandPointInRoomWithOptions5(c_RoomData*,bool,bool,bool);
	static c_Point* m_GetRandPointInRoomWithOptions6(c_RoomData*);
	static int m_GetAppropriateCoins();
	static void m_PutCrateOrBarrel(int,int);
	static bool m_AllowSpirit();
	static void m_MakeInvisibleChestAt(int,int);
	static bool m_FillSecretRoomsZone4();
	static bool m_FillSecretRoomsZone2();
	static bool m_MaybeForbidTrapdoor();
	static bool m_FillSecretRoomsZone1();
	static bool m_FillSecretRooms();
	static bool m__FailMap();
	static void m_AddStone();
	static bool m_IsCorridorFloorOrDoorAdjacent(int,int);
	static c_Trap* m_PlaceTrapInRoom(int,int,int,int,int,int,c_Trap*);
	static c_Trap* m_PlaceTrapInRoom2(int,int,int,int,int,int);
	static c_Trap* m_PlaceTrapInRoom3(c_RoomData*,int,int);
	static c_Trap* m_PlaceTrapInRoom4(c_RoomData*,int);
	static void m_PlaceTrapZone5(int,int,int,int);
	static void m_PlaceTrapsZone5();
	static void m_PlaceTrapZone4(int,int,int,int);
	static void m_PlaceTrapsZone4();
	static void m_PlaceTrapZone3(int,int,int,int);
	static void m_PlaceTrapsZone3();
	static void m_PlaceTrapsZone2();
	static void m_PlaceTrapsZone1();
	static void m_PlaceTraps();
	static c_BlobRoom* m_hallwayZone5;
	static bool m_isHardMode;
	static c_XMLDoc* m_GetHardModeXML();
	static c_Enemy* m_PlaceMinibossOfShapeAt(int,int,int);
	static void m_PlaceAppropriateMinibosses(c_RoomBase*);
	static void m_PlaceShopkeeperGhostIfNeededAt(int,int);
	static void m_PlaceExitRoomMiniboss(c_RoomBase*);
	static int m_GetZone3ElementalType(int,int);
	static int m_GetZone3YetiHellhoundType(int,int);
	static int m_GetZone3BeetleType(int,int);
	static void m_PlaceRareEnemies(c_RoomBase*,bool);
	static c_Point* m_GetRandPointInRoomOfTileType(c_RoomBase*,int,bool);
	static c_Point* m_GetRandPointInRoomOfTileType2(int,int,int,int,int,bool);
	static int m_GetHardModeExtraEnemies();
	static int m_GetExtraEnemiesBase();
	static void m_PutVariedEnemiesZone5(c_StackEx2*);
	static void m_PutEnemyZone5(int,int);
	static void m_PutRoomEnemiesZone5(c_RoomBase*,bool);
	static void m_PlaceEnemiesZone5();
	static bool m_IsWaterOrTarAt(int,int);
	static c_Gargoyle* m_PlaceGargoyle(int,int,int);
	static c_Gargoyle* m_PlaceGargoyle2(int,int);
	static void m_PlaceEnemiesZone4();
	static c_Enemy* m_PlaceZone3Cauldron(int,int);
	static bool m_IsInZone3Hot(int,int);
	static c_Enemy* m_PlaceZone3YetiHellhound(int,int);
	static c_Enemy* m_PlaceZone3Elemental(int,int);
	static c_Enemy* m_PlaceZone3Slime(int,int);
	static c_Enemy* m_PlaceZone3Beetle(int,int);
	static void m_PlaceEnemiesZone3();
	static void m_PlaceEnemiesZone2();
	static void m_PlaceEnemiesZone1();
	static void m_PlaceEnemies();
	static c_Point* m_FindTileOfType(int,bool);
	static c_Point* m_FindTileOfType2(int);
	static Float m_GetDistanceToNearestTorch(c_RenderableObject*);
	static void m_PlaceTorchesAnywhere();
	static void m_PlaceCrateOrBarrel();
	static bool m_DoWePlaceAdditionalChestThisLevel();
	static bool m_PlaceAdditionalChestAt(int,int);
	static void m_PlaceZoneAppropriateNumberOfDiamondsAt(int,int);
	static void m_PlaceChests(bool);
	static void m_PlaceResourceWall();
	static void m_PlaceLockedChests();
	static c_Point* m_GetShrinePoint();
	static void m_PlaceShrine();
	static bool m_CreateMapZone5(bool);
	static bool m_IsTileEmpty(int,int);
	static void m_CarveCorridorTile(int,int,bool,bool,bool,int,bool);
	static c_RoomData* m_PlaceRoomZone4(int);
	static void m_AddHarderStone();
	static void m_CheckMapConsistency();
	static void m_PlaceNocturnaArea();
	static bool m_CreateMapZone4(bool);
	static bool m_CarveNewCorridor(int,int,bool,bool,bool,int,bool);
	static c_RoomData* m_PlaceRoomZone3(int,c_RoomData*);
	static c_RoomData* m_PlaceRoomZone32(c_RoomData*);
	static bool m_PlaceExit(c_RoomData*);
	static void m_RemoveSomeWallsAwayFromCorridors(Float,bool,int);
	static void m_WidenCorridors();
	static bool m_IsTrapOrExitAbove(int,int);
	static void m_AddSomePillarsInOpenSpace();
	static c_Point* m_GetRandomWallInRoom(int,int,int,int);
	static bool m_CreateMapZone3();
	static c_RoomData* m_PlaceRoomZone2(int,c_RoomData*);
	static c_RoomData* m_PlaceRoomZone22(c_RoomData*);
	static bool m_CreateMapZone2();
	static c_RoomData* m__PlaceRoom(int,int,int,int);
	static c_RoomData* m_PlaceRoomZone1(int,c_RoomData*);
	static c_RoomData* m_PlaceRoomZone12(c_RoomData*);
	static bool m_CreateMapZone1();
	static bool m_IsPassable();
	static bool m_CreateMap(c_LevelObject*);
	static void m_ResetCustomLevel(bool,int);
	static c_Stack2* m_zoneOrder;
	static void m_GenerateHardcoreZoneOrder();
	static bool m_quickRestart;
	static void m_CreateFinalBossBattleConductor();
	static void m_UnlockChar(int);
	static void m_CreateFinalBossBattle();
	static String m_justUnlocked;
	static bool m_AllCharsAllComplete();
	static bool m_AllCharsDLCAllComplete();
	static c_ControllerPopUp* m_popUpController;
	static int m_popUpType;
	static void m_DoQuickRestart(bool,bool,bool);
	static int m_practiceEnemyNum;
	static void m_CreateTrainingMap();
	static String m_todaysRandSeedString;
	static void m_RecalcLevelBoundaries();
	static void m_LoadLevelSong(c_LevelObject*);
	static void m_NewLevel(int,int,int,bool,c_LevelObject*,bool);
	static int m_lastTileCount;
	static c_IntPointList* m_tileObstructionList;
	static c_List26* m_GetTileObstructionList(bool);
	static bool m_CheckLOS(int,int,int,int,bool);
	static void m_RefreshLineOfSightTiles();
	static bool m_IsLockedExit(int,int);
	static String m_GetTileFlyawayAt(int,int);
	static bool m_IsSeededMode2(int);
	static void m_TakeActionAfterAllCharsScoreSubmit();
	static void m_Update();
	static c_Minimap* m_minimap;
	static bool m_IsVisibleTileAt(int,int);
	static void m_RemoveExit(int,int);
	static int m_maxLevelX;
	static int m_minLevelX;
	static int m_maxLevelY;
	static int m_minLevelY;
	static Array<Float > m_mapLightValues;
	static Array<Float > m_constMapLightValues;
	static Float m_ActuallyGetMapTileLightValue(int,int,bool);
	static Float m_GetMapTileLightValue(int,int,bool);
	static void m_PlaceHotCoalTileAt(int,int);
	static void m_PlaceIceTileAt(int,int);
	static void m_PlaceTileTypeAt(int,int,int);
	static void m_DryUpAllWater(int);
	void mark();
};
class c_LevelObject : public Object{
	public:
	int m_bossNum;
	c_List24* m_tiles;
	c_List25* m_traps;
	c_List29* m_enemies;
	c_List30* m_items;
	c_List31* m_chests;
	c_List34* m_crates;
	c_List35* m_shrines;
	c_LevelObject();
	void p_CreateMap();
	void mark();
};
extern int bb_controller_game_currentLevel;
extern int bb_controller_game_currentZone;
extern int bb_controller_game_currentDepth;
class c_RenderableObject : public Object{
	public:
	bool m_perished;
	bool m_dead;
	int m_x;
	int m_y;
	int m_lastFrameX;
	int m_lastFrameY;
	bool m_isMobile;
	bool m_isFamiliar;
	bool m_isPlayer;
	Float m_constLightSourceMax;
	bool m_lightSource;
	Float m_lightSourceMin;
	Float m_lightSourceMax;
	bool m_collides;
	bool m_isEnemy;
	Float m_lightSourceBrightness;
	bool m_isTrap;
	bool m_isItem;
	bool m_isCrate;
	bool m_isNPC;
	bool m_playerOverrideCollide;
	int m_width;
	int m_height;
	bool m_isChest;
	bool m_clampedOn;
	c_RenderableObject();
	static c_List2* m_renderableObjectList;
	static c_List2* m_lightSourceList;
	virtual void p_Die();
	c_RenderableObject* m_new();
	void p_ActivateLight(Float,Float);
	c_Point* p_GetLocation();
	static bool m_deletingAll;
	static void m_DeleteAll(bool);
	bool p_IsOnTile(int,int);
	virtual void p_Update();
	virtual bool p_IsFrozen(bool);
	bool p_IsOnScreen();
	virtual bool p_Hit(String,int,int,c_Entity*,bool,int)=0;
	static void m_UpdateAll();
	static bool m_HitTile(String,int,int,int,int,c_Entity*,bool,bool,bool,bool,bool);
	void mark();
};
class c_Entity : public c_RenderableObject{
	public:
	c_ParticleSystem* m_confusedParticles;
	c_Sprite* m_image;
	c_Sprite* m_shadow;
	Float m_xOff;
	Float m_yOff;
	int m_entityNum;
	int m_lastX;
	int m_lastY;
	bool m_hasSilhouette;
	c_Bouncer* m_bounce;
	c_Sprite* m_frozenImage;
	c_Sprite* m_frozenStoneImage;
	int m_coinsToDrop;
	bool m_falling;
	int m_confusedUntil;
	bool m_floating;
	int m_level;
	String m_xmlName;
	String m_friendlyName;
	int m_damagePerHit;
	bool m_ignoreWalls;
	bool m_frozenPermanently;
	bool m_hasBeenVisible;
	String m_overrideAttackSound;
	bool m_isGentle;
	bool m_flaggedForDeath;
	bool m_isMysteried;
	int m_shadowYOff;
	bool m_invisible;
	bool m_isWraithLike;
	bool m_canMoveOntoPlayer;
	int m_flaggedForDeathCounter;
	int m_frozenDuration;
	int m_flickerTimer;
	int m_flickerCurrentTimer;
	bool m_flickerHide;
	bool m_wasTeleported;
	int m_waterOffset;
	c_Entity();
	static c_List3* m_entityList;
	static c_List3* m_deadEntityList;
	static void m_RemoveFromList(c_Entity*);
	void p_Die();
	static void m_RemoveAnyPerishedEntities();
	static int m_entityCount;
	c_Entity* m_new();
	void p_FlagForDeath(int);
	static c_Entity* m_GetEntityAt(int,int,bool);
	static int m_anyPlayerHaveCircletCachedFrame;
	static int m_anyPlayerHaveGlassTorchCachedFrame;
	static int m_anyPlayerHaveForesightTorchCachedFrame;
	static int m_anyPlayerHaveWallsTorchCachedFrame;
	static int m_anyPlayerHaveNazarCharmCachedFrame;
	virtual void p_CancelTween();
	bool p_IsFrozen(bool);
	bool p_IsInAnyPlayerLineOfSight();
	void p_Update();
	void p_BounceToward(c_Point*,bool);
	static void m_UpdateVisibility();
	virtual bool p_IsVisible();
	static bool m_anyPlayerHaveWallsTorchCached;
	static bool m_AnyPlayerHaveWallsTorch();
	void mark();
};
class c_MobileEntity : public c_Entity{
	public:
	int m_moveShadowTween;
	int m_moveTween;
	bool m_isMassive;
	bool m_ignoreLiquids;
	bool m_gotOutOfTar;
	bool m_wasInWater;
	bool m_wasInDeepWater;
	bool m_wasInTar;
	int m_slidingDir;
	bool m_wasKnockedBack;
	c_MobileEntity();
	c_MobileEntity* m_new();
	bool p_IsStandingStill();
	void p_Update();
	bool p_IsSlidingOnIce();
	void mark();
};
class c_Player : public c_MobileEntity{
	public:
	bool m_isHelper;
	c_List4* m_familiars;
	c_Familiar* m_lambFamiliar;
	int m_characterID;
	bool m_UsingDorianAltSkin;
	bool m_UsingMelodyAltSkin;
	bool m_UsingDoveAltSkin;
	bool m_UsingCodaAltSkin;
	bool m_UsingEliAltSkin;
	bool m_UsingAltSkin;
	c_Sprite* m_headImage;
	c_Sprite* m_headImageForHUD;
	c_StringMap4* m_ownedItems;
	c_StringMap5* m_cursedSlots;
	c_StringSet* m_mysterySlots;
	c_ItemList* m_miscItems;
	c_StringMap3* m_itemQuantity;
	c_Weapon* m_weapon;
	int m_armorAmount;
	String m_armorType;
	String m_torchType;
	bool m_hasPickedUpWonderThisRun;
	bool m_hasPickedUpBlastHelmThisRun;
	bool m_hasPickedUpGrenadeCharmThisRun;
	bool m_batFormActive;
	c_PlayerHealth* m_health;
	int m_playerID;
	int m_playerTempNum;
	bool m_hudSlotInitialized;
	int m_numHudSlots;
	Array<c_Sprite* > m_hudSlot;
	int m_numHudSlotsIncludingActionAndSpells;
	Array<c_Point2* > m_hudSlotOff;
	Array<bool > m_hudSlotOffFlyFromPlayer;
	c_StringMap7* m_shovelImages;
	c_TextSprite* m_tempoHeartText;
	c_Sprite* m_hudSlotAction1;
	c_Sprite* m_hudSlotAction2;
	c_Sprite* m_hudSlotAction2Empty;
	c_Sprite* m_hudSlotWeapon2;
	c_Sprite* m_hudSlotWeapon2Empty;
	c_Sprite* m_hudSlotWeaponReload;
	c_Sprite* m_hudSlotWeaponThrow;
	c_Sprite* m_hudSlotWeaponThrow2;
	c_Sprite* m_hudSlotBoots;
	c_Sprite* m_hudSlotBoots2;
	c_Sprite* m_hudSlotBoots3;
	c_Sprite* m_hudSlotBomb;
	c_Sprite* m_hudSlotSpell1;
	c_Sprite* m_hudSlotSpell2;
	c_Sprite* m_hudDiamondForFlying;
	c_Sprite* m_mysteryWeaponImage;
	c_Sprite* m_mysteryRingImage;
	c_Bouncer* m_wobbler;
	c_Sprite* m_shieldImageBack;
	c_Sprite* m_shieldImageFront;
	int m_lordCrownActiveBeat;
	int m_shieldActiveBeat;
	c_Player* m_helper;
	int m_numBombs;
	int m_lastMoveOntoPlayerInCoopModeBeat;
	bool m_immobilized;
	int m_lastIceSlideBeat;
	int m_lambDeathBeat;
	int m_tempoBeatsLeft;
	int m_queuedMoveBeat;
	c_EnemyClamper* m_clampedEnemy;
	int m_paceBeat;
	bool m_temporaryMapSight;
	int m_minVisibilityCachedFrame;
	Float m_minVisibilityCached;
	int m_lastLOSX;
	int m_lastLOSY;
	c_ControllerPopUp* m_popUpController;
	int m_warnState;
	c_ControllerPopUp* m_hintsController;
	c_ControllerInputPopup* m_seedController;
	int m_lastHitBeat;
	int m_lastKillBeat;
	int m_crownOfGreedBeat;
	int m_lastWarDrumBeat;
	int m_lastBloodDrumBeat;
	int m_coinPickupBeat;
	int m_courageRingBeat;
	int m_courageShovelBeat;
	bool m_queuedMove;
	int m_queuedMoveX;
	int m_queuedMoveY;
	int m_lastMove;
	int m_moveLastBeat;
	int m_lastBeatX;
	int m_lastBeatY;
	bool m_wasShrunk;
	c_Weapon* m_batWeapon;
	bool m_conductorWireActive;
	int m_electricityCounter;
	bool m_playedExitErrorSound;
	c_EnemyClamper* m_lastClampedEnemy;
	int m_warDrumBeats;
	int m_bloodDrumBeats;
	int m_heartTransplantTime;
	bool m_readyToThrow;
	bool m_wasClamped;
	c_Player();
	static int m_numCoins;
	static int m_coinXOR;
	static void m_SetCoinXOR();
	static int m_sessionMaxCoins;
	static void m_SetCoins(int,bool);
	void p_ClearAllFamiliars(bool);
	void p_Die();
	static c_Sprite* m_MakeBodyImage(int,String,int);
	static c_Sprite* m_MakeHeadImage(int,String,int);
	void p_LoadImages();
	String p_GetItemInSlot(String,bool);
	bool p_HasItemOfType(String,bool);
	void p_UpdateBonusHeart();
	void p_EmptyAllSlots(bool);
	void p_AddItemOfType(String,c_Item*,bool,bool);
	void p_SetSlotCursed(String,bool);
	void p_GiveInitialEquipment(bool);
	void p_SetCharacter(int);
	static int m_numDiamonds;
	bool p_Perished();
	static int m_playerTempCount;
	static c_Sprite* m_hudCoins;
	static c_Sprite* m_hudDiamonds;
	static int m_heartsLoaded;
	static c_Sprite* m_heart;
	static c_Sprite* m_heartEmpty;
	static c_Sprite* m_heartHalf;
	static c_Sprite* m_cursedHeart;
	static c_Sprite* m_cursedHeartEmpty;
	static c_Sprite* m_cursedHeartHalf;
	c_Player* m_new(int,int);
	c_Player* m_new2();
	void p_WarpFamiliars();
	void p_SetTotallyBlank();
	static int m_NumEnabledCharacters();
	void p_StopFalling();
	void p_CheckConductorWire();
	void p_CheckFloating();
	void p_ResetStateAfterLevel();
	static bool m_DoesAnyPlayerHaveItemOfType(String,bool);
	static void m_PlayVOPlayer1(String);
	bool p_IsWeaponlessCharacter();
	bool p_IsBomblessCharacter();
	static bool m_DoesPlayer1HaveItemOfType(String);
	bool p_IsSlotCursed(String);
	void p_EmptySlot(String);
	void p_CancelTween();
	void p_Heal(int,bool,bool,bool);
	int p_GetTorchLevel();
	int p_CalcMinVisibility();
	Float p_GetMinVisibility();
	void p_ImmediatelyMoveTo(int,int,bool,bool,bool,bool,bool);
	static bool m_CheckCoinXOR();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_ProcessMoveQueue();
	int p_GetMoveLastBeat();
	c_Point* p_GetPositionLastBeat();
	Float p_GetLightSourceMax();
	bool p_IsLordCrownActive();
	bool p_FeetIgnoreOoze();
	bool p_IsShrunk(int,int);
	void p_PlayVO(String);
	c_Weapon* p_GetWeapon(bool);
	int p_GetElectricStrength();
	static void m_OffsetCoins(int);
	void p_Update22(int);
	static int m_lobbySaleItemMinCost;
	static bool m_IsSolo();
	static bool m_IsLastLevel();
	static void m_CheckAllModeCompletion();
	bool p_SubtractItemOfType(String);
	bool p_SubtractKey();
	void p_Update();
	static bool m_AllPlayersPerished();
	static bool m_PlayersHaveMovedThisBeat();
	void p_HandleIceAndCoals();
	void p_AfterEnemyMovement();
	static bool m_AnyPlayerTemporaryMapSight();
	bool p_IsVisible();
	void mark();
};
class c_ControllerLevelEditor : public c_Controller{
	public:
	int m_numLevels;
	c_IntMap2* m_levels;
	c_ControllerLevelEditor();
	static int m_playingLevel;
	static bool m_playingWholeDungeon;
	static c_ControllerLevelEditor* m_storedEditor;
	c_ControllerLevelEditor* m_new();
	void p_RegainFocus();
	void p_Update();
	void mark();
};
class c_Map5 : public Object{
	public:
	c_Node5* m_root;
	c_Map5();
	virtual int p_Compare(int,int)=0;
	c_Node5* p_FindNode(int);
	c_LevelObject* p_Get2(int);
	void mark();
};
class c_IntMap2 : public c_Map5{
	public:
	c_IntMap2();
	int p_Compare(int,int);
	void mark();
};
class c_Node5 : public Object{
	public:
	int m_key;
	c_Node5* m_right;
	c_Node5* m_left;
	c_LevelObject* m_value;
	c_Node5();
	void mark();
};
extern bool bb_controller_game_hasWon;
extern bool bb_controller_game_showScoreMessage;
class c_Map6 : public Object{
	public:
	c_Node6* m_root;
	c_Map6();
	c_Map6* m_new();
	int p_Clear();
	virtual int p_Compare(int,int)=0;
	c_Node6* p_FindNode(int);
	bool p_Contains(int);
	int p_RotateLeft5(c_Node6*);
	int p_RotateRight5(c_Node6*);
	int p_InsertFixup5(c_Node6*);
	bool p_Add4(int,int);
	bool p_Set6(int,int);
	int p_Get2(int);
	void mark();
};
class c_IntMap3 : public c_Map6{
	public:
	c_IntMap3();
	c_IntMap3* m_new();
	int p_Compare(int,int);
	void mark();
};
class c_Node6 : public Object{
	public:
	int m_key;
	c_Node6* m_right;
	c_Node6* m_left;
	int m_value;
	int m_color;
	c_Node6* m_parent;
	c_Node6();
	c_Node6* m_new(int,int,int,c_Node6*);
	c_Node6* m_new2();
	void mark();
};
class c_Shrine : public c_Entity{
	public:
	int m_type;
	bool m_isForSale;
	c_RNG* m_rng;
	String m_contents1;
	String m_contents2;
	String m_contents3;
	String m_contents4;
	String m_contents5;
	String m_contents6;
	int m_cost;
	c_TextSprite* m_hintText;
	c_Shrine();
	static bool m_darknessShrineActive;
	static bool m_rhythmShrineActive;
	static bool m_riskShrineActive;
	static c_Player* m_riskShrinePlayer;
	static bool m_spaceShrineActive;
	static bool m_warShrineActive;
	static bool m_noReturnShrineActive;
	static c_Player* m_noReturnShrinePlayer;
	static bool m_paceShrineActive;
	static bool m_bossShrineActive;
	static c_IntSet* m_usedShrines;
	static int m_usedShrinerInZone;
	static void m_ResetShrines();
	static bool m_IsValidShrine(int);
	static int m_GetRandomShrineInt(bool,int,int);
	static String m_GetHintText(int);
	String p_RandomGlassWeapon();
	void p_GenUncertaintyContents();
	void p_GenBossContents();
	void p_GenPainContents();
	static c_List28* m_shrineList;
	c_Shrine* m_new(int,int,int,c_RNG*,bool,bool);
	c_Shrine* m_new2();
	static void m_AddPendingShrinesToUsedList();
	static c_Shrine* m_GetShrineAt(int,int);
	void p_Die();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void p_SetCost();
	void mark();
};
class c_Set : public Object{
	public:
	c_Map7* m_map;
	c_Set();
	c_Set* m_new(c_Map7*);
	c_Set* m_new2();
	int p_Clear();
	bool p_Contains(int);
	int p_Insert5(int);
	void mark();
};
class c_IntSet : public c_Set{
	public:
	c_IntSet();
	c_IntSet* m_new();
	void mark();
};
class c_Map7 : public Object{
	public:
	c_Node7* m_root;
	c_Map7();
	c_Map7* m_new();
	int p_Clear();
	virtual int p_Compare(int,int)=0;
	c_Node7* p_FindNode(int);
	bool p_Contains(int);
	int p_RotateLeft6(c_Node7*);
	int p_RotateRight6(c_Node7*);
	int p_InsertFixup6(c_Node7*);
	bool p_Set7(int,Object*);
	bool p_Insert6(int,Object*);
	void mark();
};
class c_IntMap4 : public c_Map7{
	public:
	c_IntMap4();
	c_IntMap4* m_new();
	int p_Compare(int,int);
	void mark();
};
class c_Node7 : public Object{
	public:
	int m_key;
	c_Node7* m_right;
	c_Node7* m_left;
	Object* m_value;
	int m_color;
	c_Node7* m_parent;
	c_Node7();
	c_Node7* m_new(int,Object*,int,c_Node7*);
	c_Node7* m_new2();
	void mark();
};
class c_RNG : public Object{
	public:
	int m_seed;
	c_RNG();
	c_RNG* m_new();
	void p_SetSeed(int);
	static c_RNG* m_Make(int);
	int p_Rand();
	c_RNG* p_Split();
	void mark();
};
extern int bb_controller_game_numPlayers;
extern Array<c_Player* > bb_controller_game_players;
extern int bb_controller_game_player1;
class c_List2 : public Object{
	public:
	c_Node8* m__head;
	c_List2();
	c_List2* m_new();
	c_Node8* p_AddLast2(c_RenderableObject*);
	c_List2* m_new2(Array<c_RenderableObject* >);
	bool p_Equals3(c_RenderableObject*,c_RenderableObject*);
	int p_RemoveEach(c_RenderableObject*);
	c_Enumerator5* p_ObjectEnumerator();
	void mark();
};
class c_Node8 : public Object{
	public:
	c_Node8* m__succ;
	c_Node8* m__pred;
	c_RenderableObject* m__data;
	c_Node8();
	c_Node8* m_new(c_Node8*,c_Node8*,c_RenderableObject*);
	c_Node8* m_new2();
	int p_Remove();
	void mark();
};
class c_HeadNode2 : public c_Node8{
	public:
	c_HeadNode2();
	c_HeadNode2* m_new();
	void mark();
};
class c_ParticleSystem : public c_Tweenable{
	public:
	bool m_visible;
	bool m_active;
	c_ParticleSystem();
	static c_List16* m_systems;
	c_ParticleSystem* m_new(int,int,c_ParticleSystemData*,int,String);
	c_ParticleSystem* m_new2();
	void p_Update();
	static void m_UpdateAll();
	void mark();
};
class c_List3 : public Object{
	public:
	c_Node9* m__head;
	c_List3();
	c_List3* m_new();
	c_Node9* p_AddLast3(c_Entity*);
	c_List3* m_new2(Array<c_Entity* >);
	bool p_Equals4(c_Entity*,c_Entity*);
	int p_RemoveEach2(c_Entity*);
	c_Enumerator2* p_ObjectEnumerator();
	int p_Clear();
	void mark();
};
class c_Node9 : public Object{
	public:
	c_Node9* m__succ;
	c_Node9* m__pred;
	c_Entity* m__data;
	c_Node9();
	c_Node9* m_new(c_Node9*,c_Node9*,c_Entity*);
	c_Node9* m_new2();
	int p_Remove();
	void mark();
};
class c_HeadNode3 : public c_Node9{
	public:
	c_HeadNode3();
	c_HeadNode3* m_new();
	void mark();
};
class c_FamiliarFixed : public c_Entity{
	public:
	int m_offsetX;
	int m_offsetY;
	c_FamiliarFixed();
	void p_Die();
	c_FamiliarFixed* m_new();
	void p_WarpTo(int,int);
	static c_List4* m_familiarList;
	static c_FamiliarFixed* m_GetFamiliarAt(int,int);
	void p_TryPickup();
	void p_Update();
	void mark();
};
class c_List4 : public Object{
	public:
	c_Node10* m__head;
	c_List4();
	c_List4* m_new();
	c_Node10* p_AddLast4(c_FamiliarFixed*);
	c_List4* m_new2(Array<c_FamiliarFixed* >);
	c_Enumerator* p_ObjectEnumerator();
	int p_Clear();
	void mark();
};
class c_Node10 : public Object{
	public:
	c_Node10* m__succ;
	c_Node10* m__pred;
	c_FamiliarFixed* m__data;
	c_Node10();
	c_Node10* m_new(c_Node10*,c_Node10*,c_FamiliarFixed*);
	c_Node10* m_new2();
	void mark();
};
class c_HeadNode4 : public c_Node10{
	public:
	c_HeadNode4();
	c_HeadNode4* m_new();
	void mark();
};
class c_Enumerator : public Object{
	public:
	c_List4* m__list;
	c_Node10* m__curr;
	c_Enumerator();
	c_Enumerator* m_new(c_List4*);
	c_Enumerator* m_new2();
	bool p_HasNext();
	c_FamiliarFixed* p_NextObject();
	void mark();
};
class c_Familiar : public c_MobileEntity{
	public:
	c_Player* m_owner;
	c_Familiar();
	void p_Die();
	static c_List10* m_familiarList;
	c_Familiar* m_new(c_Player*);
	c_Familiar* m_new2();
	void p_Recall();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	static bool m_IsAnyAt(int,int);
	void mark();
};
class c_Item : public c_Entity{
	public:
	int m_utility;
	int m_stackQuantity;
	bool m_hideQuantity;
	int m_diamondCost;
	int m_diamondDealerPrice;
	int m_coinCost;
	int m_quantityYOff;
	bool m_trainingWeapon;
	String m_itemType;
	int m_dropX;
	int m_dropY;
	bool m_droppedByPlayer;
	int m_imageFrames;
	bool m_pickupable;
	c_TextSprite* m_hintText;
	c_TextSprite* m_nameText;
	c_TextSprite* m_quantityText;
	bool m_isSaleItem;
	bool m_hasBloodCost;
	bool m_saleItem;
	bool m_singleChoiceItem;
	bool m_janitorItem;
	bool m_diamondDealerItem;
	c_Item();
	static String m_lastChestItemClass1;
	static String m_lastChestItemClass2;
	static c_XMLNode* m_GetItemXML(String);
	static String m_GetSlot(c_XMLNode*);
	String p_GetSlot();
	static String m_GetSlot2(String);
	static c_StringMap7* m_itemImages;
	static c_List* m_GetAllItemsInClass(String);
	static bool m_IsItemOfType(String,String);
	bool p_IsItemOfType(String);
	static c_List20* m_pickupList;
	static c_List20* m_GetPickupsAt(int,int,c_Item*);
	static int m_GetValue(String);
	int p_GetValue();
	static int m_GetFlyawayText(int);
	int p_GetFlyawayText();
	static c_StringMap3* m_seenItems;
	static void m_AddToSeenItems(String);
	c_Item* m_new(int,int,String,bool,int,bool);
	c_Item* m_new2();
	static void m_CreateAmountOfCoins(int,int,int);
	static c_List* m_itemPoolRandom;
	static c_List* m_itemPoolRandom2;
	static Array<c_List* > m_itemPoolChest;
	static Array<c_List* > m_itemPoolChest2;
	static Array<c_List* > m_itemPoolLockedChest;
	static Array<c_List* > m_itemPoolLockedChest2;
	static Array<c_List* > m_itemPoolAnyChest;
	static Array<c_List* > m_itemPoolAnyChest2;
	static Array<c_List* > m_itemPoolShop;
	static Array<c_List* > m_itemPoolShop2;
	static Array<c_List* > m_itemPoolLockedShop;
	static Array<c_List* > m_itemPoolLockedShop2;
	static Array<c_List* > m_itemPoolUrn;
	static Array<c_List* > m_itemPoolUrn2;
	static bool m_HasSeenItemXTimes(String,int);
	static String m_GetRandomItemInClassByPredicate(c_IItemPredicate*,int,String,bool);
	static String m_GetRandomItemInClass(String,int,String,int,bool,String,bool);
	static bool m_IsUnlocked(String);
	static bool m_debugTrailerMode;
	static bool m_IsDamageReductionItem(c_XMLNode*);
	static bool m_IsItemOfClass(c_XMLNode*,String);
	bool p_IsItemOfClass(String);
	static bool m_IsHealthBonusItem(c_XMLNode*);
	static bool m_IsPainItem(c_XMLNode*);
	static bool m_IsDamageBonusItem(c_XMLNode*);
	static bool m_IsGoldGeneratingItem(c_XMLNode*);
	static bool m_IsCourageItem(c_XMLNode*);
	static bool m_IsDiscountItem(c_XMLNode*);
	static bool m_IsValidItemForCurrentChars(c_XMLNode*);
	static bool m_IsValidItemForCurrentChars2(String);
	static bool m_IsDisabled(String);
	static void m_CreateItemPools();
	static int m_GetCost(String);
	static bool m_IsValidRandomItem(String);
	static String m_GetDisplayName(String);
	static int m_GetIntAttribute(String,String,int);
	int p_GetIntAttribute(int,int);
	void p_Die();
	static c_Item* m_GetPickupAt(int,int,c_Item*);
	static int m_RandomHardModeHelperItem();
	String p_PickupFail(c_Player*);
	static void m_ClearAllSingleChoiceItems(c_Item*);
	virtual String p_Pickup(c_Player*);
	static int m_ConsumeCoinsRemainingOnLevel();
	static void m_MoveAll();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	bool p_IsVisible();
	void mark();
};
class c_SaleItem : public c_Item{
	public:
	Float m_forceCost;
	Float m_cost;
	Float m_bloodCost;
	Float m_discount;
	c_Sprite* m_miniDiamond;
	c_Sprite* m_miniHeart;
	c_Shopkeeper* m_shopkeeper;
	c_Medic* m_medic;
	c_SaleItem();
	static String m_lastSaleItemClass1;
	static String m_lastSaleItemClass2;
	static c_List7* m_randomSaleItemList;
	static c_List27* m_currentSaleItems;
	bool p_CostsBlood();
	bool p_CostsDiamonds();
	static Float m_GetCostMultiplier();
	void p_SetCostHelper();
	void p_SetBloodCost();
	void p_SetCost();
	c_SaleItem* m_new(int,int,String,bool,c_Shopkeeper*,Float,c_Medic*);
	c_SaleItem* m_new2();
	void p_ApplyDiscount(Float);
	static String m_GetRandomItem(int,String);
	void p_Die();
	Float p_GetCost();
	static int m_GetMinCost();
	String p_Pickup(c_Player*);
	void mark();
};
class c_Chest : public c_Entity{
	public:
	String m_contents;
	bool m_lockChest;
	int m_chestColor;
	bool m_locked;
	bool m_secretChest;
	bool m_saleChest;
	bool m_singleChoiceChest;
	c_Chest();
	static int m_lastChestColor;
	static int m_lastChestColor2;
	static bool m_IsItemAppropriateForChestColor(String,int);
	static c_List32* m_chestList;
	c_Chest* m_new(int,int,String,bool,bool,bool,int);
	c_Chest* m_new2();
	static int m_GetNumEmptySecretChests();
	static int m_GetNumEmptyNonSecretChests();
	static c_Chest* m_GetEmptySecretChest();
	void p_Die();
	void p_AddKeyToContents();
	static c_Chest* m_GetEmptyNonSecretChest();
	void p_BecomeLocked();
	virtual bool p_Open(Object*);
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_Enemy : public c_MobileEntity{
	public:
	bool m_isStairLockingMiniboss;
	int m_enemyType;
	Array<int > m_lastPlayerHitFrame;
	Array<String > m_lastPlayerHitSource;
	int m_beatsPerMove;
	int m_movePriority;
	int m_health;
	bool m_isMiniboss;
	bool m_isBoss;
	bool m_isMonkeyLike;
	String m_hitParticle;
	c_IntMap8* m_animNormal;
	c_IntMap8* m_animNormal2;
	c_IntMap8* m_animNormal3;
	c_IntMap8* m_animBlink;
	c_IntMap8* m_animTell;
	c_IntMap8* m_animTellBlink;
	int m_hitTween;
	int m_hitShadowTween;
	int m_movementType;
	c_Sprite* m_attackSwipeImage;
	c_Sprite* m_jumpDirt;
	int m_jumpDirtTimer;
	String m_overrideHitSound;
	String m_overrideDeathSound;
	bool m_exemptFromPause;
	int m_healthMax;
	bool m_movesRegardlessOfDistance;
	bool m_wasSeekingX;
	bool m_swarmCulprit;
	bool m_allowDiagonalFlip;
	int m_animOverride;
	bool m_isFormationDancer;
	int m_currentMoveDelay;
	bool m_inPenaltyBox;
	bool m_isLord;
	bool m_dropLordScroll;
	int m_killCoinMultiplier;
	int m_bonusCoinsToDrop;
	int m_ringOfGoldCoinsToDrop;
	bool m_dropNoCoinsOverride;
	int m_deathTrigger;
	int m_blink_MIN;
	int m_blink_MAX;
	int m_blink_DUR;
	bool m_stealth;
	bool m_containsItem;
	String m_overrideMoveSound;
	bool m_enableTell;
	String m_overrideCrySound;
	bool m_overrideAttackSwipe;
	bool m_isMosh;
	bool m_dontMove;
	bool m_inSecretRoom;
	bool m_isSarcophagus;
	int m_minEnemyMoveDistance;
	bool m_isNecroDancer;
	int m_storedZOff;
	bool m_isDancer;
	bool m_executedCry;
	int m_animOverrideState;
	bool m_wasFrozen;
	int m_blinkDelay;
	int m_blinkDuration;
	int m_animOffset;
	bool m_justSpawned;
	bool m_enableDeathEffects;
	c_Enemy();
	static c_EnemyList* m_enemyList;
	static void m_SetEnemiesToDropNoCoins();
	static int m_movesBehind;
	static int m_lastWraithSpawnBeat;
	static bool m_enemiesPaused;
	static int m_enemiesFearfulDuration;
	c_Enemy* m_new();
	static c_XMLDoc* m_randomizerXML;
	static c_XMLNode* m_GetEnemyXML(String,int);
	void p_InitImage(c_XMLNode*,String,int,int);
	static c_Sprite* m_heartSmall;
	static c_Sprite* m_heartEmptySmall;
	void p_ApplyMonkeyPaw();
	void p_Init3(int,int,int,String,String,int,int);
	void p_Init4(int,int,int,String,String);
	void p_Init5(int,int,int,String);
	static int m_GetNumStairLockingMinibosses();
	static bool m_killingAllEnemies;
	static int m_GetNumPenaltyBoxMinibosses();
	virtual void p_Delete();
	void p_Die();
	static c_Enemy* m_MakeEnemy1(int,int,int);
	static c_Enemy* m_MakeEnemy2(int,int,int);
	static c_Enemy* m_MakeEnemy(int,int,int);
	void p_AdjustLordImage();
	void p_MakeLord();
	static c_Enemy* m_GetEnemyAt(int,int,bool);
	static int m_GetBaseType(int);
	static void m_CullEnemiesDownTo(int);
	virtual bool p_CanBeLord();
	static void m_CreateLord();
	void p_Cull();
	static void m_MoveSwarmEnemiesAwayFromStartLocation();
	static void m_SetAllEnemiesMinimumMoveDistance(int);
	static void m_StartRandomizerRun();
	void p_MakeDancer();
	static void m_ApplyMonkeyPawAll();
	static String m_GetEnemyNameHelper1(int);
	static String m_GetEnemyNameHelper2(int);
	static String m_GetEnemyNameHelper(int);
	static String m_AddTagsToEnemyName_Size1_1(String);
	static String m_AddTagsToEnemyName_Size1_2(String);
	static String m_AddTagsToEnemyName_Size1_3(String);
	static String m_AddTagsToEnemyName_Size1(String);
	static String m_AddTagsToEnemyName_SizeDefault_1(String);
	static String m_AddTagsToEnemyName_SizeDefault_2(String);
	static String m_AddTagsToEnemyName_SizeDefault_3(String);
	static String m_AddTagsToEnemyName_SizeDefault(String);
	static String m_AddTagsToEnemyName(String,int);
	static String m_GetEnemyName(int);
	static c_Sprite* m_LoadBestiarySprite1(int);
	static c_Sprite* m_LoadBestiarySprite2(int);
	static c_Sprite* m_LoadBestiarySprite(int);
	static bool m_EnemiesHaveMovedThisBeat();
	static bool m_EnemiesMovingThisFrame();
	static void m_MoveAll();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_AnimateToTheBeat();
	void p_Update();
	static void m_SetEnemiesToDropNoCoinsOverride();
	static void m_KillAllEnemies();
	void mark();
};
class c_Crate : public c_Enemy{
	public:
	int m_initialYOff;
	int m_crateType;
	String m_contents;
	bool m_beEmpty;
	int m_emptyCoins;
	String m_contents2;
	String m_contents3;
	bool m_determinedContents;
	bool m_gorgonFlipX;
	int m_gorgonFlashFrames;
	c_Crate();
	static c_List5* m_fallenCrates;
	static c_List6* m_fallenGargoyles;
	static String m_SelectItem(int);
	void p_DecideIfStayingEmpty();
	void p_DetermineContents();
	static c_List5* m_crateList;
	c_Crate* m_new(int,int,int,String);
	c_Crate* m_new2();
	bool p_Open2(bool);
	static void m_ProcessFallenCrates();
	void p_Die();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_List5 : public Object{
	public:
	c_Node11* m__head;
	c_List5();
	c_List5* m_new();
	c_Node11* p_AddLast5(c_Crate*);
	c_List5* m_new2(Array<c_Crate* >);
	int p_Clear();
	int p_Count();
	c_Crate* p_RemoveFirst();
	bool p_Equals5(c_Crate*,c_Crate*);
	c_Node11* p_Find(c_Crate*,c_Node11*);
	c_Node11* p_Find2(c_Crate*);
	void p_RemoveFirst2(c_Crate*);
	bool p_Contains3(c_Crate*);
	int p_RemoveEach3(c_Crate*);
	void mark();
};
class c_Node11 : public Object{
	public:
	c_Node11* m__succ;
	c_Node11* m__pred;
	c_Crate* m__data;
	c_Node11();
	c_Node11* m_new(c_Node11*,c_Node11*,c_Crate*);
	c_Node11* m_new2();
	int p_Remove();
	void mark();
};
class c_HeadNode5 : public c_Node11{
	public:
	c_HeadNode5();
	c_HeadNode5* m_new();
	void mark();
};
class c_Gargoyle : public c_Enemy{
	public:
	c_Sprite* m_gustImage;
	bool m_determinedContents;
	String m_contents;
	c_Gargoyle();
	void p_DetermineContents();
	c_Gargoyle* m_new(int,int,int);
	c_Gargoyle* m_new2();
	void p_OpenAsCrate(bool);
	void p_Die();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_List6 : public Object{
	public:
	c_Node12* m__head;
	c_List6();
	c_List6* m_new();
	c_Node12* p_AddLast6(c_Gargoyle*);
	c_List6* m_new2(Array<c_Gargoyle* >);
	int p_Clear();
	int p_Count();
	c_Gargoyle* p_RemoveFirst();
	bool p_Equals6(c_Gargoyle*,c_Gargoyle*);
	c_Node12* p_Find3(c_Gargoyle*,c_Node12*);
	c_Node12* p_Find4(c_Gargoyle*);
	void p_RemoveFirst3(c_Gargoyle*);
	bool p_Contains4(c_Gargoyle*);
	void mark();
};
class c_Node12 : public Object{
	public:
	c_Node12* m__succ;
	c_Node12* m__pred;
	c_Gargoyle* m__data;
	c_Node12();
	c_Node12* m_new(c_Node12*,c_Node12*,c_Gargoyle*);
	c_Node12* m_new2();
	int p_Remove();
	void mark();
};
class c_HeadNode6 : public c_Node12{
	public:
	c_HeadNode6();
	c_HeadNode6* m_new();
	void mark();
};
class c_List7 : public Object{
	public:
	c_Node13* m__head;
	c_List7();
	c_List7* m_new();
	c_Node13* p_AddLast7(String);
	c_List7* m_new2(Array<String >);
	int p_Clear();
	bool p_Equals7(String,String);
	bool p_Contains2(String);
	int p_RemoveEach4(String);
	void mark();
};
class c_Node13 : public Object{
	public:
	c_Node13* m__succ;
	c_Node13* m__pred;
	String m__data;
	c_Node13();
	c_Node13* m_new(c_Node13*,c_Node13*,String);
	c_Node13* m_new2();
	int p_Remove();
	void mark();
};
class c_HeadNode7 : public c_Node13{
	public:
	c_HeadNode7();
	c_HeadNode7* m_new();
	void mark();
};
class c_Leprechaun : public c_Enemy{
	public:
	c_Leprechaun();
	static bool m_seenLeprechaun;
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_Chain : public Object{
	public:
	c_Chain();
	static int m_kills;
	static Array<bool > m_waitingForFirstMovement;
	void mark();
};
class c_Enumerator2 : public Object{
	public:
	c_List3* m__list;
	c_Node9* m__curr;
	c_Enumerator2();
	c_Enumerator2* m_new(c_List3*);
	c_Enumerator2* m_new2();
	bool p_HasNext();
	c_Entity* p_NextObject();
	void mark();
};
class c_Flyaway : public Object{
	public:
	c_Flyaway();
	static void m_StopRenderingOfAllCurrentFlyaways();
	c_Flyaway* m_new(String,int,int,int,int,bool,Float,Float,bool,int);
	c_Flyaway* m_new2();
	void p_CenterX();
	static int m_temporarilyDisableNewFlyaways;
	static c_List38* m_activeFlyaways;
	void p_Update();
	static void m_UpdateAll();
	void mark();
};
class c_Camera : public Object{
	public:
	c_Camera();
	static int m_fadeOutDuration;
	static int m_fadeOutCurrent;
	static c_Callback* m_fadeOutCallback;
	static int m_fadeInDuration;
	static int m_fadeInCurrent;
	static c_Callback* m_fadeInCallback;
	static int m_x;
	static int m_y;
	static Float m_seekX;
	static Float m_seekY;
	static bool m_fixed;
	static bool m_IsOnScreenStandardizedRelativeToPoint(int,int,int,int);
	static int m_GetFixedHeight();
	static int m_GetFixedWidth();
	static void m_FadeOutThenExecute(int,c_Callback*);
	static Float m_shakeOffX;
	static Float m_GetX();
	static Float m_shakeOffY;
	static Float m_GetY();
	static bool m_IsOnScreen(int,int);
	static int m_overlayWhiteDuration;
	static void m_Shake(int,int,int);
	void mark();
};
class c_Callback : public virtual gc_interface{
	public:
};
int bb_math_Abs(int);
Float bb_math_Abs2(Float);
class c_BossBattleType : public Object{
	public:
	c_BossBattleType();
	void mark();
};
class c_Stairs_callback : public Object,public virtual c_Callback{
	public:
	c_Stairs_callback();
	static int m_levelVal;
	static int m_zoneVal;
	static int m_playerVal;
	static bool m_continuedRun;
	c_Stairs_callback* m_new();
	void mark();
};
class c_ControllerCutscene : public c_Controller{
	public:
	c_ControllerCutscene();
	c_ControllerCutscene* m_new(int,int,int);
	c_ControllerCutscene* m_new2();
	static void m_InitSubtitles();
	void p_RegainFocus();
	void p_Update();
	void mark();
};
class c_Map8 : public Object{
	public:
	c_Node14* m_root;
	c_Map8();
	c_Map8* m_new();
	int p_Clear();
	virtual int p_Compare2(String,String)=0;
	c_Node14* p_FindNode2(String);
	bool p_Contains2(String);
	String p_Get(String);
	int p_RotateLeft7(c_Node14*);
	int p_RotateRight7(c_Node14*);
	int p_InsertFixup7(c_Node14*);
	bool p_Set8(String,String);
	void mark();
};
class c_StringMap4 : public c_Map8{
	public:
	c_StringMap4();
	c_StringMap4* m_new();
	int p_Compare2(String,String);
	void mark();
};
class c_Node14 : public Object{
	public:
	String m_key;
	c_Node14* m_right;
	c_Node14* m_left;
	String m_value;
	int m_color;
	c_Node14* m_parent;
	c_Node14();
	c_Node14* m_new(String,String,int,c_Node14*);
	c_Node14* m_new2();
	void mark();
};
class c_Map9 : public Object{
	public:
	c_Node15* m_root;
	c_Map9();
	c_Map9* m_new();
	int p_Clear();
	virtual int p_Compare2(String,String)=0;
	int p_RotateLeft8(c_Node15*);
	int p_RotateRight8(c_Node15*);
	int p_InsertFixup8(c_Node15*);
	bool p_Set9(String,bool);
	void mark();
};
class c_StringMap5 : public c_Map9{
	public:
	c_StringMap5();
	c_StringMap5* m_new();
	int p_Compare2(String,String);
	void mark();
};
class c_Node15 : public Object{
	public:
	String m_key;
	c_Node15* m_right;
	c_Node15* m_left;
	bool m_value;
	int m_color;
	c_Node15* m_parent;
	c_Node15();
	c_Node15* m_new(String,bool,int,c_Node15*);
	c_Node15* m_new2();
	void mark();
};
class c_Set2 : public Object{
	public:
	c_Map10* m_map;
	c_Set2();
	c_Set2* m_new(c_Map10*);
	c_Set2* m_new2();
	int p_Clear();
	int p_Insert7(String);
	bool p_Contains2(String);
	void mark();
};
class c_StringSet : public c_Set2{
	public:
	c_StringSet();
	c_StringSet* m_new();
	void mark();
};
class c_Map10 : public Object{
	public:
	c_Node16* m_root;
	c_Map10();
	c_Map10* m_new();
	int p_Clear();
	virtual int p_Compare2(String,String)=0;
	int p_RotateLeft9(c_Node16*);
	int p_RotateRight9(c_Node16*);
	int p_InsertFixup9(c_Node16*);
	bool p_Set10(String,Object*);
	bool p_Insert8(String,Object*);
	c_Node16* p_FindNode2(String);
	bool p_Contains2(String);
	void mark();
};
class c_StringMap6 : public c_Map10{
	public:
	c_StringMap6();
	c_StringMap6* m_new();
	int p_Compare2(String,String);
	void mark();
};
class c_Node16 : public Object{
	public:
	String m_key;
	c_Node16* m_right;
	c_Node16* m_left;
	Object* m_value;
	int m_color;
	c_Node16* m_parent;
	c_Node16();
	c_Node16* m_new(String,Object*,int,c_Node16*);
	c_Node16* m_new2();
	void mark();
};
class c_ItemList : public c_List7{
	public:
	c_ItemList();
	c_ItemList* m_new();
	void mark();
};
class c_Node17 : public Object{
	public:
	String m_key;
	c_Node17* m_right;
	c_Node17* m_left;
	int m_value;
	int m_color;
	c_Node17* m_parent;
	c_Node17();
	c_Node17* m_new(String,int,int,c_Node17*);
	c_Node17* m_new2();
	void mark();
};
class c_Weapon : public Object{
	public:
	int m_startingRenderTime;
	String m_type;
	bool m_hasObsSwipe;
	c_IntMap5* m_swipeImage;
	c_List8* m_attackPoints;
	bool m_flipEachHit;
	c_Sprite* m_glowHUD;
	int m_numSwipeFrames;
	int m_glowXOff;
	int m_glowYOff;
	bool m_arrowWeapon;
	int m_reloadTime;
	int m_clipSize;
	int m_startingRenderTime2;
	c_IntMap5* m_swipeImage2;
	int m_numSwipeFramesPerImage;
	bool m_daggerSwipeAdjacent;
	bool m_hasObsSwipe2;
	int m_numSwipeFrames2;
	int m_currentClipSize;
	c_Sprite* m_imageHUD;
	c_Weapon();
	bool p_IsDagger();
	bool p_IsLongsword();
	bool p_IsBroadsword();
	bool p_IsBow();
	bool p_IsCrossbow();
	bool p_IsWhip();
	bool p_IsFlail();
	bool p_IsCat();
	bool p_IsRapier();
	bool p_IsSpear();
	bool p_IsBlunderbuss();
	bool p_IsRifle();
	bool p_IsAxe();
	bool p_IsHarp();
	bool p_IsWarhammer();
	bool p_IsStaff();
	bool p_IsCutlass();
	c_Weapon* m_new(String);
	c_Weapon* m_new2();
	bool p_IsKeepable();
	bool p_IsThrowable();
	void mark();
};
class c_ItemType : public Object{
	public:
	c_ItemType();
	void mark();
};
class c_Enumerator3 : public Object{
	public:
	c_List* m__list;
	c_Node2* m__curr;
	c_Enumerator3();
	c_Enumerator3* m_new(c_List*);
	c_Enumerator3* m_new2();
	bool p_HasNext();
	c_XMLNode* p_NextObject();
	void mark();
};
class c_Map11 : public Object{
	public:
	c_Node18* m_root;
	c_Map11();
	c_Map11* m_new();
	virtual int p_Compare(int,int)=0;
	int p_RotateLeft10(c_Node18*);
	int p_RotateRight10(c_Node18*);
	int p_InsertFixup10(c_Node18*);
	bool p_Set11(int,c_Sprite*);
	void mark();
};
class c_IntMap5 : public c_Map11{
	public:
	c_IntMap5();
	c_IntMap5* m_new();
	int p_Compare(int,int);
	void mark();
};
class c_Node18 : public Object{
	public:
	int m_key;
	c_Node18* m_right;
	c_Node18* m_left;
	c_Sprite* m_value;
	int m_color;
	c_Node18* m_parent;
	c_Node18();
	c_Node18* m_new(int,c_Sprite*,int,c_Node18*);
	c_Node18* m_new2();
	void mark();
};
class c_WeaponPoint : public Object{
	public:
	c_List9* m_children;
	c_WeaponPoint();
	c_WeaponPoint* m_new(int,int,Object*,int,Object*,int,bool,int,int);
	c_WeaponPoint* m_new2();
	void mark();
};
class c_List8 : public Object{
	public:
	c_Node19* m__head;
	c_List8();
	c_List8* m_new();
	c_Node19* p_AddLast8(c_WeaponPoint*);
	c_List8* m_new2(Array<c_WeaponPoint* >);
	void mark();
};
class c_Node19 : public Object{
	public:
	c_Node19* m__succ;
	c_Node19* m__pred;
	c_WeaponPoint* m__data;
	c_Node19();
	c_Node19* m_new(c_Node19*,c_Node19*,c_WeaponPoint*);
	c_Node19* m_new2();
	void mark();
};
class c_HeadNode8 : public c_Node19{
	public:
	c_HeadNode8();
	c_HeadNode8* m_new();
	void mark();
};
class c_List9 : public Object{
	public:
	c_Node20* m__head;
	c_List9();
	c_Node20* p_AddLast9(Object*);
	void mark();
};
class c_Node20 : public Object{
	public:
	c_Node20* m__succ;
	c_Node20* m__pred;
	Object* m__data;
	c_Node20();
	c_Node20* m_new(c_Node20*,c_Node20*,Object*);
	c_Node20* m_new2();
	void mark();
};
class c_HeadNode9 : public c_Node20{
	public:
	c_HeadNode9();
	c_HeadNode9* m_new();
	void mark();
};
class c_PlayerHealth : public Object{
	public:
	int m_bonusMax;
	int m_baseMax;
	int m_current;
	bool m_fragile;
	int m_cursedCurrent;
	int m_cursedMax;
	c_PlayerHealth();
	c_PlayerHealth* m_new();
	void p_GainBonusHeart();
	int p_GetNormalMax();
	void p_LoseBonusHeart();
	void p_Refill();
	void p_Reset2(int);
	bool p_Heal2(int,bool);
	void p_ResetFragile();
	void p_Revive();
	int p_Get3();
	void p_Damage(int);
	void mark();
};
class c_Map12 : public Object{
	public:
	c_Node21* m_root;
	c_Map12();
	c_Map12* m_new();
	virtual int p_Compare2(String,String)=0;
	c_Node21* p_FindNode2(String);
	bool p_Contains2(String);
	int p_RotateLeft11(c_Node21*);
	int p_RotateRight11(c_Node21*);
	int p_InsertFixup11(c_Node21*);
	bool p_Set12(String,c_Sprite*);
	void mark();
};
class c_StringMap7 : public c_Map12{
	public:
	c_StringMap7();
	c_StringMap7* m_new();
	int p_Compare2(String,String);
	void mark();
};
class c_Node21 : public Object{
	public:
	String m_key;
	c_Node21* m_right;
	c_Node21* m_left;
	c_Sprite* m_value;
	int m_color;
	c_Node21* m_parent;
	c_Node21();
	c_Node21* m_new(String,c_Sprite*,int,c_Node21*);
	c_Node21* m_new2();
	void mark();
};
class c_SoulFamiliar : public c_FamiliarFixed{
	public:
	c_SoulFamiliar();
	c_SoulFamiliar* m_new(int,int,Object*);
	c_SoulFamiliar* m_new2();
	void p_Die();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_List10 : public Object{
	public:
	c_Node22* m__head;
	c_List10();
	c_List10* m_new();
	c_Node22* p_AddLast10(c_Familiar*);
	c_List10* m_new2(Array<c_Familiar* >);
	void mark();
};
class c_Node22 : public Object{
	public:
	c_Node22* m__succ;
	c_Node22* m__pred;
	c_Familiar* m__data;
	c_Node22();
	c_Node22* m_new(c_Node22*,c_Node22*,c_Familiar*);
	c_Node22* m_new2();
	void mark();
};
class c_HeadNode10 : public c_Node22{
	public:
	c_HeadNode10();
	c_HeadNode10* m_new();
	void mark();
};
int bb_math_Max(int,int);
Float bb_math_Max2(Float,Float);
extern int bb_controller_game_dailyChallengeSuccessScore;
extern int bb_controller_game_speedrunSuccessScore;
extern int bb_controller_game_hardcoreModeSuccessScore;
class c_Audio : public Object{
	public:
	c_Audio();
	static bool m_songShopOpen;
	static int m_fixedBeatNum;
	static bool m_debugEnablePlaceholders;
	static int m_GetSongPosition();
	static int m_songLoops;
	static int m_GetCurrentBeatNumber(int,bool);
	static int m_numLoops;
	static int m_GetCurrentBeatNumberIncludingLoops(int,bool);
	static int m_songDuration;
	static int m_TimeUntilSpecificBeat(int);
	static int m_GetClosestBeatNum(bool);
	static void m_Init();
	static void m_UpdateNumLoops();
	static void m_Update(bool);
	static void m_PlayGameSoundAt(String,int,int,bool,int,bool);
	static void m_PlayGameSoundAt2(String,int,int,int,bool,int,bool,Float);
	static void m_PauseSong(bool);
	static bool m_cheatingDetected;
	static int m_GetNonAbsoluteDistanceFromNearestBeat();
	static void m_PlayGameSound(String,int,Float);
	static int m_fadeFrames;
	static int m_startFadeFrames;
	static bool m_PastLastBeat();
	static bool m_HasSongEnded();
	static bool m_DoingNecrodancerTransition();
	static bool m_startSong;
	static int m_GetDistanceFromNearestBeat();
	static int m_GetNextBeatDuration();
	static bool m_includeVideoLatency;
	static Float m_GetPercentDistanceFromNextBeat();
	static int m_GetBeatAnimFrame4();
	void mark();
};
class c_Point2 : public Object{
	public:
	c_Point2();
	c_Point2* m_new();
	void mark();
};
class c_ItemData : public Object{
	public:
	int m_imageFrames;
	int m_imageW;
	int m_imageH;
	bool m_bouncer;
	int m_xOff;
	int m_yOff;
	c_ItemData();
	c_ItemData* m_new(c_XMLNode*);
	c_ItemData* m_new2();
	void mark();
};
class c_TextSprite : public Object{
	public:
	int m_justification;
	Float m_scaleVal;
	int m_color;
	int m_zVal;
	bool m_showShadow;
	int m_shadowColor;
	int m_shadowOffX;
	int m_shadowOffY;
	int m_fontScale;
	c_List21* m_containedSprites;
	c_List21* m_containedSpriteShadows;
	c_TextSprite();
	c_TextSprite* m_new(int,Float,int,int,bool,int,int,int);
	c_TextSprite* m_new2(int,Float,int,int);
	c_TextSprite* m_new3(int,Float);
	c_TextSprite* m_new4(int);
	c_TextSprite* m_new5();
	void p_Discard();
	void p_SetText(String,bool);
	void p_InWorld(bool);
	static void m_Init();
	void mark();
};
class c_Bouncer : public Object{
	public:
	Float m_min;
	Float m_max;
	Float m_power;
	Float m_value;
	int m_steps;
	int m_currentSteps;
	bool m_goingUp;
	bool m_enabled;
	c_Bouncer();
	c_Bouncer* m_new(Float,Float,Float,int);
	c_Bouncer* m_new2();
	void p_Disable();
	void p_Update();
	void p_Enable();
	void mark();
};
extern int bb_random_Seed;
Float bb_random_Rnd();
Float bb_random_Rnd2(Float,Float);
Float bb_random_Rnd3(Float);
int bb_math_Clamp(int,int,int);
Float bb_math_Clamp2(Float,Float,Float);
class c_Replay : public Object{
	public:
	int m_startingZone;
	int m_startingLevel;
	c_Node24* m_curReplayData;
	int m_runTime;
	String m_saveData;
	int m_startingGold;
	bool m_hasBroadsword;
	int m_beatOffset;
	String m_replayStr;
	c_Replay();
	int p_GetRand(int);
	void p_RecordRand(int,int);
	void p_NextLevel();
	c_Replay* m_new();
	void p_NewLevel(int);
	void p_Save();
	int p_GetNumBeats();
	void mark();
};
class c_Point : public Object{
	public:
	int m_x;
	int m_y;
	c_Point();
	c_Point* m_new(int,int);
	c_Point* m_new2();
	String p_ToString();
	static c_Point* m_Add(c_Point*,c_Point*);
	c_Point* p_Add5(c_Point*);
	c_Point* p_Add4(int,int);
	c_Point* p_RotateCWAbout(c_Point*);
	c_Point* p_Scale(int);
	bool p_Equals8(c_Point*);
	void mark();
};
class c_StackEx : public c_Stack2{
	public:
	c_StackEx();
	c_StackEx* m_new();
	int p_ChooseRandom(bool);
	void p_Shuffle(bool);
	void mark();
};
class c_List11 : public Object{
	public:
	c_Node23* m__head;
	c_List11();
	c_List11* m_new();
	c_Node23* p_AddLast11(c_Enemy*);
	c_List11* m_new2(Array<c_Enemy* >);
	c_Enumerator4* p_ObjectEnumerator();
	bool p_Equals9(c_Enemy*,c_Enemy*);
	int p_RemoveEach5(c_Enemy*);
	int p_Count();
	Array<c_Enemy* > p_ToArray();
	void mark();
};
class c_EnemyList : public c_List11{
	public:
	c_EnemyList();
	c_EnemyList* m_new();
	void mark();
};
class c_Node23 : public Object{
	public:
	c_Node23* m__succ;
	c_Node23* m__pred;
	c_Enemy* m__data;
	c_Node23();
	c_Node23* m_new(c_Node23*,c_Node23*,c_Enemy*);
	c_Node23* m_new2();
	int p_Remove();
	void mark();
};
class c_HeadNode11 : public c_Node23{
	public:
	c_HeadNode11();
	c_HeadNode11* m_new();
	void mark();
};
class c_Enumerator4 : public Object{
	public:
	c_List11* m__list;
	c_Node23* m__curr;
	c_Enumerator4();
	c_Enumerator4* m_new(c_List11*);
	c_Enumerator4* m_new2();
	bool p_HasNext();
	c_Enemy* p_NextObject();
	void mark();
};
class c_Enumerator5 : public Object{
	public:
	c_List2* m__list;
	c_Node8* m__curr;
	c_Enumerator5();
	c_Enumerator5* m_new(c_List2*);
	c_Enumerator5* m_new2();
	bool p_HasNext();
	c_RenderableObject* p_NextObject();
	void mark();
};
class c_ReplayData : public Object{
	public:
	int m_randSeed;
	int m_cameraHeight;
	int m_cameraWidth;
	c_ReplayData();
	void mark();
};
class c_Node24 : public Object{
	public:
	c_ReplayData* m__data;
	c_Node24();
	c_ReplayData* p_Value();
	void mark();
};
class c_IntStack : public c_Stack2{
	public:
	c_IntStack();
	c_IntStack* m_new(Array<int >);
	c_IntStack* m_new2();
	bool p_Equals2(int,int);
	void mark();
};
class c_Enumerator6 : public Object{
	public:
	c_Stack2* m_stack;
	int m_index;
	c_Enumerator6();
	c_Enumerator6* m_new(c_Stack2*);
	c_Enumerator6* m_new2();
	bool p_HasNext();
	int p_NextObject();
	void mark();
};
extern int bb_controller_game_lastEnemyMoveBeat;
class c_Tile : public c_RenderableObject{
	public:
	c_Sprite* m_textLabel;
	c_TextSprite* m_textLabel2;
	String m_textLabelText;
	int m_type;
	int m_trigger;
	int m_tilesetOverride;
	bool m_hasBeenSeen;
	int m_lightValueFrameNum;
	Float m_lightValueCached;
	c_Sprite* m_image;
	int m_metalDoorOpenedBeat;
	int m_tarAnimCounter;
	int m_tarAnimDelay;
	bool m_image1HasBeenLoadedWithFloor;
	int m_torchDir;
	int m_health;
	bool m_unbreakable;
	c_Sprite* m_image2;
	int m_hasResource;
	bool m_isStone;
	c_Sprite* m_imageWireSilhouette;
	c_Sprite* m_imageWire;
	c_Sprite* m_imageWireFlash;
	int m_wireFlashAnimDelay;
	int m_wireFlashDelay;
	c_Sprite* m_xImage;
	int m_TORCH_LIGHT_MIN;
	int m_TORCH_LIGHT_MAX;
	c_Sprite* m_torchImage;
	int m_torchOffX;
	int m_torchOffY;
	bool m_animateTorch;
	int m_triggerDoor;
	bool m_magicBarrier;
	int m_triggerDig;
	int m_wireMask;
	bool m_isCracked;
	String m_flyawayText;
	bool m_cachedLOS;
	int m_cachedLOSFrame;
	bool m_cachedTrueLOS;
	int m_cachedTrueLOSFrame;
	Float m_constAlpha;
	int m_nextEruptionBeat;
	int m_playerWasOnTileAtBeat;
	bool m_playerWasOnTileLastFrame;
	c_Player* m_triggerPlayer;
	int m_torchFlickerNext;
	bool m_wasInLOS;
	Float m_grassValue;
	Float m_constLightValueCached;
	bool m_activatedConductorWire;
	c_Tile();
	static c_List12* m_floorRisingList;
	static c_List12* m_floorRecededList;
	static int m_totalTilesCreatedOrDestroyed;
	void p_ClearTextLabel();
	void p_Die();
	int p_GetType();
	int p_CalcTileset();
	bool p_IsMetalDoorOpen();
	bool p_IsFloor();
	int p_GetTileset();
	c_Sprite* p_LoadFloor();
	bool p_IsShopWall();
	bool p_HasTorch();
	bool p_IsDoor();
	bool p_IsWall(bool,bool,bool,bool);
	bool p_IsWall2();
	void p_BecomeStone();
	void p_BecomeHarderStone();
	c_Sprite* p_GetZone5Wall();
	c_Sprite* p_GetZone4Wall();
	bool p_IsTileset(int);
	c_Sprite* p_GetZone3Wall();
	c_Sprite* p_GetZone2Wall();
	c_Sprite* p_GetZone1Wall();
	void p_BecomeDirt();
	bool p_IsNecrodancerPlatform();
	bool p_IsWire();
	void p_LoadWireImages(String,int);
	static c_List12* m_pendingTilesList;
	c_Tile* m_new(int,int,int,bool,int);
	c_Tile* m_new2();
	void p_AddTorch();
	void p_AddTextLabel(String,int,int,Float,bool,bool);
	void p_SetDoorTrigger(int);
	void p_SetTrigger(int);
	void p_SetDigTrigger(int);
	Float p_GetCurrentAlpha();
	void p_BecomeCracked();
	bool p_IsExit();
	void p_AddWireConnection(int);
	static void m_GenerateWireConnections();
	void p_AddFloorOverlayImage(String);
	void p_BecomeDarkShopWall(String);
	void p_DarkenShopWall();
	c_Sprite* p_LoadDiamond();
	void p_BecomeDiamond();
	static void m_CleanUpPendingTiles();
	void p_AddTorch2();
	bool p_IsNormalFloor();
	static int m_anyPlayerHaveRingOfShadowsCachedFrame;
	static int m_anyPlayerHaveCompassCachedFrame;
	static int m_anyPlayerHaveZoneMapCachedFrame;
	static int m_anyPlayerHaveMonocleCachedFrame;
	static int m_anyPlayerHaveRingOfLuckCachedFrame;
	static int m_anyPlayerHaveSunglassesCachedFrame;
	static bool m_IsNearNightmare(int,int);
	bool p_IsNearNightmare();
	static bool m_anyPlayerHaveMonocleCached;
	static bool m_AnyPlayerHaveMonocle();
	static bool m_anyPlayerHaveRingOfShadowsCached;
	static bool m_CheckRingOfShadows();
	bool p_IsInAnyPlayerTrueLineOfSight();
	bool p_IsInAnyPlayerLineOfSight();
	static void m_MoveAll();
	bool p_IsVisible();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	Float p_CalculateTileLightValue(bool);
	static bool m_anyPlayerHaveZoneMapCached;
	static bool m_AnyPlayerHaveZoneMap();
	static bool m_anyPlayerHaveCompassCached;
	static bool m_AnyPlayerHaveCompass();
	bool p_HasTileBeenSeen();
	Float p_CalculateTileAlpha();
	int p_SelectWireFrame();
	bool p_SelectWireFlip();
	void p_Update();
	void mark();
};
class c_Map13 : public Object{
	public:
	c_Node26* m_root;
	c_Map13();
	c_Node26* p_FirstNode();
	c_NodeEnumerator2* p_ObjectEnumerator();
	virtual int p_Compare(int,int)=0;
	c_Node26* p_FindNode(int);
	bool p_Contains(int);
	c_Tile* p_Get2(int);
	c_Map13* m_new();
	int p_RotateLeft12(c_Node26*);
	int p_RotateRight12(c_Node26*);
	int p_InsertFixup12(c_Node26*);
	bool p_Set13(int,c_Tile*);
	int p_Count();
	void mark();
};
class c_IntMap6 : public c_Map13{
	public:
	c_IntMap6();
	c_IntMap6* m_new();
	int p_Compare(int,int);
	void mark();
};
class c_Map14 : public Object{
	public:
	c_Node25* m_root;
	c_Map14();
	c_Map14* m_new();
	c_Node25* p_FirstNode();
	c_NodeEnumerator* p_ObjectEnumerator();
	int p_Clear();
	virtual int p_Compare(int,int)=0;
	c_Node25* p_FindNode(int);
	bool p_Contains(int);
	c_IntMap6* p_Get2(int);
	int p_RotateLeft13(c_Node25*);
	int p_RotateRight13(c_Node25*);
	int p_InsertFixup13(c_Node25*);
	bool p_Set14(int,c_IntMap6*);
	int p_Count();
	void mark();
};
class c_IntMap7 : public c_Map14{
	public:
	c_IntMap7();
	c_IntMap7* m_new();
	int p_Compare(int,int);
	void mark();
};
class c_NodeEnumerator : public Object{
	public:
	c_Node25* m_node;
	c_NodeEnumerator();
	c_NodeEnumerator* m_new(c_Node25*);
	c_NodeEnumerator* m_new2();
	bool p_HasNext();
	c_Node25* p_NextObject();
	void mark();
};
class c_Node25 : public Object{
	public:
	c_Node25* m_left;
	c_Node25* m_right;
	c_Node25* m_parent;
	c_IntMap6* m_value;
	int m_key;
	int m_color;
	c_Node25();
	c_Node25* p_NextNode();
	c_IntMap6* p_Value();
	c_Node25* m_new(int,c_IntMap6*,int,c_Node25*);
	c_Node25* m_new2();
	int p_Key();
	int p_Count2(int);
	void mark();
};
class c_NodeEnumerator2 : public Object{
	public:
	c_Node26* m_node;
	c_NodeEnumerator2();
	c_NodeEnumerator2* m_new(c_Node26*);
	c_NodeEnumerator2* m_new2();
	bool p_HasNext();
	c_Node26* p_NextObject();
	void mark();
};
class c_Node26 : public Object{
	public:
	c_Node26* m_left;
	c_Node26* m_right;
	c_Node26* m_parent;
	c_Tile* m_value;
	int m_key;
	int m_color;
	c_Node26();
	c_Node26* p_NextNode();
	c_Tile* p_Value();
	c_Node26* m_new(int,c_Tile*,int,c_Node26*);
	c_Node26* m_new2();
	int p_Key();
	int p_Count2(int);
	void mark();
};
class c_List12 : public Object{
	public:
	c_Node27* m__head;
	c_List12();
	c_List12* m_new();
	c_Node27* p_AddLast12(c_Tile*);
	c_List12* m_new2(Array<c_Tile* >);
	bool p_Equals10(c_Tile*,c_Tile*);
	int p_RemoveEach6(c_Tile*);
	int p_Count();
	c_Tile* p_RemoveFirst();
	c_Node27* p_Find5(c_Tile*,c_Node27*);
	c_Node27* p_Find6(c_Tile*);
	void p_RemoveFirst4(c_Tile*);
	void mark();
};
class c_Node27 : public Object{
	public:
	c_Node27* m__succ;
	c_Node27* m__pred;
	c_Tile* m__data;
	c_Node27();
	c_Node27* m_new(c_Node27*,c_Node27*,c_Tile*);
	c_Node27* m_new2();
	int p_Remove();
	void mark();
};
class c_HeadNode12 : public c_Node27{
	public:
	c_HeadNode12();
	c_HeadNode12* m_new();
	void mark();
};
class c_MinibossTileData : public Object{
	public:
	int m_x;
	int m_y;
	int m_type;
	int m_wireMask;
	c_MinibossTileData();
	c_MinibossTileData* m_new();
	void mark();
};
class c_List13 : public Object{
	public:
	c_Node28* m__head;
	c_List13();
	c_List13* m_new();
	c_Node28* p_AddLast13(c_MinibossTileData*);
	c_List13* m_new2(Array<c_MinibossTileData* >);
	int p_Clear();
	c_Enumerator9* p_ObjectEnumerator();
	void mark();
};
class c_Node28 : public Object{
	public:
	c_Node28* m__succ;
	c_Node28* m__pred;
	c_MinibossTileData* m__data;
	c_Node28();
	c_Node28* m_new(c_Node28*,c_Node28*,c_MinibossTileData*);
	c_Node28* m_new2();
	void mark();
};
class c_HeadNode13 : public c_Node28{
	public:
	c_HeadNode13();
	c_HeadNode13* m_new();
	void mark();
};
class c_RoomData : public Object{
	public:
	int m_x;
	int m_y;
	int m_w;
	int m_h;
	int m_type;
	bool m_hasExit;
	c_RoomData();
	c_RoomData* m_new(int,int,int,int,int,bool);
	c_RoomData* m_new2();
	c_Rect* p_GetBounds();
	c_Point* p_GetLocation();
	c_Point* p_GetSize();
	String p_ToString();
	void mark();
};
class c_List14 : public Object{
	public:
	c_Node29* m__head;
	c_List14();
	c_List14* m_new();
	c_Node29* p_AddLast14(c_RoomData*);
	c_List14* m_new2(Array<c_RoomData* >);
	int p_Clear();
	c_RoomData* p_Last2();
	c_Enumerator26* p_ObjectEnumerator();
	int p_Count();
	Array<c_RoomData* > p_ToArray();
	c_RoomData* p_RemoveFirst();
	bool p_Equals11(c_RoomData*,c_RoomData*);
	c_Node29* p_Find7(c_RoomData*,c_Node29*);
	c_Node29* p_Find8(c_RoomData*);
	void p_RemoveFirst5(c_RoomData*);
	void mark();
};
class c_Node29 : public Object{
	public:
	c_Node29* m__succ;
	c_Node29* m__pred;
	c_RoomData* m__data;
	c_Node29();
	c_Node29* m_new(c_Node29*,c_Node29*,c_RoomData*);
	c_Node29* m_new2();
	int p_Remove();
	void mark();
};
class c_HeadNode14 : public c_Node29{
	public:
	c_HeadNode14();
	c_HeadNode14* m_new();
	void mark();
};
class c_Trap : public c_Entity{
	public:
	int m_trapType;
	bool m_isRune;
	bool m_canBeReplacedByTempoTrap;
	c_Entity* m_triggeredOn;
	bool m_indestructible;
	c_Trap();
	static c_TrapList* m_trapList;
	static c_Trap* m_GetTrapAt(int,int);
	c_Trap* m_new(int,int,int);
	c_Trap* m_new2();
	static int m_GetTrapTypeAt(int,int);
	static c_Trap* m_FindRandomTrap();
	void p_Die();
	bool p_IsLive();
	static bool m_IsLiveTrapAt(int,int);
	static void m_MoveAll();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_List15 : public Object{
	public:
	c_Node30* m__head;
	c_List15();
	c_List15* m_new();
	c_Node30* p_AddLast15(c_Trap*);
	c_List15* m_new2(Array<c_Trap* >);
	int p_Clear();
	c_Enumerator7* p_ObjectEnumerator();
	int p_Count();
	Array<c_Trap* > p_ToArray();
	bool p_Equals12(c_Trap*,c_Trap*);
	int p_RemoveEach7(c_Trap*);
	void mark();
};
class c_TrapList : public c_List15{
	public:
	c_TrapList();
	c_TrapList* m_new();
	void mark();
};
class c_Node30 : public Object{
	public:
	c_Node30* m__succ;
	c_Node30* m__pred;
	c_Trap* m__data;
	c_Node30();
	c_Node30* m_new(c_Node30*,c_Node30*,c_Trap*);
	c_Node30* m_new2();
	int p_Remove();
	void mark();
};
class c_HeadNode15 : public c_Node30{
	public:
	c_HeadNode15();
	c_HeadNode15* m_new();
	void mark();
};
class c_List16 : public Object{
	public:
	c_Node31* m__head;
	c_List16();
	c_List16* m_new();
	c_Node31* p_AddLast16(c_ParticleSystem*);
	c_List16* m_new2(Array<c_ParticleSystem* >);
	int p_Clear();
	c_Enumerator33* p_ObjectEnumerator();
	bool p_Equals13(c_ParticleSystem*,c_ParticleSystem*);
	int p_RemoveEach8(c_ParticleSystem*);
	void p_Remove3(c_ParticleSystem*);
	void mark();
};
class c_Node31 : public Object{
	public:
	c_Node31* m__succ;
	c_Node31* m__pred;
	c_ParticleSystem* m__data;
	c_Node31();
	c_Node31* m_new(c_Node31*,c_Node31*,c_ParticleSystem*);
	c_Node31* m_new2();
	int p_Remove();
	void mark();
};
class c_HeadNode16 : public c_Node31{
	public:
	c_HeadNode16();
	c_HeadNode16* m_new();
	void mark();
};
class c_List17 : public Object{
	public:
	c_Node32* m__head;
	c_List17();
	c_List17* m_new();
	c_Node32* p_AddLast17(int);
	c_List17* m_new2(Array<int >);
	int p_Clear();
	void mark();
};
class c_IntList : public c_List17{
	public:
	c_IntList();
	c_IntList* m_new(Array<int >);
	c_IntList* m_new2();
	void mark();
};
class c_Node32 : public Object{
	public:
	c_Node32* m__succ;
	c_Node32* m__pred;
	int m__data;
	c_Node32();
	c_Node32* m_new(c_Node32*,c_Node32*,int);
	c_Node32* m_new2();
	void mark();
};
class c_HeadNode17 : public c_Node32{
	public:
	c_HeadNode17();
	c_HeadNode17* m_new();
	void mark();
};
class c_NPC : public c_Enemy{
	public:
	bool m_captive;
	bool m_wasCaptive;
	bool m_glassCage;
	c_Sprite* m_cageFrontImage;
	c_Sprite* m_cageBackImage;
	bool m_isMainShopkeeper;
	c_NPC();
	c_NPC* m_new();
	static c_List22* m_npcList;
	void p_NPCInit(int,int,int,String,bool,bool);
	static Float m_GetDistFromClosestNPC(int,int);
	void p_Delete();
	void p_Die();
	void p_Update();
	void mark();
};
class c_Transmogrifier : public c_NPC{
	public:
	int m_actionCost;
	int m_speechX;
	int m_speechY;
	c_Transmogrifier();
	void p_DisplayCost();
	c_Transmogrifier* m_new(int,int,int,bool);
	c_Transmogrifier* m_new2();
	void p_Die();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void mark();
};
class c_Conjurer : public c_NPC{
	public:
	int m_actionCost;
	int m_speechX;
	int m_speechY;
	c_Thing* m_box;
	c_Conjurer();
	void p_DisplayCost();
	c_Conjurer* m_new(int,int,int,bool);
	c_Conjurer* m_new2();
	void p_Die();
	void mark();
};
class c_Shriner : public c_NPC{
	public:
	int m_speechX;
	int m_speechY;
	c_Shrine* m_shrine1;
	c_Shrine* m_shrine2;
	c_Shrine* m_shrine3;
	c_Shriner();
	c_Shriner* m_new(int,int,int,bool);
	c_Shriner* m_new2();
	void p_Die();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_Pawnbroker : public c_NPC{
	public:
	c_Pawnbroker();
	c_Pawnbroker* m_new(int,int,int,bool);
	c_Pawnbroker* m_new2();
	void p_Die();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void mark();
};
class c_Map15 : public Object{
	public:
	c_Node33* m_root;
	c_Map15();
	c_Map15* m_new();
	int p_Clear();
	c_Node33* p_FirstNode();
	c_NodeEnumerator3* p_ObjectEnumerator();
	virtual int p_Compare3(c_Point*,c_Point*)=0;
	int p_RotateLeft14(c_Node33*);
	int p_RotateRight14(c_Node33*);
	int p_InsertFixup14(c_Node33*);
	bool p_Set15(c_Point*,c_Point*);
	bool p_Add6(c_Point*,c_Point*);
	c_Node33* p_FindNode3(c_Point*);
	bool p_Contains5(c_Point*);
	c_Point* p_Get4(c_Point*);
	int p_DeleteFixup(c_Node33*,c_Node33*);
	int p_RemoveNode(c_Node33*);
	int p_Remove4(c_Point*);
	void mark();
};
class c_ExitMap : public c_Map15{
	public:
	c_ExitMap();
	c_ExitMap* m_new();
	int p_Compare3(c_Point*,c_Point*);
	void mark();
};
class c_Node33 : public Object{
	public:
	c_Node33* m_left;
	c_Node33* m_right;
	c_Node33* m_parent;
	c_Point* m_key;
	c_Point* m_value;
	int m_color;
	c_Node33();
	c_Node33* p_NextNode();
	c_Point* p_Key();
	c_Point* p_Value();
	c_Node33* m_new(c_Point*,c_Point*,int,c_Node33*);
	c_Node33* m_new2();
	void mark();
};
class c_TilesetType : public Object{
	public:
	c_TilesetType();
	void mark();
};
class c_RoomType : public Object{
	public:
	c_RoomType();
	void mark();
};
class c_TileType : public Object{
	public:
	c_TileType();
	void mark();
};
class c_TileData : public Object{
	public:
	int m_x;
	int m_y;
	int m_type;
	c_TileData();
	c_TileData* m_new(int,int,int);
	c_TileData* m_new2();
	void mark();
};
class c_List18 : public Object{
	public:
	c_Node34* m__head;
	c_List18();
	c_List18* m_new();
	c_Node34* p_AddLast18(c_TileData*);
	c_List18* m_new2(Array<c_TileData* >);
	c_Enumerator8* p_ObjectEnumerator();
	void mark();
};
class c_Node34 : public Object{
	public:
	c_Node34* m__succ;
	c_Node34* m__pred;
	c_TileData* m__data;
	c_Node34();
	c_Node34* m_new(c_Node34*,c_Node34*,c_TileData*);
	c_Node34* m_new2();
	void mark();
};
class c_HeadNode18 : public c_Node34{
	public:
	c_HeadNode18();
	c_HeadNode18* m_new();
	void mark();
};
class c_Enumerator7 : public Object{
	public:
	c_List15* m__list;
	c_Node30* m__curr;
	c_Enumerator7();
	c_Enumerator7* m_new(c_List15*);
	c_Enumerator7* m_new2();
	bool p_HasNext();
	c_Trap* p_NextObject();
	void mark();
};
class c_Enumerator8 : public Object{
	public:
	c_List18* m__list;
	c_Node34* m__curr;
	c_Enumerator8();
	c_Enumerator8* m_new(c_List18*);
	c_Enumerator8* m_new2();
	bool p_HasNext();
	c_TileData* p_NextObject();
	void mark();
};
class c_Stack3 : public Object{
	public:
	Array<String > m_data;
	int m_length;
	c_Stack3();
	c_Stack3* m_new();
	c_Stack3* m_new2(Array<String >);
	void p_Push7(String);
	void p_Push8(Array<String >,int,int);
	void p_Push9(Array<String >,int);
	Array<String > p_ToArray();
	static String m_NIL;
	void p_Clear();
	c_Enumerator12* p_ObjectEnumerator();
	void p_Length2(int);
	int p_Length();
	String p_Pop();
	String p_Get2(int);
	void mark();
};
class c_StringStack : public c_Stack3{
	public:
	c_StringStack();
	c_StringStack* m_new(Array<String >);
	c_StringStack* m_new2();
	void mark();
};
class c_NodeEnumerator3 : public Object{
	public:
	c_Node33* m_node;
	c_NodeEnumerator3();
	c_NodeEnumerator3* m_new(c_Node33*);
	c_NodeEnumerator3* m_new2();
	bool p_HasNext();
	c_Node33* p_NextObject();
	void mark();
};
class c_Sarcophagus : public c_Enemy{
	public:
	int m_numEnemiesSpawned;
	c_Sarcophagus();
	static c_List19* m_sarcophagi;
	c_Sarcophagus* m_new(int,int,int);
	c_Sarcophagus* m_new2();
	void p_Delete();
	void p_Die();
	void p_Update();
	void mark();
};
class c_BeatAnimationData : public Object{
	public:
	int m_frame;
	Float m_onFraction;
	Float m_offFraction;
	bool m_singleFrame;
	c_BeatAnimationData();
	c_BeatAnimationData* m_new(int,Float,Float,bool);
	c_BeatAnimationData* m_new2();
	void mark();
};
class c_Map16 : public Object{
	public:
	c_Node35* m_root;
	c_Map16();
	c_Map16* m_new();
	int p_Clear();
	virtual int p_Compare(int,int)=0;
	int p_RotateLeft15(c_Node35*);
	int p_RotateRight15(c_Node35*);
	int p_InsertFixup15(c_Node35*);
	bool p_Set16(int,c_BeatAnimationData*);
	bool p_IsEmpty();
	void mark();
};
class c_IntMap8 : public c_Map16{
	public:
	c_IntMap8();
	c_IntMap8* m_new();
	int p_Compare(int,int);
	void mark();
};
class c_Node35 : public Object{
	public:
	int m_key;
	c_Node35* m_right;
	c_Node35* m_left;
	c_BeatAnimationData* m_value;
	int m_color;
	c_Node35* m_parent;
	c_Node35();
	c_Node35* m_new(int,c_BeatAnimationData*,int,c_Node35*);
	c_Node35* m_new2();
	void mark();
};
class c_List19 : public Object{
	public:
	c_Node36* m__head;
	c_List19();
	c_List19* m_new();
	c_Node36* p_AddLast19(c_Sarcophagus*);
	c_List19* m_new2(Array<c_Sarcophagus* >);
	int p_Count();
	bool p_Equals14(c_Sarcophagus*,c_Sarcophagus*);
	int p_RemoveEach9(c_Sarcophagus*);
	void mark();
};
class c_Node36 : public Object{
	public:
	c_Node36* m__succ;
	c_Node36* m__pred;
	c_Sarcophagus* m__data;
	c_Node36();
	c_Node36* m_new(c_Node36*,c_Node36*,c_Sarcophagus*);
	c_Node36* m_new2();
	int p_Remove();
	void mark();
};
class c_HeadNode19 : public c_Node36{
	public:
	c_HeadNode19();
	c_HeadNode19* m_new();
	void mark();
};
class c_KingConga : public c_Enemy{
	public:
	int m_initX;
	int m_initY;
	int m_initialXOff;
	c_Sprite* m_image2;
	c_List11* m_zombieFriends;
	c_KingConga();
	static c_KingConga* m_theKing;
	c_KingConga* m_new(int,int,int);
	c_KingConga* m_new2();
	void p_AddZombieFriend(c_Enemy*);
	void p_Die();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_ZombieSnake : public c_Enemy{
	public:
	c_ZombieSnake* m_zsChild;
	c_ZombieSnake* m_zsParent;
	c_ZombieSnake();
	c_ZombieSnake* m_new(int,int,int);
	c_ZombieSnake* m_new2();
	void p_SetChild(c_ZombieSnake*);
	void p_SetParent(c_ZombieSnake*);
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_Ghost : public c_Enemy{
	public:
	Array<Float > m_lastDist;
	c_Ghost();
	c_Ghost* m_new(int,int,int);
	c_Ghost* m_new2();
	void p_Update();
	void mark();
};
class c_Bat : public c_Enemy{
	public:
	c_Bat();
	c_Bat* m_new(int,int,int);
	c_Bat* m_new2();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_SkeletonMage : public c_Enemy{
	public:
	c_Sprite* m_gustImage;
	c_SkeletonMage();
	c_SkeletonMage* m_new(int,int,int);
	c_SkeletonMage* m_new2();
	void p_Update();
	void mark();
};
class c_Armadillo : public c_Enemy{
	public:
	c_Armadillo();
	c_Armadillo* m_new(int,int,int);
	c_Armadillo* m_new2();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_Hellhound : public c_Enemy{
	public:
	c_Hellhound();
	c_Hellhound* m_new(int,int,int);
	c_Hellhound* m_new2();
	void p_Die();
	void mark();
};
class c_Yeti : public c_Enemy{
	public:
	c_Yeti();
	c_Yeti* m_new(int,int,int);
	c_Yeti* m_new2();
	void p_Die();
	void p_Update();
	void mark();
};
class c_Goblin : public c_Enemy{
	public:
	Array<Float > m_lastDist;
	c_Goblin();
	c_Goblin* m_new(int,int,int);
	c_Goblin* m_new2();
	void p_Update();
	void mark();
};
class c_ElementalBase : public c_Enemy{
	public:
	c_ElementalBase();
	c_ElementalBase* m_new();
	void mark();
};
class c_IceElemental : public c_ElementalBase{
	public:
	c_IceElemental();
	c_IceElemental* m_new(int,int,int);
	c_IceElemental* m_new2();
	void mark();
};
class c_FireElemental : public c_ElementalBase{
	public:
	c_FireElemental();
	c_FireElemental* m_new(int,int,int);
	c_FireElemental* m_new2();
	void mark();
};
class c_Blademaster : public c_Enemy{
	public:
	c_Blademaster();
	c_Blademaster* m_new(int,int,int);
	c_Blademaster* m_new2();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_Harpy : public c_Enemy{
	public:
	c_Harpy();
	c_Harpy* m_new(int,int,int);
	c_Harpy* m_new2();
	void p_Update();
	void mark();
};
class c_Warlock : public c_Enemy{
	public:
	c_Warlock();
	c_Warlock* m_new(int,int,int);
	c_Warlock* m_new2();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void mark();
};
class c_GoblinBomber : public c_Enemy{
	public:
	bool m_dropBomb;
	c_GoblinBomber();
	c_GoblinBomber* m_new(int,int,int);
	c_GoblinBomber* m_new2();
	void p_Die();
	void p_Update();
	void mark();
};
class c_ElectricMage : public c_Enemy{
	public:
	c_ElectricMage();
	c_ElectricMage* m_new(int,int,int);
	c_ElectricMage* m_new2();
	void mark();
};
class c_Devil : public c_Enemy{
	public:
	c_Devil();
	c_Devil* m_new(int,int,int);
	c_Devil* m_new2();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_EvilEye : public c_Enemy{
	public:
	c_EvilEye();
	c_EvilEye* m_new(int,int,int);
	c_EvilEye* m_new2();
	void p_Update();
	void mark();
};
class c_SpikeTrap : public c_Trap{
	public:
	c_SpikeTrap();
	c_SpikeTrap* m_new(int,int);
	c_SpikeTrap* m_new2();
	void p_Update();
	void mark();
};
class c_TrapType : public Object{
	public:
	c_TrapType();
	static String m_ToDisplayName(int);
	void mark();
};
class c_SpeedUpTrap : public c_Trap{
	public:
	c_SpeedUpTrap();
	c_SpeedUpTrap* m_new(int,int);
	c_SpeedUpTrap* m_new2();
	void p_Update();
	void mark();
};
class c_ConfuseTrap : public c_Trap{
	public:
	c_ConfuseTrap();
	c_ConfuseTrap* m_new(int,int);
	c_ConfuseTrap* m_new2();
	void mark();
};
class c_DeathMetal : public c_Enemy{
	public:
	c_DeathMetal();
	c_DeathMetal* m_new(int,int,int);
	c_DeathMetal* m_new2();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_EnemyType : public Object{
	public:
	c_EnemyType();
	void mark();
};
class c_Slime : public c_Enemy{
	public:
	int m_moveCount;
	c_Slime();
	c_Slime* m_new(int,int,int);
	c_Slime* m_new2();
	bool p_CanBeLord();
	void p_Die();
	void p_Update();
	void mark();
};
class c_Skeleton : public c_Enemy{
	public:
	c_Skeleton();
	c_Skeleton* m_new(int,int,int);
	c_Skeleton* m_new2();
	bool p_CanBeLord();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_EnemyClamper : public c_Enemy{
	public:
	c_EnemyClamper();
	c_EnemyClamper* m_new();
	void mark();
};
class c_Monkey : public c_EnemyClamper{
	public:
	int m_startingHealth;
	int m_startingCoinsToDrop;
	c_Player* m_clampedOnto;
	c_Monkey();
	void p_Die();
	c_Monkey* m_new(int,int,int);
	c_Monkey* m_new2();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
extern Array<int > bb_controller_game_beatData;
class c_Enumerator9 : public Object{
	public:
	c_List13* m__list;
	c_Node28* m__curr;
	c_Enumerator9();
	c_Enumerator9* m_new(c_List13*);
	c_Enumerator9* m_new2();
	bool p_HasNext();
	c_MinibossTileData* p_NextObject();
	void mark();
};
String bb_item_GetResourceCoinType(int);
class c_List20 : public Object{
	public:
	c_Node37* m__head;
	c_List20();
	c_List20* m_new();
	c_Node37* p_AddLast20(c_Item*);
	c_List20* m_new2(Array<c_Item* >);
	c_Enumerator10* p_ObjectEnumerator();
	bool p_Equals15(c_Item*,c_Item*);
	int p_RemoveEach10(c_Item*);
	void mark();
};
class c_Node37 : public Object{
	public:
	c_Node37* m__succ;
	c_Node37* m__pred;
	c_Item* m__data;
	c_Node37();
	c_Node37* m_new(c_Node37*,c_Node37*,c_Item*);
	c_Node37* m_new2();
	int p_Remove();
	void mark();
};
class c_HeadNode20 : public c_Node37{
	public:
	c_HeadNode20();
	c_HeadNode20* m_new();
	void mark();
};
class c_Enumerator10 : public Object{
	public:
	c_List20* m__list;
	c_Node37* m__curr;
	c_Enumerator10();
	c_Enumerator10* m_new(c_List20*);
	c_Enumerator10* m_new2();
	bool p_HasNext();
	c_Item* p_NextObject();
	void mark();
};
class c_Bomb : public c_Item{
	public:
	c_Player* m_player;
	bool m_isBig;
	int m_beatsUntilExplosion;
	String m_damageSource;
	c_Sprite* m_explosionImg;
	c_Bomb();
	static c_List40* m_bombList;
	c_Bomb* m_new(int,int,c_Player*,bool,bool,String);
	c_Bomb* m_new2();
	void p_Die();
	bool p_IsVisible();
	void p_Update();
	void mark();
};
class c_List21 : public Object{
	public:
	c_Node38* m__head;
	c_List21();
	c_List21* m_new();
	c_Node38* p_AddLast21(c_Sprite*);
	c_List21* m_new2(Array<c_Sprite* >);
	c_Enumerator11* p_ObjectEnumerator();
	void mark();
};
class c_Node38 : public Object{
	public:
	c_Node38* m__succ;
	c_Node38* m__pred;
	c_Sprite* m__data;
	c_Node38();
	c_Node38* m_new(c_Node38*,c_Node38*,c_Sprite*);
	c_Node38* m_new2();
	void mark();
};
class c_HeadNode21 : public c_Node38{
	public:
	c_HeadNode21();
	c_HeadNode21* m_new();
	void mark();
};
class c_Enumerator11 : public Object{
	public:
	c_List21* m__list;
	c_Node38* m__curr;
	c_Enumerator11();
	c_Enumerator11* m_new(c_List21*);
	c_Enumerator11* m_new2();
	bool p_HasNext();
	c_Sprite* p_NextObject();
	void mark();
};
class c_Zombie : public c_Enemy{
	public:
	int m_facing;
	c_Zombie();
	c_Zombie* m_new(int,int,int);
	c_Zombie* m_new2();
	void p_Update();
	void mark();
};
class c_Wraith : public c_Enemy{
	public:
	String m_crySound;
	c_Wraith();
	static c_Wraith* m_theCursedWraith;
	void p_Die();
	c_Wraith* m_new(int,int,int);
	c_Wraith* m_new2();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_TrapChest : public c_Enemy{
	public:
	String m_contents;
	bool m_itemDropped;
	c_TrapChest();
	void p_DetermineContents();
	c_TrapChest* m_new(int,int,int);
	c_TrapChest* m_new2();
	void p_DropItem();
	void p_Die();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_IItemPredicate : public virtual gc_interface{
	public:
	virtual bool p_Call(c_XMLNode*)=0;
};
class c_StandardItemPredicate : public Object,public virtual c_IItemPredicate{
	public:
	String m_itemClass;
	int m_chestColor;
	String m_itemSlot;
	c_StandardItemPredicate();
	c_StandardItemPredicate* m_new(String,int,String);
	c_StandardItemPredicate* m_new2();
	bool p_Call(c_XMLNode*);
	void mark();
};
class c_ArmoredSkeleton : public c_Enemy{
	public:
	c_ArmoredSkeleton();
	c_ArmoredSkeleton* m_new(int,int,int);
	c_ArmoredSkeleton* m_new2();
	bool p_CanBeLord();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_Mushroom : public c_Enemy{
	public:
	c_Mushroom();
	c_Mushroom* m_new(int,int,int);
	c_Mushroom* m_new2();
	void p_Update();
	void mark();
};
class c_Golem : public c_Enemy{
	public:
	c_Golem();
	c_Golem* m_new(int,int,int);
	c_Golem* m_new2();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_Clone : public c_Enemy{
	public:
	c_Clone();
	c_Clone* m_new(int,int,int);
	c_Clone* m_new2();
	void mark();
};
class c_TarMonster : public c_EnemyClamper{
	public:
	c_Sprite* m_image2;
	int m_homeX;
	int m_homeY;
	int m_startingCoinsToDrop;
	c_Player* m_clampedOnto;
	c_TarMonster();
	c_TarMonster* m_new(int,int,int);
	c_TarMonster* m_new2();
	void p_Die();
	void p_Update();
	void mark();
};
class c_Mole : public c_Enemy{
	public:
	c_MoleDirt* m_currentDirt;
	c_Mole();
	void p_UnoccupyDirt();
	void p_PutDirt();
	c_Mole* m_new(int,int,int);
	c_Mole* m_new2();
	void p_Delete();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_MoleDirt : public c_Entity{
	public:
	bool m_occupied;
	c_MoleDirt();
	void p_Unoccupy();
	c_MoleDirt* m_new(int,int);
	c_MoleDirt* m_new2();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_ParticleSystemData : public Object{
	public:
	c_ParticleSystemData();
	static c_ParticleSystemData* m_MOLE_DIG;
	static c_ParticleSystemData* m_WATER_SPLASH_IN;
	static c_ParticleSystemData* m_TAR_SPLASH_IN;
	static c_ParticleSystemData* m_GEYSER;
	void mark();
};
class c_Wight : public c_Enemy{
	public:
	c_Wight();
	c_Wight* m_new(int,int,int);
	c_Wight* m_new2();
	void p_Update();
	void mark();
};
class c_FakeWall : public c_Enemy{
	public:
	bool m_goldDropped;
	c_FakeWall();
	c_FakeWall* m_new(int,int,int);
	c_FakeWall* m_new2();
	void p_DropItem();
	void p_Die();
	void p_Update();
	void mark();
};
class c_MushroomLight : public c_Enemy{
	public:
	bool m_isExploding;
	c_Sprite* m_explosionImg;
	c_MushroomLight();
	void p_InitMushroom(int,int,int,bool,bool);
	c_MushroomLight* m_new(int,int,int,bool,bool);
	c_MushroomLight* m_new2(int,int,int,bool);
	c_MushroomLight* m_new3(int,int,int);
	c_MushroomLight* m_new4();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_SkeletonKnight : public c_Enemy{
	public:
	c_SkeletonKnight();
	c_SkeletonKnight* m_new(int,int,int);
	c_SkeletonKnight* m_new2();
	void p_Die();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_Beetle : public c_Enemy{
	public:
	c_Beetle();
	c_Beetle* m_new(int,int,int);
	c_Beetle* m_new2();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_ShoveMonster : public c_Enemy{
	public:
	c_ShoveMonster();
	c_ShoveMonster* m_new(int,int,int);
	c_ShoveMonster* m_new2();
	void p_Update();
	void mark();
};
class c_Ghast : public c_Enemy{
	public:
	c_Ghast();
	c_Ghast* m_new(int,int,int);
	c_Ghast* m_new2();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_TrapCauldron : public c_Enemy{
	public:
	c_TrapCauldron();
	c_TrapCauldron* m_new(int,int,int);
	c_TrapCauldron* m_new2();
	void p_Die();
	void p_Update();
	void mark();
};
class c_Cauldron : public c_Enemy{
	public:
	c_Cauldron();
	c_Cauldron* m_new(int,int,int);
	c_Cauldron* m_new2();
	void p_Die();
	void p_Update();
	void mark();
};
class c_SleepingGoblin : public c_Enemy{
	public:
	c_SleepingGoblin();
	c_SleepingGoblin* m_new(int,int,int);
	c_SleepingGoblin* m_new2();
	void p_Update();
	void mark();
};
class c_Ghoul : public c_Enemy{
	public:
	c_Ghoul();
	c_Ghoul* m_new(int,int,int);
	c_Ghoul* m_new2();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_Lich : public c_Enemy{
	public:
	c_Sprite* m_gustImage;
	c_Lich();
	c_Lich* m_new(int,int,int);
	c_Lich* m_new2();
	void mark();
};
class c_Pixie : public c_Enemy{
	public:
	c_Sprite* m_explosionImg;
	c_Pixie();
	c_Pixie* m_new(int,int,int);
	c_Pixie* m_new2();
	void p_Die();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_Spider : public c_Enemy{
	public:
	c_Spider();
	c_Spider* m_new(int,int,int);
	c_Spider* m_new2();
	void p_Update();
	void mark();
};
class c_Mummy : public c_Enemy{
	public:
	c_Mummy();
	c_Mummy* m_new(int,int,int);
	c_Mummy* m_new2();
	void p_Update();
	void mark();
};
class c_Necrodancer : public c_Enemy{
	public:
	c_Sprite* m_iceBlast;
	c_Sprite* m_shieldImage;
	int m_origXOff;
	int m_actionTime;
	c_Item* m_theLute;
	bool m_saidLutePhrase;
	c_Necrodancer();
	static c_Necrodancer* m_necrodancer;
	static int m_wallsStep;
	c_Necrodancer* m_new(int,int,int);
	c_Necrodancer* m_new2();
	void p_Die();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_BatMiniboss : public c_Enemy{
	public:
	c_BatMiniboss();
	c_BatMiniboss* m_new(int,int,int);
	c_BatMiniboss* m_new2();
	void p_Update();
	void mark();
};
class c_Dragon : public c_Enemy{
	public:
	c_Sprite* m_iceBlast;
	int m_seekDistance;
	c_Dragon();
	c_Dragon* m_new(int,int,int);
	c_Dragon* m_new2();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_Banshee : public c_Enemy{
	public:
	c_Banshee();
	c_Banshee* m_new(int,int,int);
	c_Banshee* m_new2();
	void p_Die();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_Minotaur : public c_Enemy{
	public:
	int m_initalYOff;
	c_Minotaur();
	c_Minotaur* m_new(int,int,int);
	c_Minotaur* m_new2();
	void p_Update();
	void mark();
};
class c_Nightmare : public c_Enemy{
	public:
	Float m_NIGHTMARE_DARKNESS_RADIUS;
	c_Nightmare();
	static c_Nightmare* m_nightmare;
	c_Nightmare* m_new(int,int,int);
	c_Nightmare* m_new2();
	void p_Die();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	bool p_IsVisible();
	void p_Update();
	void mark();
};
class c_Mommy : public c_Enemy{
	public:
	c_Mommy();
	c_Mommy* m_new(int,int,int);
	c_Mommy* m_new2();
	void p_Update();
	void mark();
};
class c_Ogre : public c_Enemy{
	public:
	c_Sprite* m_imageStandard;
	c_Sprite* m_imageSmashLeft;
	c_Sprite* m_imageSmashDown;
	c_Sprite* m_imageSmashUp;
	c_Ogre();
	c_Ogre* m_new(int,int,int);
	c_Ogre* m_new2();
	void p_Update();
	void mark();
};
class c_MetroGnome : public c_Enemy{
	public:
	bool m_hasOrigin;
	int m_originX;
	int m_originY;
	c_MetroGnome();
	c_MetroGnome* m_new(int,int,int);
	c_MetroGnome* m_new2();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_Shopkeeper : public c_NPC{
	public:
	c_Shopkeeper();
	static int m_shopkeeperStartX;
	static int m_shopkeeperStartY;
	static bool m_isMonstrous;
	c_Shopkeeper* m_new(int,int,int,bool);
	c_Shopkeeper* m_new2();
	void p_Die();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_List22 : public Object{
	public:
	c_Node39* m__head;
	c_List22();
	c_List22* m_new();
	c_Node39* p_AddLast22(c_NPC*);
	c_List22* m_new2(Array<c_NPC* >);
	c_Enumerator29* p_ObjectEnumerator();
	bool p_Equals16(c_NPC*,c_NPC*);
	int p_RemoveEach11(c_NPC*);
	void mark();
};
class c_Node39 : public Object{
	public:
	c_Node39* m__succ;
	c_Node39* m__pred;
	c_NPC* m__data;
	c_Node39();
	c_Node39* m_new(c_Node39*,c_Node39*,c_NPC*);
	c_Node39* m_new2();
	int p_Remove();
	void mark();
};
class c_HeadNode22 : public c_Node39{
	public:
	c_HeadNode22();
	c_HeadNode22* m_new();
	void mark();
};
class c_ShopkeeperGhost : public c_Enemy{
	public:
	c_ShopkeeperGhost();
	c_ShopkeeperGhost* m_new(int,int,int);
	c_ShopkeeperGhost* m_new2();
	void p_Die();
	bool p_IsVisible();
	void p_Update();
	void mark();
};
class c_Skull : public c_Enemy{
	public:
	c_Skull();
	c_Skull* m_new(int,int,int);
	c_Skull* m_new2();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void mark();
};
class c_Fortissimole : public c_Enemy{
	public:
	int m_yOffOffstage;
	int m_yOffOnstage;
	int m_paceDir;
	c_MoleDirt* m_currentDirt;
	c_Fortissimole();
	c_Fortissimole* m_new(int,int,int);
	c_Fortissimole* m_new2();
	static void m_SpawnFans();
	void p_UnoccupyDirt();
	void p_Die();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_Pawn : public c_Enemy{
	public:
	c_Pawn();
	c_Pawn* m_new(int,int,int);
	c_Pawn* m_new2();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void mark();
};
class c_Knight : public c_Enemy{
	public:
	c_Sprite* m_customAttackSwipe;
	c_Knight();
	c_Knight* m_new(int,int,int);
	c_Knight* m_new2();
	void mark();
};
class c_Bishop : public c_Enemy{
	public:
	c_Bishop();
	c_Bishop* m_new(int,int,int);
	c_Bishop* m_new2();
	void mark();
};
class c_Rook : public c_Enemy{
	public:
	bool m_castleNextMove;
	c_Rook();
	c_Rook* m_new(int,int,int);
	c_Rook* m_new2();
	void p_Update();
	void mark();
};
class c_Queen : public c_Enemy{
	public:
	int m_initialYOff;
	c_Queen();
	c_Queen* m_new(int,int,int);
	c_Queen* m_new2();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_WaterBall : public c_Enemy{
	public:
	c_WaterBall();
	c_WaterBall* m_new(int,int,int);
	c_WaterBall* m_new2();
	void p_PlaceTileAt(int,int);
	void p_Die();
	void mark();
};
class c_Gorgon : public c_Enemy{
	public:
	int m_statueFlashFrames;
	c_Gorgon();
	c_Gorgon* m_new(int,int,int);
	c_Gorgon* m_new2();
	void p_Die();
	void mark();
};
class c_ZombieElectric : public c_Enemy{
	public:
	int m_facing;
	c_ZombieElectric();
	int p_GetMovementDir();
	c_ZombieElectric* m_new(int,int,int);
	c_ZombieElectric* m_new2();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_Orc : public c_Enemy{
	public:
	int m_facing;
	c_Orc();
	c_Orc* m_new(int,int,int);
	c_Orc* m_new2();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_BounceTrap : public c_Trap{
	public:
	int m_bounceDir;
	bool m_isRotatingCW;
	bool m_isRotatingCCW;
	int m_originalDir;
	c_BounceTrap();
	c_BounceTrap* m_new(int,int,int);
	c_BounceTrap* m_new2();
	void p_Update();
	void mark();
};
class c_BounceTrapDirection : public Object{
	public:
	c_BounceTrapDirection();
	static String m_ToString(int);
	void mark();
};
class c_King : public c_Enemy{
	public:
	int m_initialYOff;
	c_King();
	c_King* m_new(int,int,int);
	c_King* m_new2();
	void p_Die();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_Octoboss : public c_Enemy{
	public:
	int m_initXOff;
	c_Tentacle* m_tentacle3;
	c_Tentacle* m_tentacle7;
	c_Tentacle* m_tentacle5;
	c_Tentacle* m_tentacle1;
	c_Tentacle* m_tentacle2;
	c_Tentacle* m_tentacle6;
	c_Tentacle* m_tentacle8;
	c_Tentacle* m_tentacle4;
	c_List17* m_phaseOrder;
	c_Octoboss();
	c_Octoboss* m_new(int,int,int);
	c_Octoboss* m_new2();
	void p_Die();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_Tentacle : public c_Enemy{
	public:
	int m_initX;
	int m_initY;
	int m_initialXOff;
	c_Sprite* m_image2;
	int m_nextX;
	int m_nextY;
	c_Octoboss* m_boss;
	int m_tentacleNum;
	c_Tentacle();
	c_Tentacle* m_new(int,int,int);
	c_Tentacle* m_new2();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_Bell : public c_Enemy{
	public:
	int m_bellNum;
	bool m_isBig;
	c_Bell();
	static c_List23* m_bells;
	c_Bell* m_new(int,int,int);
	c_Bell* m_new2();
	void p_Die();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_List23 : public Object{
	public:
	c_Node40* m__head;
	c_List23();
	c_List23* m_new();
	c_Node40* p_AddLast23(c_Bell*);
	c_List23* m_new2(Array<c_Bell* >);
	bool p_Equals17(c_Bell*,c_Bell*);
	int p_RemoveEach12(c_Bell*);
	void mark();
};
class c_Node40 : public Object{
	public:
	c_Node40* m__succ;
	c_Node40* m__pred;
	c_Bell* m__data;
	c_Node40();
	c_Node40* m_new(c_Node40*,c_Node40*,c_Bell*);
	c_Node40* m_new2();
	int p_Remove();
	void mark();
};
class c_HeadNode23 : public c_Node40{
	public:
	c_HeadNode23();
	c_HeadNode23* m_new();
	void mark();
};
class c_DeadRinger : public c_Enemy{
	public:
	int m_seekingBell;
	Array<c_Bell* > m_bells;
	c_Sprite* m_imageStandard;
	c_Sprite* m_imageSmash;
	c_Sprite* m_imageCharge;
	c_Sprite* m_imageChargeSwipe;
	c_DeadRinger();
	c_DeadRinger* m_new(int,int,int,c_Bell*,c_Bell*,c_Bell*,c_Bell*);
	c_DeadRinger* m_new2();
	void p_Die();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_Rect : public Object{
	public:
	int m_x;
	int m_y;
	int m_w;
	int m_h;
	c_Rect();
	c_Rect* m_new(int,int,int,int);
	c_Rect* m_new2();
	int p_GetRight();
	int p_GetBottom();
	String p_ToString();
	static c_Rect* m_MakeBounds(int,int,int,int);
	bool p_Contains6(c_Rect*);
	bool p_Contains7(int,int);
	bool p_Contains5(c_Point*);
	c_Point* p_GetCenter();
	c_Point* p_RandomPoint();
	c_Stack4* p_GetPoints();
	int p_GetLeft();
	int p_GetTop();
	bool p_OnBorder(int,int);
	int p_GetL1Dist(c_Point*);
	c_Stack4* p_GetCorners();
	int p_GetL1Dist2(c_Rect*);
	bool p_ContainsNoCorners(c_Rect*);
	c_Rect* p_Copy();
	void mark();
};
class c_Stack4 : public Object{
	public:
	Array<c_Point* > m_data;
	int m_length;
	c_Stack4();
	c_Stack4* m_new();
	c_Stack4* m_new2(Array<c_Point* >);
	void p_Push10(c_Point*);
	void p_Push11(Array<c_Point* >,int,int);
	void p_Push12(Array<c_Point* >,int);
	c_Point* p_Get2(int);
	c_Enumerator24* p_ObjectEnumerator();
	static c_Point* m_NIL;
	void p_Length2(int);
	int p_Length();
	void p_Set17(int,c_Point*);
	void p_Remove2(int);
	c_Point* p_Pop();
	void mark();
};
class c_StackEx2 : public c_Stack4{
	public:
	c_StackEx2();
	c_StackEx2* m_new();
	c_Point* p_ChooseRandom(bool);
	void p_Shuffle(bool);
	void mark();
};
class c_IntPointStack : public c_StackEx2{
	public:
	c_IntPointStack();
	c_IntPointStack* m_new();
	void mark();
};
class c_Stack5 : public Object{
	public:
	Array<c_XMLNode* > m_data;
	int m_length;
	c_Stack5();
	c_Stack5* m_new();
	c_Stack5* m_new2(Array<c_XMLNode* >);
	static c_XMLNode* m_NIL;
	void p_Clear();
	void p_Push13(c_XMLNode*);
	void p_Push14(Array<c_XMLNode* >,int,int);
	void p_Push15(Array<c_XMLNode* >,int);
	bool p_IsEmpty();
	c_XMLNode* p_Get2(int);
	void p_Remove2(int);
	c_Enumerator13* p_ObjectEnumerator();
	void p_Length2(int);
	int p_Length();
	void mark();
};
class c_Enumerator12 : public Object{
	public:
	c_Stack3* m_stack;
	int m_index;
	c_Enumerator12();
	c_Enumerator12* m_new(c_Stack3*);
	c_Enumerator12* m_new2();
	bool p_HasNext();
	String p_NextObject();
	void mark();
};
class c_Enumerator13 : public Object{
	public:
	c_Stack5* m_stack;
	int m_index;
	c_Enumerator13();
	c_Enumerator13* m_new(c_Stack5*);
	c_Enumerator13* m_new2();
	bool p_HasNext();
	c_XMLNode* p_NextObject();
	void mark();
};
extern bool bb_controller_game_debugEnablePrototypes;
class c_TileObject : public Object{
	public:
	int m_x;
	int m_y;
	int m_type;
	int m_zone;
	bool m_cracked;
	bool m_torch;
	c_TileObject();
	void mark();
};
class c_List24 : public Object{
	public:
	c_Node41* m__head;
	c_List24();
	c_List24* m_new();
	c_Node41* p_AddLast24(c_TileObject*);
	c_List24* m_new2(Array<c_TileObject* >);
	c_Enumerator14* p_ObjectEnumerator();
	void mark();
};
class c_Node41 : public Object{
	public:
	c_Node41* m__succ;
	c_Node41* m__pred;
	c_TileObject* m__data;
	c_Node41();
	c_Node41* m_new(c_Node41*,c_Node41*,c_TileObject*);
	c_Node41* m_new2();
	void mark();
};
class c_HeadNode24 : public c_Node41{
	public:
	c_HeadNode24();
	c_HeadNode24* m_new();
	void mark();
};
class c_Enumerator14 : public Object{
	public:
	c_List24* m__list;
	c_Node41* m__curr;
	c_Enumerator14();
	c_Enumerator14* m_new(c_List24*);
	c_Enumerator14* m_new2();
	bool p_HasNext();
	c_TileObject* p_NextObject();
	void mark();
};
class c_Direction : public Object{
	public:
	c_Direction();
	void mark();
};
class c_TrapObject : public Object{
	public:
	int m_type;
	int m_x;
	int m_y;
	int m_subtype;
	c_TrapObject();
	void mark();
};
class c_List25 : public Object{
	public:
	c_Node42* m__head;
	c_List25();
	c_List25* m_new();
	c_Node42* p_AddLast25(c_TrapObject*);
	c_List25* m_new2(Array<c_TrapObject* >);
	c_Enumerator15* p_ObjectEnumerator();
	void mark();
};
class c_Node42 : public Object{
	public:
	c_Node42* m__succ;
	c_Node42* m__pred;
	c_TrapObject* m__data;
	c_Node42();
	c_Node42* m_new(c_Node42*,c_Node42*,c_TrapObject*);
	c_Node42* m_new2();
	void mark();
};
class c_HeadNode25 : public c_Node42{
	public:
	c_HeadNode25();
	c_HeadNode25* m_new();
	void mark();
};
class c_Enumerator15 : public Object{
	public:
	c_List25* m__list;
	c_Node42* m__curr;
	c_Enumerator15();
	c_Enumerator15* m_new(c_List25*);
	c_Enumerator15* m_new2();
	bool p_HasNext();
	c_TrapObject* p_NextObject();
	void mark();
};
class c_TrapDoor : public c_Trap{
	public:
	c_TrapDoor();
	c_TrapDoor* m_new(int,int);
	c_TrapDoor* m_new2();
	void p_Update();
	void mark();
};
class c_TeleportTrap : public c_Trap{
	public:
	c_TeleportTrap();
	c_TeleportTrap* m_new(int,int);
	c_TeleportTrap* m_new2();
	void p_Update();
	void mark();
};
class c_SlowDownTrap : public c_Trap{
	public:
	c_SlowDownTrap();
	c_SlowDownTrap* m_new(int,int);
	c_SlowDownTrap* m_new2();
	void p_Update();
	void mark();
};
class c_BombTrap : public c_Trap{
	public:
	c_BombTrap();
	c_BombTrap* m_new(int,int);
	c_BombTrap* m_new2();
	void mark();
};
class c_ScatterTrap : public c_Trap{
	public:
	c_ScatterTrap();
	c_ScatterTrap* m_new(int,int);
	c_ScatterTrap* m_new2();
	void p_Update();
	void mark();
};
class c_FireTrap : public c_Trap{
	public:
	int m_fireDir;
	bool m_manual;
	c_FireTrap();
	c_FireTrap* m_new(int,int,int,bool);
	c_FireTrap* m_new2();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_List26 : public Object{
	public:
	c_Node43* m__head;
	c_List26();
	c_List26* m_new();
	c_Node43* p_AddLast26(c_Point*);
	c_List26* m_new2(Array<c_Point* >);
	int p_Count();
	c_Enumerator16* p_ObjectEnumerator();
	Array<c_Point* > p_ToArray();
	c_Point* p_RemoveFirst();
	virtual bool p_Equals18(c_Point*,c_Point*);
	c_Node43* p_Find9(c_Point*,c_Node43*);
	c_Node43* p_Find10(c_Point*);
	void p_RemoveFirst6(c_Point*);
	int p_Clear();
	int p_RemoveEach13(c_Point*);
	bool p_IsEmpty();
	void mark();
};
class c_IntPointList : public c_List26{
	public:
	c_IntPointList();
	c_IntPointList* m_new();
	bool p_Equals18(c_Point*,c_Point*);
	void mark();
};
class c_Node43 : public Object{
	public:
	c_Node43* m__succ;
	c_Node43* m__pred;
	c_Point* m__data;
	c_Node43();
	c_Node43* m_new(c_Node43*,c_Node43*,c_Point*);
	c_Node43* m_new2();
	int p_Remove();
	void mark();
};
class c_HeadNode26 : public c_Node43{
	public:
	c_HeadNode26();
	c_HeadNode26* m_new();
	void mark();
};
class c_Enumerator16 : public Object{
	public:
	c_List26* m__list;
	c_Node43* m__curr;
	c_Enumerator16();
	c_Enumerator16* m_new(c_List26*);
	c_Enumerator16* m_new2();
	bool p_HasNext();
	c_Point* p_NextObject();
	void mark();
};
class c_SpecialRoomType : public Object{
	public:
	c_SpecialRoomType();
	void mark();
};
class c_TravelRune : public c_Trap{
	public:
	int m_runeType;
	int m_travelToX;
	int m_travelToY;
	c_TravelRune();
	c_TravelRune* m_new(int,int,int,int,int);
	c_TravelRune* m_new2();
	void p_Update();
	void mark();
};
class c_TravelRuneType : public Object{
	public:
	c_TravelRuneType();
	void mark();
};
class c_Medic : public c_NPC{
	public:
	c_Medic();
	c_Medic* m_new(int,int,int,bool);
	c_Medic* m_new2();
	void p_Update();
	void mark();
};
class c_List27 : public Object{
	public:
	c_Node44* m__head;
	c_List27();
	c_List27* m_new();
	c_Node44* p_AddLast27(c_SaleItem*);
	c_List27* m_new2(Array<c_SaleItem* >);
	bool p_Equals19(c_SaleItem*,c_SaleItem*);
	int p_RemoveEach14(c_SaleItem*);
	c_Enumerator30* p_ObjectEnumerator();
	void mark();
};
class c_Node44 : public Object{
	public:
	c_Node44* m__succ;
	c_Node44* m__pred;
	c_SaleItem* m__data;
	c_Node44();
	c_Node44* m_new(c_Node44*,c_Node44*,c_SaleItem*);
	c_Node44* m_new2();
	int p_Remove();
	void mark();
};
class c_HeadNode27 : public c_Node44{
	public:
	c_HeadNode27();
	c_HeadNode27* m_new();
	void mark();
};
class c_Thing : public c_Entity{
	public:
	c_Thing();
	c_Thing* m_new(int,int,bool);
	c_Thing* m_new2();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_WeightedPicker : public Object{
	public:
	c_Stack2* m_weights;
	c_Stack6* m_enabled;
	c_WeightedPicker();
	c_WeightedPicker* m_new();
	void p_Push4(int);
	int p__IndexOfEnabled(int);
	int p_PickRandom(bool);
	int p_Length();
	void p_SetEnabled(int,bool);
	void mark();
};
class c_Stack6 : public Object{
	public:
	Array<bool > m_data;
	int m_length;
	c_Stack6();
	c_Stack6* m_new();
	c_Stack6* m_new2(Array<bool >);
	void p_Push16(bool);
	void p_Push17(Array<bool >,int,int);
	void p_Push18(Array<bool >,int);
	static bool m_NIL;
	void p_Length2(int);
	int p_Length();
	bool p_Get2(int);
	void p_Set18(int,bool);
	void mark();
};
class c_UncertaintyWeaponPredicate : public Object,public virtual c_IItemPredicate{
	public:
	c_UncertaintyWeaponPredicate();
	c_UncertaintyWeaponPredicate* m_new();
	bool p_Call(c_XMLNode*);
	void mark();
};
class c_UncertaintyRingPredicate : public Object,public virtual c_IItemPredicate{
	public:
	c_UncertaintyRingPredicate();
	c_UncertaintyRingPredicate* m_new();
	bool p_Call(c_XMLNode*);
	void mark();
};
class c_List28 : public Object{
	public:
	c_Node45* m__head;
	c_List28();
	c_List28* m_new();
	c_Node45* p_AddLast28(c_Shrine*);
	c_List28* m_new2(Array<c_Shrine* >);
	c_Enumerator28* p_ObjectEnumerator();
	bool p_Equals20(c_Shrine*,c_Shrine*);
	int p_RemoveEach15(c_Shrine*);
	void mark();
};
class c_Node45 : public Object{
	public:
	c_Node45* m__succ;
	c_Node45* m__pred;
	c_Shrine* m__data;
	c_Node45();
	c_Node45* m_new(c_Node45*,c_Node45*,c_Shrine*);
	c_Node45* m_new2();
	int p_Remove();
	void mark();
};
class c_HeadNode28 : public c_Node45{
	public:
	c_HeadNode28();
	c_HeadNode28* m_new();
	void mark();
};
class c_EnemyObject : public Object{
	public:
	int m_x;
	int m_y;
	int m_type;
	int m_beatDelay;
	bool m_lord;
	c_EnemyObject();
	void mark();
};
class c_List29 : public Object{
	public:
	c_Node46* m__head;
	c_List29();
	c_List29* m_new();
	c_Node46* p_AddLast29(c_EnemyObject*);
	c_List29* m_new2(Array<c_EnemyObject* >);
	c_Enumerator17* p_ObjectEnumerator();
	void mark();
};
class c_Node46 : public Object{
	public:
	c_Node46* m__succ;
	c_Node46* m__pred;
	c_EnemyObject* m__data;
	c_Node46();
	c_Node46* m_new(c_Node46*,c_Node46*,c_EnemyObject*);
	c_Node46* m_new2();
	void mark();
};
class c_HeadNode29 : public c_Node46{
	public:
	c_HeadNode29();
	c_HeadNode29* m_new();
	void mark();
};
class c_Enumerator17 : public Object{
	public:
	c_List29* m__list;
	c_Node46* m__curr;
	c_Enumerator17();
	c_Enumerator17* m_new(c_List29*);
	c_Enumerator17* m_new2();
	bool p_HasNext();
	c_EnemyObject* p_NextObject();
	void mark();
};
class c_ItemObject : public Object{
	public:
	Float m_bloodCost;
	int m_saleCost;
	int m_x;
	int m_y;
	String m_type;
	bool m_singleChoice;
	c_ItemObject();
	void mark();
};
class c_List30 : public Object{
	public:
	c_Node47* m__head;
	c_List30();
	c_List30* m_new();
	c_Node47* p_AddLast30(c_ItemObject*);
	c_List30* m_new2(Array<c_ItemObject* >);
	c_Enumerator18* p_ObjectEnumerator();
	void mark();
};
class c_Node47 : public Object{
	public:
	c_Node47* m__succ;
	c_Node47* m__pred;
	c_ItemObject* m__data;
	c_Node47();
	c_Node47* m_new(c_Node47*,c_Node47*,c_ItemObject*);
	c_Node47* m_new2();
	void mark();
};
class c_HeadNode30 : public c_Node47{
	public:
	c_HeadNode30();
	c_HeadNode30* m_new();
	void mark();
};
class c_Enumerator18 : public Object{
	public:
	c_List30* m__list;
	c_Node47* m__curr;
	c_Enumerator18();
	c_Enumerator18* m_new(c_List30*);
	c_Enumerator18* m_new2();
	bool p_HasNext();
	c_ItemObject* p_NextObject();
	void mark();
};
class c_ChestObject : public Object{
	public:
	int m_saleCost;
	int m_x;
	int m_y;
	String m_contents;
	bool m_hidden;
	int m_color;
	bool m_singleChoice;
	c_ChestObject();
	void mark();
};
class c_List31 : public Object{
	public:
	c_Node48* m__head;
	c_List31();
	c_List31* m_new();
	c_Node48* p_AddLast31(c_ChestObject*);
	c_List31* m_new2(Array<c_ChestObject* >);
	c_Enumerator19* p_ObjectEnumerator();
	void mark();
};
class c_Node48 : public Object{
	public:
	c_Node48* m__succ;
	c_Node48* m__pred;
	c_ChestObject* m__data;
	c_Node48();
	c_Node48* m_new(c_Node48*,c_Node48*,c_ChestObject*);
	c_Node48* m_new2();
	void mark();
};
class c_HeadNode31 : public c_Node48{
	public:
	c_HeadNode31();
	c_HeadNode31* m_new();
	void mark();
};
class c_Enumerator19 : public Object{
	public:
	c_List31* m__list;
	c_Node48* m__curr;
	c_Enumerator19();
	c_Enumerator19* m_new(c_List31*);
	c_Enumerator19* m_new2();
	bool p_HasNext();
	c_ChestObject* p_NextObject();
	void mark();
};
class c_List32 : public Object{
	public:
	c_Node49* m__head;
	c_List32();
	c_List32* m_new();
	c_Node49* p_AddLast32(c_Chest*);
	c_List32* m_new2(Array<c_Chest* >);
	c_Enumerator27* p_ObjectEnumerator();
	bool p_Equals21(c_Chest*,c_Chest*);
	int p_RemoveEach16(c_Chest*);
	bool p_IsEmpty();
	c_Chest* p_First();
	void mark();
};
class c_Node49 : public Object{
	public:
	c_Node49* m__succ;
	c_Node49* m__pred;
	c_Chest* m__data;
	c_Node49();
	c_Node49* m_new(c_Node49*,c_Node49*,c_Chest*);
	c_Node49* m_new2();
	int p_Remove();
	void mark();
};
class c_HeadNode32 : public c_Node49{
	public:
	c_HeadNode32();
	c_HeadNode32* m_new();
	void mark();
};
class c_ChestColor : public Object{
	public:
	c_ChestColor();
	static String m_ToString(int);
	void mark();
};
class c_SaleChest : public c_Chest{
	public:
	int m_cost;
	c_SaleChest();
	static c_List33* m_currentSaleChests;
	void p_SetCost();
	c_SaleChest* m_new(int,int,String,bool,bool,bool,int);
	c_SaleChest* m_new2();
	void p_Die();
	bool p_Open(Object*);
	void mark();
};
class c_List33 : public Object{
	public:
	c_Node50* m__head;
	c_List33();
	c_List33* m_new();
	c_Node50* p_AddLast33(c_SaleChest*);
	c_List33* m_new2(Array<c_SaleChest* >);
	bool p_Equals22(c_SaleChest*,c_SaleChest*);
	int p_RemoveEach17(c_SaleChest*);
	void mark();
};
class c_Node50 : public Object{
	public:
	c_Node50* m__succ;
	c_Node50* m__pred;
	c_SaleChest* m__data;
	c_Node50();
	c_Node50* m_new(c_Node50*,c_Node50*,c_SaleChest*);
	c_Node50* m_new2();
	int p_Remove();
	void mark();
};
class c_HeadNode33 : public c_Node50{
	public:
	c_HeadNode33();
	c_HeadNode33* m_new();
	void mark();
};
class c_CrateObject : public Object{
	public:
	int m_x;
	int m_y;
	int m_type;
	String m_contents;
	c_CrateObject();
	void mark();
};
class c_List34 : public Object{
	public:
	c_Node51* m__head;
	c_List34();
	c_List34* m_new();
	c_Node51* p_AddLast34(c_CrateObject*);
	c_List34* m_new2(Array<c_CrateObject* >);
	c_Enumerator20* p_ObjectEnumerator();
	void mark();
};
class c_Node51 : public Object{
	public:
	c_Node51* m__succ;
	c_Node51* m__pred;
	c_CrateObject* m__data;
	c_Node51();
	c_Node51* m_new(c_Node51*,c_Node51*,c_CrateObject*);
	c_Node51* m_new2();
	void mark();
};
class c_HeadNode34 : public c_Node51{
	public:
	c_HeadNode34();
	c_HeadNode34* m_new();
	void mark();
};
class c_Enumerator20 : public Object{
	public:
	c_List34* m__list;
	c_Node51* m__curr;
	c_Enumerator20();
	c_Enumerator20* m_new(c_List34*);
	c_Enumerator20* m_new2();
	bool p_HasNext();
	c_CrateObject* p_NextObject();
	void mark();
};
class c_ShrineObject : public Object{
	public:
	int m_x;
	int m_y;
	int m_type;
	c_ShrineObject();
	void mark();
};
class c_List35 : public Object{
	public:
	c_Node52* m__head;
	c_List35();
	c_List35* m_new();
	c_Node52* p_AddLast35(c_ShrineObject*);
	c_List35* m_new2(Array<c_ShrineObject* >);
	c_Enumerator21* p_ObjectEnumerator();
	void mark();
};
class c_Node52 : public Object{
	public:
	c_Node52* m__succ;
	c_Node52* m__pred;
	c_ShrineObject* m__data;
	c_Node52();
	c_Node52* m_new(c_Node52*,c_Node52*,c_ShrineObject*);
	c_Node52* m_new2();
	void mark();
};
class c_HeadNode35 : public c_Node52{
	public:
	c_HeadNode35();
	c_HeadNode35* m_new();
	void mark();
};
class c_Enumerator21 : public Object{
	public:
	c_List35* m__list;
	c_Node52* m__curr;
	c_Enumerator21();
	c_Enumerator21* m_new(c_List35*);
	c_Enumerator21* m_new2();
	bool p_HasNext();
	c_ShrineObject* p_NextObject();
	void mark();
};
class c_SwarmSarcophagus : public c_Enemy{
	public:
	c_SwarmSarcophagus();
	c_SwarmSarcophagus* m_new(int,int);
	c_SwarmSarcophagus* m_new2();
	void p_Delete();
	void p_Update();
	void mark();
};
class c_RoomBase : public Object{
	public:
	c_RoomBase();
	c_RoomBase* m_new();
	virtual bool p_IsWall3(int,int)=0;
	virtual bool p_IsOutside(int,int)=0;
	virtual c_Rect* p_GetBounds()=0;
	virtual bool p_IsFloor2(int,int)=0;
	c_StackEx3* p_GetPortalSegs();
	c_IntPointStack* p_GetFloor();
	virtual c_Point* p_GetRandPoint();
	void mark();
};
class c_BlobRoom : public c_RoomBase{
	public:
	c_IntPointSet* m_footprint;
	c_BlobRoom();
	c_BlobRoom* m_new();
	void p_FillRect(int,int,int,int);
	void p_ReflectHorizontallyAbout(int);
	void p_RotateCWAbout(c_Point*);
	void p_TranslateBy(c_Point*);
	bool p_IsOutsidePoint(c_Point*);
	bool p_IsOutside(int,int);
	bool p_IsWall3(int,int);
	bool p_IsWallPoint(c_Point*);
	c_Stack7* p_MakeTiles();
	c_Rect* p_GetBounds();
	bool p_IsFloorPoint(c_Point*);
	bool p_IsFloor2(int,int);
	void mark();
};
class c_Set3 : public Object{
	public:
	c_Map17* m_map;
	c_Set3();
	c_Set3* m_new(c_Map17*);
	c_Set3* m_new2();
	bool p_Contains5(c_Point*);
	int p_Insert9(c_Point*);
	c_KeyEnumerator* p_ObjectEnumerator();
	void mark();
};
class c_IntPointSet : public c_Set3{
	public:
	c_IntPointSet();
	c_IntPointSet* m_new();
	void mark();
};
class c_Map17 : public Object{
	public:
	c_Node53* m_root;
	c_Map17();
	c_Map17* m_new();
	virtual int p_Compare3(c_Point*,c_Point*)=0;
	c_Node53* p_FindNode3(c_Point*);
	bool p_Contains5(c_Point*);
	int p_RotateLeft16(c_Node53*);
	int p_RotateRight16(c_Node53*);
	int p_InsertFixup16(c_Node53*);
	bool p_Set19(c_Point*,Object*);
	bool p_Insert10(c_Point*,Object*);
	c_MapKeys* p_Keys();
	c_Node53* p_FirstNode();
	void mark();
};
class c_IntPointMap : public c_Map17{
	public:
	c_IntPointMap();
	c_IntPointMap* m_new();
	int p_Compare3(c_Point*,c_Point*);
	void mark();
};
class c_Node53 : public Object{
	public:
	c_Point* m_key;
	c_Node53* m_right;
	c_Node53* m_left;
	Object* m_value;
	int m_color;
	c_Node53* m_parent;
	c_Node53();
	c_Node53* m_new(c_Point*,Object*,int,c_Node53*);
	c_Node53* m_new2();
	c_Node53* p_NextNode();
	void mark();
};
class c_KeyEnumerator : public Object{
	public:
	c_Node53* m_node;
	c_KeyEnumerator();
	c_KeyEnumerator* m_new(c_Node53*);
	c_KeyEnumerator* m_new2();
	bool p_HasNext();
	c_Point* p_NextObject();
	void mark();
};
class c_MapKeys : public Object{
	public:
	c_Map17* m_map;
	c_MapKeys();
	c_MapKeys* m_new(c_Map17*);
	c_MapKeys* m_new2();
	c_KeyEnumerator* p_ObjectEnumerator();
	void mark();
};
class c_Stack7 : public Object{
	public:
	Array<c_TileData* > m_data;
	int m_length;
	c_Stack7();
	c_Stack7* m_new();
	c_Stack7* m_new2(Array<c_TileData* >);
	void p_Push19(c_TileData*);
	void p_Push20(Array<c_TileData* >,int,int);
	void p_Push21(Array<c_TileData* >,int);
	c_Enumerator22* p_ObjectEnumerator();
	static c_TileData* m_NIL;
	void p_Length2(int);
	int p_Length();
	void mark();
};
class c_Enumerator22 : public Object{
	public:
	c_Stack7* m_stack;
	int m_index;
	c_Enumerator22();
	c_Enumerator22* m_new(c_Stack7*);
	c_Enumerator22* m_new2();
	bool p_HasNext();
	c_TileData* p_NextObject();
	void mark();
};
class c_RectRoom : public c_RoomBase{
	public:
	c_Rect* m_body;
	c_RectRoom();
	c_RectRoom* m_new(c_RoomData*);
	c_RectRoom* m_new2(c_Rect*);
	c_RectRoom* m_new3();
	c_RoomData* p_ToRoomData(int);
	c_Rect* p_GetBounds();
	c_Point* p_GetRandPoint();
	bool p_IsOutside(int,int);
	bool p_IsFloor2(int,int);
	bool p_IsWall3(int,int);
	void mark();
};
class c_PortalSeg : public Object{
	public:
	int m_length;
	c_Point* m_origin;
	int m_faceDir;
	int m_normalDir;
	c_PortalSeg();
	c_PortalSeg* m_new(int,int,int,int);
	c_PortalSeg* m_new2();
	c_Point* p_GetFaceVector();
	c_Rect* p_GetBounds();
	c_Point* p_GetOrigin();
	c_Point* p_GetTerminus();
	c_PortalSeg* p_Intersect(c_PortalSeg*);
	c_Point* p_GetNormal();
	int p_GetLength();
	void mark();
};
class c_Stack8 : public Object{
	public:
	Array<c_PortalSeg* > m_data;
	int m_length;
	c_Stack8();
	c_Stack8* m_new();
	c_Stack8* m_new2(Array<c_PortalSeg* >);
	void p_Push22(c_PortalSeg*);
	void p_Push23(Array<c_PortalSeg* >,int,int);
	void p_Push24(Array<c_PortalSeg* >,int);
	c_Enumerator23* p_ObjectEnumerator();
	static c_PortalSeg* m_NIL;
	void p_Length2(int);
	int p_Length();
	c_PortalSeg* p_Get2(int);
	void p_Set20(int,c_PortalSeg*);
	void mark();
};
class c_StackEx3 : public c_Stack8{
	public:
	c_StackEx3();
	c_StackEx3* m_new();
	void p_Shuffle(bool);
	void p_Extend(c_StackEx3*);
	void mark();
};
class c_Enumerator23 : public Object{
	public:
	c_Stack8* m_stack;
	int m_index;
	c_Enumerator23();
	c_Enumerator23* m_new(c_Stack8*);
	c_Enumerator23* m_new2();
	bool p_HasNext();
	c_PortalSeg* p_NextObject();
	void mark();
};
class c_RoomWithDoor : public c_RectRoom{
	public:
	c_Rect* m_door;
	c_RoomWithDoor();
	c_RoomWithDoor* m_new(c_Rect*,c_Rect*);
	c_RoomWithDoor* m_new2();
	bool p_IsWall3(int,int);
	void mark();
};
class c_Enumerator24 : public Object{
	public:
	c_Stack4* m_stack;
	int m_index;
	c_Enumerator24();
	c_Enumerator24* m_new(c_Stack4*);
	c_Enumerator24* m_new2();
	bool p_HasNext();
	c_Point* p_NextObject();
	void mark();
};
class c_Stack9 : public Object{
	public:
	Array<c_RoomWithDoor* > m_data;
	int m_length;
	c_Stack9();
	c_Stack9* m_new();
	c_Stack9* m_new2(Array<c_RoomWithDoor* >);
	void p_Push25(c_RoomWithDoor*);
	void p_Push26(Array<c_RoomWithDoor* >,int,int);
	void p_Push27(Array<c_RoomWithDoor* >,int);
	static c_RoomWithDoor* m_NIL;
	void p_Length2(int);
	int p_Length();
	c_RoomWithDoor* p_Get2(int);
	void mark();
};
class c_StackEx4 : public c_Stack9{
	public:
	c_StackEx4();
	c_StackEx4* m_new();
	c_RoomWithDoor* p_ChooseRandom(bool);
	void mark();
};
class c_IntPointMap2 : public c_Map15{
	public:
	c_IntPointMap2();
	c_IntPointMap2* m_new();
	int p_Compare3(c_Point*,c_Point*);
	void mark();
};
class c_Stack10 : public Object{
	public:
	Array<c_RoomBase* > m_data;
	int m_length;
	c_Stack10();
	c_Stack10* m_new();
	c_Stack10* m_new2(Array<c_RoomBase* >);
	void p_Push28(c_RoomBase*);
	void p_Push29(Array<c_RoomBase* >,int,int);
	void p_Push30(Array<c_RoomBase* >,int);
	c_Enumerator25* p_ObjectEnumerator();
	static c_RoomBase* m_NIL;
	void p_Length2(int);
	int p_Length();
	c_RoomBase* p_Get2(int);
	void mark();
};
class c_Enumerator25 : public Object{
	public:
	c_Stack10* m_stack;
	int m_index;
	c_Enumerator25();
	c_Enumerator25* m_new(c_Stack10*);
	c_Enumerator25* m_new2();
	bool p_HasNext();
	c_RoomBase* p_NextObject();
	void mark();
};
class c_SecretRoomData : public Object{
	public:
	int m_x;
	int m_y;
	int m_w;
	int m_h;
	bool m_isCrackedWallAdjacent;
	c_SecretRoomData();
	c_SecretRoomData* m_new(int,int,int,int,bool);
	c_SecretRoomData* m_new2();
	void mark();
};
class c_Enumerator26 : public Object{
	public:
	c_List14* m__list;
	c_Node29* m__curr;
	c_Enumerator26();
	c_Enumerator26* m_new(c_List14*);
	c_Enumerator26* m_new2();
	bool p_HasNext();
	c_RoomData* p_NextObject();
	void mark();
};
class c_Poltergeist : public c_Enemy{
	public:
	c_Sprite* m_alphaImage;
	c_Poltergeist();
	static c_Poltergeist* m_theGhoul;
	void p_Die();
	c_Poltergeist* m_new(int,int,int);
	c_Poltergeist* m_new2();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_ABTeleportTrap : public c_Trap{
	public:
	c_ABTeleportTrap();
	c_ABTeleportTrap* m_new(int,int);
	c_ABTeleportTrap* m_new2();
	void mark();
};
class c_StackEx5 : public c_Stack10{
	public:
	c_StackEx5();
	c_StackEx5* m_new();
	c_RoomBase* p_ChooseRandom(bool);
	void mark();
};
class c_EnemyBaseType : public Object{
	public:
	c_EnemyBaseType();
	void mark();
};
class c_ToughSarcophagus : public c_Enemy{
	public:
	c_ToughSarcophagus();
	static int m_GetPerRoomCount();
	c_ToughSarcophagus* m_new(int,int,int);
	c_ToughSarcophagus* m_new2();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
class c_Enumerator27 : public Object{
	public:
	c_List32* m__list;
	c_Node49* m__curr;
	c_Enumerator27();
	c_Enumerator27* m_new(c_List32*);
	c_Enumerator27* m_new2();
	bool p_HasNext();
	c_Chest* p_NextObject();
	void mark();
};
class c_Enumerator28 : public Object{
	public:
	c_List28* m__list;
	c_Node45* m__curr;
	c_Enumerator28();
	c_Enumerator28* m_new(c_List28*);
	c_Enumerator28* m_new2();
	bool p_HasNext();
	c_Shrine* p_NextObject();
	void mark();
};
class c_Enumerator29 : public Object{
	public:
	c_List22* m__list;
	c_Node39* m__curr;
	c_Enumerator29();
	c_Enumerator29* m_new(c_List22*);
	c_Enumerator29* m_new2();
	bool p_HasNext();
	c_NPC* p_NextObject();
	void mark();
};
class c_Weaponmaster : public c_NPC{
	public:
	c_Weaponmaster();
	c_Weaponmaster* m_new(int,int,int,bool);
	c_Weaponmaster* m_new2();
	void p_Update();
	void mark();
};
class c_DiamondDealer : public c_NPC{
	public:
	c_DiamondDealer();
	c_DiamondDealer* m_new(int,int,int,bool);
	c_DiamondDealer* m_new2();
	void mark();
};
class c_Beastmaster : public c_NPC{
	public:
	c_Beastmaster();
	c_Beastmaster* m_new(int,int,int,bool);
	c_Beastmaster* m_new2();
	void mark();
};
class c_Merlin : public c_NPC{
	public:
	c_Merlin();
	c_Merlin* m_new(int,int,int,bool);
	c_Merlin* m_new2();
	void mark();
};
class c_Bossmaster : public c_NPC{
	public:
	c_Bossmaster();
	c_Bossmaster* m_new(int,int,int,bool);
	c_Bossmaster* m_new2();
	void mark();
};
extern int bb_controller_game_runPlaytimeLastAdded;
extern int bb_controller_game_runPlaytimeMilliseconds;
extern int bb_controller_game_subRunPlaytimeMilliseconds;
class c_MapKeys2 : public Object{
	public:
	c_Map3* m_map;
	c_MapKeys2();
	c_MapKeys2* m_new(c_Map3*);
	c_MapKeys2* m_new2();
	c_KeyEnumerator2* p_ObjectEnumerator();
	void mark();
};
class c_KeyEnumerator2 : public Object{
	public:
	c_Node4* m_node;
	c_KeyEnumerator2();
	c_KeyEnumerator2* m_new(c_Node4*);
	c_KeyEnumerator2* m_new2();
	bool p_HasNext();
	String p_NextObject();
	void mark();
};
class c_BackwardsStack : public Object{
	public:
	c_Stack2* m_stack;
	c_BackwardsStack();
	c_BackwardsStack* m_new(c_Stack2*);
	c_BackwardsStack* m_new2();
	c_BackwardsEnumerator* p_ObjectEnumerator();
	void mark();
};
class c_BackwardsEnumerator : public Object{
	public:
	c_Stack2* m_stack;
	int m_index;
	c_BackwardsEnumerator();
	c_BackwardsEnumerator* m_new(c_Stack2*);
	c_BackwardsEnumerator* m_new2();
	bool p_HasNext();
	int p_NextObject();
	void mark();
};
class c_DecorativeFireTrap : public c_Trap{
	public:
	c_DecorativeFireTrap();
	c_DecorativeFireTrap* m_new(int,int);
	c_DecorativeFireTrap* m_new2();
	void p_Update();
	void mark();
};
class c_Switch : public c_Trap{
	public:
	int m_trigger;
	c_Switch* m_pairedSwitch;
	c_Switch();
	static c_List36* m_switches;
	c_Switch* m_new(int,int,int,c_Switch*);
	c_Switch* m_new2();
	void p_Die();
	void p_Update();
	void mark();
};
class c_List36 : public Object{
	public:
	c_Node54* m__head;
	c_List36();
	c_List36* m_new();
	c_Node54* p_AddLast36(c_Switch*);
	c_List36* m_new2(Array<c_Switch* >);
	void mark();
};
class c_Node54 : public Object{
	public:
	c_Node54* m__succ;
	c_Node54* m__pred;
	c_Switch* m__data;
	c_Node54();
	c_Node54* m_new(c_Node54*,c_Node54*,c_Switch*);
	c_Node54* m_new2();
	void mark();
};
class c_HeadNode36 : public c_Node54{
	public:
	c_HeadNode36();
	c_HeadNode36* m_new();
	void mark();
};
class c_ControllerPopUp : public c_Controller{
	public:
	bool m_cachedScaleVal;
	c_Controller* m_cGame;
	bool m_option1Default;
	bool m_option2Exists;
	String m_popupTextVal;
	String m_popupText2Val;
	String m_popupText3Val;
	bool m_ignoreInput;
	String m_popupText4Val;
	c_Sprite* m_overlayBlack;
	c_TextSprite* m_popupText;
	c_TextSprite* m_popupText2;
	c_TextLabel* m_option1Text;
	c_TextLabel* m_option2Text;
	c_OptionList* m_gui;
	int m_retval;
	c_Sprite* m_bestiaryImage;
	c_ControllerPopUp();
	c_ControllerPopUp* m_new(c_Controller*,String,String,String,String,String,bool,bool,String);
	c_ControllerPopUp* m_new2();
	void p_RegainFocus();
	void p_Update();
	void mark();
};
class c_GuiComponent : public c_GuiContainer{
	public:
	c_GuiComponent();
	c_GuiComponent* m_new();
	void mark();
};
class c_TextLabel : public c_GuiComponent{
	public:
	c_TextSprite* m_selectedSpr;
	c_TextLabel();
	c_TextLabel* m_new(String,int,Float,bool);
	c_TextLabel* m_new2();
	c_TextLabel* p_SetText2(String);
	void mark();
};
class c_OptionList : public Object{
	public:
	c_OptionList();
	c_OptionList* m_new(Object*,bool,int);
	c_OptionList* m_new2();
	void p_Add7(c_GuiComponent*);
	void mark();
};
class c_ControllerPostGame : public c_Controller{
	public:
	c_ControllerPostGame();
	c_ControllerPostGame* m_new(c_ControllerGame*,bool,bool,bool,bool,bool,int,int);
	c_ControllerPostGame* m_new2();
	void p_RegainFocus();
	void p_Update();
	void mark();
};
class c_ControllerBossIntro : public c_Controller{
	public:
	c_ControllerBossIntro();
	c_ControllerBossIntro* m_new(Object*,int);
	c_ControllerBossIntro* m_new2();
	void p_RegainFocus();
	void p_Update();
	void mark();
};
class c_ControllerMainMenu : public c_Controller{
	public:
	bool m_showCloudSavePopup;
	String m_mainmenuSongName;
	String m_mainmenuTitlescreen;
	c_Sprite* m_mainMenu;
	c_Sprite* m_continueImage;
	c_Sprite* m_alphaWarning;
	bool m_haveShownAlphaWarning;
	c_Sprite* m_seizureWarning;
	bool m_haveShownSeizureWarning;
	c_ControllerMainMenu();
	c_ControllerMainMenu* m_new();
	void p_RegainFocus();
	void p_Update();
	void mark();
};
void bb_util_SetVSync(int);
extern Object* bb_steam_g_SteamLeaderboards;
class c_ISteamApps : public virtual gc_interface{
	public:
	virtual bool p_BIsDlcInstalled(int)=0;
};
c_ISteamApps* bb_steam_SteamApps();
class c_ControllerIntro : public c_Controller{
	public:
	c_Sprite* m_splashScreen;
	c_Image* m_videoImg;
	String m_introVideoName;
	String m_introSongName;
	c_ControllerIntro();
	static c_Sprite* m_videoSpr;
	c_ControllerIntro* m_new();
	void p_RegainFocus();
	void p_Update();
	void mark();
};
c_Image* bb_graphics_CreateImage(int,int,int,int);
extern int bb_necrodancergame_lastFrameTimeUpdate;
extern int bb_necrodancergame_globalFrameCounter;
extern int bb_necrodancergame_lastFrameCountUpdate;
extern int bb_necrodancergame_lastFPSUpdate;
extern bool bb_controller_game_DEBUG_MOUSE_COORDS;
extern int bb_necrodancergame_FIXED_HEIGHT;
extern int bb_necrodancergame_FIXED_WIDTH;
class c_ControllerInputPopup : public c_Controller{
	public:
	String m_result;
	c_Controller* m_cGame;
	String m_text1;
	String m_text2;
	bool m_isDebug;
	c_TextInput* m_inputText;
	c_TextInput* m_inputText2;
	c_Sprite* m_overlayBlack;
	c_TextSprite* m_popupText;
	c_TextSprite* m_popupText2;
	c_ControllerInputPopup();
	c_ControllerInputPopup* m_new(c_Controller*,String,String,bool);
	c_ControllerInputPopup* m_new2();
	void p_RegainFocus();
	void p_Update();
	void mark();
};
extern bool bb_controller_game_incrementFixedBeatNum;
class c_Enumerator30 : public Object{
	public:
	c_List27* m__list;
	c_Node44* m__curr;
	c_Enumerator30();
	c_Enumerator30* m_new(c_List27*);
	c_Enumerator30* m_new2();
	bool p_HasNext();
	c_SaleItem* p_NextObject();
	void mark();
};
class c_TextInput : public c_TextLabel{
	public:
	c_TextInput();
	c_TextInput* m_new(String,int,Float,int);
	c_TextInput* m_new2();
	void mark();
};
int bb_input_KeyHit(int);
class c_InputValue : public Object{
	public:
	c_InputValue();
	void mark();
};
class c_ControllerPause : public c_Controller{
	public:
	c_ControllerPause();
	c_ControllerPause* m_new(Object*);
	c_ControllerPause* m_new2();
	void p_RegainFocus();
	void p_Update();
	void mark();
};
class c_Doppelganger : public Object{
	public:
	c_Doppelganger();
	static c_List37* m_doppelgangers;
	void p_Update();
	static void m_UpdateAll();
	void mark();
};
class c_List37 : public Object{
	public:
	c_Node55* m__head;
	c_List37();
	c_List37* m_new();
	c_Node55* p_AddLast37(c_Doppelganger*);
	c_List37* m_new2(Array<c_Doppelganger* >);
	c_Enumerator31* p_ObjectEnumerator();
	void mark();
};
class c_Node55 : public Object{
	public:
	c_Node55* m__succ;
	c_Node55* m__pred;
	c_Doppelganger* m__data;
	c_Node55();
	c_Node55* m_new(c_Node55*,c_Node55*,c_Doppelganger*);
	c_Node55* m_new2();
	void mark();
};
class c_HeadNode37 : public c_Node55{
	public:
	c_HeadNode37();
	c_HeadNode37* m_new();
	void mark();
};
class c_Enumerator31 : public Object{
	public:
	c_List37* m__list;
	c_Node55* m__curr;
	c_Enumerator31();
	c_Enumerator31* m_new(c_List37*);
	c_Enumerator31* m_new2();
	bool p_HasNext();
	c_Doppelganger* p_NextObject();
	void mark();
};
class c_List38 : public Object{
	public:
	c_Node56* m__head;
	c_List38();
	c_List38* m_new();
	c_Node56* p_AddLast38(c_Flyaway*);
	c_List38* m_new2(Array<c_Flyaway* >);
	c_Enumerator32* p_ObjectEnumerator();
	void mark();
};
class c_Node56 : public Object{
	public:
	c_Node56* m__succ;
	c_Node56* m__pred;
	c_Flyaway* m__data;
	c_Node56();
	c_Node56* m_new(c_Node56*,c_Node56*,c_Flyaway*);
	c_Node56* m_new2();
	void mark();
};
class c_HeadNode38 : public c_Node56{
	public:
	c_HeadNode38();
	c_HeadNode38* m_new();
	void mark();
};
class c_Enumerator32 : public Object{
	public:
	c_List38* m__list;
	c_Node56* m__curr;
	c_Enumerator32();
	c_Enumerator32* m_new(c_List38*);
	c_Enumerator32* m_new2();
	bool p_HasNext();
	c_Flyaway* p_NextObject();
	void mark();
};
class c_Enumerator33 : public Object{
	public:
	c_List16* m__list;
	c_Node31* m__curr;
	c_Enumerator33();
	c_Enumerator33* m_new(c_List16*);
	c_Enumerator33* m_new2();
	bool p_HasNext();
	c_ParticleSystem* p_NextObject();
	void mark();
};
class c_Swarm : public Object{
	public:
	c_Swarm();
	static void m_Move();
	void mark();
};
class c_CrystalShards : public c_Entity{
	public:
	c_CrystalShards();
	static void m_MoveAll();
	static c_List41* m_shardsList;
	c_CrystalShards* m_new(int,int);
	c_CrystalShards* m_new2();
	void p_Die();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void mark();
};
class c_Minimap : public Object{
	public:
	c_Minimap();
	void p_Update();
	static void m_AddDirty(c_Point*);
	static void m_AddDirty2(int,int);
	void mark();
};
extern bool bb_controller_game_DEBUG_ALL_TILES_VISIBLE;
class c_List39 : public Object{
	public:
	c_Node57* m__head;
	c_List39();
	c_List39* m_new();
	c_Node57* p_AddLast39(c_Player*);
	c_List39* m_new2(Array<c_Player* >);
	c_Enumerator34* p_ObjectEnumerator();
	bool p_IsEmpty();
	void mark();
};
class c_Node57 : public Object{
	public:
	c_Node57* m__succ;
	c_Node57* m__pred;
	c_Player* m__data;
	c_Node57();
	c_Node57* m_new(c_Node57*,c_Node57*,c_Player*);
	c_Node57* m_new2();
	void mark();
};
class c_HeadNode39 : public c_Node57{
	public:
	c_HeadNode39();
	c_HeadNode39* m_new();
	void mark();
};
class c_Enumerator34 : public Object{
	public:
	c_List39* m__list;
	c_Node57* m__curr;
	c_Enumerator34();
	c_Enumerator34* m_new(c_List39*);
	c_Enumerator34* m_new2();
	bool p_HasNext();
	c_Player* p_NextObject();
	void mark();
};
class c_List40 : public Object{
	public:
	c_Node58* m__head;
	c_List40();
	c_List40* m_new();
	c_Node58* p_AddLast40(c_Bomb*);
	c_List40* m_new2(Array<c_Bomb* >);
	void mark();
};
class c_Node58 : public Object{
	public:
	c_Node58* m__succ;
	c_Node58* m__pred;
	c_Bomb* m__data;
	c_Node58();
	c_Node58* m_new(c_Node58*,c_Node58*,c_Bomb*);
	c_Node58* m_new2();
	void mark();
};
class c_HeadNode40 : public c_Node58{
	public:
	c_HeadNode40();
	c_HeadNode40* m_new();
	void mark();
};
class c_List41 : public Object{
	public:
	c_Node59* m__head;
	c_List41();
	c_List41* m_new();
	c_Node59* p_AddLast41(c_CrystalShards*);
	c_List41* m_new2(Array<c_CrystalShards* >);
	void mark();
};
class c_Node59 : public Object{
	public:
	c_Node59* m__succ;
	c_Node59* m__pred;
	c_CrystalShards* m__data;
	c_Node59();
	c_Node59* m_new(c_Node59*,c_Node59*,c_CrystalShards*);
	c_Node59* m_new2();
	void mark();
};
class c_HeadNode41 : public c_Node59{
	public:
	c_HeadNode41();
	c_HeadNode41* m_new();
	void mark();
};
class c_ConductorBattery : public c_Enemy{
	public:
	c_ConductorBattery();
	static void m_WaterBallDeath(c_WaterBall*);
	void p_Die();
	bool p_Hit(String,int,int,c_Entity*,bool,int);
	void p_Update();
	void mark();
};
void gc_mark( BBGame *p ){}
c_App::c_App(){
}
c_App* c_App::m_new(){
	if((bb_app__app)!=0){
		bbError(String(L"App has already been created",28));
	}
	gc_assign(bb_app__app,this);
	gc_assign(bb_app__delegate,(new c_GameDelegate)->m_new());
	bb_app__game->SetDelegate(bb_app__delegate);
	return this;
}
int c_App::p_OnResize(){
	return 0;
}
int c_App::p_OnCreate(){
	return 0;
}
int c_App::p_OnSuspend(){
	return 0;
}
int c_App::p_OnResume(){
	return 0;
}
int c_App::p_OnUpdate(){
	return 0;
}
int c_App::p_OnLoading(){
	return 0;
}
int c_App::p_OnRender(){
	return 0;
}
int c_App::p_OnClose(){
	bb_app_EndApp();
	return 0;
}
int c_App::p_OnBack(){
	p_OnClose();
	return 0;
}
void c_App::mark(){
	Object::mark();
}
c_NecroDancerGame::c_NecroDancerGame(){
}
c_NecroDancerGame* c_NecroDancerGame::m_new(){
	c_App::m_new();
	return this;
}
void c_NecroDancerGame::m_UpdateScreenSize(bool t_force){
	bb_logger_Debug->p_TraceNotImplemented(String(L"NecroDancerGame.UpdateScreenSize(Bool)",38));
}
int c_NecroDancerGame::p_OnCreate(){
	c_TextLog::m_Message(String(L"NecroDancer version ",20)+c_Util::m_GetVersionString()+String(L" loading...",11));
	c_TextLog::m_Message(String(L"OnCreate: Initializing Steam",28));
	c_Util::m_SetAppFolder();
	CreateDir(GetAppFolder()+String(L"downloaded_dungeons",19));
	CreateDir(GetAppFolder()+String(L"mods",4));
	CreateDir(GetAppFolder()+String(L"downloaded_mods",15));
	bb_steam_SteamInit();
	c_TextLog::m_Message(String(L"OnCreate: Updating screen size",30));
	m_UpdateScreenSize(false);
	c_TextLog::m_Message(String(L"OnCreate: Starting FMOD",23));
	bb_fmod_StartFMOD();
	c_TextLog::m_Message(String(L"OnCreate: Setting update rate",29));
	bb_app_SetUpdateRate(bb_necrodancergame_FRAMES_PER_SEC);
	c_TextLog::m_Message(String(L"GLOBAL_SCALE_FACTOR: ",21)+String(bb_necrodancergame_GLOBAL_SCALE_FACTOR));
	if(true){
		c_GameData::m_LoadGameDataXML(true);
		(new c_ControllerGame)->m_new();
	}
	return 0;
}
int c_NecroDancerGame::p_OnRender(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"NecroDancerGame.OnRender()",26));
	return 0;
}
int c_NecroDancerGame::p_OnResume(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"NecroDancerGame.OnResume()",26));
	return 0;
}
int c_NecroDancerGame::p_OnSuspend(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"NecroDancerGame.OnSuspend()",27));
	return 0;
}
void c_NecroDancerGame::p_TestSeededAllZonesMode(int t_character,String t_randSeedString){
	gc_assign(bb_controller_game_players[0],(new c_Player)->m_new(0,t_character));
	c_Level::m_randSeedString=t_randSeedString;
	c_Level::m_NewLevel(-10,bb_controller_game_currentZone,0,false,0,false);
	c_Level::m_NewLevel(-3,bb_controller_game_currentZone,0,false,0,false);
	c_Level::m_NewLevel(-3,bb_controller_game_currentZone,0,false,0,false);
	c_Level::m_NewLevel(-3,bb_controller_game_currentZone,0,false,0,false);
	c_Level::m_NewLevel(-3,bb_controller_game_currentZone,0,false,0,false);
	c_Level::m_NewLevel(-3,bb_controller_game_currentZone,0,false,0,false);
	c_Level::m_NewLevel(-3,bb_controller_game_currentZone,0,false,0,false);
	c_Level::m_NewLevel(-3,bb_controller_game_currentZone,0,false,0,false);
	c_Level::m_NewLevel(-3,bb_controller_game_currentZone,0,false,0,false);
	c_Level::m_NewLevel(-3,bb_controller_game_currentZone,0,false,0,false);
	c_Level::m_NewLevel(-3,bb_controller_game_currentZone,0,false,0,false);
	c_Level::m_NewLevel(-3,bb_controller_game_currentZone,0,false,0,false);
	c_Level::m_NewLevel(-3,bb_controller_game_currentZone,0,false,0,false);
	c_Level::m_NewLevel(-3,bb_controller_game_currentZone,0,false,0,false);
	c_Level::m_NewLevel(-3,bb_controller_game_currentZone,0,false,0,false);
	c_Level::m_NewLevel(-3,bb_controller_game_currentZone,0,false,0,false);
	c_Level::m_NewLevel(-3,bb_controller_game_currentZone,0,false,0,false);
	c_Level::m_NewLevel(-3,bb_controller_game_currentZone,0,false,0,false);
	c_Level::m_NewLevel(-3,bb_controller_game_currentZone,0,false,0,false);
	c_Level::m_NewLevel(-3,bb_controller_game_currentZone,0,false,0,false);
	c_Level::m_NewLevel(-3,bb_controller_game_currentZone,0,false,0,false);
}
int c_NecroDancerGame::p_OnUpdate(){
	if(bb_app_Millisecs()-bb_necrodancergame_lastFrameTimeUpdate>999){
		bb_necrodancergame_lastFrameTimeUpdate=bb_app_Millisecs();
		bb_necrodancergame_lastFPSUpdate=bb_necrodancergame_globalFrameCounter-bb_necrodancergame_lastFrameCountUpdate;
		bb_necrodancergame_lastFrameCountUpdate=bb_necrodancergame_globalFrameCounter;
	}
	c_Input::m_Update();
	if(c_Controller::m_currentController!=0){
		this->p_TestSeededAllZonesMode(0,String(L"1",1));
		c_Controller::m_currentController->p_Update();
	}
	bb_logger_Debug->p_TraceNotImplemented(String(L"NecroDancerGame.OnUpdate() (FMOD)",33));
	bb_logger_Debug->p_TraceNotImplemented(String(L"NecroDancerGame.OnUpdate() (Steam API)",38));
	bb_app_EndApp();
	return 0;
}
void c_NecroDancerGame::mark(){
	c_App::mark();
}
c_App* bb_app__app;
c_GameDelegate::c_GameDelegate(){
	m__graphics=0;
	m__audio=0;
	m__input=0;
}
c_GameDelegate* c_GameDelegate::m_new(){
	return this;
}
void c_GameDelegate::StartGame(){
	gc_assign(m__graphics,(new gxtkGraphics));
	bb_graphics_SetGraphicsDevice(m__graphics);
	bb_graphics_SetFont(0,32);
	gc_assign(m__audio,(new gxtkAudio));
	bb_audio2_SetAudioDevice(m__audio);
	gc_assign(m__input,(new c_InputDevice)->m_new());
	bb_input_SetInputDevice(m__input);
	bb_app_ValidateDeviceWindow(false);
	bb_app_EnumDisplayModes();
	bb_app__app->p_OnCreate();
}
void c_GameDelegate::SuspendGame(){
	bb_app__app->p_OnSuspend();
	m__audio->Suspend();
}
void c_GameDelegate::ResumeGame(){
	m__audio->Resume();
	bb_app__app->p_OnResume();
}
void c_GameDelegate::UpdateGame(){
	bb_app_ValidateDeviceWindow(true);
	m__input->p_BeginUpdate();
	bb_app__app->p_OnUpdate();
	m__input->p_EndUpdate();
}
void c_GameDelegate::RenderGame(){
	bb_app_ValidateDeviceWindow(true);
	int t_mode=m__graphics->BeginRender();
	if((t_mode)!=0){
		bb_graphics_BeginRender();
	}
	if(t_mode==2){
		bb_app__app->p_OnLoading();
	}else{
		bb_app__app->p_OnRender();
	}
	if((t_mode)!=0){
		bb_graphics_EndRender();
	}
	m__graphics->EndRender();
}
void c_GameDelegate::KeyEvent(int t_event,int t_data){
	m__input->p_KeyEvent(t_event,t_data);
	if(t_event!=1){
		return;
	}
	int t_1=t_data;
	if(t_1==432){
		bb_app__app->p_OnClose();
	}else{
		if(t_1==416){
			bb_app__app->p_OnBack();
		}
	}
}
void c_GameDelegate::MouseEvent(int t_event,int t_data,Float t_x,Float t_y){
	m__input->p_MouseEvent(t_event,t_data,t_x,t_y);
}
void c_GameDelegate::TouchEvent(int t_event,int t_data,Float t_x,Float t_y){
	m__input->p_TouchEvent(t_event,t_data,t_x,t_y);
}
void c_GameDelegate::MotionEvent(int t_event,int t_data,Float t_x,Float t_y,Float t_z){
	m__input->p_MotionEvent(t_event,t_data,t_x,t_y,t_z);
}
void c_GameDelegate::DiscardGraphics(){
	m__graphics->DiscardGraphics();
}
void c_GameDelegate::mark(){
	BBGameDelegate::mark();
	gc_mark_q(m__graphics);
	gc_mark_q(m__audio);
	gc_mark_q(m__input);
}
c_GameDelegate* bb_app__delegate;
BBGame* bb_app__game;
int bbMain(){
	(new c_NecroDancerGame)->m_new();
	return 0;
}
gxtkGraphics* bb_graphics_device;
int bb_graphics_SetGraphicsDevice(gxtkGraphics* t_dev){
	gc_assign(bb_graphics_device,t_dev);
	return 0;
}
c_Image::c_Image(){
	m_surface=0;
	m_width=0;
	m_height=0;
	m_frames=Array<c_Frame* >();
	m_flags=0;
	m_tx=FLOAT(.0);
	m_ty=FLOAT(.0);
	m_source=0;
}
int c_Image::m_DefaultFlags;
c_Image* c_Image::m_new(){
	return this;
}
int c_Image::p_SetHandle(Float t_tx,Float t_ty){
	this->m_tx=t_tx;
	this->m_ty=t_ty;
	this->m_flags=this->m_flags&-2;
	return 0;
}
int c_Image::p_ApplyFlags(int t_iflags){
	m_flags=t_iflags;
	if((m_flags&2)!=0){
		Array<c_Frame* > t_=m_frames;
		int t_2=0;
		while(t_2<t_.Length()){
			c_Frame* t_f=t_[t_2];
			t_2=t_2+1;
			t_f->m_x+=1;
		}
		m_width-=2;
	}
	if((m_flags&4)!=0){
		Array<c_Frame* > t_3=m_frames;
		int t_4=0;
		while(t_4<t_3.Length()){
			c_Frame* t_f2=t_3[t_4];
			t_4=t_4+1;
			t_f2->m_y+=1;
		}
		m_height-=2;
	}
	if((m_flags&1)!=0){
		p_SetHandle(Float(m_width)/FLOAT(2.0),Float(m_height)/FLOAT(2.0));
	}
	if(m_frames.Length()==1 && m_frames[0]->m_x==0 && m_frames[0]->m_y==0 && m_width==m_surface->Width() && m_height==m_surface->Height()){
		m_flags|=65536;
	}
	return 0;
}
c_Image* c_Image::p_Init(gxtkSurface* t_surf,int t_nframes,int t_iflags){
	if((m_surface)!=0){
		bbError(String(L"Image already initialized",25));
	}
	gc_assign(m_surface,t_surf);
	m_width=m_surface->Width()/t_nframes;
	m_height=m_surface->Height();
	gc_assign(m_frames,Array<c_Frame* >(t_nframes));
	for(int t_i=0;t_i<t_nframes;t_i=t_i+1){
		gc_assign(m_frames[t_i],(new c_Frame)->m_new(t_i*m_width,0));
	}
	p_ApplyFlags(t_iflags);
	return this;
}
c_Image* c_Image::p_Init2(gxtkSurface* t_surf,int t_x,int t_y,int t_iwidth,int t_iheight,int t_nframes,int t_iflags,c_Image* t_src,int t_srcx,int t_srcy,int t_srcw,int t_srch){
	if((m_surface)!=0){
		bbError(String(L"Image already initialized",25));
	}
	gc_assign(m_surface,t_surf);
	gc_assign(m_source,t_src);
	m_width=t_iwidth;
	m_height=t_iheight;
	gc_assign(m_frames,Array<c_Frame* >(t_nframes));
	int t_ix=t_x;
	int t_iy=t_y;
	for(int t_i=0;t_i<t_nframes;t_i=t_i+1){
		if(t_ix+m_width>t_srcw){
			t_ix=0;
			t_iy+=m_height;
		}
		if(t_ix+m_width>t_srcw || t_iy+m_height>t_srch){
			bbError(String(L"Image frame outside surface",27));
		}
		gc_assign(m_frames[t_i],(new c_Frame)->m_new(t_ix+t_srcx,t_iy+t_srcy));
		t_ix+=m_width;
	}
	p_ApplyFlags(t_iflags);
	return this;
}
void c_Image::mark(){
	Object::mark();
	gc_mark_q(m_surface);
	gc_mark_q(m_frames);
	gc_mark_q(m_source);
}
c_GraphicsContext::c_GraphicsContext(){
	m_defaultFont=0;
	m_font=0;
	m_firstChar=0;
	m_matrixSp=0;
	m_ix=FLOAT(1.0);
	m_iy=FLOAT(.0);
	m_jx=FLOAT(.0);
	m_jy=FLOAT(1.0);
	m_tx=FLOAT(.0);
	m_ty=FLOAT(.0);
	m_tformed=0;
	m_matDirty=0;
	m_color_r=FLOAT(.0);
	m_color_g=FLOAT(.0);
	m_color_b=FLOAT(.0);
	m_alpha=FLOAT(.0);
	m_blend=0;
	m_scissor_x=FLOAT(.0);
	m_scissor_y=FLOAT(.0);
	m_scissor_width=FLOAT(.0);
	m_scissor_height=FLOAT(.0);
}
c_GraphicsContext* c_GraphicsContext::m_new(){
	return this;
}
void c_GraphicsContext::mark(){
	Object::mark();
	gc_mark_q(m_defaultFont);
	gc_mark_q(m_font);
}
c_GraphicsContext* bb_graphics_context;
String bb_data_FixDataPath(String t_path){
	int t_i=t_path.Find(String(L":/",2),0);
	if(t_i!=-1 && t_path.Find(String(L"/",1),0)==t_i+1){
		return t_path;
	}
	if(t_path.StartsWith(String(L"./",2)) || t_path.StartsWith(String(L"/",1))){
		return t_path;
	}
	return String(L"monkey://data/",14)+t_path;
}
c_Frame::c_Frame(){
	m_x=0;
	m_y=0;
}
c_Frame* c_Frame::m_new(int t_x,int t_y){
	this->m_x=t_x;
	this->m_y=t_y;
	return this;
}
c_Frame* c_Frame::m_new2(){
	return this;
}
void c_Frame::mark(){
	Object::mark();
}
c_Image* bb_graphics_LoadImage(String t_path,int t_frameCount,int t_flags){
	gxtkSurface* t_surf=bb_graphics_device->LoadSurface(bb_data_FixDataPath(t_path));
	if((t_surf)!=0){
		return ((new c_Image)->m_new())->p_Init(t_surf,t_frameCount,t_flags);
	}
	return 0;
}
c_Image* bb_graphics_LoadImage2(String t_path,int t_frameWidth,int t_frameHeight,int t_frameCount,int t_flags){
	gxtkSurface* t_surf=bb_graphics_device->LoadSurface(bb_data_FixDataPath(t_path));
	if((t_surf)!=0){
		return ((new c_Image)->m_new())->p_Init2(t_surf,0,0,t_frameWidth,t_frameHeight,t_frameCount,t_flags,0,0,0,t_surf->Width(),t_surf->Height());
	}
	return 0;
}
int bb_graphics_SetFont(c_Image* t_font,int t_firstChar){
	if(!((t_font)!=0)){
		if(!((bb_graphics_context->m_defaultFont)!=0)){
			gc_assign(bb_graphics_context->m_defaultFont,bb_graphics_LoadImage(String(L"mojo_font.png",13),96,2));
		}
		t_font=bb_graphics_context->m_defaultFont;
		t_firstChar=32;
	}
	gc_assign(bb_graphics_context->m_font,t_font);
	bb_graphics_context->m_firstChar=t_firstChar;
	return 0;
}
gxtkAudio* bb_audio2_device;
int bb_audio2_SetAudioDevice(gxtkAudio* t_dev){
	gc_assign(bb_audio2_device,t_dev);
	return 0;
}
c_InputDevice::c_InputDevice(){
	m__joyStates=Array<c_JoyState* >(4);
	m__keyDown=Array<bool >(512);
	m__keyHitPut=0;
	m__keyHitQueue=Array<int >(33);
	m__keyHit=Array<int >(512);
	m__charGet=0;
	m__charPut=0;
	m__charQueue=Array<int >(32);
	m__mouseX=FLOAT(.0);
	m__mouseY=FLOAT(.0);
	m__touchX=Array<Float >(32);
	m__touchY=Array<Float >(32);
	m__accelX=FLOAT(.0);
	m__accelY=FLOAT(.0);
	m__accelZ=FLOAT(.0);
}
c_InputDevice* c_InputDevice::m_new(){
	for(int t_i=0;t_i<4;t_i=t_i+1){
		gc_assign(m__joyStates[t_i],(new c_JoyState)->m_new());
	}
	return this;
}
void c_InputDevice::p_PutKeyHit(int t_key){
	if(m__keyHitPut==m__keyHitQueue.Length()){
		return;
	}
	m__keyHit[t_key]+=1;
	m__keyHitQueue[m__keyHitPut]=t_key;
	m__keyHitPut+=1;
}
void c_InputDevice::p_BeginUpdate(){
	for(int t_i=0;t_i<4;t_i=t_i+1){
		c_JoyState* t_state=m__joyStates[t_i];
		if(!BBGame::Game()->PollJoystick(t_i,t_state->m_joyx,t_state->m_joyy,t_state->m_joyz,t_state->m_buttons)){
			break;
		}
		for(int t_j=0;t_j<32;t_j=t_j+1){
			int t_key=256+t_i*32+t_j;
			if(t_state->m_buttons[t_j]){
				if(!m__keyDown[t_key]){
					m__keyDown[t_key]=true;
					p_PutKeyHit(t_key);
				}
			}else{
				m__keyDown[t_key]=false;
			}
		}
	}
}
void c_InputDevice::p_EndUpdate(){
	for(int t_i=0;t_i<m__keyHitPut;t_i=t_i+1){
		m__keyHit[m__keyHitQueue[t_i]]=0;
	}
	m__keyHitPut=0;
	m__charGet=0;
	m__charPut=0;
}
void c_InputDevice::p_KeyEvent(int t_event,int t_data){
	int t_1=t_event;
	if(t_1==1){
		if(!m__keyDown[t_data]){
			m__keyDown[t_data]=true;
			p_PutKeyHit(t_data);
			if(t_data==1){
				m__keyDown[384]=true;
				p_PutKeyHit(384);
			}else{
				if(t_data==384){
					m__keyDown[1]=true;
					p_PutKeyHit(1);
				}
			}
		}
	}else{
		if(t_1==2){
			if(m__keyDown[t_data]){
				m__keyDown[t_data]=false;
				if(t_data==1){
					m__keyDown[384]=false;
				}else{
					if(t_data==384){
						m__keyDown[1]=false;
					}
				}
			}
		}else{
			if(t_1==3){
				if(m__charPut<m__charQueue.Length()){
					m__charQueue[m__charPut]=t_data;
					m__charPut+=1;
				}
			}
		}
	}
}
void c_InputDevice::p_MouseEvent(int t_event,int t_data,Float t_x,Float t_y){
	int t_2=t_event;
	if(t_2==4){
		p_KeyEvent(1,1+t_data);
	}else{
		if(t_2==5){
			p_KeyEvent(2,1+t_data);
			return;
		}else{
			if(t_2==6){
			}else{
				return;
			}
		}
	}
	m__mouseX=t_x;
	m__mouseY=t_y;
	m__touchX[0]=t_x;
	m__touchY[0]=t_y;
}
void c_InputDevice::p_TouchEvent(int t_event,int t_data,Float t_x,Float t_y){
	int t_3=t_event;
	if(t_3==7){
		p_KeyEvent(1,384+t_data);
	}else{
		if(t_3==8){
			p_KeyEvent(2,384+t_data);
			return;
		}else{
			if(t_3==9){
			}else{
				return;
			}
		}
	}
	m__touchX[t_data]=t_x;
	m__touchY[t_data]=t_y;
	if(t_data==0){
		m__mouseX=t_x;
		m__mouseY=t_y;
	}
}
void c_InputDevice::p_MotionEvent(int t_event,int t_data,Float t_x,Float t_y,Float t_z){
	int t_4=t_event;
	if(t_4==10){
	}else{
		return;
	}
	m__accelX=t_x;
	m__accelY=t_y;
	m__accelZ=t_z;
}
int c_InputDevice::p_KeyHit(int t_key){
	if(t_key>0 && t_key<512){
		return m__keyHit[t_key];
	}
	return 0;
}
void c_InputDevice::mark(){
	Object::mark();
	gc_mark_q(m__joyStates);
	gc_mark_q(m__keyDown);
	gc_mark_q(m__keyHitQueue);
	gc_mark_q(m__keyHit);
	gc_mark_q(m__charQueue);
	gc_mark_q(m__touchX);
	gc_mark_q(m__touchY);
}
c_JoyState::c_JoyState(){
	m_joyx=Array<Float >(2);
	m_joyy=Array<Float >(2);
	m_joyz=Array<Float >(2);
	m_buttons=Array<bool >(32);
}
c_JoyState* c_JoyState::m_new(){
	return this;
}
void c_JoyState::mark(){
	Object::mark();
	gc_mark_q(m_joyx);
	gc_mark_q(m_joyy);
	gc_mark_q(m_joyz);
	gc_mark_q(m_buttons);
}
c_InputDevice* bb_input_device;
int bb_input_SetInputDevice(c_InputDevice* t_dev){
	gc_assign(bb_input_device,t_dev);
	return 0;
}
int bb_app__devWidth;
int bb_app__devHeight;
void bb_app_ValidateDeviceWindow(bool t_notifyApp){
	int t_w=bb_app__game->GetDeviceWidth();
	int t_h=bb_app__game->GetDeviceHeight();
	if(t_w==bb_app__devWidth && t_h==bb_app__devHeight){
		return;
	}
	bb_app__devWidth=t_w;
	bb_app__devHeight=t_h;
	if(t_notifyApp){
		bb_app__app->p_OnResize();
	}
}
c_DisplayMode::c_DisplayMode(){
	m__width=0;
	m__height=0;
}
c_DisplayMode* c_DisplayMode::m_new(int t_width,int t_height){
	m__width=t_width;
	m__height=t_height;
	return this;
}
c_DisplayMode* c_DisplayMode::m_new2(){
	return this;
}
void c_DisplayMode::mark(){
	Object::mark();
}
c_Map::c_Map(){
	m_root=0;
}
c_Map* c_Map::m_new(){
	return this;
}
c_Node* c_Map::p_FindNode(int t_key){
	c_Node* t_node=m_root;
	while((t_node)!=0){
		int t_cmp=p_Compare(t_key,t_node->m_key);
		if(t_cmp>0){
			t_node=t_node->m_right;
		}else{
			if(t_cmp<0){
				t_node=t_node->m_left;
			}else{
				return t_node;
			}
		}
	}
	return t_node;
}
bool c_Map::p_Contains(int t_key){
	return p_FindNode(t_key)!=0;
}
int c_Map::p_RotateLeft(c_Node* t_node){
	c_Node* t_child=t_node->m_right;
	gc_assign(t_node->m_right,t_child->m_left);
	if((t_child->m_left)!=0){
		gc_assign(t_child->m_left->m_parent,t_node);
	}
	gc_assign(t_child->m_parent,t_node->m_parent);
	if((t_node->m_parent)!=0){
		if(t_node==t_node->m_parent->m_left){
			gc_assign(t_node->m_parent->m_left,t_child);
		}else{
			gc_assign(t_node->m_parent->m_right,t_child);
		}
	}else{
		gc_assign(m_root,t_child);
	}
	gc_assign(t_child->m_left,t_node);
	gc_assign(t_node->m_parent,t_child);
	return 0;
}
int c_Map::p_RotateRight(c_Node* t_node){
	c_Node* t_child=t_node->m_left;
	gc_assign(t_node->m_left,t_child->m_right);
	if((t_child->m_right)!=0){
		gc_assign(t_child->m_right->m_parent,t_node);
	}
	gc_assign(t_child->m_parent,t_node->m_parent);
	if((t_node->m_parent)!=0){
		if(t_node==t_node->m_parent->m_right){
			gc_assign(t_node->m_parent->m_right,t_child);
		}else{
			gc_assign(t_node->m_parent->m_left,t_child);
		}
	}else{
		gc_assign(m_root,t_child);
	}
	gc_assign(t_child->m_right,t_node);
	gc_assign(t_node->m_parent,t_child);
	return 0;
}
int c_Map::p_InsertFixup(c_Node* t_node){
	while(((t_node->m_parent)!=0) && t_node->m_parent->m_color==-1 && ((t_node->m_parent->m_parent)!=0)){
		if(t_node->m_parent==t_node->m_parent->m_parent->m_left){
			c_Node* t_uncle=t_node->m_parent->m_parent->m_right;
			if(((t_uncle)!=0) && t_uncle->m_color==-1){
				t_node->m_parent->m_color=1;
				t_uncle->m_color=1;
				t_uncle->m_parent->m_color=-1;
				t_node=t_uncle->m_parent;
			}else{
				if(t_node==t_node->m_parent->m_right){
					t_node=t_node->m_parent;
					p_RotateLeft(t_node);
				}
				t_node->m_parent->m_color=1;
				t_node->m_parent->m_parent->m_color=-1;
				p_RotateRight(t_node->m_parent->m_parent);
			}
		}else{
			c_Node* t_uncle2=t_node->m_parent->m_parent->m_left;
			if(((t_uncle2)!=0) && t_uncle2->m_color==-1){
				t_node->m_parent->m_color=1;
				t_uncle2->m_color=1;
				t_uncle2->m_parent->m_color=-1;
				t_node=t_uncle2->m_parent;
			}else{
				if(t_node==t_node->m_parent->m_left){
					t_node=t_node->m_parent;
					p_RotateRight(t_node);
				}
				t_node->m_parent->m_color=1;
				t_node->m_parent->m_parent->m_color=-1;
				p_RotateLeft(t_node->m_parent->m_parent);
			}
		}
	}
	m_root->m_color=1;
	return 0;
}
bool c_Map::p_Set(int t_key,c_DisplayMode* t_value){
	c_Node* t_node=m_root;
	c_Node* t_parent=0;
	int t_cmp=0;
	while((t_node)!=0){
		t_parent=t_node;
		t_cmp=p_Compare(t_key,t_node->m_key);
		if(t_cmp>0){
			t_node=t_node->m_right;
		}else{
			if(t_cmp<0){
				t_node=t_node->m_left;
			}else{
				gc_assign(t_node->m_value,t_value);
				return false;
			}
		}
	}
	t_node=(new c_Node)->m_new(t_key,t_value,-1,t_parent);
	if((t_parent)!=0){
		if(t_cmp>0){
			gc_assign(t_parent->m_right,t_node);
		}else{
			gc_assign(t_parent->m_left,t_node);
		}
		p_InsertFixup(t_node);
	}else{
		gc_assign(m_root,t_node);
	}
	return true;
}
bool c_Map::p_Insert(int t_key,c_DisplayMode* t_value){
	return p_Set(t_key,t_value);
}
void c_Map::mark(){
	Object::mark();
	gc_mark_q(m_root);
}
c_IntMap::c_IntMap(){
}
c_IntMap* c_IntMap::m_new(){
	c_Map::m_new();
	return this;
}
int c_IntMap::p_Compare(int t_lhs,int t_rhs){
	return t_lhs-t_rhs;
}
void c_IntMap::mark(){
	c_Map::mark();
}
c_Stack::c_Stack(){
	m_data=Array<c_DisplayMode* >();
	m_length=0;
}
c_Stack* c_Stack::m_new(){
	return this;
}
c_Stack* c_Stack::m_new2(Array<c_DisplayMode* > t_data){
	gc_assign(this->m_data,t_data.Slice(0));
	this->m_length=t_data.Length();
	return this;
}
void c_Stack::p_Push(c_DisplayMode* t_value){
	if(m_length==m_data.Length()){
		gc_assign(m_data,m_data.Resize(m_length*2+10));
	}
	gc_assign(m_data[m_length],t_value);
	m_length+=1;
}
void c_Stack::p_Push2(Array<c_DisplayMode* > t_values,int t_offset,int t_count){
	for(int t_i=0;t_i<t_count;t_i=t_i+1){
		p_Push(t_values[t_offset+t_i]);
	}
}
void c_Stack::p_Push3(Array<c_DisplayMode* > t_values,int t_offset){
	p_Push2(t_values,t_offset,t_values.Length()-t_offset);
}
Array<c_DisplayMode* > c_Stack::p_ToArray(){
	Array<c_DisplayMode* > t_t=Array<c_DisplayMode* >(m_length);
	for(int t_i=0;t_i<m_length;t_i=t_i+1){
		gc_assign(t_t[t_i],m_data[t_i]);
	}
	return t_t;
}
void c_Stack::mark(){
	Object::mark();
	gc_mark_q(m_data);
}
c_Node::c_Node(){
	m_key=0;
	m_right=0;
	m_left=0;
	m_value=0;
	m_color=0;
	m_parent=0;
}
c_Node* c_Node::m_new(int t_key,c_DisplayMode* t_value,int t_color,c_Node* t_parent){
	this->m_key=t_key;
	gc_assign(this->m_value,t_value);
	this->m_color=t_color;
	gc_assign(this->m_parent,t_parent);
	return this;
}
c_Node* c_Node::m_new2(){
	return this;
}
void c_Node::mark(){
	Object::mark();
	gc_mark_q(m_right);
	gc_mark_q(m_left);
	gc_mark_q(m_value);
	gc_mark_q(m_parent);
}
Array<c_DisplayMode* > bb_app__displayModes;
c_DisplayMode* bb_app__desktopMode;
int bb_app_DeviceWidth(){
	return bb_app__devWidth;
}
int bb_app_DeviceHeight(){
	return bb_app__devHeight;
}
void bb_app_EnumDisplayModes(){
	Array<BBDisplayMode* > t_modes=bb_app__game->GetDisplayModes();
	c_IntMap* t_mmap=(new c_IntMap)->m_new();
	c_Stack* t_mstack=(new c_Stack)->m_new();
	for(int t_i=0;t_i<t_modes.Length();t_i=t_i+1){
		int t_w=t_modes[t_i]->width;
		int t_h=t_modes[t_i]->height;
		int t_size=t_w<<16|t_h;
		if(t_mmap->p_Contains(t_size)){
		}else{
			c_DisplayMode* t_mode=(new c_DisplayMode)->m_new(t_modes[t_i]->width,t_modes[t_i]->height);
			t_mmap->p_Insert(t_size,t_mode);
			t_mstack->p_Push(t_mode);
		}
	}
	gc_assign(bb_app__displayModes,t_mstack->p_ToArray());
	BBDisplayMode* t_mode2=bb_app__game->GetDesktopMode();
	if((t_mode2)!=0){
		gc_assign(bb_app__desktopMode,(new c_DisplayMode)->m_new(t_mode2->width,t_mode2->height));
	}else{
		gc_assign(bb_app__desktopMode,(new c_DisplayMode)->m_new(bb_app_DeviceWidth(),bb_app_DeviceHeight()));
	}
}
gxtkGraphics* bb_graphics_renderDevice;
int bb_graphics_SetMatrix(Float t_ix,Float t_iy,Float t_jx,Float t_jy,Float t_tx,Float t_ty){
	bb_graphics_context->m_ix=t_ix;
	bb_graphics_context->m_iy=t_iy;
	bb_graphics_context->m_jx=t_jx;
	bb_graphics_context->m_jy=t_jy;
	bb_graphics_context->m_tx=t_tx;
	bb_graphics_context->m_ty=t_ty;
	bb_graphics_context->m_tformed=((t_ix!=FLOAT(1.0) || t_iy!=FLOAT(0.0) || t_jx!=FLOAT(0.0) || t_jy!=FLOAT(1.0) || t_tx!=FLOAT(0.0) || t_ty!=FLOAT(0.0))?1:0);
	bb_graphics_context->m_matDirty=1;
	return 0;
}
int bb_graphics_SetMatrix2(Array<Float > t_m){
	bb_graphics_SetMatrix(t_m[0],t_m[1],t_m[2],t_m[3],t_m[4],t_m[5]);
	return 0;
}
int bb_graphics_SetColor(Float t_r,Float t_g,Float t_b){
	bb_graphics_context->m_color_r=t_r;
	bb_graphics_context->m_color_g=t_g;
	bb_graphics_context->m_color_b=t_b;
	bb_graphics_renderDevice->SetColor(t_r,t_g,t_b);
	return 0;
}
int bb_graphics_SetAlpha(Float t_alpha){
	bb_graphics_context->m_alpha=t_alpha;
	bb_graphics_renderDevice->SetAlpha(t_alpha);
	return 0;
}
int bb_graphics_SetBlend(int t_blend){
	bb_graphics_context->m_blend=t_blend;
	bb_graphics_renderDevice->SetBlend(t_blend);
	return 0;
}
int bb_graphics_SetScissor(Float t_x,Float t_y,Float t_width,Float t_height){
	bb_graphics_context->m_scissor_x=t_x;
	bb_graphics_context->m_scissor_y=t_y;
	bb_graphics_context->m_scissor_width=t_width;
	bb_graphics_context->m_scissor_height=t_height;
	bb_graphics_renderDevice->SetScissor(int(t_x),int(t_y),int(t_width),int(t_height));
	return 0;
}
int bb_graphics_BeginRender(){
	gc_assign(bb_graphics_renderDevice,bb_graphics_device);
	bb_graphics_context->m_matrixSp=0;
	bb_graphics_SetMatrix(FLOAT(1.0),FLOAT(0.0),FLOAT(0.0),FLOAT(1.0),FLOAT(0.0),FLOAT(0.0));
	bb_graphics_SetColor(FLOAT(255.0),FLOAT(255.0),FLOAT(255.0));
	bb_graphics_SetAlpha(FLOAT(1.0));
	bb_graphics_SetBlend(0);
	bb_graphics_SetScissor(FLOAT(0.0),FLOAT(0.0),Float(bb_app_DeviceWidth()),Float(bb_app_DeviceHeight()));
	return 0;
}
int bb_graphics_EndRender(){
	bb_graphics_renderDevice=0;
	return 0;
}
c_BBGameEvent::c_BBGameEvent(){
}
void c_BBGameEvent::mark(){
	Object::mark();
}
void bb_app_EndApp(){
	bbError(String());
}
c_Util::c_Util(){
}
String c_Util::m_GetVersionString(){
	String t_versionStr=String(L"v2.59",5);
	if(true){
		t_versionStr=t_versionStr+String(L"_DEBUG",6);
	}
	return t_versionStr;
}
String c_Util::m_StringLeft(String t_str,int t_n){
	t_n=bb_math_Min(t_n,t_str.Length());
	return t_str.Slice(0,t_n);
}
void c_Util::m_SetAppFolder(){
	String t_appPath=AppPath();
	t_appPath=m_StringLeft(t_appPath,t_appPath.FindLast(String(L".app",4)));
	t_appPath=m_StringLeft(t_appPath,t_appPath.FindLast(String(L"/",1)));
	t_appPath=t_appPath+String(L"/",1);
	globalAppFolder=t_appPath;
}
bool c_Util::m_IsCharacterActive(int t_charID){
	for(int t_i=0;t_i<bb_controller_game_numPlayers;t_i=t_i+1){
		c_Player* t_player=bb_controller_game_players[t_i];
		if(((t_player)!=0) && t_player->m_characterID==t_charID){
			return true;
		}
	}
	return false;
}
int c_Util::m_storedSeed;
Float c_Util::m_RndFloatRange(Float t_low,Float t_high,bool t_useSeed){
	if(t_useSeed){
		if(m_storedSeed!=-1){
			bb_random_Seed=m_storedSeed;
			m_storedSeed=-1;
		}
	}else{
		m_storedSeed=bb_random_Seed;
	}
	return bb_random_Rnd2(t_low,t_high);
}
int c_Util::m_RndIntRange(int t_low,int t_high,bool t_useSeed,int t_replayConsistencyChannel){
	int t_value=int((Float)floor(m_RndFloatRange(Float(t_low),Float(t_high+1),t_useSeed)));
	t_value=bb_math_Clamp(t_value,t_low,t_high);
	if(t_replayConsistencyChannel>=0){
		if(c_Level::m_isReplaying){
			if(!c_Level::m_creatingMap){
				t_value=c_Level::m_replay->p_GetRand(t_replayConsistencyChannel);
				if(t_value<t_low || t_value>t_high){
					return t_low;
				}
			}
		}else{
			if((c_Level::m_replay)!=0){
				c_Level::m_replay->p_RecordRand(t_replayConsistencyChannel,t_value);
			}
		}
	}
	return t_value;
}
int c_Util::m_RndIntRangeFromZero(int t_high,bool t_useSeed){
	return m_RndIntRange(0,t_high,t_useSeed,-1);
}
bool c_Util::m_RndBool(bool t_useSeed){
	return Float(m_RndIntRangeFromZero(1,t_useSeed))==FLOAT(0.0);
}
int c_Util::m_ParseTextSeed(String t_randSeedString){
	int t_seed=0;
	for(int t_i=1;t_i<t_randSeedString.Length();t_i=t_i+1){
		t_seed+=t_i*(int)t_randSeedString[t_i-1];
	}
	for(int t_j=0;t_j<t_randSeedString.Length();t_j=t_j+1){
		if((int)t_randSeedString[t_j]>57){
			return t_seed;
		}
	}
	t_seed=0;
	for(int t_k=0;t_k<t_randSeedString.Length();t_k=t_k+1){
		t_seed=10*t_seed+((int)t_randSeedString[t_k]-48);
	}
	return t_seed;
}
int c_Util::m_SeedRnd(int t_seed){
	m_storedSeed=-1;
	bb_random_Seed=t_seed;
	return 0;
}
void c_Util::m_AddMetric(String t_key,String t_value,bool t_send,bool t_blocking,bool t_isNumber){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Util.AddMetric(String, String, Bool, Bool, Bool)",48));
}
int c_Util::m_GetDistSq(int t_x,int t_y,int t_x2,int t_y2){
	return (t_x2-t_x)*(t_x2-t_x)+(t_y2-t_y)*(t_y2-t_y);
}
Float c_Util::m_GetDist(int t_x,int t_y,int t_x2,int t_y2){
	return (Float)sqrt(Float(m_GetDistSq(t_x,t_y,t_x2,t_y2)));
}
bool c_Util::m_AreAriaOrCodaActive(){
	return m_IsCharacterActive(2) || m_IsCharacterActive(7);
}
Float c_Util::m_GetDistFromClosestPlayer(int t_xVal,int t_yVal,bool t_includeSouls){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Util.GetDistFromClosestPlayer(Int, Int, Bool)",45));
	return 0;
}
bool c_Util::m_IsGlobalCollisionAt(int t_xVal,int t_yVal,bool t_isPlayer,bool t_ignoreWalls,bool t_includeTheNothing,bool t_includeShopWallsDespiteIgnoringWalls,bool t_skipIgnoreWalls){
	if(t_includeTheNothing && c_Level::m_GetTileAt(t_xVal,t_yVal)==0){
		return true;
	}
	if(t_includeShopWallsDespiteIgnoringWalls){
		int t_3=c_Level::m_GetTileTypeAt(t_xVal,t_yVal);
		if(t_3==104 || t_3==105 || t_3==109){
			return true;
		}
	}
	c_Enumerator5* t_=c_RenderableObject::m_renderableObjectList->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_RenderableObject* t_renderableObj=t_->p_NextObject();
		if(t_renderableObj->m_collides){
			if(t_renderableObj->m_isPlayer && dynamic_cast<c_Player*>(t_renderableObj)->p_Perished()){
				continue;
			}
			if(t_isPlayer && t_renderableObj->m_playerOverrideCollide){
				continue;
			}
			if(t_ignoreWalls){
				c_Tile* t_tile=dynamic_cast<c_Tile*>(t_renderableObj);
				if(t_tile!=0 && t_tile->p_GetType()==102){
					continue;
				}
			}
			if(t_skipIgnoreWalls){
				c_Entity* t_entity=dynamic_cast<c_Entity*>(t_renderableObj);
				if(t_entity!=0 && t_entity->m_ignoreWalls){
					continue;
				}
			}
			if(t_renderableObj->m_x<=t_xVal && t_xVal<t_renderableObj->m_x+t_renderableObj->m_width && (t_renderableObj->m_y<=t_yVal && t_yVal<t_renderableObj->m_y+t_renderableObj->m_height)){
				return true;
			}
		}
	}
	return false;
}
bool c_Util::m_IsGlobalCollisionAt2(int t_xVal,int t_yVal,bool t_isPlayer,bool t_ignoreWalls,bool t_includeShopWallsDespiteIgnoringWalls,bool t_skipIgnoreWalls){
	return m_IsGlobalCollisionAt(t_xVal,t_yVal,t_isPlayer,t_ignoreWalls,false,t_includeShopWallsDespiteIgnoringWalls,t_skipIgnoreWalls);
}
bool c_Util::m_IsAnyPlayerAt(int t_xVal,int t_yVal){
	for(int t_i=0;t_i<bb_controller_game_numPlayers;t_i=t_i+1){
		c_Player* t_player=bb_controller_game_players[t_i];
		if(t_player->p_Perished()){
			continue;
		}
		if(t_player->m_x==t_xVal && t_player->m_y==t_yVal){
			return true;
		}
	}
	return false;
}
bool c_Util::m_IsWeaponlessCharacterActive(){
	for(int t_i=0;t_i<bb_controller_game_numPlayers;t_i=t_i+1){
		c_Player* t_player=bb_controller_game_players[t_i];
		if(t_player->p_IsWeaponlessCharacter()){
			return true;
		}
	}
	return false;
}
c_Point* c_Util::m_GetPointFromDir(int t_dir){
	int t_x=0;
	int t_y=0;
	int t_2=t_dir;
	if(t_2==0){
		t_x=1;
		t_y=0;
	}else{
		if(t_2==1){
			t_x=0;
			t_y=1;
		}else{
			if(t_2==2){
				t_x=-1;
				t_y=0;
			}else{
				if(t_2==3){
					t_x=0;
					t_y=-1;
				}else{
					if(t_2==4){
						t_x=1;
						t_y=1;
					}else{
						if(t_2==5){
							t_x=-1;
							t_y=1;
						}else{
							if(t_2==6){
								t_x=-1;
								t_y=-1;
							}else{
								if(t_2==7){
									t_x=1;
									t_y=-1;
								}else{
									t_x=0;
									t_y=0;
								}
							}
						}
					}
				}
			}
		}
	}
	return (new c_Point)->m_new(t_x,t_y);
}
int c_Util::m_GetL1Dist(int t_x1,int t_y1,int t_x2,int t_y2){
	return bb_math_Abs(t_x1-t_x2)+bb_math_Abs(t_y1-t_y2);
}
bool c_Util::m_IsBomblessCharacterActive(){
	for(int t_i=0;t_i<bb_controller_game_numPlayers;t_i=t_i+1){
		c_Player* t_player=bb_controller_game_players[t_i];
		if(t_player!=0 && t_player->p_IsBomblessCharacter()){
			return true;
		}
	}
	return false;
}
String c_Util::m_DirToString(int t_dir){
	int t_1=t_dir;
	if(t_1==-1){
		return String(L"DIR_NONE",8);
	}else{
		if(t_1==0){
			return String(L"DIR_RIGHT",9);
		}else{
			if(t_1==1){
				return String(L"DIR_DOWN",8);
			}else{
				if(t_1==2){
					return String(L"DIR_LEFT",8);
				}else{
					if(t_1==3){
						return String(L"DIR_UP",6);
					}else{
						if(t_1==4){
							return String(L"DIR_DOWNRIGHT",13);
						}else{
							if(t_1==5){
								return String(L"DIR_DOWNLEFT",12);
							}else{
								if(t_1==6){
									return String(L"DIR_UPLEFT",10);
								}else{
									if(t_1==7){
										return String(L"DIR_UPRIGHT",11);
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return String(L"Unrecognized direction ",23)+String(t_dir);
}
String c_Util::m_GetTimeStringFromMilliseconds(int t_msecs,bool t_secondsOnly,bool t_padSeconds){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Util.GetTimeStringFromMilliseconds(Int, Bool, Bool)",51));
	return String();
}
bool c_Util::m_IncrementSteamStat(String t_statName,bool t_inGameplayOnly,bool t_allowCoop,bool t_allowSeeded,bool t_delayUntilLevelLoad){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Util.IncrementSteamStat(String, Bool, Bool, Bool, Bool)",55));
	return false;
}
bool c_Util::m_SetSteamIntStat(String t_statName,int t_val,bool t_inGameplayOnly,bool t_allowCoop,bool t_delayUntilLevelLoad){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Util.SetSteamIntStat(String, Int, Bool, Bool, Bool)",51));
	return false;
}
c_Point* c_Util::m_FindClosestTrulyUnoccupiedSpace(int t_xVal,int t_yVal,bool t_ignoreWalls){
	int t_[]={t_xVal,t_yVal};
	int t_2[]={t_xVal-1,t_yVal};
	int t_3[]={t_xVal+1,t_yVal};
	int t_4[]={t_xVal,t_yVal-1};
	int t_5[]={t_xVal,t_yVal+1};
	int t_6[]={t_xVal-1,t_yVal-1};
	int t_7[]={t_xVal+1,t_yVal-1};
	int t_8[]={t_xVal-1,t_yVal+1};
	int t_9[]={t_xVal+1,t_yVal+1};
	int t_10[]={t_xVal-2,t_yVal};
	int t_11[]={t_xVal+2,t_yVal};
	int t_12[]={t_xVal,t_yVal-2};
	int t_13[]={t_xVal,t_yVal+2};
	Array<int > t_14[]={Array<int >(t_,2),Array<int >(t_2,2),Array<int >(t_3,2),Array<int >(t_4,2),Array<int >(t_5,2),Array<int >(t_6,2),Array<int >(t_7,2),Array<int >(t_8,2),Array<int >(t_9,2),Array<int >(t_10,2),Array<int >(t_11,2),Array<int >(t_12,2),Array<int >(t_13,2)};
	Array<Array<int > > t_points=Array<Array<int > >(t_14,13);
	Array<Array<int > > t_15=t_points;
	int t_16=0;
	while(t_16<t_15.Length()){
		Array<int > t_p=t_15[t_16];
		t_16=t_16+1;
		int t_x=t_p[0];
		int t_y=t_p[1];
		if(c_Level::m_GetTileAt(t_x,t_y)!=0 && !m_IsGlobalCollisionAt2(t_x,t_y,false,t_ignoreWalls,false,false) && !m_IsAnyPlayerAt(t_x,t_y) && c_Entity::m_GetEntityAt(t_x,t_y,true)==0){
			return (new c_Point)->m_new(t_x,t_y);
		}
	}
	return 0;
}
void c_Util::m_GetLeaderboardScores(int t_rangeStart,int t_rangeEnd,int t_dayOffset,String t_specificLeaderboard,bool t_useTodaysSeed,bool t_friendsOnly,bool t_playerOnly){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Util.GetLeaderboardScores(Int, Int, Int, String, Bool, Bool, Bool)",66));
}
Float c_Util::m_GetDistSqFromObject(int t_xVal,int t_yVal,c_RenderableObject* t_obj){
	return Float(m_GetDistSq(t_obj->m_x,t_obj->m_y,t_xVal,t_yVal));
}
bool c_Util::m_IsOnScreen(int t_xVal,int t_yVal,Float t_cameraSeekX,Float t_cameraSeekY){
	Float t_yDiff=Float(t_yVal)-t_cameraSeekY/FLOAT(24.0);
	int t_fixedHeight=c_Camera::m_GetFixedHeight();
	if(Float(t_fixedHeight/-48-1)>t_yDiff){
		return false;
	}
	if(Float(t_fixedHeight/48+1)<t_yDiff){
		return false;
	}
	Float t_xDiff=Float(t_xVal)-t_cameraSeekX/FLOAT(24.0);
	int t_fixedWidth=c_Camera::m_GetFixedWidth();
	if(Float(t_fixedWidth/-48-1)>t_xDiff){
		return false;
	}
	if(Float(t_fixedWidth/48+1)<t_xDiff){
		return false;
	}
	return true;
}
bool c_Util::m_LineSegmentTileIntersect(Float t_p0_x,Float t_p0_y,Float t_p1_x,Float t_p1_y,Float t_p2_x,Float t_p2_y){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Util.LineSegmentTileIntersect(Float, Float, Float, Float, Float, Float)",71));
	return false;
}
c_Player* c_Util::m_GetAnyPlayerAt(int t_xVal,int t_yVal){
	for(int t_i=0;t_i<bb_controller_game_numPlayers;t_i=t_i+1){
		c_Player* t_player=bb_controller_game_players[t_i];
		if(!t_player->p_Perished()){
			if(t_player->m_x==t_xVal && t_player->m_y==t_yVal){
				return t_player;
			}
		}
	}
	return 0;
}
c_List39* c_Util::m_GetPlayersAt(c_Rect* t_where){
	c_List39* t_playersAt=(new c_List39)->m_new();
	for(int t_i=0;t_i<bb_controller_game_numPlayers;t_i=t_i+1){
		c_Player* t_player=bb_controller_game_players[t_i];
		if(!t_player->p_Perished()){
			if(t_where->p_Contains5(t_player->p_GetLocation())){
				t_playersAt->p_AddLast39(t_player);
			}
		}
	}
	return t_playersAt;
}
c_List39* c_Util::m_GetPlayersAt2(int t_xVal,int t_yVal){
	return m_GetPlayersAt((new c_Rect)->m_new(t_xVal,t_yVal,0,0));
}
void c_Util::mark(){
	Object::mark();
}
c_TextLog::c_TextLog(){
}
void c_TextLog::m_Message(String t_str){
	bb_textlog_MessageGlobal(t_str,false);
}
void c_TextLog::mark(){
	Object::mark();
}
c_GameData::c_GameData(){
}
bool c_GameData::m_GetDebugLogging(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.GetDebugLogging()",26));
	return false;
}
bool c_GameData::m_modGamedataChanges;
String c_GameData::m_activeMod;
bool c_GameData::m_gameDataLoaded;
void c_GameData::m_LoadGameDataXML(bool t_bypassChecksum){
	c_XMLError* t_error=(new c_XMLError)->m_new();
	m_modGamedataChanges=false;
	if(m_activeMod!=String()){
		bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.LoadGameDataXML(Bool) (Mods)",37));
	}
	String t_xmlStr=bb_app_LoadString(String(L"necrodancer.xml",15));
	if(true){
		bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.LoadGameDataXML(Bool) (Debug-only checksum)",52));
	}
	gc_assign(bb_necrodancergame_xmlData,bb_xml_ParseXML(t_xmlStr,t_error,1));
	if(bb_necrodancergame_xmlData==0 && t_error->m_error){
		bb_logger_Debug->p_Log(String(L"NECRODANCER INIT XML PARSE ERROR: ",34)+t_error->p_ToString());
	}
	m_gameDataLoaded=true;
}
void c_GameData::m_SetCharUnlocked(int t_charNum,bool t_val){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.SetCharUnlocked(Int, Bool)",35));
}
void c_GameData::m_SetMentorLevelClear(int t_num){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.SetMentorLevelClear(Int)",33));
}
bool c_GameData::m_GetEnableCutscenes(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.GetEnableCutscenes()",29));
	return false;
}
int c_GameData::m_GetAlternateSkin(int t_charID){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.GetAlternateSkin(Int)",30));
	return 0;
}
bool c_GameData::m_GetUseChoral(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.GetUseChoral()",23));
	return false;
}
int c_GameData::m_GetPlayerHealthMax(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.GetPlayerHealthMax()",29));
	return 0;
}
void c_GameData::m_SetPlayerCoins(int t_val){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.SetPlayerCoins(Int)",28));
}
void c_GameData::m_SetPlayerDiamonds(int t_val){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.SetPlayerDiamonds(Int)",31));
}
bool c_GameData::m_GetTutorialComplete(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.GetTutorialComplete()",30));
	return true;
}
int c_GameData::m_GetDefaultCharacter(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.GetDefaultCharacter()",30));
	return 0;
}
bool c_GameData::m_GetDLCPlayed(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.GetDLCPlayed()",23));
	return false;
}
bool c_GameData::m_GetZone2Unlocked(int t_characterID){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.GetZone2Unlocked(Int)",30));
	return false;
}
void c_GameData::m_SetDLCPlayed(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.SetDLCPlayed()",23));
}
int c_GameData::m_GetPlayerDiamonds(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.GetPlayerDiamonds()",28));
	return 0;
}
bool c_GameData::m_IsCharUnlocked(int t_charNum){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.IsCharUnlocked(Int)",28));
	return false;
}
void c_GameData::m_Save(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.Save()",15));
}
bool c_GameData::m_GetLobbyMove(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.GetLobbyMove()",23));
	return false;
}
int c_GameData::m_GetNumPendingSpawnItems(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.GetNumPendingSpawnItems()",34));
	return 0;
}
bool c_GameData::m_GetDaoustVocals(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.GetDaoustVocals()",26));
	return false;
}
bool c_GameData::m_GetNPCUnlock(String t_npcName){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.GetNPCUnlock(String)",29));
	return false;
}
bool c_GameData::m_HasFoughtDeadRinger(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.HasFoughtDeadRinger()",30));
	return false;
}
void c_GameData::m_SetFoughtDeadRinger(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.SetFoughtDeadRinger()",30));
}
bool c_GameData::m_GetItemUnlocked(String t_itemName,bool t_includeClean){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.GetItemUnlocked(String, Bool)",38));
	return false;
}
int c_GameData::m_GetPendingSpawnItem(int t_num){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.GetPendingSpawnItem(Int)",33));
	return 0;
}
void c_GameData::m_RemovePendingSpawnItem(String t_item){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.RemovePendingSpawnItem(String)",39));
}
void c_GameData::m_SetHavePlayedHardcore(bool t_val){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.SetHavePlayedHardcore(Bool)",36));
}
bool c_GameData::m_HasFoughtNecrodancer(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.HasFoughtNecrodancer()",31));
	return false;
}
void c_GameData::m_SetFoughtNecrodancer(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.SetFoughtNecrodancer()",31));
}
bool c_GameData::m_GetZone2UnlockedCurrentCharacters(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.GetZone2UnlockedCurrentCharacters()",44));
	return false;
}
void c_GameData::m_SetZone2UnlockedCurrentCharacters(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.SetZone2UnlockedCurrentCharacters()",44));
}
bool c_GameData::m_GetZone3UnlockedCurrentCharacters(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.GetZone3UnlockedCurrentCharacters()",44));
	return false;
}
void c_GameData::m_SetZone3UnlockedCurrentCharacters(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.SetZone3UnlockedCurrentCharacters()",44));
}
bool c_GameData::m_GetZone4UnlockedCurrentCharacters(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.GetZone4UnlockedCurrentCharacters()",44));
	return false;
}
void c_GameData::m_SetZone4UnlockedCurrentCharacters(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.SetZone4UnlockedCurrentCharacters()",44));
}
bool c_GameData::m_GetZone1UnlockedCurrentCharacters(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.GetZone1UnlockedCurrentCharacters()",44));
	return false;
}
void c_GameData::m_SetZone1UnlockedCurrentCharacters(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.SetZone1UnlockedCurrentCharacters()",44));
}
String c_GameData::m_GetDiamondDealerItems(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.GetDiamondDealerItems()",32));
	return String();
}
void c_GameData::m_EraseDiamondDealerItems(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.EraseDiamondDealerItems()",34));
}
bool c_GameData::m_GetEnableBossIntros(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.GetEnableBossIntros()",30));
	return false;
}
bool c_GameData::m_LoadPlayerDataXML(bool t_forceCloud){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.LoadPlayerDataXML(Bool)",32));
	return false;
}
int c_GameData::m_GetDefaultMod(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.GetDefaultMod()",24));
	return 0;
}
bool c_GameData::m_GetShownNocturnaIntro(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.GetShownNocturnaIntro()",32));
	return false;
}
void c_GameData::m_SetShownNocturnaIntro(bool t_b){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.SetShownNocturnaIntro(Bool)",36));
}
bool c_GameData::m_GetVSync(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.GetVSync()",19));
	return false;
}
bool c_GameData::m_GetFullscreen(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.GetFullscreen()",24));
	return false;
}
int c_GameData::m_GetResolutionW(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.GetResolutionW()",25));
	return 0;
}
int c_GameData::m_GetResolutionH(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.GetResolutionH()",25));
	return 0;
}
bool c_GameData::m_GetShownSeizureWarning(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.GetShownSeizureWarning()",33));
	return false;
}
void c_GameData::m_SetLobbyMove(bool t_m){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.SetLobbyMove(Bool)",27));
}
void c_GameData::m_SetShowHints(int t_h){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.SetShowHints(Int)",26));
}
int c_GameData::m_GetShowHints(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.GetShowHints()",23));
	return 0;
}
bool c_GameData::m_GetShowDiamondReminder(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.GetShowDiamondReminder()",33));
	return false;
}
bool c_GameData::m_GetHavePlayedHardcore(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.GetHavePlayedHardcore()",32));
	return false;
}
void c_GameData::m_SetHardModeComplete(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.SetHardModeComplete()",30));
}
bool c_GameData::m_GetStoryModeComplete(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.GetStoryModeComplete()",31));
	return false;
}
bool c_GameData::m_GetPhasingModeComplete(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.GetPhasingModeComplete()",33));
	return false;
}
bool c_GameData::m_GetMysteryModeComplete(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.GetMysteryModeComplete()",33));
	return false;
}
bool c_GameData::m_GetRandomizerModeComplete(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.GetRandomizerModeComplete()",36));
	return false;
}
bool c_GameData::m_GetHardModeComplete(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.GetHardModeComplete()",30));
	return false;
}
bool c_GameData::m_GetNoReturnModeComplete(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.GetNoReturnModeComplete()",34));
	return false;
}
void c_GameData::m_SetNoReturnModeComplete(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.SetNoReturnModeComplete()",34));
}
void c_GameData::m_SetPhasingModeComplete(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.SetPhasingModeComplete()",33));
}
void c_GameData::m_SetRandomizerModeComplete(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.SetRandomizerModeComplete()",36));
}
void c_GameData::m_SetMysteryModeComplete(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.SetMysteryModeComplete()",33));
}
void c_GameData::m_SetStoryModeComplete(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.SetStoryModeComplete()",31));
}
void c_GameData::m_SetTutorialComplete(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.SetTutorialComplete()",30));
}
int c_GameData::m_GetKeyBinding(int t_player,int t_index){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.GetKeyBinding(Int, Int)",32));
	return 0;
}
void c_GameData::m_SetKilledEnemy(String t_enemyName,int t_type,bool t_val){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GameData.SetKilledEnemy(String, Int, Bool)",42));
}
void c_GameData::mark(){
	Object::mark();
}
c_Logger::c_Logger(){
	m_fs=0;
}
void c_Logger::p_Write(String t_value,int t_level){
	this->m_fs->p_WriteString(t_value,String(L"utf8",4));
}
void c_Logger::p_WriteLine(String t_value,int t_level){
	this->p_Write(t_value,t_level);
	this->m_fs->p_WriteString(String(L"\r\n",2),String(L"utf8",4));
}
void c_Logger::p_WriteLine2(String t_value){
	this->p_WriteLine(t_value,0);
}
void c_Logger::p_WriteLine3(){
	this->p_WriteLine(String(),0);
}
c_Logger* c_Logger::m_new(){
	gc_assign(this->m_fs,c_FileStream::m_Open(String(L"log.txt",7),String(L"w",1)));
	this->p_WriteLine3();
	return this;
}
void c_Logger::p_TraceNotImplemented(String t_name){
	if(true){
		this->p_WriteLine(String(L"[NI] ",5)+t_name,0);
	}
}
void c_Logger::p_Log(String t_str){
	this->p_WriteLine(t_str,1);
}
void c_Logger::p_Assert(bool t_assertion,String t_message){
	if(!t_assertion){
		String t_fullMessage=String(L"Assertion failed!",17);
		if(t_message!=String()){
			t_fullMessage=t_fullMessage+(String(L" ",1)+t_message);
		}
		this->p_WriteLine(t_fullMessage,2);
		bbError(t_fullMessage);
	}
}
void c_Logger::mark(){
	Object::mark();
	gc_mark_q(m_fs);
}
c_Stream::c_Stream(){
}
c_Stream* c_Stream::m_new(){
	return this;
}
void c_Stream::p_WriteError(){
	throw (new c_StreamWriteError)->m_new(this);
}
void c_Stream::p_WriteAll(c_DataBuffer* t_buffer,int t_offset,int t_count){
	while(t_count>0){
		int t_n=p_Write2(t_buffer,t_offset,t_count);
		if(t_n<=0){
			p_WriteError();
		}
		t_offset+=t_n;
		t_count-=t_n;
	}
}
void c_Stream::p_WriteString(String t_value,String t_encoding){
	c_DataBuffer* t_buf=(new c_DataBuffer)->m_new(t_value.Length()*3,false);
	int t_len=t_buf->p_PokeString(0,t_value,String(L"utf8",4));
	p_WriteAll(t_buf,0,t_len);
}
void c_Stream::mark(){
	Object::mark();
}
c_FileStream::c_FileStream(){
	m__stream=0;
}
BBFileStream* c_FileStream::m_OpenStream(String t_path,String t_mode){
	BBFileStream* t_stream=(new BBFileStream);
	String t_fmode=t_mode;
	if(t_fmode==String(L"a",1)){
		t_fmode=String(L"u",1);
	}
	if(!t_stream->Open(t_path,t_fmode)){
		return 0;
	}
	if(t_mode==String(L"a",1)){
		t_stream->Seek(t_stream->Length());
	}
	return t_stream;
}
c_FileStream* c_FileStream::m_new(String t_path,String t_mode){
	c_Stream::m_new();
	gc_assign(m__stream,m_OpenStream(t_path,t_mode));
	if(!((m__stream)!=0)){
		bbError(String(L"Failed to open stream",21));
	}
	return this;
}
c_FileStream* c_FileStream::m_new2(BBFileStream* t_stream){
	c_Stream::m_new();
	gc_assign(m__stream,t_stream);
	return this;
}
c_FileStream* c_FileStream::m_new3(){
	c_Stream::m_new();
	return this;
}
c_FileStream* c_FileStream::m_Open(String t_path,String t_mode){
	BBFileStream* t_stream=m_OpenStream(t_path,t_mode);
	if((t_stream)!=0){
		return (new c_FileStream)->m_new2(t_stream);
	}
	return 0;
}
int c_FileStream::p_Write2(c_DataBuffer* t_buffer,int t_offset,int t_count){
	return m__stream->Write(t_buffer,t_offset,t_count);
}
void c_FileStream::mark(){
	c_Stream::mark();
	gc_mark_q(m__stream);
}
c_LogLevel::c_LogLevel(){
}
void c_LogLevel::mark(){
	Object::mark();
}
c_DataBuffer::c_DataBuffer(){
}
c_DataBuffer* c_DataBuffer::m_new(int t_length,bool t_direct){
	if(!_New(t_length)){
		bbError(String(L"Allocate DataBuffer failed",26));
	}
	return this;
}
c_DataBuffer* c_DataBuffer::m_new2(){
	return this;
}
void c_DataBuffer::p_PokeBytes(int t_address,Array<int > t_bytes,int t_offset,int t_count){
	if(t_address+t_count>Length()){
		t_count=Length()-t_address;
	}
	if(t_offset+t_count>t_bytes.Length()){
		t_count=t_bytes.Length()-t_offset;
	}
	for(int t_i=0;t_i<t_count;t_i=t_i+1){
		PokeByte(t_address+t_i,t_bytes[t_offset+t_i]);
	}
}
int c_DataBuffer::p_PokeString(int t_address,String t_str,String t_encoding){
	String t_2=t_encoding;
	if(t_2==String(L"utf8",4)){
		Array<int > t_p=t_str.ToChars();
		int t_i=0;
		int t_e=t_p.Length();
		Array<int > t_q=Array<int >(t_e*3);
		int t_j=0;
		while(t_i<t_e){
			int t_c=t_p[t_i]&65535;
			t_i+=1;
			if(t_c<128){
				t_q[t_j]=t_c;
				t_j+=1;
			}else{
				if(t_c<2048){
					t_q[t_j]=192|t_c>>6;
					t_q[t_j+1]=128|t_c&63;
					t_j+=2;
				}else{
					t_q[t_j]=224|t_c>>12;
					t_q[t_j+1]=128|t_c>>6&63;
					t_q[t_j+2]=128|t_c&63;
					t_j+=3;
				}
			}
		}
		p_PokeBytes(t_address,t_q,0,t_j);
		return t_j;
	}else{
		if(t_2==String(L"ascii",5)){
			p_PokeBytes(t_address,t_str.ToChars(),0,t_str.Length());
			return t_str.Length();
		}
	}
	bbError(String(L"Invalid string encoding:",24)+t_encoding);
	return 0;
}
void c_DataBuffer::mark(){
	BBDataBuffer::mark();
}
c_StreamError::c_StreamError(){
	m__stream=0;
}
c_StreamError* c_StreamError::m_new(c_Stream* t_stream){
	gc_assign(m__stream,t_stream);
	return this;
}
c_StreamError* c_StreamError::m_new2(){
	return this;
}
void c_StreamError::mark(){
	ThrowableObject::mark();
	gc_mark_q(m__stream);
}
c_StreamWriteError::c_StreamWriteError(){
}
c_StreamWriteError* c_StreamWriteError::m_new(c_Stream* t_stream){
	c_StreamError::m_new(t_stream);
	return this;
}
c_StreamWriteError* c_StreamWriteError::m_new2(){
	c_StreamError::m_new2();
	return this;
}
void c_StreamWriteError::mark(){
	c_StreamError::mark();
}
c_Logger* bb_logger_Debug;
bool bb_necrodancergame_DEBUG_LOG_OUTPUT;
String bb_textlog_logTimestamp;
void bb_app_GetDate(Array<int > t_date){
	bb_app__game->GetDate(t_date);
}
Array<int > bb_app_GetDate2(){
	Array<int > t_date=Array<int >(7);
	bb_app_GetDate(t_date);
	return t_date;
}
String bb_textlog_GetTimeString(bool t_nicerFormat){
	Array<int > t_date=bb_app_GetDate2();
	int t_hour=t_date[3];
	int t_minute=t_date[4];
	int t_second=t_date[5];
	String t_hourStr=String(t_hour);
	if(t_hour<10){
		t_hourStr=String(L"0",1)+t_hourStr;
	}
	String t_minuteStr=String(t_minute);
	if(t_minute<10){
		t_minuteStr=String(L"0",1)+t_minuteStr;
	}
	String t_secondStr=String(t_second);
	if(t_second<10){
		t_secondStr=String(L"0",1)+t_secondStr;
	}
	String t_timeStr=String();
	if(t_nicerFormat){
		t_timeStr=t_hourStr+String(L"h",1)+t_minuteStr+String(L"m",1)+t_secondStr+String(L"s",1);
	}else{
		t_timeStr=t_hourStr+String(L"_",1)+t_minuteStr+String(L"_",1)+t_secondStr;
	}
	return t_timeStr;
}
String bb_filesystem_FixPath(String t_path){
	return BBFileSystem::FixPath(t_path);
}
bool bb_filesystem_CreateDir(String t_path){
	return BBFileSystem::CreateDir(bb_filesystem_FixPath(t_path));
}
String bb_textlog_GetMonthString(int t_month,bool t_addTags){
	String t_monthStr=String();
	if(t_addTags){
		int t_1=t_month;
		if(t_1==0){
			t_monthStr=String(L"|2009|JAN|",10);
		}else{
			if(t_1==1){
				t_monthStr=String(L"|2010|FEB|",10);
			}else{
				if(t_1==2){
					t_monthStr=String(L"|2011|MAR|",10);
				}else{
					if(t_1==3){
						t_monthStr=String(L"|2012|APR|",10);
					}else{
						if(t_1==4){
							t_monthStr=String(L"|2013|MAY|",10);
						}else{
							if(t_1==5){
								t_monthStr=String(L"|2014|JUN|",10);
							}else{
								if(t_1==6){
									t_monthStr=String(L"|2015|JUL|",10);
								}else{
									if(t_1==7){
										t_monthStr=String(L"|2016|AUG|",10);
									}else{
										if(t_1==8){
											t_monthStr=String(L"|2017|SEP|",10);
										}else{
											if(t_1==9){
												t_monthStr=String(L"|2018|OCT|",10);
											}else{
												if(t_1==10){
													t_monthStr=String(L"|2019|NOV|",10);
												}else{
													if(t_1==11){
														t_monthStr=String(L"|2020|DEC|",10);
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}else{
		int t_2=t_month;
		if(t_2==0){
			t_monthStr=String(L"JAN",3);
		}else{
			if(t_2==1){
				t_monthStr=String(L"FEB",3);
			}else{
				if(t_2==2){
					t_monthStr=String(L"MAR",3);
				}else{
					if(t_2==3){
						t_monthStr=String(L"APR",3);
					}else{
						if(t_2==4){
							t_monthStr=String(L"MAY",3);
						}else{
							if(t_2==5){
								t_monthStr=String(L"JUN",3);
							}else{
								if(t_2==6){
									t_monthStr=String(L"JUL",3);
								}else{
									if(t_2==7){
										t_monthStr=String(L"AUG",3);
									}else{
										if(t_2==8){
											t_monthStr=String(L"SEP",3);
										}else{
											if(t_2==9){
												t_monthStr=String(L"OCT",3);
											}else{
												if(t_2==10){
													t_monthStr=String(L"NOV",3);
												}else{
													if(t_2==11){
														t_monthStr=String(L"DEC",3);
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return t_monthStr;
}
String bb_textlog_GetDateString(bool t_useNumericMonth){
	Array<int > t_date=bb_app_GetDate2();
	int t_year=t_date[0];
	int t_month=t_date[1];
	int t_day=t_date[2];
	String t_yearStr=String(t_year);
	String t_monthStr=String(t_month);
	if(t_month<10){
		t_monthStr=String(L"0",1)+t_monthStr;
	}
	String t_dayStr=String(t_day);
	if(t_day<10){
		t_dayStr=String(L"0",1)+t_dayStr;
	}
	String t_dateStr=String();
	if(t_useNumericMonth){
		t_dateStr=t_yearStr+String(L"_",1)+t_monthStr+String(L"_",1)+t_dayStr;
	}else{
		t_monthStr=bb_textlog_GetMonthString(t_month,false);
		t_dateStr=t_yearStr+String(L"_",1)+t_monthStr+String(L"_",1)+t_dayStr;
	}
	return t_dateStr;
}
void bb_textlog_ForceMessageGlobal(String t_str,bool t_flush){
	if(bb_textlog_logTimestamp==String()){
		bb_textlog_logTimestamp=bb_textlog_GetTimeString(true);
	}
	bbDebugLog(t_str);
	bb_filesystem_CreateDir(GetAppFolder()+String(L"logs",4));
	t_str=t_str+String(L"\r",1);
	String t_dateStr=bb_textlog_GetDateString(false);
	String t_filePath=GetAppFolder()+String(L"logs/necrodancer_log_",21)+t_dateStr+String(L"_",1)+bb_textlog_logTimestamp+String(L".txt",4);
	AppendToLog(t_str,t_filePath,t_flush);
}
void bb_textlog_MessageGlobal(String t_str,bool t_forceLog){
	if(true || c_GameData::m_GetDebugLogging()){
		bool t_flush=false;
		if(bb_necrodancergame_DEBUG_LOG_OUTPUT || t_forceLog || c_GameData::m_GetDebugLogging()){
			t_flush=true;
		}
		bb_textlog_ForceMessageGlobal(t_str,t_flush);
	}
}
int bb_math_Min(int t_x,int t_y){
	if(t_x<t_y){
		return t_x;
	}
	return t_y;
}
Float bb_math_Min2(Float t_x,Float t_y){
	if(t_x<t_y){
		return t_x;
	}
	return t_y;
}
void bb_steam_SteamInit(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"SteamInit()",11));
}
void bb_fmod_StartFMOD(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"StartFMOD()",11));
}
int bb_necrodancergame_FRAMES_PER_SEC;
int bb_app__updateRate;
void bb_app_SetUpdateRate(int t_hertz){
	bb_app__updateRate=t_hertz;
	bb_app__game->SetUpdateRate(t_hertz);
}
Float bb_necrodancergame_GLOBAL_SCALE_FACTOR;
c_XMLError::c_XMLError(){
	m_error=false;
	m_message=String();
	m_line=0;
	m_column=0;
	m_offset=0;
}
c_XMLError* c_XMLError::m_new(){
	return this;
}
void c_XMLError::p_Reset(){
	m_error=false;
	m_message=String();
	m_line=-1;
	m_column=-1;
	m_offset=-1;
}
void c_XMLError::p_Set2(String t_message,int t_line,int t_column,int t_offset){
	m_error=true;
	this->m_message=t_message;
	this->m_line=t_line;
	this->m_column=t_column;
	this->m_offset=t_offset;
}
String c_XMLError::p_ToString(){
	if(m_error==false){
		return String();
	}
	c_XMLStringBuffer* t_buffer=(new c_XMLStringBuffer)->m_new(256);
	t_buffer->p_Add2(String(L"XMLError: ",10));
	if((m_message.Length())!=0){
		t_buffer->p_Add2(m_message);
	}else{
		t_buffer->p_Add2(String(L"unknown error",13));
	}
	t_buffer->p_Add2(String(L" [line:",7));
	if(m_line>-1){
		t_buffer->p_Add2(String(m_line));
	}else{
		t_buffer->p_Add2(String(L"??",2));
	}
	t_buffer->p_Add2(String(L"  column:",9));
	if(m_column>-1){
		t_buffer->p_Add2(String(m_column));
	}else{
		t_buffer->p_Add2(String(L"??",2));
	}
	t_buffer->p_Add2(String(L"  offset:",9));
	if(m_offset>-1){
		t_buffer->p_Add2(String(m_offset)+String(L"]",1));
	}else{
		t_buffer->p_Add2(String(L"??]",3));
	}
	return t_buffer->p_value();
}
void c_XMLError::mark(){
	Object::mark();
}
String bb_app_LoadString(String t_path){
	return bb_app__game->LoadString(bb_data_FixDataPath(t_path));
}
c_XMLNode::c_XMLNode(){
	m_fullValue=String();
	m_valid=false;
	m_text=false;
	m_nameNormalCase=String();
	m_nameLowerCase=String();
	m_doc=0;
	m_parent=0;
	m_lastChild=0;
	m_nextSibling=0;
	m_previousSibling=0;
	m_firstChild=0;
	m_children=(new c_List)->m_new();
	m_parentListNode=0;
	m_path=String();
	m_pathList=0;
	m_pathListNode=0;
	m_line=0;
	m_column=0;
	m_offset=0;
	m_attributes=(new c_StringMap2)->m_new();
}
c_XMLNode* c_XMLNode::m_new(String t_name,bool t_valid){
	if((t_name.Length())!=0){
		this->m_nameNormalCase=t_name;
		this->m_nameLowerCase=t_name.ToLower();
	}
	this->m_valid=t_valid;
	return this;
}
c_XMLNode* c_XMLNode::m_new2(){
	return this;
}
c_XMLNode* c_XMLNode::p_AddText(String t_data){
	if(m_valid==false || m_text){
		return 0;
	}
	m_fullValue=m_fullValue+t_data;
	c_XMLNode* t_child=(new c_XMLNode)->m_new(m_nameNormalCase,true);
	t_child->m_text=true;
	gc_assign(t_child->m_doc,m_doc);
	gc_assign(t_child->m_parent,this);
	t_child->m_fullValue=t_data;
	if((m_lastChild)!=0){
		gc_assign(m_lastChild->m_nextSibling,t_child);
		gc_assign(t_child->m_previousSibling,m_lastChild);
		gc_assign(m_lastChild,t_child);
	}else{
		gc_assign(m_firstChild,t_child);
		gc_assign(m_lastChild,t_child);
	}
	gc_assign(t_child->m_parentListNode,m_children->p_AddLast(t_child));
	return t_child;
}
void c_XMLNode::p_SetAttribute(String t_id){
	if(m_valid==false){
		return;
	}
	String t_lowerId=t_id.ToLower();
	c_XMLAttribute* t_attribute=m_attributes->p_Get(t_lowerId);
	if(t_attribute==0){
		m_attributes->p_Insert3(t_lowerId,(new c_XMLAttribute)->m_new(t_id,String()));
	}else{
		t_attribute->m_idNormalCase=t_id;
		t_attribute->m_value=String();
	}
}
void c_XMLNode::p_SetAttribute2(String t_id,bool t_value){
	if(m_valid==false){
		return;
	}
	String t_lowerId=t_id.ToLower();
	c_XMLAttribute* t_attribute=m_attributes->p_Get(t_lowerId);
	if(t_attribute==0){
		m_attributes->p_Insert3(t_lowerId,(new c_XMLAttribute)->m_new(t_id,String((t_value)?1:0)));
	}else{
		t_attribute->m_idNormalCase=t_id;
		t_attribute->m_value=String((t_value)?1:0);
	}
}
void c_XMLNode::p_SetAttribute3(String t_id,int t_value){
	if(m_valid==false){
		return;
	}
	String t_lowerId=t_id.ToLower();
	c_XMLAttribute* t_attribute=m_attributes->p_Get(t_lowerId);
	if(t_attribute==0){
		m_attributes->p_Insert3(t_lowerId,(new c_XMLAttribute)->m_new(t_id,String(t_value)));
	}else{
		t_attribute->m_idNormalCase=t_id;
		t_attribute->m_value=String(t_value);
	}
}
void c_XMLNode::p_SetAttribute4(String t_id,Float t_value){
	if(m_valid==false){
		return;
	}
	String t_lowerId=t_id.ToLower();
	c_XMLAttribute* t_attribute=m_attributes->p_Get(t_lowerId);
	if(t_attribute==0){
		m_attributes->p_Insert3(t_lowerId,(new c_XMLAttribute)->m_new(t_id,String(t_value)));
	}else{
		t_attribute->m_idNormalCase=t_id;
		t_attribute->m_value=String(t_value);
	}
}
void c_XMLNode::p_SetAttribute5(String t_id,String t_value){
	if(m_valid==false){
		return;
	}
	String t_lowerId=t_id.ToLower();
	c_XMLAttribute* t_attribute=m_attributes->p_Get(t_lowerId);
	if(t_attribute==0){
		m_attributes->p_Insert3(t_lowerId,(new c_XMLAttribute)->m_new(t_id,t_value));
	}else{
		t_attribute->m_idNormalCase=t_id;
		t_attribute->m_value=t_value;
	}
}
c_XMLNode* c_XMLNode::p_AddChild(String t_name,String t_attributes,String t_value){
	if(m_valid==false || m_text){
		return 0;
	}
	c_XMLNode* t_child=(new c_XMLNode)->m_new(t_name,true);
	gc_assign(t_child->m_doc,m_doc);
	gc_assign(t_child->m_parent,this);
	t_child->p_AddText(t_value);
	t_child->m_path=m_path+String(L"/",1)+t_child->m_nameLowerCase;
	gc_assign(t_child->m_pathList,m_doc->m_paths->p_Get(t_child->m_path));
	if(t_child->m_pathList==0){
		gc_assign(t_child->m_pathList,(new c_List)->m_new());
		m_doc->m_paths->p_Set3(t_child->m_path,t_child->m_pathList);
	}
	gc_assign(t_child->m_pathListNode,t_child->m_pathList->p_AddLast(t_child));
	if((t_attributes.Length())!=0){
		c_XMLAttributeQuery* t_query=(new c_XMLAttributeQuery)->m_new(t_attributes);
		if(t_query->p_Length()>0){
			for(int t_index=0;t_index<t_query->p_Length();t_index=t_index+1){
				t_child->p_SetAttribute5(t_query->m_items[t_index]->m_id,t_query->m_items[t_index]->m_value);
			}
		}
	}
	if((m_lastChild)!=0){
		gc_assign(m_lastChild->m_nextSibling,t_child);
		gc_assign(t_child->m_previousSibling,m_lastChild);
		gc_assign(m_lastChild,t_child);
	}else{
		gc_assign(m_firstChild,t_child);
		gc_assign(m_lastChild,t_child);
	}
	gc_assign(t_child->m_parentListNode,m_children->p_AddLast(t_child));
	return t_child;
}
String c_XMLNode::p_value(){
	return m_fullValue;
}
void c_XMLNode::p_RebuildValue(){
	c_XMLStringBuffer* t_buffer=(new c_XMLStringBuffer)->m_new(128);
	c_XMLNode* t_pointer=m_firstChild;
	while((t_pointer)!=0){
		if(t_pointer->m_text){
			t_buffer->p_Add2(t_pointer->m_fullValue);
		}
		t_pointer=t_pointer->m_nextSibling;
	}
	m_fullValue=t_buffer->p_value();
}
void c_XMLNode::p_ProcessRemovedChild(c_XMLNode* t_child){
	if(t_child->m_parent==0){
		return;
	}
	if(m_lastChild==t_child){
		gc_assign(m_lastChild,t_child->m_previousSibling);
	}
	if(m_firstChild==t_child){
		gc_assign(m_firstChild,t_child->m_nextSibling);
	}
	if((t_child->m_previousSibling)!=0){
		gc_assign(t_child->m_previousSibling->m_nextSibling,t_child->m_nextSibling);
	}
	if((t_child->m_nextSibling)!=0){
		gc_assign(t_child->m_nextSibling->m_previousSibling,t_child->m_previousSibling);
	}
	t_child->m_previousSibling=0;
	t_child->m_nextSibling=0;
	t_child->m_parent=0;
	t_child->m_doc=0;
	t_child->m_parentListNode->p_Remove();
	t_child->m_parentListNode=0;
	if(t_child->m_text){
		p_RebuildValue();
	}
}
void c_XMLNode::p_Remove(){
	if((m_parent)!=0){
		m_parent->p_ProcessRemovedChild(this);
	}
}
void c_XMLNode::p_Free(){
	if((m_pathListNode)!=0){
		m_pathListNode->p_Remove();
		m_pathListNode=0;
	}
	if((m_firstChild)!=0){
		c_XMLNode* t_child=m_firstChild;
		while((t_child)!=0){
			t_child->p_Free();
			t_child=t_child->m_nextSibling;
		}
	}
	p_Remove();
}
void c_XMLNode::p_ClearText(){
	m_fullValue=String();
	c_XMLNode* t_pointer=m_firstChild;
	c_XMLNode* t_nextPointer=0;
	while((t_pointer)!=0){
		t_nextPointer=t_pointer->m_nextSibling;
		if(t_pointer->m_text){
			t_pointer->p_Free();
		}
		t_pointer=t_nextPointer;
	}
}
void c_XMLNode::p_value2(String t_newValue){
	if(m_text){
		m_fullValue=t_newValue;
		if((m_parent)!=0){
			m_parent->p_RebuildValue();
		}
	}else{
		p_ClearText();
		p_AddText(t_newValue);
	}
}
String c_XMLNode::p_name(){
	return m_nameNormalCase;
}
void c_XMLNode::p_name2(String t_newName){
	m_nameNormalCase=t_newName;
	m_nameLowerCase=t_newName.ToLower();
}
c_XMLNode* c_XMLNode::p_AddChild2(c_XMLNode* t_node,bool t_recurse){
	if(m_valid==false || t_node->m_valid==false){
		return 0;
	}
	if(t_node->m_text){
		return p_AddText(t_node->p_value());
	}
	c_XMLNode* t_child=(new c_XMLNode)->m_new(t_node->p_name(),true);
	gc_assign(t_child->m_doc,m_doc);
	gc_assign(t_child->m_parent,this);
	t_child->m_path=m_path+String(L"/",1)+t_child->m_nameLowerCase;
	gc_assign(t_child->m_pathList,m_doc->m_paths->p_Get(t_child->m_path));
	if(t_child->m_pathList==0){
		gc_assign(t_child->m_pathList,(new c_List)->m_new());
		m_doc->m_paths->p_Set3(t_child->m_path,t_child->m_pathList);
	}
	gc_assign(t_child->m_pathListNode,t_child->m_pathList->p_AddLast(t_child));
	if(t_node->m_attributes->p_IsEmpty()==false){
		c_ValueEnumerator* t_=t_node->m_attributes->p_Values()->p_ObjectEnumerator();
		while(t_->p_HasNext()){
			c_XMLAttribute* t_attribute=t_->p_NextObject();
			t_child->p_SetAttribute5(t_attribute->m_idNormalCase,t_attribute->m_value);
		}
	}
	if((m_lastChild)!=0){
		gc_assign(m_lastChild->m_nextSibling,t_child);
		gc_assign(t_child->m_previousSibling,m_lastChild);
		gc_assign(m_lastChild,t_child);
	}else{
		gc_assign(m_firstChild,t_child);
		gc_assign(m_lastChild,t_child);
	}
	gc_assign(t_child->m_parentListNode,m_children->p_AddLast(t_child));
	if(t_recurse && ((t_node->m_firstChild)!=0)){
		c_XMLNode* t_nodeChild=t_node->m_firstChild;
		while((t_nodeChild)!=0){
			t_child->p_AddChild2(t_nodeChild,true);
			t_nodeChild=t_nodeChild->m_nextSibling;
		}
	}else{
		t_child->p_AddText(t_node->p_value());
	}
	return t_child;
}
c_XMLNode* c_XMLNode::p_GetChildAtPath(String t_path){
	if(t_path.Length()==0){
		return m_doc->m_nullNode;
	}
	c_List* t_pathList=m_doc->m_paths->p_Get(this->m_path+String(L"/",1)+t_path);
	if(t_pathList==0 || t_pathList->p_IsEmpty()){
		return m_doc->m_nullNode;
	}
	return t_pathList->p_First();
}
c_XMLAttribute* c_XMLNode::p_GetXMLAttribute(String t_id){
	return m_attributes->p_Get(t_id.ToLower());
}
c_XMLNode* c_XMLNode::p_GetChildAtPath2(String t_path,String t_attributes){
	if(t_path.Length()==0){
		return m_doc->m_nullNode;
	}
	c_XMLAttributeQuery* t_query=(new c_XMLAttributeQuery)->m_new(t_attributes);
	c_List* t_pathList=m_doc->m_paths->p_Get(this->m_path+String(L"/",1)+t_path);
	if(t_pathList==0 || t_pathList->p_IsEmpty()){
		return m_doc->m_nullNode;
	}
	c_Enumerator3* t_=t_pathList->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_XMLNode* t_node=t_->p_NextObject();
		if(t_query->p_Test(t_node)){
			return t_node;
		}
		t_node=t_node->m_nextSibling;
	}
	return m_doc->m_nullNode;
}
String c_XMLNode::p_GetAttribute(String t_id){
	t_id=t_id.ToLower();
	c_XMLAttribute* t_attribute=m_attributes->p_Get(t_id);
	if(t_attribute==0){
		return String();
	}
	return t_attribute->m_value;
}
bool c_XMLNode::p_GetAttribute2(String t_id,bool t_defaultValue){
	t_id=t_id.ToLower();
	c_XMLAttribute* t_attribute=m_attributes->p_Get(t_id);
	if(t_attribute==0){
		return t_defaultValue;
	}
	return t_attribute->m_value==String(L"true",4) || (t_attribute->m_value).ToInt()==1;
}
int c_XMLNode::p_GetAttribute3(String t_id,int t_defaultValue){
	t_id=t_id.ToLower();
	c_XMLAttribute* t_attribute=m_attributes->p_Get(t_id);
	if(t_attribute==0){
		return t_defaultValue;
	}
	return (t_attribute->m_value).ToInt();
}
Float c_XMLNode::p_GetAttribute4(String t_id,Float t_defaultValue){
	t_id=t_id.ToLower();
	c_XMLAttribute* t_attribute=m_attributes->p_Get(t_id);
	if(t_attribute==0){
		return t_defaultValue;
	}
	return (t_attribute->m_value).ToFloat();
}
String c_XMLNode::p_GetAttribute5(String t_id,String t_defaultValue){
	t_id=t_id.ToLower();
	c_XMLAttribute* t_attribute=m_attributes->p_Get(t_id);
	if(t_attribute==0){
		return t_defaultValue;
	}
	return t_attribute->m_value;
}
c_XMLNode* c_XMLNode::p_GetChild(bool t_text){
	if(m_firstChild==0){
		return m_doc->m_nullNode;
	}
	if(t_text || m_firstChild->m_text==false){
		return m_firstChild;
	}
	c_XMLNode* t_child=m_firstChild;
	while((t_child)!=0){
		if(t_child->m_text==false){
			return t_child;
		}
		t_child=t_child->m_nextSibling;
	}
	return m_doc->m_nullNode;
}
c_XMLNode* c_XMLNode::p_GetChild2(String t_name,bool t_text){
	if(m_firstChild==0){
		return m_doc->m_nullNode;
	}
	t_name=t_name.ToLower();
	c_XMLNode* t_child=m_firstChild;
	while((t_child)!=0){
		if(t_child->m_nameLowerCase==t_name && (t_text || t_child->m_text==false)){
			return t_child;
		}
		t_child=t_child->m_nextSibling;
	}
	return m_doc->m_nullNode;
}
c_XMLNode* c_XMLNode::p_GetChild3(String t_name,String t_attributes,bool t_text){
	if(m_firstChild==0){
		return m_doc->m_nullNode;
	}
	t_name=t_name.ToLower();
	c_XMLAttributeQuery* t_query=(new c_XMLAttributeQuery)->m_new(t_attributes);
	c_XMLNode* t_child=m_firstChild;
	while((t_child)!=0){
		if(t_child->m_nameLowerCase==t_name && (t_text || t_child->m_text==false) && t_query->p_Test(t_child)){
			return t_child;
		}
		t_child=t_child->m_nextSibling;
	}
	return m_doc->m_nullNode;
}
c_List* c_XMLNode::p_GetChildren(c_List* t_result,bool t_text){
	if(t_result==0){
		t_result=(new c_List)->m_new();
	}
	if(m_firstChild==0){
		return t_result;
	}
	if(m_firstChild!=0){
		c_XMLNode* t_child=m_firstChild;
		while((t_child)!=0){
			if(t_text || t_child->m_text==false){
				t_result->p_AddLast(t_child);
			}
			t_child=t_child->m_nextSibling;
		}
	}
	return t_result;
}
c_List* c_XMLNode::p_GetChildren2(String t_name,c_List* t_result,bool t_text){
	if(t_result==0){
		t_result=(new c_List)->m_new();
	}
	if(m_firstChild==0 || t_name.Length()==0){
		return t_result;
	}
	t_name=t_name.ToLower();
	if(m_firstChild!=0){
		c_XMLNode* t_child=m_firstChild;
		while((t_child)!=0){
			if(t_child->m_nameLowerCase==t_name && (t_text || t_child->m_text==false)){
				t_result->p_AddLast(t_child);
			}
			t_child=t_child->m_nextSibling;
		}
	}
	return t_result;
}
c_List* c_XMLNode::p_GetChildren3(String t_name,String t_attributes,c_List* t_result,bool t_text){
	if(t_result==0){
		t_result=(new c_List)->m_new();
	}
	if(m_firstChild==0 || t_name.Length()==0 && t_attributes.Length()==0){
		return t_result;
	}
	t_name=t_name.ToLower();
	c_XMLAttributeQuery* t_query=(new c_XMLAttributeQuery)->m_new(t_attributes);
	if(m_firstChild!=0){
		c_XMLNode* t_child=m_firstChild;
		while((t_child)!=0){
			if((t_name.Length()==0 || t_child->m_nameLowerCase==t_name) && (t_text || t_child->m_text==false) && t_query->p_Test(t_child)){
				t_result->p_AddLast(t_child);
			}
			t_child=t_child->m_nextSibling;
		}
	}
	return t_result;
}
c_List* c_XMLNode::p_GetChildrenWithAttributes(String t_attributes,c_List* t_result,bool t_text){
	return p_GetChildren3(String(),t_attributes,t_result,t_text);
}
bool c_XMLNode::p_HasAttribute(String t_id){
	t_id=t_id.ToLower();
	return m_attributes->p_Get(t_id)!=0;
}
bool c_XMLNode::p_HasChildren(bool t_text){
	if(m_firstChild==0){
		return false;
	}
	if(t_text){
		return true;
	}
	c_XMLNode* t_child=m_firstChild;
	while((t_child)!=0){
		if(t_child->m_text==false){
			return true;
		}
		t_child=t_child->m_nextSibling;
	}
	return false;
}
String c_XMLNode::p_Export(int t_options){
	c_XMLStringBuffer* t_buffer=(new c_XMLStringBuffer)->m_new(1024);
	p_Export2(t_options,t_buffer,0);
	return t_buffer->p_value();
}
void c_XMLNode::p_Export2(int t_options,c_XMLStringBuffer* t_buffer,int t_depth){
	if(t_buffer==0){
		t_buffer=(new c_XMLStringBuffer)->m_new(1024);
	}
	int t_index=0;
	bool t_hasNonTextNodes=false;
	if(m_text){
		for(t_index=0;t_index<m_fullValue.Length();t_index=t_index+1){
			t_buffer->p_Add((int)m_fullValue[t_index]);
		}
	}else{
		if((t_options&1)==0){
			for(t_index=0;t_index<t_depth;t_index=t_index+1){
				t_buffer->p_Add(9);
			}
		}
		t_buffer->p_Add(60);
		t_buffer->p_Add2(m_nameNormalCase);
		c_XMLAttribute* t_attribute=0;
		c_KeyEnumerator2* t_=m_attributes->p_Keys()->p_ObjectEnumerator();
		while(t_->p_HasNext()){
			String t_id=t_->p_NextObject();
			t_attribute=m_attributes->p_Get(t_id);
			t_buffer->p_Add(32);
			t_buffer->p_Add2(t_attribute->m_idNormalCase);
			t_buffer->p_Add(61);
			t_buffer->p_Add(34);
			t_buffer->p_Add2(t_attribute->m_value);
			t_buffer->p_Add(34);
		}
		t_hasNonTextNodes=p_HasChildren(false);
		if(!t_hasNonTextNodes && m_fullValue.Length()==0 && ((t_options&4)!=0)){
			t_buffer->p_Add(32);
			t_buffer->p_Add(47);
			t_buffer->p_Add(62);
			if((t_options&2)==0){
				t_buffer->p_Add(10);
			}
		}else{
			t_buffer->p_Add(62);
			if((t_options&2)==0 && t_hasNonTextNodes){
				t_buffer->p_Add(10);
			}
			c_Enumerator3* t_2=m_children->p_ObjectEnumerator();
			while(t_2->p_HasNext()){
				c_XMLNode* t_child=t_2->p_NextObject();
				t_child->p_Export2(t_options,t_buffer,t_depth+1);
			}
			if((t_options&1)==0 && t_hasNonTextNodes){
				for(t_index=0;t_index<t_depth;t_index=t_index+1){
					t_buffer->p_Add(9);
				}
			}
			t_buffer->p_Add(60);
			t_buffer->p_Add(47);
			t_buffer->p_Add2(m_nameNormalCase);
			t_buffer->p_Add(62);
			if((t_options&2)==0){
				t_buffer->p_Add(10);
			}
		}
	}
}
void c_XMLNode::p_RemoveChild(c_XMLNode* t_child){
	if(m_valid==false || m_firstChild==0 || t_child==0 || t_child->m_parent!=this){
		return;
	}
	t_child->p_Free();
}
void c_XMLNode::mark(){
	Object::mark();
	gc_mark_q(m_doc);
	gc_mark_q(m_parent);
	gc_mark_q(m_lastChild);
	gc_mark_q(m_nextSibling);
	gc_mark_q(m_previousSibling);
	gc_mark_q(m_firstChild);
	gc_mark_q(m_children);
	gc_mark_q(m_parentListNode);
	gc_mark_q(m_pathList);
	gc_mark_q(m_pathListNode);
	gc_mark_q(m_attributes);
}
c_XMLDoc::c_XMLDoc(){
	m_nullNode=0;
	m_version=String();
	m_encoding=String();
	m_paths=(new c_StringMap)->m_new();
}
c_XMLDoc* c_XMLDoc::m_new(String t_name,String t_version,String t_encoding){
	c_XMLNode::m_new2();
	m_valid=true;
	gc_assign(m_doc,this);
	gc_assign(m_nullNode,(new c_XMLNode)->m_new(String(),false));
	gc_assign(m_nullNode->m_doc,this);
	this->m_nameNormalCase=t_name;
	this->m_nameLowerCase=t_name.ToLower();
	this->m_version=t_version;
	this->m_encoding=t_encoding;
	m_path=t_name;
	gc_assign(m_pathList,(new c_List)->m_new());
	gc_assign(m_pathListNode,m_pathList->p_AddLast(this));
	m_paths->p_Insert2(m_path,m_pathList);
	return this;
}
c_XMLDoc* c_XMLDoc::m_new2(){
	c_XMLNode::m_new2();
	return this;
}
String c_XMLDoc::p_Export(int t_options){
	c_XMLStringBuffer* t_buffer=(new c_XMLStringBuffer)->m_new(1024);
	t_buffer->p_Add2(String(L"<?xml",5));
	if((m_version.Length())!=0){
		t_buffer->p_Add2(String(L" version=",9));
		t_buffer->p_Add(34);
		t_buffer->p_Add2(m_version);
		t_buffer->p_Add(34);
	}
	if((m_encoding.Length())!=0){
		t_buffer->p_Add2(String(L" encoding=",10));
		t_buffer->p_Add(34);
		t_buffer->p_Add2(m_encoding);
		t_buffer->p_Add(34);
	}
	t_buffer->p_Add2(String(L"?>",2));
	if((t_options&2)==0){
		t_buffer->p_Add(10);
	}
	c_XMLNode::p_Export2(t_options,t_buffer,0);
	return t_buffer->p_value();
}
void c_XMLDoc::mark(){
	c_XMLNode::mark();
	gc_mark_q(m_nullNode);
	gc_mark_q(m_paths);
}
c_XMLStringBuffer::c_XMLStringBuffer(){
	m_chunk=128;
	m_count=0;
	m_data=Array<int >();
	m_dirty=0;
	m_cache=String();
}
c_XMLStringBuffer* c_XMLStringBuffer::m_new(int t_chunk){
	this->m_chunk=t_chunk;
	return this;
}
int c_XMLStringBuffer::p_Length(){
	return m_count;
}
int c_XMLStringBuffer::p_Last(int t_defaultValue){
	if(m_count==0){
		return t_defaultValue;
	}
	return m_data[m_count-1];
}
void c_XMLStringBuffer::p_Add(int t_asc){
	if(m_count==m_data.Length()){
		gc_assign(m_data,m_data.Resize(m_data.Length()+m_chunk));
	}
	m_data[m_count]=t_asc;
	m_count+=1;
	m_dirty=1;
}
void c_XMLStringBuffer::p_Add2(String t_text){
	if(t_text.Length()==0){
		return;
	}
	if(m_count+t_text.Length()>=m_data.Length()){
		gc_assign(m_data,m_data.Resize(int(Float(m_data.Length())+Float(m_chunk)*(Float)ceil(Float(t_text.Length())/Float(m_chunk)))));
	}
	for(int t_textIndex=0;t_textIndex<t_text.Length();t_textIndex=t_textIndex+1){
		m_data[m_count]=(int)t_text[t_textIndex];
		m_count+=1;
	}
	m_dirty=1;
}
void c_XMLStringBuffer::p_Add3(String t_text,int t_offset,int t_suggestedLength){
	int t_realLength=t_text.Length()-t_offset;
	if(t_suggestedLength>0 && t_suggestedLength<t_realLength){
		t_realLength=t_suggestedLength;
	}
	if(t_realLength==0){
		return;
	}
	if(m_count+t_realLength>=m_data.Length()){
		gc_assign(m_data,m_data.Resize(int(Float(m_data.Length())+Float(m_chunk)*(Float)ceil(Float(t_realLength)/Float(m_chunk)))));
	}
	for(int t_textIndex=t_offset;t_textIndex<t_offset+t_realLength;t_textIndex=t_textIndex+1){
		m_data[m_count]=(int)t_text[t_textIndex];
		m_count+=1;
	}
	m_dirty=1;
}
void c_XMLStringBuffer::p_Clear(){
	m_count=0;
	m_cache=String();
	m_dirty=0;
}
bool c_XMLStringBuffer::p_Trim(){
	if(m_count==0){
		return false;
	}
	if(m_count==1 && (m_data[0]==32 || m_data[0]==9 || m_data[0]==10) || m_count==2 && (m_data[0]==32 || m_data[0]==9 || m_data[0]==10) && (m_data[1]==32 || m_data[1]==9 || m_data[1]==10)){
		p_Clear();
		return true;
	}
	int t_startIndex=0;
	for(t_startIndex=0;t_startIndex<m_count;t_startIndex=t_startIndex+1){
		if(m_data[t_startIndex]!=32 && m_data[t_startIndex]!=9 && m_data[t_startIndex]!=10){
			break;
		}
	}
	if(t_startIndex==m_count){
		p_Clear();
		return true;
	}
	int t_endIndex=0;
	for(t_endIndex=m_count-1;t_endIndex>=0;t_endIndex=t_endIndex+-1){
		if(m_data[t_endIndex]!=32 && m_data[t_endIndex]!=9 && m_data[t_endIndex]!=10){
			break;
		}
	}
	if(t_startIndex==0 && t_endIndex==m_count-1){
		return false;
	}
	m_count=t_endIndex-t_startIndex+1;
	if(t_startIndex>0){
		for(int t_trimIndex=0;t_trimIndex<m_count;t_trimIndex=t_trimIndex+1){
			m_data[t_trimIndex]=m_data[t_trimIndex+t_startIndex];
		}
	}
	return true;
}
String c_XMLStringBuffer::p_value(){
	if((m_dirty)!=0){
		m_dirty=0;
		if(m_count==0){
			m_cache=String();
		}else{
			m_cache=String::FromChars(m_data.Slice(0,m_count));
		}
	}
	return m_cache;
}
void c_XMLStringBuffer::mark(){
	Object::mark();
	gc_mark_q(m_data);
}
c_List::c_List(){
	m__head=((new c_HeadNode)->m_new());
}
c_List* c_List::m_new(){
	return this;
}
c_Node2* c_List::p_AddLast(c_XMLNode* t_data){
	return (new c_Node2)->m_new(m__head,m__head->m__pred,t_data);
}
c_List* c_List::m_new2(Array<c_XMLNode* > t_data){
	Array<c_XMLNode* > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		c_XMLNode* t_t=t_[t_2];
		t_2=t_2+1;
		p_AddLast(t_t);
	}
	return this;
}
c_XMLNode* c_List::p_RemoveLast(){
	c_XMLNode* t_data=m__head->m__pred->m__data;
	m__head->m__pred->p_Remove();
	return t_data;
}
bool c_List::p_Equals(c_XMLNode* t_lhs,c_XMLNode* t_rhs){
	return t_lhs==t_rhs;
}
c_Node2* c_List::p_FindLast(c_XMLNode* t_value,c_Node2* t_start){
	while(t_start!=m__head){
		if(p_Equals(t_value,t_start->m__data)){
			return t_start;
		}
		t_start=t_start->m__pred;
	}
	return 0;
}
c_Node2* c_List::p_FindLast2(c_XMLNode* t_value){
	return p_FindLast(t_value,m__head->m__pred);
}
void c_List::p_RemoveLast2(c_XMLNode* t_value){
	c_Node2* t_node=p_FindLast2(t_value);
	if((t_node)!=0){
		t_node->p_Remove();
	}
}
bool c_List::p_IsEmpty(){
	return m__head->m__succ==m__head;
}
c_XMLNode* c_List::p_Last2(){
	return m__head->m__pred->m__data;
}
c_XMLNode* c_List::p_First(){
	return m__head->m__succ->m__data;
}
c_Enumerator3* c_List::p_ObjectEnumerator(){
	return (new c_Enumerator3)->m_new(this);
}
int c_List::p_Count(){
	int t_n=0;
	c_Node2* t_node=m__head->m__succ;
	while(t_node!=m__head){
		t_node=t_node->m__succ;
		t_n+=1;
	}
	return t_n;
}
int c_List::p_Clear(){
	gc_assign(m__head->m__succ,m__head);
	gc_assign(m__head->m__pred,m__head);
	return 0;
}
void c_List::mark(){
	Object::mark();
	gc_mark_q(m__head);
}
c_Node2::c_Node2(){
	m__succ=0;
	m__pred=0;
	m__data=0;
}
c_Node2* c_Node2::m_new(c_Node2* t_succ,c_Node2* t_pred,c_XMLNode* t_data){
	gc_assign(m__succ,t_succ);
	gc_assign(m__pred,t_pred);
	gc_assign(m__succ->m__pred,this);
	gc_assign(m__pred->m__succ,this);
	gc_assign(m__data,t_data);
	return this;
}
c_Node2* c_Node2::m_new2(){
	return this;
}
int c_Node2::p_Remove(){
	gc_assign(m__succ->m__pred,m__pred);
	gc_assign(m__pred->m__succ,m__succ);
	return 0;
}
void c_Node2::mark(){
	Object::mark();
	gc_mark_q(m__succ);
	gc_mark_q(m__pred);
	gc_mark_q(m__data);
}
c_HeadNode::c_HeadNode(){
}
c_HeadNode* c_HeadNode::m_new(){
	c_Node2::m_new2();
	gc_assign(m__succ,(this));
	gc_assign(m__pred,(this));
	return this;
}
void c_HeadNode::mark(){
	c_Node2::mark();
}
bool bb_xml_XMLHasStringAtOffset(String t_needle,String t_haystack,int t_offset){
	if(t_offset+t_needle.Length()>t_haystack.Length()){
		return false;
	}
	for(int t_index=0;t_index<t_needle.Length();t_index=t_index+1){
		if((int)t_needle[t_index]!=(int)t_haystack[t_offset+t_index]){
			return false;
		}
	}
	return true;
}
int bb_xml_XMLFindNextAsc(String t_data,int t_asc,int t_offset){
	int t_length=t_data.Length();
	if(t_offset>=t_length){
		return -1;
	}
	if(t_offset<0){
		t_offset=0;
	}
	for(t_offset=t_offset;t_offset<t_length;t_offset=t_offset+1){
		if((int)t_data[t_offset]==t_asc){
			return t_offset;
		}
	}
	return -1;
}
int bb_xml_XMLFindStringNotInQuotes(String t_needle,String t_haystack,int t_offset){
	int t_needlePos=0;
	do{
		t_needlePos=t_haystack.Find(t_needle,t_offset);
		if(t_needlePos==-1){
			return -1;
		}
		t_offset=bb_xml_XMLFindNextAsc(t_haystack,34,t_offset);
		if(t_needlePos<t_offset || t_offset==-1){
			return t_needlePos;
		}
		t_offset=bb_xml_XMLFindNextAsc(t_haystack,34,t_offset+1);
		if(t_offset==-1){
			return -1;
		}
		t_offset+=1;
	}while(!(false));
}
c_Map2::c_Map2(){
	m_root=0;
}
c_Map2* c_Map2::m_new(){
	return this;
}
int c_Map2::p_RotateLeft2(c_Node3* t_node){
	c_Node3* t_child=t_node->m_right;
	gc_assign(t_node->m_right,t_child->m_left);
	if((t_child->m_left)!=0){
		gc_assign(t_child->m_left->m_parent,t_node);
	}
	gc_assign(t_child->m_parent,t_node->m_parent);
	if((t_node->m_parent)!=0){
		if(t_node==t_node->m_parent->m_left){
			gc_assign(t_node->m_parent->m_left,t_child);
		}else{
			gc_assign(t_node->m_parent->m_right,t_child);
		}
	}else{
		gc_assign(m_root,t_child);
	}
	gc_assign(t_child->m_left,t_node);
	gc_assign(t_node->m_parent,t_child);
	return 0;
}
int c_Map2::p_RotateRight2(c_Node3* t_node){
	c_Node3* t_child=t_node->m_left;
	gc_assign(t_node->m_left,t_child->m_right);
	if((t_child->m_right)!=0){
		gc_assign(t_child->m_right->m_parent,t_node);
	}
	gc_assign(t_child->m_parent,t_node->m_parent);
	if((t_node->m_parent)!=0){
		if(t_node==t_node->m_parent->m_right){
			gc_assign(t_node->m_parent->m_right,t_child);
		}else{
			gc_assign(t_node->m_parent->m_left,t_child);
		}
	}else{
		gc_assign(m_root,t_child);
	}
	gc_assign(t_child->m_right,t_node);
	gc_assign(t_node->m_parent,t_child);
	return 0;
}
int c_Map2::p_InsertFixup2(c_Node3* t_node){
	while(((t_node->m_parent)!=0) && t_node->m_parent->m_color==-1 && ((t_node->m_parent->m_parent)!=0)){
		if(t_node->m_parent==t_node->m_parent->m_parent->m_left){
			c_Node3* t_uncle=t_node->m_parent->m_parent->m_right;
			if(((t_uncle)!=0) && t_uncle->m_color==-1){
				t_node->m_parent->m_color=1;
				t_uncle->m_color=1;
				t_uncle->m_parent->m_color=-1;
				t_node=t_uncle->m_parent;
			}else{
				if(t_node==t_node->m_parent->m_right){
					t_node=t_node->m_parent;
					p_RotateLeft2(t_node);
				}
				t_node->m_parent->m_color=1;
				t_node->m_parent->m_parent->m_color=-1;
				p_RotateRight2(t_node->m_parent->m_parent);
			}
		}else{
			c_Node3* t_uncle2=t_node->m_parent->m_parent->m_left;
			if(((t_uncle2)!=0) && t_uncle2->m_color==-1){
				t_node->m_parent->m_color=1;
				t_uncle2->m_color=1;
				t_uncle2->m_parent->m_color=-1;
				t_node=t_uncle2->m_parent;
			}else{
				if(t_node==t_node->m_parent->m_left){
					t_node=t_node->m_parent;
					p_RotateRight2(t_node);
				}
				t_node->m_parent->m_color=1;
				t_node->m_parent->m_parent->m_color=-1;
				p_RotateLeft2(t_node->m_parent->m_parent);
			}
		}
	}
	m_root->m_color=1;
	return 0;
}
bool c_Map2::p_Set3(String t_key,c_List* t_value){
	c_Node3* t_node=m_root;
	c_Node3* t_parent=0;
	int t_cmp=0;
	while((t_node)!=0){
		t_parent=t_node;
		t_cmp=p_Compare2(t_key,t_node->m_key);
		if(t_cmp>0){
			t_node=t_node->m_right;
		}else{
			if(t_cmp<0){
				t_node=t_node->m_left;
			}else{
				gc_assign(t_node->m_value,t_value);
				return false;
			}
		}
	}
	t_node=(new c_Node3)->m_new(t_key,t_value,-1,t_parent);
	if((t_parent)!=0){
		if(t_cmp>0){
			gc_assign(t_parent->m_right,t_node);
		}else{
			gc_assign(t_parent->m_left,t_node);
		}
		p_InsertFixup2(t_node);
	}else{
		gc_assign(m_root,t_node);
	}
	return true;
}
bool c_Map2::p_Insert2(String t_key,c_List* t_value){
	return p_Set3(t_key,t_value);
}
c_Node3* c_Map2::p_FindNode2(String t_key){
	c_Node3* t_node=m_root;
	while((t_node)!=0){
		int t_cmp=p_Compare2(t_key,t_node->m_key);
		if(t_cmp>0){
			t_node=t_node->m_right;
		}else{
			if(t_cmp<0){
				t_node=t_node->m_left;
			}else{
				return t_node;
			}
		}
	}
	return t_node;
}
c_List* c_Map2::p_Get(String t_key){
	c_Node3* t_node=p_FindNode2(t_key);
	if((t_node)!=0){
		return t_node->m_value;
	}
	return 0;
}
void c_Map2::mark(){
	Object::mark();
	gc_mark_q(m_root);
}
c_StringMap::c_StringMap(){
}
c_StringMap* c_StringMap::m_new(){
	c_Map2::m_new();
	return this;
}
int c_StringMap::p_Compare2(String t_lhs,String t_rhs){
	return t_lhs.Compare(t_rhs);
}
void c_StringMap::mark(){
	c_Map2::mark();
}
c_Node3::c_Node3(){
	m_key=String();
	m_right=0;
	m_left=0;
	m_value=0;
	m_color=0;
	m_parent=0;
}
c_Node3* c_Node3::m_new(String t_key,c_List* t_value,int t_color,c_Node3* t_parent){
	this->m_key=t_key;
	gc_assign(this->m_value,t_value);
	this->m_color=t_color;
	gc_assign(this->m_parent,t_parent);
	return this;
}
c_Node3* c_Node3::m_new2(){
	return this;
}
void c_Node3::mark(){
	Object::mark();
	gc_mark_q(m_right);
	gc_mark_q(m_left);
	gc_mark_q(m_value);
	gc_mark_q(m_parent);
}
c_XMLAttributeQuery::c_XMLAttributeQuery(){
	m_count=0;
	m_items=Array<c_XMLAttributeQueryItem* >();
	m_chunk=32;
}
c_XMLAttributeQuery* c_XMLAttributeQuery::m_new(String t_query){
	int t_queryIndex=0;
	int t_queryAsc=0;
	c_XMLStringBuffer* t_buffer=(new c_XMLStringBuffer)->m_new(256);
	bool t_isEscaped=false;
	bool t_processBuffer=false;
	bool t_processItem=false;
	bool t_hasId=false;
	bool t_hasValue=false;
	bool t_hasEquals=false;
	bool t_hasSepcial=false;
	String t_itemId=String();
	String t_itemValue=String();
	for(t_queryIndex=0;t_queryIndex<t_query.Length();t_queryIndex=t_queryIndex+1){
		t_queryAsc=(int)t_query[t_queryIndex];
		if(t_isEscaped){
			t_isEscaped=false;
			t_buffer->p_Add(t_queryAsc);
		}else{
			int t_1=t_queryAsc;
			if(t_1==38){
				t_processBuffer=true;
				t_processItem=true;
			}else{
				if(t_1==61){
					t_processBuffer=true;
					t_hasEquals=true;
				}else{
					if(t_1==64){
						if(t_hasId==false){
							if(t_buffer->p_Length()==0){
								t_hasSepcial=true;
							}
						}else{
							t_buffer->p_Add(t_queryAsc);
						}
					}else{
						if(t_1==92){
							t_isEscaped=true;
						}else{
							if(t_hasId || (t_queryAsc==45 || t_queryAsc==95 || t_queryAsc>=48 && t_queryAsc<=57 || t_queryAsc>=65 && t_queryAsc<=90 || t_queryAsc>=97 && t_queryAsc<=122)){
								t_buffer->p_Add(t_queryAsc);
							}
						}
					}
				}
			}
		}
		if(t_queryIndex==t_query.Length()-1){
			t_processBuffer=true;
			t_processItem=true;
			if(t_isEscaped && t_hasId){
				t_buffer->p_Add(92);
			}
			if(t_hasEquals && t_buffer->p_Length()==0){
				t_hasValue=true;
			}
		}
		if(t_processBuffer){
			t_processBuffer=false;
			if(t_hasId==false){
				t_itemId=t_buffer->p_value();
				t_buffer->p_Clear();
				t_hasId=t_itemId.Length()>0;
			}else{
				t_itemValue=t_buffer->p_value();
				t_buffer->p_Clear();
				t_hasValue=true;
			}
		}
		if(t_processItem){
			t_processItem=false;
			if(t_hasId){
				if(m_count==m_items.Length()){
					gc_assign(m_items,m_items.Resize(m_items.Length()+m_chunk));
				}
				gc_assign(m_items[m_count],(new c_XMLAttributeQueryItem)->m_new(t_itemId,t_itemValue,t_hasValue,t_hasSepcial));
				m_count+=1;
				t_itemId=String();
				t_itemValue=String();
				t_hasId=false;
				t_hasValue=false;
				t_hasSepcial=false;
			}
		}
	}
	return this;
}
c_XMLAttributeQuery* c_XMLAttributeQuery::m_new2(){
	return this;
}
int c_XMLAttributeQuery::p_Length(){
	return m_count;
}
bool c_XMLAttributeQuery::p_Test(c_XMLNode* t_node){
	c_XMLAttribute* t_attribute=0;
	for(int t_index=0;t_index<m_count;t_index=t_index+1){
		if(m_items[t_index]->m_special==false){
			t_attribute=t_node->p_GetXMLAttribute(m_items[t_index]->m_id);
			if(t_attribute==0 || m_items[t_index]->m_required && t_attribute->m_value!=m_items[t_index]->m_value){
				return false;
			}
		}else{
			String t_2=m_items[t_index]->m_id;
			if(t_2==String(L"value",5)){
				if(m_items[t_index]->m_required && t_node->m_fullValue!=m_items[t_index]->m_value){
					return false;
				}
			}
		}
	}
	return true;
}
void c_XMLAttributeQuery::mark(){
	Object::mark();
	gc_mark_q(m_items);
}
c_XMLAttributeQueryItem::c_XMLAttributeQueryItem(){
	m_id=String();
	m_value=String();
	m_required=false;
	m_special=false;
}
c_XMLAttributeQueryItem* c_XMLAttributeQueryItem::m_new(String t_id,String t_value,bool t_required,bool t_special){
	this->m_id=t_id;
	this->m_value=t_value;
	this->m_required=t_required;
	this->m_special=t_special;
	return this;
}
c_XMLAttributeQueryItem* c_XMLAttributeQueryItem::m_new2(){
	return this;
}
void c_XMLAttributeQueryItem::mark(){
	Object::mark();
}
c_XMLAttribute::c_XMLAttribute(){
	m_idLowercase=String();
	m_idNormalCase=String();
	m_value=String();
}
c_XMLAttribute* c_XMLAttribute::m_new(String t_id,String t_value){
	this->m_idLowercase=t_id.ToLower();
	this->m_idNormalCase=t_id;
	this->m_value=t_value;
	return this;
}
c_XMLAttribute* c_XMLAttribute::m_new2(){
	return this;
}
void c_XMLAttribute::mark(){
	Object::mark();
}
c_Map3::c_Map3(){
	m_root=0;
}
c_Map3* c_Map3::m_new(){
	return this;
}
c_Node4* c_Map3::p_FindNode2(String t_key){
	c_Node4* t_node=m_root;
	while((t_node)!=0){
		int t_cmp=p_Compare2(t_key,t_node->m_key);
		if(t_cmp>0){
			t_node=t_node->m_right;
		}else{
			if(t_cmp<0){
				t_node=t_node->m_left;
			}else{
				return t_node;
			}
		}
	}
	return t_node;
}
c_XMLAttribute* c_Map3::p_Get(String t_key){
	c_Node4* t_node=p_FindNode2(t_key);
	if((t_node)!=0){
		return t_node->m_value;
	}
	return 0;
}
int c_Map3::p_RotateLeft3(c_Node4* t_node){
	c_Node4* t_child=t_node->m_right;
	gc_assign(t_node->m_right,t_child->m_left);
	if((t_child->m_left)!=0){
		gc_assign(t_child->m_left->m_parent,t_node);
	}
	gc_assign(t_child->m_parent,t_node->m_parent);
	if((t_node->m_parent)!=0){
		if(t_node==t_node->m_parent->m_left){
			gc_assign(t_node->m_parent->m_left,t_child);
		}else{
			gc_assign(t_node->m_parent->m_right,t_child);
		}
	}else{
		gc_assign(m_root,t_child);
	}
	gc_assign(t_child->m_left,t_node);
	gc_assign(t_node->m_parent,t_child);
	return 0;
}
int c_Map3::p_RotateRight3(c_Node4* t_node){
	c_Node4* t_child=t_node->m_left;
	gc_assign(t_node->m_left,t_child->m_right);
	if((t_child->m_right)!=0){
		gc_assign(t_child->m_right->m_parent,t_node);
	}
	gc_assign(t_child->m_parent,t_node->m_parent);
	if((t_node->m_parent)!=0){
		if(t_node==t_node->m_parent->m_right){
			gc_assign(t_node->m_parent->m_right,t_child);
		}else{
			gc_assign(t_node->m_parent->m_left,t_child);
		}
	}else{
		gc_assign(m_root,t_child);
	}
	gc_assign(t_child->m_right,t_node);
	gc_assign(t_node->m_parent,t_child);
	return 0;
}
int c_Map3::p_InsertFixup3(c_Node4* t_node){
	while(((t_node->m_parent)!=0) && t_node->m_parent->m_color==-1 && ((t_node->m_parent->m_parent)!=0)){
		if(t_node->m_parent==t_node->m_parent->m_parent->m_left){
			c_Node4* t_uncle=t_node->m_parent->m_parent->m_right;
			if(((t_uncle)!=0) && t_uncle->m_color==-1){
				t_node->m_parent->m_color=1;
				t_uncle->m_color=1;
				t_uncle->m_parent->m_color=-1;
				t_node=t_uncle->m_parent;
			}else{
				if(t_node==t_node->m_parent->m_right){
					t_node=t_node->m_parent;
					p_RotateLeft3(t_node);
				}
				t_node->m_parent->m_color=1;
				t_node->m_parent->m_parent->m_color=-1;
				p_RotateRight3(t_node->m_parent->m_parent);
			}
		}else{
			c_Node4* t_uncle2=t_node->m_parent->m_parent->m_left;
			if(((t_uncle2)!=0) && t_uncle2->m_color==-1){
				t_node->m_parent->m_color=1;
				t_uncle2->m_color=1;
				t_uncle2->m_parent->m_color=-1;
				t_node=t_uncle2->m_parent;
			}else{
				if(t_node==t_node->m_parent->m_left){
					t_node=t_node->m_parent;
					p_RotateRight3(t_node);
				}
				t_node->m_parent->m_color=1;
				t_node->m_parent->m_parent->m_color=-1;
				p_RotateLeft3(t_node->m_parent->m_parent);
			}
		}
	}
	m_root->m_color=1;
	return 0;
}
bool c_Map3::p_Set4(String t_key,c_XMLAttribute* t_value){
	c_Node4* t_node=m_root;
	c_Node4* t_parent=0;
	int t_cmp=0;
	while((t_node)!=0){
		t_parent=t_node;
		t_cmp=p_Compare2(t_key,t_node->m_key);
		if(t_cmp>0){
			t_node=t_node->m_right;
		}else{
			if(t_cmp<0){
				t_node=t_node->m_left;
			}else{
				gc_assign(t_node->m_value,t_value);
				return false;
			}
		}
	}
	t_node=(new c_Node4)->m_new(t_key,t_value,-1,t_parent);
	if((t_parent)!=0){
		if(t_cmp>0){
			gc_assign(t_parent->m_right,t_node);
		}else{
			gc_assign(t_parent->m_left,t_node);
		}
		p_InsertFixup3(t_node);
	}else{
		gc_assign(m_root,t_node);
	}
	return true;
}
bool c_Map3::p_Insert3(String t_key,c_XMLAttribute* t_value){
	return p_Set4(t_key,t_value);
}
bool c_Map3::p_IsEmpty(){
	return m_root==0;
}
c_MapValues* c_Map3::p_Values(){
	return (new c_MapValues)->m_new(this);
}
c_Node4* c_Map3::p_FirstNode(){
	if(!((m_root)!=0)){
		return 0;
	}
	c_Node4* t_node=m_root;
	while((t_node->m_left)!=0){
		t_node=t_node->m_left;
	}
	return t_node;
}
c_MapKeys2* c_Map3::p_Keys(){
	return (new c_MapKeys2)->m_new(this);
}
void c_Map3::mark(){
	Object::mark();
	gc_mark_q(m_root);
}
c_StringMap2::c_StringMap2(){
}
c_StringMap2* c_StringMap2::m_new(){
	c_Map3::m_new();
	return this;
}
int c_StringMap2::p_Compare2(String t_lhs,String t_rhs){
	return t_lhs.Compare(t_rhs);
}
void c_StringMap2::mark(){
	c_Map3::mark();
}
c_Node4::c_Node4(){
	m_key=String();
	m_right=0;
	m_left=0;
	m_value=0;
	m_color=0;
	m_parent=0;
}
c_Node4* c_Node4::m_new(String t_key,c_XMLAttribute* t_value,int t_color,c_Node4* t_parent){
	this->m_key=t_key;
	gc_assign(this->m_value,t_value);
	this->m_color=t_color;
	gc_assign(this->m_parent,t_parent);
	return this;
}
c_Node4* c_Node4::m_new2(){
	return this;
}
c_Node4* c_Node4::p_NextNode(){
	c_Node4* t_node=0;
	if((m_right)!=0){
		t_node=m_right;
		while((t_node->m_left)!=0){
			t_node=t_node->m_left;
		}
		return t_node;
	}
	t_node=this;
	c_Node4* t_parent=this->m_parent;
	while(((t_parent)!=0) && t_node==t_parent->m_right){
		t_node=t_parent;
		t_parent=t_parent->m_parent;
	}
	return t_parent;
}
void c_Node4::mark(){
	Object::mark();
	gc_mark_q(m_right);
	gc_mark_q(m_left);
	gc_mark_q(m_value);
	gc_mark_q(m_parent);
}
c_MapValues::c_MapValues(){
	m_map=0;
}
c_MapValues* c_MapValues::m_new(c_Map3* t_map){
	gc_assign(this->m_map,t_map);
	return this;
}
c_MapValues* c_MapValues::m_new2(){
	return this;
}
c_ValueEnumerator* c_MapValues::p_ObjectEnumerator(){
	return (new c_ValueEnumerator)->m_new(m_map->p_FirstNode());
}
void c_MapValues::mark(){
	Object::mark();
	gc_mark_q(m_map);
}
c_ValueEnumerator::c_ValueEnumerator(){
	m_node=0;
}
c_ValueEnumerator* c_ValueEnumerator::m_new(c_Node4* t_node){
	gc_assign(this->m_node,t_node);
	return this;
}
c_ValueEnumerator* c_ValueEnumerator::m_new2(){
	return this;
}
bool c_ValueEnumerator::p_HasNext(){
	return m_node!=0;
}
c_XMLAttribute* c_ValueEnumerator::p_NextObject(){
	c_Node4* t_t=m_node;
	gc_assign(m_node,m_node->p_NextNode());
	return t_t->m_value;
}
void c_ValueEnumerator::mark(){
	Object::mark();
	gc_mark_q(m_node);
}
c_XMLDoc* bb_xml_ParseXML(String t_raw,c_XMLError* t_error,int t_options){
	int t_rawLine=1;
	int t_rawColumn=1;
	int t_rawIndex=0;
	int t_rawAsc=0;
	int t_rawPos=0;
	int t_rawChunkStart=0;
	int t_rawChunkLength=0;
	int t_rawChunkEnd=0;
	String t_rawChunk=String();
	int t_rawChunkIndex=0;
	int t_rawChunkAsc=0;
	bool t_rawChunkExit=false;
	c_XMLDoc* t_doc=0;
	c_XMLNode* t_parent=0;
	c_XMLNode* t_current=0;
	c_XMLNode* t_textNode=0;
	c_XMLStringBuffer* t_whitespaceBuffer=(new c_XMLStringBuffer)->m_new(1024);
	c_XMLStringBuffer* t_attributeBuffer=(new c_XMLStringBuffer)->m_new(1024);
	bool t_processAttributeBuffer=false;
	bool t_processTag=false;
	String t_tagName=String();
	String t_formatVersion=String();
	String t_formatEncoding=String();
	String t_attributeId=String();
	String t_attributeValue=String();
	bool t_inTag=false;
	bool t_inQuote=false;
	bool t_inFormat=false;
	bool t_isCloseSelf=false;
	bool t_isSingleAttribute=false;
	bool t_hasFormat=false;
	bool t_hasTagName=false;
	bool t_hasTagClose=false;
	bool t_hasAttributeId=false;
	bool t_hasAttributeValue=false;
	bool t_hasEquals=false;
	bool t_waitTagClose=false;
	c_List* t_stack=(new c_List)->m_new();
	int t_quoteAsc=0;
	if((t_error)!=0){
		t_error->p_Reset();
	}
	if(t_raw.Length()==0){
		if((t_error)!=0){
			t_error->p_Set2(String(L"no xml data",11),-1,-1,-1);
		}
		return 0;
	}
	for(t_rawIndex=0;t_rawIndex<t_raw.Length();t_rawIndex=t_rawIndex+1){
		t_rawAsc=(int)t_raw[t_rawIndex];
		if(t_inTag==false){
			int t_3=t_rawAsc;
			if(t_3==9 || t_3==32){
				if(((t_whitespaceBuffer->p_Length())!=0) || ((t_parent)!=0) && ((t_parent->m_fullValue.Length())!=0)){
					int t_lastAsc=t_whitespaceBuffer->p_Last(-1);
					if((t_options&1)==0 || ((t_whitespaceBuffer->p_Length())!=0) && t_lastAsc!=9 && t_lastAsc!=32){
						if(t_parent==0){
							if((t_error)!=0){
								t_error->p_Set2(String(L"illegal character",17),t_rawLine,t_rawColumn,t_rawIndex);
							}
							return 0;
						}
						t_whitespaceBuffer->p_Add(t_rawAsc);
					}
				}
				t_rawColumn+=1;
			}else{
				if(t_3==10){
					t_rawLine+=1;
					t_rawColumn=1;
					if((t_options&2)==0){
						t_whitespaceBuffer->p_Add(t_rawAsc);
					}
				}else{
					if(t_3==13){
					}else{
						if(t_3==60){
							if(((t_parent)!=0) && ((t_whitespaceBuffer->p_Length())!=0)){
								if((t_options&1)==1){
									t_whitespaceBuffer->p_Trim();
								}
								if((t_whitespaceBuffer->p_Length())!=0){
									t_textNode=t_parent->p_AddText(t_whitespaceBuffer->p_value());
									t_whitespaceBuffer->p_Clear();
								}
							}
							if(bb_xml_XMLHasStringAtOffset(String(L"<?xml",5),t_raw,t_rawIndex)){
								if(t_hasFormat){
									if((t_error)!=0){
										t_error->p_Set2(String(L"duplicate xml format",20),t_rawLine,t_rawColumn,t_rawIndex);
									}
									return 0;
								}
								if(t_doc!=0){
									if((t_error)!=0){
										t_error->p_Set2(String(L"doc format should be defined before root node",45),t_rawLine,t_rawColumn,t_rawIndex);
									}
									return 0;
								}
								t_inTag=true;
								t_inFormat=true;
								t_rawColumn+=String(L"<?xml",5).Length();
								t_rawIndex=t_rawPos+String(L"<?xml",5).Length()-1;
							}else{
								if(bb_xml_XMLHasStringAtOffset(String(L"<!DOCTYPE",9),t_raw,t_rawIndex)){
									t_rawPos=bb_xml_XMLFindStringNotInQuotes(String(L">",1),t_raw,t_rawIndex+String(L"<!DOCTYPE",9).Length());
									if(t_rawPos==-1){
										if((t_error)!=0){
											t_error->p_Set2(String(L"doctype not closed",18),t_rawLine,t_rawColumn,t_rawIndex);
										}
										return 0;
									}
									t_rawChunkStart=t_rawIndex+String(L"<!DOCTYPE",9).Length();
									t_rawChunkLength=t_rawPos-(t_rawIndex+String(L"<!DOCTYPE",9).Length());
									t_rawChunkEnd=t_rawChunkStart+t_rawChunkLength;
									for(t_rawChunkIndex=t_rawChunkStart;t_rawChunkIndex<t_rawChunkEnd;t_rawChunkIndex=t_rawChunkIndex+1){
										t_rawChunkAsc=(int)t_raw[t_rawChunkIndex];
										if(t_rawChunkAsc==10){
											t_rawLine+=1;
											t_rawColumn=1;
										}else{
											t_rawColumn+=1;
										}
									}
									t_rawIndex=t_rawPos+String(L">",1).Length()-1;
								}else{
									if(bb_xml_XMLHasStringAtOffset(String(L"<!--",4),t_raw,t_rawIndex)){
										t_rawPos=t_raw.Find(String(L"-->",3),t_rawIndex+String(L"<!--",4).Length());
										if(t_rawPos==-1){
											if((t_error)!=0){
												t_error->p_Set2(String(L"comment not closed",18),t_rawLine,t_rawColumn,t_rawIndex);
											}
											return 0;
										}
										t_rawChunkStart=t_rawIndex+String(L"<!--",4).Length();
										t_rawChunkLength=t_rawPos-(t_rawIndex+String(L"<!--",4).Length());
										t_rawChunkEnd=t_rawChunkStart+t_rawChunkLength;
										for(t_rawChunkIndex=t_rawChunkStart;t_rawChunkIndex<t_rawChunkEnd;t_rawChunkIndex=t_rawChunkIndex+1){
											t_rawChunkAsc=(int)t_raw[t_rawChunkIndex];
											if(t_rawChunkAsc==10){
												t_rawLine+=1;
												t_rawColumn=1;
											}else{
												t_rawColumn+=1;
											}
										}
										t_rawIndex=t_rawPos+String(L"-->",3).Length()-1;
									}else{
										if(bb_xml_XMLHasStringAtOffset(String(L"<![CDATA[",9),t_raw,t_rawIndex)){
											t_rawPos=t_raw.Find(String(L"]]>",3),t_rawIndex+String(L"<![CDATA[",9).Length());
											if(t_rawPos==-1){
												if((t_error)!=0){
													t_error->p_Set2(String(L"cdata not closed",16),t_rawLine,t_rawColumn,t_rawIndex);
												}
												return 0;
											}
											if(t_parent==0){
												if((t_error)!=0){
													t_error->p_Set2(String(L"unexepcted cdata",16),t_rawLine,t_rawColumn,t_rawIndex);
												}
												return 0;
											}
											t_rawChunkStart=t_rawIndex+String(L"<![CDATA[",9).Length();
											t_rawChunkLength=t_rawPos-(t_rawIndex+String(L"<![CDATA[",9).Length());
											t_rawChunkEnd=t_rawChunkStart+t_rawChunkLength;
											for(t_rawChunkIndex=t_rawChunkStart;t_rawChunkIndex<t_rawChunkEnd;t_rawChunkIndex=t_rawChunkIndex+1){
												t_rawChunkAsc=(int)t_raw[t_rawChunkIndex];
												if(t_rawChunkAsc==10){
													t_rawLine+=1;
													t_rawColumn=1;
												}else{
													t_rawColumn+=1;
												}
											}
											t_whitespaceBuffer->p_Add3(t_raw,t_rawChunkStart,t_rawChunkLength);
											if(((t_parent)!=0) && ((t_whitespaceBuffer->p_Length())!=0)){
												t_textNode=t_parent->p_AddText(t_whitespaceBuffer->p_value());
												t_whitespaceBuffer->p_Clear();
											}
											t_rawIndex=t_rawPos+String(L"]]>",3).Length()-1;
										}else{
											t_inTag=true;
											if((t_whitespaceBuffer->p_Length())!=0){
												if((t_options&1)==1){
													t_whitespaceBuffer->p_Trim();
												}
												if((t_whitespaceBuffer->p_Length())!=0){
													if((t_options&1)==1){
														t_whitespaceBuffer->p_Trim();
													}
													if((t_whitespaceBuffer->p_Length())!=0){
														t_textNode=t_parent->p_AddText(t_whitespaceBuffer->p_value());
														t_whitespaceBuffer->p_Clear();
													}
												}
											}
											t_rawColumn+=1;
										}
									}
								}
							}
						}else{
							if(t_3==62){
								if((t_error)!=0){
									t_error->p_Set2(String(L"unexpected close bracket",24),t_rawLine,t_rawColumn,t_rawIndex);
								}
								return 0;
							}else{
								if(t_parent==0){
									if((t_error)!=0){
										t_error->p_Set2(String(L"illegal character",17),t_rawLine,t_rawColumn,t_rawIndex);
									}
									return 0;
								}
								t_whitespaceBuffer->p_Add(t_rawAsc);
								t_rawColumn+=1;
							}
						}
					}
				}
			}
		}else{
			if(t_waitTagClose){
				int t_4=t_rawAsc;
				if(t_4==9){
					t_rawColumn+=1;
				}else{
					if(t_4==10){
						t_rawLine+=1;
						t_rawColumn=1;
					}else{
						if(t_4==13){
						}else{
							if(t_4==32){
								t_rawColumn+=1;
							}else{
								if(t_4==62){
									t_waitTagClose=false;
									t_processTag=true;
								}else{
									if((t_error)!=0){
										t_error->p_Set2(String(L"unexpected character",20),t_rawLine,t_rawColumn,t_rawIndex);
									}
									return 0;
								}
							}
						}
					}
				}
			}else{
				if(t_inQuote==false){
					int t_5=t_rawAsc;
					if(t_5==9){
						t_rawColumn+=1;
						if((t_attributeBuffer->p_Length())!=0){
							t_processAttributeBuffer=true;
						}
					}else{
						if(t_5==10){
							t_rawLine+=1;
							t_rawColumn=1;
							if((t_attributeBuffer->p_Length())!=0){
								t_processAttributeBuffer=true;
							}
						}else{
							if(t_5==13){
							}else{
								if(t_5==32){
									t_rawColumn+=1;
									if((t_attributeBuffer->p_Length())!=0){
										t_processAttributeBuffer=true;
									}
								}else{
									if(t_5==34 || t_5==39){
										t_quoteAsc=t_rawAsc;
										t_inQuote=true;
										if(t_hasTagClose || t_hasTagName==false && t_inFormat==false || t_hasEquals==false || ((t_attributeBuffer->p_Length())!=0)){
											if((t_error)!=0){
												t_error->p_Set2(String(L"unexpected quote",16),t_rawLine,t_rawColumn,t_rawIndex);
											}
											return 0;
										}
										t_rawColumn+=1;
										if((t_attributeBuffer->p_Length())!=0){
											t_processAttributeBuffer=true;
										}
									}else{
										if(t_5==47){
											if(t_hasTagClose || t_hasEquals){
												if((t_error)!=0){
													t_error->p_Set2(String(L"unexpected slash",16),t_rawLine,t_rawColumn,t_rawIndex);
												}
												return 0;
											}
											if((t_attributeBuffer->p_Length())!=0){
												t_processAttributeBuffer=true;
											}
											if(t_hasTagName==false){
												if(t_processAttributeBuffer){
													t_isCloseSelf=true;
													t_waitTagClose=true;
												}else{
													t_hasTagClose=true;
												}
											}else{
												t_hasTagClose=true;
												t_isCloseSelf=true;
												t_waitTagClose=true;
											}
											t_rawColumn+=1;
										}else{
											if(t_5==61){
												t_rawColumn+=1;
												if(t_hasTagClose || t_hasTagName==false && t_inFormat==false || t_hasEquals || t_hasAttributeId || t_attributeBuffer->p_Length()==0){
													if((t_error)!=0){
														t_error->p_Set2(String(L"unexpected equals",17),t_rawLine,t_rawColumn,t_rawIndex);
													}
													return 0;
												}
												t_processAttributeBuffer=true;
												t_hasEquals=true;
											}else{
												if(t_5==62){
													if((t_hasEquals || t_hasTagName==false) && t_attributeBuffer->p_Length()==0){
														if((t_error)!=0){
															t_error->p_Set2(String(L"unexpected close bracket",24),t_rawLine,t_rawColumn,t_rawIndex);
														}
														return 0;
													}
													if((t_attributeBuffer->p_Length())!=0){
														t_processAttributeBuffer=true;
													}
													t_processTag=true;
													t_rawColumn+=1;
												}else{
													if(t_5==63){
														if(t_inFormat==false || t_rawIndex==t_raw.Length()-1 || (int)t_raw[t_rawIndex+1]!=62){
															if((t_error)!=0){
																t_error->p_Set2(String(L"unexpected questionmark",23),t_rawLine,t_rawColumn,t_rawIndex);
															}
															return 0;
														}
														t_processTag=true;
														t_rawIndex+=1;
														t_rawColumn+=1;
													}else{
														if(t_rawAsc==45 || t_rawAsc==58 || t_rawAsc==95 || t_rawAsc>=48 && t_rawAsc<=57 || t_rawAsc>=65 && t_rawAsc<=90 || t_rawAsc>=97 && t_rawAsc<=122){
															if(t_hasTagClose==true && t_hasTagName==true){
																if((t_error)!=0){
																	t_error->p_Set2(String(L"unexpected character",20),t_rawLine,t_rawColumn,t_rawIndex);
																}
																return 0;
															}
															if(t_hasAttributeId && t_hasEquals==false){
																t_isSingleAttribute=true;
																t_processAttributeBuffer=true;
															}else{
																t_attributeBuffer->p_Add(t_rawAsc);
															}
															t_rawColumn+=1;
														}else{
															if((t_error)!=0){
																t_error->p_Set2(String(L"illegal character",17),t_rawLine,t_rawColumn,t_rawIndex);
															}
															return 0;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}else{
					if(t_rawAsc==t_quoteAsc){
						t_inQuote=false;
						t_processAttributeBuffer=true;
					}else{
						t_attributeBuffer->p_Add(t_rawAsc);
					}
				}
				if(t_processAttributeBuffer){
					t_processAttributeBuffer=false;
					if(t_hasTagName==false && t_inFormat==false){
						if(t_hasTagClose==false){
							t_tagName=t_attributeBuffer->p_value();
							if(t_parent==0){
								if(t_doc==0){
									t_doc=(new c_XMLDoc)->m_new(t_tagName,t_formatVersion,t_formatEncoding);
									gc_assign(t_doc->m_doc,t_doc);
									t_doc->m_parent=0;
									t_doc->m_line=t_rawLine;
									t_doc->m_column=t_rawColumn;
									t_doc->m_offset=t_rawIndex;
									t_current=(t_doc);
								}else{
									if((t_error)!=0){
										t_error->p_Set2(String(L"duplicate root",14),t_rawLine,t_rawColumn,t_rawIndex);
									}
									return 0;
								}
							}else{
								t_current=t_parent->p_AddChild(t_tagName,String(),String());
								t_current->m_line=t_rawLine;
								t_current->m_column=t_rawColumn;
								t_current->m_offset=t_rawIndex;
							}
							t_hasTagName=true;
						}else{
							t_tagName=t_attributeBuffer->p_value().ToLower();
							if(t_parent==0 || t_tagName!=t_parent->m_nameLowerCase){
								if((t_error)!=0){
									t_error->p_Set2(String(L"mismatched end tag",18),t_rawLine,t_rawColumn,t_rawIndex);
								}
								return 0;
							}
							t_waitTagClose=true;
							t_hasTagName=true;
						}
					}else{
						if(t_hasAttributeId==false){
							t_attributeId=t_attributeBuffer->p_value();
							t_hasAttributeId=true;
						}else{
							t_attributeValue=t_attributeBuffer->p_value();
							t_hasAttributeValue=true;
						}
						if(t_processTag && t_hasAttributeId || t_hasAttributeId && t_hasAttributeValue || t_isSingleAttribute || t_hasTagClose){
							if(t_inFormat==false){
								t_current->p_SetAttribute5(t_attributeId,t_attributeValue);
							}else{
								String t_6=t_attributeId;
								if(t_6==String(L"version",7)){
									t_formatVersion=t_attributeValue;
								}else{
									if(t_6==String(L"encoding",8)){
										t_formatEncoding=t_attributeValue;
									}
								}
							}
							t_attributeId=String();
							t_attributeValue=String();
							t_hasAttributeId=false;
							t_hasAttributeValue=false;
							t_hasEquals=false;
						}
					}
					t_attributeBuffer->p_Clear();
				}
				if(t_isSingleAttribute){
					t_isSingleAttribute=false;
					t_attributeBuffer->p_Add(t_rawAsc);
				}
			}
			if(t_processTag){
				t_processTag=false;
				if(t_inFormat==false){
					if(t_hasTagClose==false && t_isCloseSelf==false){
						t_parent=t_current;
						t_current=0;
						t_stack->p_AddLast(t_parent);
					}
					if(t_isCloseSelf){
						t_hasTagClose=true;
					}
					if(t_hasTagClose==true){
						if(t_isCloseSelf==false){
							if((t_whitespaceBuffer->p_Length())!=0){
								if((t_options&1)==1){
									t_whitespaceBuffer->p_Trim();
								}
								if((t_whitespaceBuffer->p_Length())!=0){
									t_parent->p_AddText(t_whitespaceBuffer->p_value());
									t_whitespaceBuffer->p_Clear();
								}
							}
							t_stack->p_RemoveLast();
							if(t_stack->p_IsEmpty()){
								t_parent=0;
							}else{
								t_parent=t_stack->p_Last2();
							}
						}else{
							t_isCloseSelf=false;
						}
					}
				}else{
					t_hasFormat=true;
					t_inFormat=false;
				}
				t_inTag=false;
				t_hasTagClose=false;
				t_hasTagName=false;
				t_waitTagClose=false;
				t_tagName=String();
			}
		}
	}
	if(t_inTag || ((t_parent)!=0) || t_doc==0){
		if((t_error)!=0){
			t_error->p_Set2(String(L"unexpected end of xml",21),t_rawLine,t_rawColumn,t_rawIndex);
		}
		return 0;
	}
	return t_doc;
}
c_XMLDoc* bb_necrodancergame_xmlData;
c_GuiContainer::c_GuiContainer(){
}
c_GuiContainer* c_GuiContainer::m_new(){
	return this;
}
void c_GuiContainer::mark(){
	Object::mark();
}
c_Controller::c_Controller(){
	m_parent=0;
}
c_Controller* c_Controller::m_currentController;
c_Controller* c_Controller::m_new(){
	c_GuiContainer::m_new();
	gc_assign(this->m_parent,m_currentController);
	gc_assign(m_currentController,this);
	return this;
}
void c_Controller::m_GiveFocus(c_Controller* t_c){
	gc_assign(t_c->m_parent,m_currentController);
	gc_assign(m_currentController,t_c);
	m_currentController->p_RegainFocus();
}
bool c_Controller::p_HasFocus(){
	return m_currentController==this;
}
void c_Controller::mark(){
	c_GuiContainer::mark();
	gc_mark_q(m_parent);
}
c_ControllerGame::c_ControllerGame(){
	m_specialScoreSubmit=false;
	m_coinVal=-1;
	m_timeVal=-1;
	m_restartImage=(new c_TextSprite)->m_new(2,FLOAT(2.0),-1,10000,true,-16777216,1,1);
	m_scoresImage=(new c_TextSprite)->m_new(2,FLOAT(2.0),-65536,10000,true,-16777216,1,1);
	m_scoresImage2=(new c_TextSprite)->m_new(2,FLOAT(2.0),-65536,10000,true,-16777216,1,1);
	m_songEndedImage=(new c_TextSprite)->m_new(2,FLOAT(3.0),-1,10000,true,-16777216,1,1);
	m_songEndedImage2=(new c_TextSprite)->m_new(2,FLOAT(3.0),-1,10000,true,-16777216,1,1);
	m_restartBounce=0;
	m_replayInstructions=0;
	m_ignoreInput=false;
	m_pendingScores=0;
}
void c_ControllerGame::p_ResetPostDeathReplay(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ControllerGame.ResetPostDeathReplay()",37));
}
c_ControllerGame* c_ControllerGame::m_new(){
	c_Controller::m_new();
	bb_controller_game_totalPlaytimeLastAdded=bb_app_Millisecs();
	gc_assign(bb_controller_game_controllerGamePointer,this);
	c_Sprite::m_scaleToFitScreen=false;
	for(int t_i=0;t_i<bb_controller_game_lastPlayerMoveBeat.Length();t_i=t_i+1){
		bb_controller_game_lastPlayerMoveBeat[t_i]=-1;
	}
	this->p_ResetPostDeathReplay();
	gc_assign(c_GUI_gameplay::m_errorKey,(new c_Sprite)->m_new2(String(L"gui/error_locked.png",20),1,c_Image::m_DefaultFlags));
	c_GUI_gameplay::m_errorKey->p_SetZ(FLOAT(10000.0));
	c_Input::m_Init();
	bb_controller_game_gamePaused=false;
	c_GameData::m_SetCharUnlocked(0,true);
	c_GameData::m_SetCharUnlocked(9,true);
	c_GameData::m_SetCharUnlocked(10,true);
	c_GameData::m_SetCharUnlocked(14,true);
	c_GameData::m_SetCharUnlocked(13,true);
	c_GameData::m_SetCharUnlocked(12,true);
	c_Spells::m_Init();
	c_Level::m_NewLevel(-2,1,0,false,0,false);
	c_Level::m_DoRestart();
	this->m_restartImage->m_zVal=19990;
	this->m_scoresImage->m_zVal=19990;
	this->m_scoresImage2->m_zVal=19990;
	this->m_songEndedImage->m_zVal=19990;
	this->m_songEndedImage2->m_zVal=19990;
	gc_assign(this->m_restartBounce,(new c_Bouncer)->m_new(FLOAT(-0.1),FLOAT(0.0),FLOAT(1.5),100));
	gc_assign(this->m_replayInstructions,(new c_TextSprite)->m_new(0,FLOAT(1.0),-1,10000,true,-16777216,1,1));
	this->m_replayInstructions->m_zVal=20001;
	return this;
}
void c_ControllerGame::p_RegainFocus(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ControllerGame.RegainFocus()",28));
}
void c_ControllerGame::p_Update(){
	c_Audio::m_UpdateNumLoops();
	if(c_Level::m_levelJustStarted){
		c_Level::m_levelJustStarted=false;
		c_Audio::m_Update(true);
		c_RenderableObject::m_UpdateAll();
	}
	if(!this->m_ignoreInput && !c_Input::m_GameUpdate()){
		return;
	}
	bool t_pause=false;
	int t_keyBinding_0_11=c_GameData::m_GetKeyBinding(0,11);
	if(t_keyBinding_0_11<0){
		if(((bb_input_KeyHit(260))!=0) && !c_Input::m_IsRedefined(260) || ((bb_input_KeyHit(261))!=0) && !c_Input::m_IsRedefined(261)){
			t_pause=true;
		}
	}else{
		if(t_keyBinding_0_11<512 && !c_Input::m_keysHitLastFrame[t_keyBinding_0_11] && !c_Input::m_keysHit2FramesAgo[t_keyBinding_0_11]){
			int t_1=t_keyBinding_0_11;
			if(t_1==384){
				if(c_Input::m_stickDown[0]){
					t_pause=true;
				}
			}else{
				if(t_1==385){
					if(c_Input::m_stickRight[0]){
						t_pause=true;
					}
				}else{
					if(t_1==386){
						if(c_Input::m_stickLeft[0]){
							t_pause=true;
						}
					}else{
						if((c_Input::m_KeyWasHit(t_keyBinding_0_11))!=0){
							t_pause=true;
						}
					}
				}
			}
		}
	}
	if(!t_pause && ((bb_input_KeyHit(27))!=0)){
		t_pause=true;
	}
	if(t_pause){
		bb_controller_game_gamePaused=true;
		c_Audio::m_PauseSong(true);
		(new c_ControllerPause)->m_new(this);
	}
	bool t_allPlayersPerished=c_Player::m_AllPlayersPerished();
	int t_keyBinding_0_10=c_GameData::m_GetKeyBinding(0,10);
	if((c_Input::m_KeyWasHit(t_keyBinding_0_10))!=0){
		if((t_allPlayersPerished || bb_controller_game_hasWon) && !c_Level::m_isReplaying){
			if(c_Level::m_replay!=0){
				if(c_Level::m_replay->m_replayStr==String()){
					c_Level::m_replay->p_Save();
				}
			}
		}
		bb_controller_game_showScoreMessage=false;
		bb_controller_game_hasWon=false;
		if(this->m_specialScoreSubmit){
			this->m_specialScoreSubmit=false;
			c_Level::m_TakeActionAfterAllCharsScoreSubmit();
		}else{
			c_Level::m_DoQuickRestart(false,true,false);
		}
	}
	if(t_allPlayersPerished || bb_controller_game_showScoreMessage){
		bb_logger_Debug->p_TraceNotImplemented(String(L"ControllerGame.Update() (Postgame - death)",42));
	}
	if(bb_controller_game_hasWon && !((this->m_pendingScores)!=0) && (bb_controller_game_showScoreMessage || c_GameData::m_modGamedataChanges)){
		bb_logger_Debug->p_TraceNotImplemented(String(L"ControllerGame.Update() (Postgame - win)",40));
	}
	bool t_songHasNotLooped=false;
	if(!c_Audio::m_PastLastBeat() && !c_Audio::m_HasSongEnded()){
		t_songHasNotLooped=false;
	}else{
		t_songHasNotLooped=c_Audio::m_songLoops==0;
	}
	if(c_Level::m_isReplaying){
		if(c_Level::m_replay->p_GetNumBeats()<c_Audio::m_GetClosestBeatNum(true)){
			t_songHasNotLooped=!c_Audio::m_DoingNecrodancerTransition();
		}
	}
	for(int t_i=0;t_i<bb_controller_game_numPlayers;t_i=t_i+1){
		if(!t_songHasNotLooped){
			continue;
		}
		if(this->p_HasFocus()){
			if(!bb_controller_game_hasWon && !c_Audio::m_startSong){
				c_Player* t_player=bb_controller_game_players[t_i];
				if(!t_player->m_isHelper && !t_player->m_falling){
					if(t_player->p_IsStandingStill()){
						if(c_Level::m_IsLockedExit(t_player->m_x,t_player->m_y)){
							if(c_Level::m_bossNumber==7 && (bb_controller_game_currentLevel==-493 || bb_controller_game_currentLevel==5)){
								c_Level::m_ActivateTrigger(53,0,0);
								continue;
							}
							if(c_Util::m_IsCharacterActive(6)){
								t_player->p_Hit(String(L"COWARDICE",9),99999,-1,0,false,0);
								continue;
							}
							c_Trap* t_trap=c_Trap::m_GetTrapAt(t_player->m_x,t_player->m_y);
							if(t_trap!=0){
								t_trap->p_Die();
							}
							t_player->m_lordCrownActiveBeat=-1;
							t_player->m_shieldActiveBeat=-1;
							(new c_TrapDoor)->m_new(t_player->m_x,t_player->m_y);
						}
					}
				}
			}
		}
	}
	c_Audio::m_Update(true);
	c_RenderableObject::m_UpdateAll();
	c_Doppelganger::m_UpdateAll();
	c_Flyaway::m_UpdateAll();
	c_ParticleSystem::m_UpdateAll();
	c_Level::m_Update();
	c_Input::m_UpdateKeysHit();
	c_Enemy::m_movesBehind=c_Audio::m_GetClosestBeatNum(true)-bb_controller_game_lastEnemyMoveBeat;
	if(c_Enemy::m_EnemiesMovingThisFrame()){
		c_Swarm::m_Move();
		c_Item::m_MoveAll();
		c_Enemy::m_MoveAll();
		for(int t_i2=0;t_i2<bb_controller_game_numPlayers;t_i2=t_i2+1){
			c_Player* t_player2=bb_controller_game_players[t_i2];
			t_player2->p_HandleIceAndCoals();
		}
		c_Trap::m_MoveAll();
		c_Tile::m_MoveAll();
		c_Item::m_MoveAll();
		c_CrystalShards::m_MoveAll();
		c_Level::m_minimap->p_Update();
		for(int t_i3=0;t_i3<bb_controller_game_numPlayers;t_i3=t_i3+1){
			c_Player* t_player3=bb_controller_game_players[t_i3];
			t_player3->p_AfterEnemyMovement();
		}
		c_Entity::m_UpdateVisibility();
		bb_controller_game_lastEnemyMoveBeat+=1;
	}
	if(bb_controller_game_incrementFixedBeatNum){
		if(c_Audio::m_fixedBeatNum!=-64){
			c_Audio::m_fixedBeatNum+=1;
		}
		bb_controller_game_incrementFixedBeatNum=false;
	}
	bb_logger_Debug->p_TraceNotImplemented(String(L"ControllerGame.Update() (Playtime)",34));
}
void c_ControllerGame::mark(){
	c_Controller::mark();
	gc_mark_q(m_restartImage);
	gc_mark_q(m_scoresImage);
	gc_mark_q(m_scoresImage2);
	gc_mark_q(m_songEndedImage);
	gc_mark_q(m_songEndedImage2);
	gc_mark_q(m_restartBounce);
	gc_mark_q(m_replayInstructions);
}
int bb_app_Millisecs(){
	return bb_app__game->Millisecs();
}
int bb_controller_game_totalPlaytimeLastAdded;
c_ControllerGame* bb_controller_game_controllerGamePointer;
c_Tweenable::c_Tweenable(){
	m_alphaTweenCurrentStep=FLOAT(.0);
	m_alphaTweenDuration=0;
	m_alphaTweenInitial=FLOAT(.0);
	m_alphaTweenFinal=FLOAT(.0);
}
c_Tweenable* c_Tweenable::m_new(){
	return this;
}
void c_Tweenable::p_SetAlphaTween(Float t_initialVal,Float t_finalVal,int t_duration){
	this->m_alphaTweenCurrentStep=FLOAT(0.0);
	this->m_alphaTweenDuration=t_duration;
	this->m_alphaTweenInitial=t_initialVal;
	this->m_alphaTweenFinal=t_finalVal;
}
int c_Tweenable::p_GetTweenDurationRemaining(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Tweenable.GetTweenDurationRemaining()",37));
	return 0;
}
void c_Tweenable::p_SetCutoffY(int t_cY){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Tweenable.SetCutoffY(Int)",25));
}
void c_Tweenable::mark(){
	Object::mark();
}
c_Sprite::c_Sprite(){
	m_zSet=false;
	m_z=FLOAT(.0);
	m_inWorld=true;
	m_zOff=FLOAT(.0);
	m_cutoffYSet=false;
	m_alpha=FLOAT(1.0);
	m_flipX=false;
	m_flipXWithOffset=true;
	m_renderX=FLOAT(.0);
	m_renderLastX=FLOAT(.0);
	m_renderY=FLOAT(.0);
	m_renderLastY=FLOAT(.0);
}
bool c_Sprite::m_scaleToFitScreen;
c_Sprite* c_Sprite::m_new(String t_p,int t_frameWidth,int t_frameHeight,int t_frameCount,int t_flags){
	c_Tweenable::m_new();
	return this;
}
c_Sprite* c_Sprite::m_new2(String t_p,int t_frames,int t_flags){
	c_Tweenable::m_new();
	return this;
}
c_Sprite* c_Sprite::m_new3(c_Image* t_img){
	c_Tweenable::m_new();
	return this;
}
c_Sprite* c_Sprite::m_new4(){
	c_Tweenable::m_new();
	return this;
}
void c_Sprite::p_SetZ(Float t_zVal){
	this->m_zSet=true;
	this->m_z=t_zVal;
}
void c_Sprite::p_InWorld(bool t_world){
	this->m_inWorld=t_world;
}
void c_Sprite::p_SetZOff(Float t_zVal){
	this->m_zOff=t_zVal;
}
void c_Sprite::p_SetHandle2(int t_xVal,int t_yVal){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Sprite.SetHandle(Int, Int)",26));
}
int c_Sprite::p_Width(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Sprite.Width()",14));
	return 0;
}
int c_Sprite::p_Height(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Sprite.Height()",15));
	return 0;
}
void c_Sprite::p_UnsetCutoffY(){
	this->m_cutoffYSet=false;
}
void c_Sprite::p_DiscardTempImage(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Sprite.DiscardTempImage()",25));
}
void c_Sprite::p_SetFrame(int t_f){
}
void c_Sprite::p_SetAlphaValue(Float t_a){
	this->m_alpha=bb_math_Clamp2(t_a,FLOAT(0.0),FLOAT(1.0));
}
void c_Sprite::p_FlipX(bool t_f,bool t_withOffset){
	this->m_flipX=t_f;
	this->m_flipXWithOffset=t_withOffset;
}
void c_Sprite::p_SetAlphaTweenFromCurrent(Float t_finalVal,int t_duration){
	this->p_SetAlphaTween(this->m_alpha,t_finalVal,t_duration);
}
void c_Sprite::p_UnSetZ(){
	this->m_zSet=false;
	this->m_z=FLOAT(0.0);
}
Float c_Sprite::p_GetAlphaValue(){
	return this->m_alpha;
}
void c_Sprite::p_SetScale(Float t_scaleVal){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Sprite.SetScale(Float)",22));
}
void c_Sprite::p_SetCutoffY(int t_cY){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Sprite.SetCutoffY(Int)",22));
}
int c_Sprite::p_GetFrame(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Sprite.GetFrame()",17));
	return 0;
}
int c_Sprite::p_GetNumFrames(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Sprite.GetNumFrames()",21));
	return 0;
}
void c_Sprite::mark(){
	c_Tweenable::mark();
}
Array<int > bb_controller_game_lastPlayerMoveBeat;
c_GUI_gameplay::c_GUI_gameplay(){
}
c_Sprite* c_GUI_gameplay::m_errorKey;
void c_GUI_gameplay::mark(){
	Object::mark();
}
c_Input::c_Input(){
}
Array<bool > c_Input::m_stickLeft;
Array<bool > c_Input::m_stickRight;
Array<bool > c_Input::m_stickUp;
Array<bool > c_Input::m_stickDown;
Array<Float > c_Input::m_lastJoyX;
Array<Float > c_Input::m_lastJoyY;
Array<bool > c_Input::m_stickLeft2;
Array<bool > c_Input::m_stickRight2;
Array<bool > c_Input::m_stickUp2;
Array<bool > c_Input::m_stickDown2;
Array<Float > c_Input::m_lastJoyX2;
Array<Float > c_Input::m_lastJoyY2;
Array<int > c_Input::m_movementBuffer;
Array<int > c_Input::m_movementBufferFrame;
Array<int > c_Input::m_offbeatMovementBuffer;
Array<int > c_Input::m_offbeatMovementBufferFrame;
Array<int > c_Input::m_lastBeatMovedOn;
Array<int > c_Input::m_lastOffbeatMovedOn;
Array<int > c_Input::m_lastBeatMissed;
Array<int > c_Input::m_punishmentBeatToSkip;
Array<int > c_Input::m_punishmentBeatToSkipQueue;
Array<bool > c_Input::m_keysHitLastFrame;
Array<bool > c_Input::m_keysHit2FramesAgo;
void c_Input::m_Init(){
	for(int t_i=0;t_i<4;t_i=t_i+1){
		m_stickLeft[t_i]=false;
		m_stickRight[t_i]=false;
		m_stickUp[t_i]=false;
		m_stickDown[t_i]=false;
		m_lastJoyX[t_i]=FLOAT(0.0);
		m_lastJoyY[t_i]=FLOAT(0.0);
		m_stickLeft2[t_i]=false;
		m_stickRight2[t_i]=false;
		m_stickUp2[t_i]=false;
		m_stickDown2[t_i]=false;
		m_lastJoyX2[t_i]=FLOAT(0.0);
		m_lastJoyY2[t_i]=FLOAT(0.0);
		m_movementBuffer[t_i]=-1;
		m_movementBufferFrame[t_i]=0;
		m_offbeatMovementBuffer[t_i]=-1;
		m_offbeatMovementBufferFrame[t_i]=0;
		m_lastBeatMovedOn[t_i]=-1;
		m_lastOffbeatMovedOn[t_i]=-1;
		m_lastBeatMissed[t_i]=-1;
		m_punishmentBeatToSkip[t_i]=-1;
		m_punishmentBeatToSkipQueue[t_i]=-1;
	}
	for(int t_i2=0;t_i2<512;t_i2=t_i2+1){
		m_keysHitLastFrame[t_i2]=false;
		m_keysHit2FramesAgo[t_i2]=false;
	}
}
int c_Input::m_lastBeatSkippedFlyaway;
void c_Input::m_ResetMovementCounters(){
	m_Init();
	bb_controller_game_lastEnemyMoveBeat=0;
	c_Enemy::m_movesBehind=0;
	c_Enemy::m_lastWraithSpawnBeat=0;
	c_Audio::m_fixedBeatNum=-64;
	if(!c_Level::m_isReplaying && c_Util::m_IsCharacterActive(9) || c_GameData::m_GetLobbyMove() && (bb_controller_game_currentLevel==-2 || -22<=bb_controller_game_currentLevel && bb_controller_game_currentLevel<=-12)){
		c_Audio::m_fixedBeatNum=1;
	}
	for(int t_i=0;t_i<bb_controller_game_numPlayers;t_i=t_i+1){
		bb_controller_game_lastPlayerMoveBeat[t_i]=-1;
		c_Player* t_player=bb_controller_game_players[t_i];
		if(t_player!=0){
			t_player->m_queuedMoveBeat=-1;
		}
	}
	m_lastBeatSkippedFlyaway=-1;
}
c_ControllerPopUp* c_Input::m_popUpController;
int c_Input::m_popupFrame;
void c_Input::m_Update(){
	if(bb_controller_game_DEBUG_MOUSE_COORDS){
		bb_logger_Debug->p_TraceNotImplemented(String(L"Input.Update() (Debug mouse coords)",35));
	}
	if(m_popUpController!=0){
		if(bb_necrodancergame_globalFrameCounter>m_popupFrame+60){
			m_popUpController->m_ignoreInput=false;
		}
		int t_2=m_popUpController->m_retval;
		if(t_2==-1){
		}else{
			if(t_2==2){
				c_GameData::m_SetLobbyMove(true);
				c_Level::m_DoRestart();
				m_popUpController=0;
			}else{
				m_popUpController=0;
			}
		}
	}
	bb_logger_Debug->p_TraceNotImplemented(String(L"Input.Update() (Joystick)",25));
}
bool c_Input::m_GameUpdate(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Input.GameUpdate()",18));
	return true;
}
bool c_Input::m_IsRedefined(int t_key){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Input.IsRedefined(Int)",22));
	return false;
}
int c_Input::m_KeyWasHit(int t_keyID){
	if(0<=t_keyID && t_keyID<=511 && !m_keysHitLastFrame[t_keyID] && !m_keysHit2FramesAgo[t_keyID]){
		int t_1=t_keyID;
		if(t_1==384){
			return ((m_stickDown[0])?1:0);
		}else{
			if(t_1==385){
				return ((m_stickRight[0])?1:0);
			}else{
				if(t_1==386){
					return ((m_stickLeft[0])?1:0);
				}else{
					if(t_1==387){
						return ((m_stickUp[0])?1:0);
					}else{
						if(t_1==392){
							return ((m_stickDown[1])?1:0);
						}else{
							if(t_1==393){
								return ((m_stickRight[1])?1:0);
							}else{
								if(t_1==394){
									return ((m_stickLeft[1])?1:0);
								}else{
									if(t_1==395){
										return ((m_stickUp[1])?1:0);
									}else{
										if(t_1==400){
											return ((m_stickDown[2])?1:0);
										}else{
											if(t_1==401){
												return ((m_stickRight[2])?1:0);
											}else{
												if(t_1==402){
													return ((m_stickLeft[2])?1:0);
												}else{
													if(t_1==403){
														return ((m_stickUp[2])?1:0);
													}else{
														if(t_1==408){
															return ((m_stickDown[3])?1:0);
														}else{
															if(t_1==409){
																return ((m_stickRight[3])?1:0);
															}else{
																if(t_1==410){
																	return ((m_stickLeft[3])?1:0);
																}else{
																	if(t_1==411){
																		return ((m_stickUp[3])?1:0);
																	}else{
																		if(t_1==388){
																			return ((m_stickDown2[0])?1:0);
																		}else{
																			if(t_1==389){
																				return ((m_stickRight2[0])?1:0);
																			}else{
																				if(t_1==390){
																					return ((m_stickLeft2[0])?1:0);
																				}else{
																					if(t_1==391){
																						return ((m_stickUp2[0])?1:0);
																					}else{
																						if(t_1==396){
																							return ((m_stickDown2[1])?1:0);
																						}else{
																							if(t_1==397){
																								return ((m_stickRight2[1])?1:0);
																							}else{
																								if(t_1==398){
																									return ((m_stickLeft2[1])?1:0);
																								}else{
																									if(t_1==399){
																										return ((m_stickUp2[1])?1:0);
																									}else{
																										if(t_1==404){
																											return ((m_stickDown2[2])?1:0);
																										}else{
																											if(t_1==405){
																												return ((m_stickRight2[2])?1:0);
																											}else{
																												if(t_1==406){
																													return ((m_stickLeft2[2])?1:0);
																												}else{
																													if(t_1==407){
																														return ((m_stickUp2[2])?1:0);
																													}else{
																														if(t_1==412){
																															return ((m_stickDown2[3])?1:0);
																														}else{
																															if(t_1==413){
																																return ((m_stickRight2[3])?1:0);
																															}else{
																																if(t_1==414){
																																	return ((m_stickLeft2[3])?1:0);
																																}else{
																																	if(t_1==415){
																																		return ((m_stickUp2[3])?1:0);
																																	}else{
																																		return bb_input_KeyHit(t_keyID);
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return 0;
}
void c_Input::m_UpdateKeysHit(){
	for(int t_i=0;t_i<512;t_i=t_i+1){
		m_keysHit2FramesAgo[t_i]=m_keysHitLastFrame[t_i];
		m_keysHitLastFrame[t_i]=bb_input_KeyHit(t_i)>0;
	}
}
void c_Input::mark(){
	Object::mark();
}
bool bb_controller_game_gamePaused;
c_Character::c_Character(){
}
void c_Character::mark(){
	Object::mark();
}
c_Spells::c_Spells(){
}
c_StringMap3* c_Spells::m_spellCoolKills;
Array<c_Sprite* > c_Spells::m_fireballInWorld;
c_Sprite* c_Spells::m_pulseInWorld;
c_Stack2* c_Spells::m_pulseAnim;
String c_Spells::m_spellSlot1;
String c_Spells::m_spellSlot2;
void c_Spells::m_InitLearnedSpells(){
	m_spellSlot1=String(L"spell_none",10);
	m_spellSlot2=String(L"spell_none",10);
	gc_assign(m_spellCoolKills,(new c_StringMap3)->m_new());
}
void c_Spells::m_Init(){
	gc_assign(m_spellCoolKills,(new c_StringMap3)->m_new());
	gc_assign(m_fireballInWorld[0],(new c_Sprite)->m_new2(String(L"spells/fire0.png",16),7,c_Image::m_DefaultFlags));
	m_fireballInWorld[0]->p_SetZ(FLOAT(10000.0));
	gc_assign(m_fireballInWorld[1],(new c_Sprite)->m_new2(String(L"spells/fire1.png",16),7,c_Image::m_DefaultFlags));
	m_fireballInWorld[1]->p_SetZ(FLOAT(10000.0));
	gc_assign(m_fireballInWorld[2],(new c_Sprite)->m_new2(String(L"spells/fire2.png",16),7,c_Image::m_DefaultFlags));
	m_fireballInWorld[2]->p_SetZ(FLOAT(10000.0));
	gc_assign(m_fireballInWorld[3],(new c_Sprite)->m_new2(String(L"spells/fire3.png",16),7,c_Image::m_DefaultFlags));
	m_fireballInWorld[3]->p_SetZ(FLOAT(10000.0));
	gc_assign(m_fireballInWorld[4],(new c_Sprite)->m_new2(String(L"spells/fire4.png",16),6,c_Image::m_DefaultFlags));
	m_fireballInWorld[4]->p_SetZ(FLOAT(10000.0));
	gc_assign(m_pulseInWorld,(new c_Sprite)->m_new2(String(L"spells/pulse_attack.png",23),6,c_Image::m_DefaultFlags));
	m_pulseInWorld->p_SetZ(FLOAT(10000.0));
	m_pulseAnim->p_Clear();
	m_pulseAnim->p_Push4(3);
	m_pulseAnim->p_Push4(3);
	m_pulseAnim->p_Push4(4);
	m_pulseAnim->p_Push4(6);
	m_pulseAnim->p_Push4(3);
	m_pulseAnim->p_Push4(3);
	m_InitLearnedSpells();
}
void c_Spells::mark(){
	Object::mark();
}
c_Map4::c_Map4(){
	m_root=0;
}
c_Map4* c_Map4::m_new(){
	return this;
}
int c_Map4::p_Clear(){
	m_root=0;
	return 0;
}
c_Node17* c_Map4::p_FindNode2(String t_key){
	c_Node17* t_node=m_root;
	while((t_node)!=0){
		int t_cmp=p_Compare2(t_key,t_node->m_key);
		if(t_cmp>0){
			t_node=t_node->m_right;
		}else{
			if(t_cmp<0){
				t_node=t_node->m_left;
			}else{
				return t_node;
			}
		}
	}
	return t_node;
}
bool c_Map4::p_Contains2(String t_key){
	return p_FindNode2(t_key)!=0;
}
int c_Map4::p_Get(String t_key){
	c_Node17* t_node=p_FindNode2(t_key);
	if((t_node)!=0){
		return t_node->m_value;
	}
	return 0;
}
bool c_Map4::p_Update2(String t_key,int t_value){
	c_Node17* t_node=p_FindNode2(t_key);
	if((t_node)!=0){
		t_node->m_value=t_value;
		return true;
	}
	return false;
}
int c_Map4::p_RotateLeft4(c_Node17* t_node){
	c_Node17* t_child=t_node->m_right;
	gc_assign(t_node->m_right,t_child->m_left);
	if((t_child->m_left)!=0){
		gc_assign(t_child->m_left->m_parent,t_node);
	}
	gc_assign(t_child->m_parent,t_node->m_parent);
	if((t_node->m_parent)!=0){
		if(t_node==t_node->m_parent->m_left){
			gc_assign(t_node->m_parent->m_left,t_child);
		}else{
			gc_assign(t_node->m_parent->m_right,t_child);
		}
	}else{
		gc_assign(m_root,t_child);
	}
	gc_assign(t_child->m_left,t_node);
	gc_assign(t_node->m_parent,t_child);
	return 0;
}
int c_Map4::p_RotateRight4(c_Node17* t_node){
	c_Node17* t_child=t_node->m_left;
	gc_assign(t_node->m_left,t_child->m_right);
	if((t_child->m_right)!=0){
		gc_assign(t_child->m_right->m_parent,t_node);
	}
	gc_assign(t_child->m_parent,t_node->m_parent);
	if((t_node->m_parent)!=0){
		if(t_node==t_node->m_parent->m_right){
			gc_assign(t_node->m_parent->m_right,t_child);
		}else{
			gc_assign(t_node->m_parent->m_left,t_child);
		}
	}else{
		gc_assign(m_root,t_child);
	}
	gc_assign(t_child->m_right,t_node);
	gc_assign(t_node->m_parent,t_child);
	return 0;
}
int c_Map4::p_InsertFixup4(c_Node17* t_node){
	while(((t_node->m_parent)!=0) && t_node->m_parent->m_color==-1 && ((t_node->m_parent->m_parent)!=0)){
		if(t_node->m_parent==t_node->m_parent->m_parent->m_left){
			c_Node17* t_uncle=t_node->m_parent->m_parent->m_right;
			if(((t_uncle)!=0) && t_uncle->m_color==-1){
				t_node->m_parent->m_color=1;
				t_uncle->m_color=1;
				t_uncle->m_parent->m_color=-1;
				t_node=t_uncle->m_parent;
			}else{
				if(t_node==t_node->m_parent->m_right){
					t_node=t_node->m_parent;
					p_RotateLeft4(t_node);
				}
				t_node->m_parent->m_color=1;
				t_node->m_parent->m_parent->m_color=-1;
				p_RotateRight4(t_node->m_parent->m_parent);
			}
		}else{
			c_Node17* t_uncle2=t_node->m_parent->m_parent->m_left;
			if(((t_uncle2)!=0) && t_uncle2->m_color==-1){
				t_node->m_parent->m_color=1;
				t_uncle2->m_color=1;
				t_uncle2->m_parent->m_color=-1;
				t_node=t_uncle2->m_parent;
			}else{
				if(t_node==t_node->m_parent->m_left){
					t_node=t_node->m_parent;
					p_RotateRight4(t_node);
				}
				t_node->m_parent->m_color=1;
				t_node->m_parent->m_parent->m_color=-1;
				p_RotateLeft4(t_node->m_parent->m_parent);
			}
		}
	}
	m_root->m_color=1;
	return 0;
}
bool c_Map4::p_Set5(String t_key,int t_value){
	c_Node17* t_node=m_root;
	c_Node17* t_parent=0;
	int t_cmp=0;
	while((t_node)!=0){
		t_parent=t_node;
		t_cmp=p_Compare2(t_key,t_node->m_key);
		if(t_cmp>0){
			t_node=t_node->m_right;
		}else{
			if(t_cmp<0){
				t_node=t_node->m_left;
			}else{
				t_node->m_value=t_value;
				return false;
			}
		}
	}
	t_node=(new c_Node17)->m_new(t_key,t_value,-1,t_parent);
	if((t_parent)!=0){
		if(t_cmp>0){
			gc_assign(t_parent->m_right,t_node);
		}else{
			gc_assign(t_parent->m_left,t_node);
		}
		p_InsertFixup4(t_node);
	}else{
		gc_assign(m_root,t_node);
	}
	return true;
}
bool c_Map4::p_Insert4(String t_key,int t_value){
	return p_Set5(t_key,t_value);
}
void c_Map4::mark(){
	Object::mark();
	gc_mark_q(m_root);
}
c_StringMap3::c_StringMap3(){
}
c_StringMap3* c_StringMap3::m_new(){
	c_Map4::m_new();
	return this;
}
int c_StringMap3::p_Compare2(String t_lhs,String t_rhs){
	return t_lhs.Compare(t_rhs);
}
void c_StringMap3::mark(){
	c_Map4::mark();
}
c_Stack2::c_Stack2(){
	m_data=Array<int >();
	m_length=0;
}
c_Stack2* c_Stack2::m_new(){
	return this;
}
c_Stack2* c_Stack2::m_new2(Array<int > t_data){
	gc_assign(this->m_data,t_data.Slice(0));
	this->m_length=t_data.Length();
	return this;
}
int c_Stack2::m_NIL;
void c_Stack2::p_Clear(){
	for(int t_i=0;t_i<m_length;t_i=t_i+1){
		m_data[t_i]=m_NIL;
	}
	m_length=0;
}
void c_Stack2::p_Push4(int t_value){
	if(m_length==m_data.Length()){
		gc_assign(m_data,m_data.Resize(m_length*2+10));
	}
	m_data[m_length]=t_value;
	m_length+=1;
}
void c_Stack2::p_Push5(Array<int > t_values,int t_offset,int t_count){
	for(int t_i=0;t_i<t_count;t_i=t_i+1){
		p_Push4(t_values[t_offset+t_i]);
	}
}
void c_Stack2::p_Push6(Array<int > t_values,int t_offset){
	p_Push5(t_values,t_offset,t_values.Length()-t_offset);
}
c_Enumerator6* c_Stack2::p_ObjectEnumerator(){
	return (new c_Enumerator6)->m_new(this);
}
void c_Stack2::p_Length2(int t_newlength){
	if(t_newlength<m_length){
		for(int t_i=t_newlength;t_i<m_length;t_i=t_i+1){
			m_data[t_i]=m_NIL;
		}
	}else{
		if(t_newlength>m_data.Length()){
			gc_assign(m_data,m_data.Resize(bb_math_Max(m_length*2+10,t_newlength)));
		}
	}
	m_length=t_newlength;
}
int c_Stack2::p_Length(){
	return m_length;
}
int c_Stack2::p_Get2(int t_index){
	return m_data[t_index];
}
void c_Stack2::p_Remove2(int t_index){
	for(int t_i=t_index;t_i<m_length-1;t_i=t_i+1){
		m_data[t_i]=m_data[t_i+1];
	}
	m_length-=1;
	m_data[m_length]=m_NIL;
}
void c_Stack2::p_Set6(int t_index,int t_value){
	m_data[t_index]=t_value;
}
int c_Stack2::p_Pop(){
	m_length-=1;
	int t_v=m_data[m_length];
	m_data[m_length]=m_NIL;
	return t_v;
}
bool c_Stack2::p_Equals2(int t_lhs,int t_rhs){
	return t_lhs==t_rhs;
}
bool c_Stack2::p_Contains(int t_value){
	for(int t_i=0;t_i<m_length;t_i=t_i+1){
		if(p_Equals2(m_data[t_i],t_value)){
			return true;
		}
	}
	return false;
}
c_BackwardsStack* c_Stack2::p_Backwards(){
	return (new c_BackwardsStack)->m_new(this);
}
void c_Stack2::mark(){
	Object::mark();
	gc_mark_q(m_data);
}
c_SpellType::c_SpellType(){
}
void c_SpellType::mark(){
	Object::mark();
}
c_LevelType::c_LevelType(){
}
void c_LevelType::mark(){
	Object::mark();
}
c_Level::c_Level(){
}
bool c_Level::m_outsideBossChamber;
bool c_Level::m_pacifismModeOn;
bool c_Level::m_shopkeeperDead;
bool c_Level::m_shopkeeperFell;
int c_Level::m_placeLordOnLevel;
c_IntMap3* c_Level::m_placeShrineOnLevel;
int c_Level::m_placeTransmogrifierOnDepth;
int c_Level::m_placeTransmogrifierOnLevel;
int c_Level::m_placeArenaOnLevel;
int c_Level::m_placeArenaOnDepth;
bool c_Level::m_placedArena;
int c_Level::m_placeGlassShopOnLevel;
int c_Level::m_placeGlassShopOnDepth;
int c_Level::m_placeBloodShopOnLevel;
int c_Level::m_placeBloodShopOnDepth;
int c_Level::m_placeFoodShopOnLevel;
int c_Level::m_placeFoodShopOnDepth;
int c_Level::m_placeConjurerOnLevel;
int c_Level::m_placeConjurerOnDepth;
int c_Level::m_placeShrinerOnLevel;
int c_Level::m_placeShrinerOnDepth;
int c_Level::m_placePawnbrokerOnLevel;
int c_Level::m_placePawnbrokerOnDepth;
int c_Level::m_randSeed;
int c_Level::m_nonDeterministicMSStart;
c_RNG* c_Level::m_wholeRunRNG;
c_RNG* c_Level::m_currentFloorRNG;
c_IntSet* c_Level::m_usedBosses;
bool c_Level::m_isSeededMode;
bool c_Level::m_isHardcoreMode;
bool c_Level::m_isDailyChallenge;
bool c_Level::m_isDDRMode;
bool c_Level::m_isSwarmMode;
bool c_Level::m_isNoReturnMode;
bool c_Level::m_isSoulMode;
bool c_Level::m_isFloorIsLavaMode;
bool c_Level::m_isPhasingMode;
bool c_Level::m_isRandomizerMode;
bool c_Level::m_isMysteryMode;
bool c_Level::m_isReplaying;
bool c_Level::m_isTrainingMode;
bool c_Level::m_isBeastmaster;
bool c_Level::m_playedVictoryCutscene;
int c_Level::m_mentorLevel;
bool c_Level::m_isStoryMode;
bool c_Level::m_isDeathlessMode;
int c_Level::m_deathlessWinCount;
bool c_Level::m_isAllCharactersMode;
bool c_Level::m_isAllCharactersDLCMode;
int c_Level::m_continuedRunCoinScore;
bool c_Level::m_lockedShopPlaced;
bool c_Level::m_secretRockRoomPlaced;
bool c_Level::m_isRunNoItemsNoShrines;
bool c_Level::m_placedUrnThisRun;
bool c_Level::m_usedCustomMusic;
int c_Level::m_shopkeeperGhostLevel;
int c_Level::m_shopkeeperGhostDepth;
void c_Level::m_DoRestart_Common(bool t_continuedRun,bool t_cancelFade){
	bb_controller_game_hasWon=false;
	bb_controller_game_showScoreMessage=false;
	m_outsideBossChamber=false;
	m_pacifismModeOn=false;
	m_shopkeeperDead=false;
	m_shopkeeperFell=false;
	m_placeLordOnLevel=-1;
	m_placeShrineOnLevel->p_Clear();
	m_placeTransmogrifierOnDepth=-1;
	m_placeTransmogrifierOnLevel=-1;
	m_placeArenaOnLevel=-1;
	m_placeArenaOnDepth=-1;
	m_placedArena=false;
	m_placeGlassShopOnLevel=-1;
	m_placeGlassShopOnDepth=-1;
	m_placeBloodShopOnLevel=-1;
	m_placeBloodShopOnDepth=-1;
	m_placeFoodShopOnLevel=-1;
	m_placeFoodShopOnDepth=-1;
	m_placeConjurerOnLevel=-1;
	m_placeConjurerOnDepth=-1;
	m_placeShrinerOnLevel=-1;
	m_placeShrinerOnDepth=-1;
	m_placePawnbrokerOnLevel=-1;
	m_placePawnbrokerOnDepth=-1;
	c_Shrine::m_darknessShrineActive=false;
	c_Shrine::m_rhythmShrineActive=false;
	c_Shrine::m_riskShrineActive=false;
	c_Shrine::m_riskShrinePlayer=0;
	c_Shrine::m_spaceShrineActive=false;
	c_Shrine::m_warShrineActive=false;
	c_Shrine::m_noReturnShrineActive=false;
	c_Shrine::m_noReturnShrinePlayer=0;
	c_Shrine::m_paceShrineActive=false;
	c_Shrine::m_bossShrineActive=false;
	c_Shrine::m_usedShrines->p_Clear();
	c_Shrine::m_usedShrinerInZone=-1;
	m_randSeed=-1;
	m_nonDeterministicMSStart=-1;
	m_wholeRunRNG=0;
	m_currentFloorRNG=0;
	m_usedBosses->p_Clear();
	m_isSeededMode=false;
	m_isHardcoreMode=false;
	m_isDailyChallenge=false;
	m_isDDRMode=false;
	m_isSwarmMode=false;
	m_isNoReturnMode=false;
	m_isSoulMode=false;
	m_isFloorIsLavaMode=false;
	m_isPhasingMode=false;
	m_isRandomizerMode=false;
	m_isMysteryMode=false;
	m_isReplaying=false;
	m_isTrainingMode=false;
	m_isBeastmaster=false;
	m_playedVictoryCutscene=false;
	m_mentorLevel=-1;
	if(!t_continuedRun){
		m_isStoryMode=false;
		m_isDeathlessMode=false;
		m_deathlessWinCount=0;
		m_isAllCharactersMode=false;
		m_isAllCharactersDLCMode=false;
	}
	for(int t_i=0;t_i<bb_controller_game_numPlayers;t_i=t_i+1){
		c_Player* t_player=bb_controller_game_players[t_i];
		if(t_player!=0){
			t_player->m_perished=true;
		}
	}
	c_Player* t_player2=bb_controller_game_players[1];
	if(t_player2!=0 && t_player2->m_isHelper){
		bb_controller_game_numPlayers=1;
		bb_controller_game_player1=0;
		t_player2->p_Die();
		bb_controller_game_players[1]=0;
	}
	int t_continuedRunCoinScore=0;
	if(t_continuedRun){
		t_continuedRunCoinScore=c_Player::m_numCoins+m_continuedRunCoinScore;
	}
	m_continuedRunCoinScore=t_continuedRunCoinScore;
	c_Player::m_SetCoins(0,true);
	m_lockedShopPlaced=false;
	m_secretRockRoomPlaced=false;
	c_SaleItem::m_lastSaleItemClass1=String();
	c_SaleItem::m_lastSaleItemClass2=String();
	c_Item::m_lastChestItemClass1=String();
	c_Item::m_lastChestItemClass2=String();
	c_Chest::m_lastChestColor=0;
	c_Chest::m_lastChestColor2=0;
	gc_assign(c_Crate::m_fallenCrates,(new c_List5)->m_new());
	gc_assign(c_Crate::m_fallenGargoyles,(new c_List6)->m_new());
	gc_assign(c_SaleItem::m_randomSaleItemList,(new c_List7)->m_new());
	c_Leprechaun::m_seenLeprechaun=false;
	c_Chain::m_kills=0;
	c_Entity::m_RemoveAnyPerishedEntities();
	c_Flyaway::m_StopRenderingOfAllCurrentFlyaways();
	m_isRunNoItemsNoShrines=true;
	m_placedUrnThisRun=false;
	if(!t_continuedRun){
		m_usedCustomMusic=false;
	}
	m_shopkeeperGhostLevel=-1;
	m_shopkeeperGhostDepth=-1;
	if(t_cancelFade){
		c_Camera::m_fadeOutDuration=0;
		c_Camera::m_fadeOutCurrent=0;
		c_Camera::m_fadeOutCallback=0;
		c_Camera::m_fadeInDuration=0;
		c_Camera::m_fadeInCurrent=0;
		c_Camera::m_fadeInCallback=0;
	}
}
void c_Level::m_DoRestart(){
	if(c_ControllerLevelEditor::m_storedEditor!=0){
		c_Controller::m_GiveFocus(c_ControllerLevelEditor::m_storedEditor);
	}else{
		m_DoRestart_Common(false,true);
		m_NewLevel(-2,1,0,false,0,false);
	}
}
int c_Level::m_forceBoss;
int c_Level::m_GetMaxDepth(){
	return 5;
}
bool c_Level::m_HaveFinalBoss(){
	return c_Util::m_IsCharacterActive(2) || c_Util::m_IsCharacterActive(1) || c_Util::m_IsCharacterActive(0) || c_Util::m_IsCharacterActive(10);
}
bool c_Level::m_AllCharsAnyComplete(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Level.AllCharsAnyComplete()",27));
	return false;
}
bool c_Level::m_AllCharsDLCAnyComplete(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Level.AllCharsDLCAnyComplete()",30));
	return false;
}
bool c_Level::m_isLevelEditor;
bool c_Level::m_isLevelEnding;
int c_Level::m_GetSingleZoneModeFinalBossZone(){
	if(c_Util::m_IsCharacterActive(2)){
		return 1;
	}
	if(c_Util::m_IsCharacterActive(10)){
		return 5;
	}
	return 4;
}
bool c_Level::m_creatingMap;
c_Replay* c_Level::m_replay;
bool c_Level::m_IsFinalBossZone(){
	if(m_isHardcoreMode){
		int t_maxDepth=m_GetMaxDepth();
		return bb_controller_game_currentDepth==t_maxDepth;
	}
	int t_maxZone=m_GetSingleZoneModeFinalBossZone();
	return bb_controller_game_currentZone==t_maxZone;
}
void c_Level::m_MakeHelper(){
	bb_controller_game_numPlayers+=1;
	c_Player* t_dorian=(new c_Player)->m_new(1,3);
	gc_assign(bb_controller_game_players[1],t_dorian);
	c_Player* t_player1=bb_controller_game_players[0];
	gc_assign(t_player1->m_helper,t_dorian);
	t_dorian->m_x=1;
	t_dorian->m_y=0;
	t_dorian->m_isHelper=true;
	t_dorian->p_SetTotallyBlank();
	t_dorian->p_AddItemOfType(String(L"weapon_dagger",13),0,true,false);
	t_dorian->p_AddItemOfType(String(L"armor_platemail_dorian",22),0,true,false);
	t_dorian->p_AddItemOfType(String(L"ring_might",10),0,true,false);
}
c_StackEx* c_Level::m_previousLevelUnkilledStairLockingMinibosses;
String c_Level::m_randSeedString;
void c_Level::m_CreateTutorialMap(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Level.CreateTutorialMap()",25));
}
void c_Level::m_CreateCharSelect(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Level.CreateCharSelect()",24));
}
void c_Level::m_CreateBeastmasterZone1(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Level.CreateBeastmasterZone1()",30));
}
void c_Level::m_CreateBeastmasterZone2(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Level.CreateBeastmasterZone2()",30));
}
void c_Level::m_CreateBeastmasterZone3(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Level.CreateBeastmasterZone3()",30));
}
void c_Level::m_CreateBeastmasterZone4(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Level.CreateBeastmasterZone4()",30));
}
void c_Level::m_CreateBeastmasterZone5(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Level.CreateBeastmasterZone5()",30));
}
void c_Level::m_CreateBossmasterMinibosses(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Level.CreateBossmasterMinibosses()",34));
}
void c_Level::m_CreateBossmasterBosses(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Level.CreateBossmasterBosses()",30));
}
void c_Level::m_CreateExtraModesSelect(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Level.CreateExtraModesSelect()",30));
}
void c_Level::m_CreateTestMap(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Level.CreateTestMap()",21));
}
void c_Level::m_CreateLobby(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Level.CreateLobby()",19));
}
Array<bool > c_Level::m_allCharsCompletion;
bool c_Level::m_isAllCharsRunNoItemsNoShrines;
void c_Level::m_CreateAllCharsSelect(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Level.CreateAllCharsSelect()",28));
}
Array<bool > c_Level::m_allCharsCompletionDLC;
void c_Level::m_CreateAllCharsDLCSelect(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Level.CreateAllCharsDLCSelect()",31));
}
int c_Level::m_bossNumber;
void c_Level::m_CreateFinalBossBattle3(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Level.CreateFinalBossBattle3()",30));
}
void c_Level::m_CreateFinalBossBattle2(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Level.CreateFinalBossBattle2()",30));
}
c_IntMap7* c_Level::m_tiles;
c_List13* c_Level::m_minibossFormerWall;
c_List14* c_Level::m_rooms;
bool c_Level::m_addKeyInSecretChest;
bool c_Level::m_startedShrinerFight;
c_IntList* c_Level::m_triggerList;
bool c_Level::m_mapLightValuesInitialized;
int c_Level::m_mapLightValuesCachedFrame;
int c_Level::m_carveX;
int c_Level::m_carveY;
bool c_Level::m_placedAdditionalRedChest;
bool c_Level::m_placedAdditionalWhiteChest;
bool c_Level::m_placedAdditionalBlackChest;
bool c_Level::m_flawlessVictory;
bool c_Level::m_wasMinibossLockedInBattle;
c_Transmogrifier* c_Level::m_transmogrifier;
c_Conjurer* c_Level::m_conjurer;
c_Shriner* c_Level::m_shriner;
c_Pawnbroker* c_Level::m_pawnbroker;
bool c_Level::m_enemiesDropSingleCoinForThisLevel;
c_RoomData* c_Level::m_firstRoom;
int c_Level::m_levelConstraintX;
int c_Level::m_levelConstraintY;
int c_Level::m_levelConstraintW;
int c_Level::m_levelConstraintH;
int c_Level::m_levelConstraintNum;
c_ExitMap* c_Level::m_exits;
void c_Level::m_DeleteMap(){
	c_NodeEnumerator* t_=m_tiles->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Node25* t_tilesOnXNode=t_->p_NextObject();
		c_NodeEnumerator2* t_2=t_tilesOnXNode->p_Value()->p_ObjectEnumerator();
		while(t_2->p_HasNext()){
			c_Node26* t_tileNode=t_2->p_NextObject();
			t_tileNode->p_Value()->p_Die();
		}
	}
	m_minibossFormerWall->p_Clear();
	m_tiles->p_Clear();
	m_rooms->p_Clear();
	c_Trap::m_trapList->p_Clear();
	m_addKeyInSecretChest=false;
	m_startedShrinerFight=false;
	for(int t_i=0;t_i<bb_controller_game_numPlayers;t_i=t_i+1){
		c_Player* t_player=bb_controller_game_players[t_i];
		if(t_player->m_characterID!=1){
			if(t_player->p_HasItemOfType(String(L"weapon_golden_lute",18),false)){
				t_player->p_AddItemOfType(String(L"weapon_dagger",13),0,true,true);
			}
		}
		if(t_player->m_isHelper){
			t_player->p_AddItemOfType(String(L"weapon_dagger",13),0,true,true);
		}
	}
	c_RenderableObject::m_DeleteAll(true);
	c_ParticleSystem::m_systems->p_Clear();
	for(int t_i2=0;t_i2<bb_controller_game_numPlayers;t_i2=t_i2+1){
		c_Player* t_player2=bb_controller_game_players[t_i2];
		t_player2->m_confusedParticles=0;
	}
	m_triggerList->p_Clear();
	c_Enemy::m_enemiesPaused=false;
	c_Enemy::m_enemiesFearfulDuration=0;
	m_mapLightValuesInitialized=false;
	m_mapLightValuesCachedFrame=-1;
	m_carveX=-10000;
	m_carveY=-10000;
	m_placedAdditionalRedChest=false;
	m_placedAdditionalWhiteChest=false;
	m_placedAdditionalBlackChest=false;
	m_outsideBossChamber=false;
	m_flawlessVictory=true;
	m_wasMinibossLockedInBattle=false;
	m_transmogrifier=0;
	m_conjurer=0;
	m_shriner=0;
	m_pawnbroker=0;
	m_shopkeeperFell=false;
	m_enemiesDropSingleCoinForThisLevel=false;
	m_firstRoom=0;
	m_levelConstraintX=-15;
	m_levelConstraintY=-15;
	m_levelConstraintW=30;
	m_levelConstraintH=30;
	m_levelConstraintNum=0;
	m_exits->p_Clear();
}
bool c_Level::m_isAnyTar;
bool c_Level::m_isConductorLevel;
bool c_Level::m_levelJustStarted;
void c_Level::m_InitNewMap(bool t_saveGameData){
	if(t_saveGameData){
		c_GameData::m_Save();
	}
	c_Camera::m_x=0;
	c_Camera::m_y=0;
	c_Camera::m_seekX=FLOAT(0.0);
	c_Camera::m_seekY=FLOAT(0.0);
	c_Camera::m_fadeInDuration=bb_necrodancergame_FRAMES_PER_SEC;
	c_Camera::m_fadeInCurrent=bb_necrodancergame_FRAMES_PER_SEC;
	c_Camera::m_fixed=false;
	for(int t_i=0;t_i<bb_controller_game_numPlayers;t_i=t_i+1){
		c_Player* t_player=bb_controller_game_players[t_i];
		t_player->p_ResetStateAfterLevel();
	}
	c_Input::m_ResetMovementCounters();
	if((bb_controller_game_controllerGamePointer)!=0){
		bb_controller_game_controllerGamePointer->p_ResetPostDeathReplay();
	}
	bb_logger_Debug->p_Log(String(L"INITNEWMAP: Deleting previous map",33));
	m_DeleteMap();
	m_isAnyTar=false;
	m_isConductorLevel=false;
	m_levelJustStarted=true;
}
void c_Level::m_DisableLevelConstraints(){
	m_levelConstraintX=-1000;
	m_levelConstraintY=-1000;
	m_levelConstraintW=2000;
	m_levelConstraintH=2000;
	m_levelConstraintNum=0;
}
void c_Level::m__CreateWalls(c_List18* t_tiles,int t_xVal,int t_yVal,int t_xMax,int t_yMax,int t_tileType){
	for(int t_x=t_xVal;t_x<=t_xMax;t_x=t_x+1){
		t_tiles->p_AddLast18((new c_TileData)->m_new(t_x,t_yVal,t_tileType));
		t_tiles->p_AddLast18((new c_TileData)->m_new(t_x,t_yMax,t_tileType));
	}
	for(int t_y=t_yVal+1;t_y<t_yMax;t_y=t_y+1){
		t_tiles->p_AddLast18((new c_TileData)->m_new(t_xVal,t_y,t_tileType));
		t_tiles->p_AddLast18((new c_TileData)->m_new(t_xMax,t_y,t_tileType));
	}
}
void c_Level::m__CreateFloor(c_List18* t_tiles,int t_xVal,int t_yVal,int t_xMax,int t_yMax,int t_tileType){
	for(int t_x=t_xVal+1;t_x<t_xMax;t_x=t_x+1){
		for(int t_y=t_yVal+1;t_y<t_yMax;t_y=t_y+1){
			t_tiles->p_AddLast18((new c_TileData)->m_new(t_x,t_y,t_tileType));
		}
	}
}
int c_Level::m_shopX;
int c_Level::m_shopY;
int c_Level::m_shopW;
int c_Level::m_shopH;
c_Tile* c_Level::m_GetTileAt(int t_xVal,int t_yVal){
	if(m_tiles->p_Contains(t_xVal)){
		c_IntMap6* t_tilesOnX=m_tiles->p_Get2(t_xVal);
		if(t_tilesOnX->p_Contains(t_yVal)){
			return t_tilesOnX->p_Get2(t_yVal);
		}
	}
	return 0;
}
int c_Level::m_GetTileTypeAt(int t_xVal,int t_yVal){
	c_Tile* t_tile=m_GetTileAt(t_xVal,t_yVal);
	if(t_tile!=0){
		return t_tile->p_GetType();
	}
	return -1;
}
Float c_Level::m_zone3DividingLineX;
Float c_Level::m_zone3DividingLineY;
bool c_Level::m_IsFinalBoss(){
	int t_58=bb_controller_game_currentLevel;
	if(t_58==-494 || t_58==-493 || t_58==-492 || t_58==-490 || t_58==5){
		return true;
	}
	return false;
}
bool c_Level::m_IsWallAt(int t_xVal,int t_yVal,bool t_destructibleOnly,bool t_torchlessOnly){
	c_Tile* t_tile=m_GetTileAt(t_xVal,t_yVal);
	return ((t_tile)!=0) && t_tile->p_IsWall(false,t_destructibleOnly,false,t_torchlessOnly);
}
bool c_Level::m_IsWallAt2(int t_xVal,int t_yVal){
	return m_IsWallAt(t_xVal,t_yVal,false,false);
}
c_IntMap7* c_Level::m_pendingTiles;
c_Tile* c_Level::m_PlaceTileRemovingExistingTiles(int t_xVal,int t_yVal,int t_tileType,bool t_pending,int t_tilesetOverride,bool t_fromEarthSpell){
	Float t_lightValueCached=FLOAT(.0);
	Float t_alpha=FLOAT(.0);
	bool t_hasBeenSeen=false;
	int t_lightValueFrameNum=0;
	c_Tile* t_tile=m_GetTileAt(t_xVal,t_yVal);
	if(!((t_tile)!=0) || t_tilesetOverride!=-1 || t_tile->m_type!=t_tileType){
		if(!((t_tile)!=0)){
			t_hasBeenSeen=false;
			t_lightValueFrameNum=-1;
			t_lightValueCached=FLOAT(-1.0);
			t_alpha=FLOAT(0.0);
		}else{
			if(t_fromEarthSpell && t_tile->m_trigger!=0 && t_tile->m_trigger!=1){
				return t_tile;
			}
			if(t_tilesetOverride==-1){
				t_tilesetOverride=t_tile->m_tilesetOverride;
			}
			t_hasBeenSeen=t_tile->m_hasBeenSeen;
			t_lightValueFrameNum=t_tile->m_lightValueFrameNum;
			t_lightValueCached=t_tile->m_lightValueCached;
			t_alpha=t_tile->m_image->m_alpha;
			t_tile->p_Die();
		}
		t_tile=(new c_Tile)->m_new(t_xVal,t_yVal,t_tileType,t_pending,t_tilesetOverride);
		t_tile->m_hasBeenSeen=t_hasBeenSeen;
		t_tile->m_lightValueFrameNum=t_lightValueFrameNum;
		t_tile->m_lightValueCached=t_lightValueCached;
		t_tile->m_image->m_alpha=t_alpha;
	}
	return t_tile;
}
c_Tile* c_Level::m_PlaceTileRemovingExistingTiles2(int t_xVal,int t_yVal,int t_tileType){
	return m_PlaceTileRemovingExistingTiles(t_xVal,t_yVal,t_tileType,false,-1,false);
}
c_List18* c_Level::m__CreateRoom(int t_xVal,int t_yVal,int t_wVal,int t_hVal,int t_roomType,int t_originX,int t_originY,int t_originX2,int t_originY2,bool t_wideCorridor,int t_wallType){
	c_List18* t_tiles=(new c_List18)->m_new();
	int t_xMax=t_xVal+t_wVal;
	int t_yMax=t_yVal+t_hVal;
	int t_39=t_roomType;
	if(t_39==0){
		m__CreateWalls(t_tiles,t_xVal,t_yVal,t_xMax,t_yMax,t_wallType);
		m__CreateFloor(t_tiles,t_xVal,t_yVal,t_xMax,t_yMax,0);
	}else{
		if(t_39==1){
			m__CreateWalls(t_tiles,t_xVal,t_yVal,t_xMax,t_yMax,t_wallType);
			int t_leftPillarX=t_xVal+2;
			int t_rightPillarX=t_xVal+t_wVal-2;
			int t_topPillarY=t_yVal+2;
			int t_bottomPillarY=t_yVal+t_hVal-2;
			int t_catacombWallRoll=c_Util::m_RndIntRangeFromZero(6,true);
			for(int t_x=t_xVal+1;t_x<t_xMax;t_x=t_x+1){
				for(int t_y=t_yVal+1;t_y<t_yMax;t_y=t_y+1){
					if((t_x==t_leftPillarX || t_x==t_rightPillarX) && (t_y==t_topPillarY || t_y==t_bottomPillarY)){
						if(t_catacombWallRoll==0){
							t_tiles->p_AddLast18((new c_TileData)->m_new(t_x,t_y,108));
						}else{
							t_tiles->p_AddLast18((new c_TileData)->m_new(t_x,t_y,t_wallType));
						}
					}else{
						t_tiles->p_AddLast18((new c_TileData)->m_new(t_x,t_y,0));
					}
				}
			}
		}else{
			if(t_39==2){
				m__CreateWalls(t_tiles,t_xVal,t_yVal,t_xMax,t_yMax,t_wallType);
				int t_xInsideMin=t_xVal+1;
				int t_xInsideMax=t_xMax-1;
				int t_yInsideMin=t_yVal+1;
				int t_yInsideMax=t_yMax-1;
				for(int t_x2=t_xInsideMin;t_x2<=t_xInsideMax;t_x2=t_x2+1){
					for(int t_y2=t_yInsideMin;t_y2<=t_yInsideMax;t_y2=t_y2+1){
						if(t_x2==t_xInsideMin && t_y2==t_yInsideMin || t_x2==t_xInsideMin && t_y2==t_yInsideMax || t_x2==t_xInsideMax && t_y2==t_yInsideMin || t_x2==t_xInsideMax && t_y2==t_yInsideMax){
							int t_xRem=t_originX-t_x2;
							int t_yRem=t_originY-t_y2;
							if(!t_wideCorridor || c_Util::m_GetDist(t_originX,t_originY,t_originX2+t_xRem,t_originY2+t_yRem)>FLOAT(1.0)){
								Float t_remDist=c_Util::m_GetDist(0,0,t_xRem,t_yRem);
								if(t_remDist>FLOAT(1.0)){
									t_tiles->p_AddLast18((new c_TileData)->m_new(t_x2,t_y2,t_wallType));
									continue;
								}
							}
						}
						t_tiles->p_AddLast18((new c_TileData)->m_new(t_x2,t_y2,0));
					}
				}
			}else{
				if(t_39==3){
					m__CreateWalls(t_tiles,t_xVal,t_yVal,t_xMax,t_yMax,104);
					int t_xMid=t_wVal/2+t_xVal;
					int t_xMidLeft=t_xMid-1;
					int t_xMidRight=t_xMid+1;
					int t_yMid=t_hVal/2+t_yVal;
					int t_yMidAbove=t_yMid-1;
					for(int t_x3=t_xVal+1;t_x3<t_xMax;t_x3=t_x3+1){
						for(int t_y3=t_yVal+1;t_y3<t_yMax;t_y3=t_y3+1){
							if(t_y3==t_yMidAbove){
								if(t_x3==t_xMidLeft || t_x3==t_xMidRight){
									t_tiles->p_AddLast18((new c_TileData)->m_new(t_x3,t_y3,3));
									continue;
								}
							}
							t_tiles->p_AddLast18((new c_TileData)->m_new(t_x3,t_y3,0));
						}
					}
					m_shopX=t_xVal;
					m_shopY=t_yVal;
					m_shopW=t_wVal;
					m_shopH=t_hVal;
				}else{
					if(t_39==5){
						m__CreateFloor(t_tiles,t_xVal,t_yVal,t_xMax,t_yMax,19);
					}else{
						if(t_39==6){
							m__CreateWalls(t_tiles,t_xVal,t_yVal,t_xMax,t_yMax,109);
							m__CreateFloor(t_tiles,t_xVal,t_yVal,t_xMax,t_yMax,14);
						}else{
							if(t_39==7){
								int t_tileType=107;
								if(bb_controller_game_currentLevel==3){
									t_tileType=108;
								}
								for(int t_x4=t_xVal;t_x4<=t_xMax;t_x4=t_x4+1){
									if(m_GetTileTypeAt(t_x4,t_yVal)!=108){
										m_PlaceTileRemovingExistingTiles(t_x4,t_yVal,t_tileType,false,-1,false);
									}
									if(m_GetTileTypeAt(t_x4,t_yMax)!=108){
										m_PlaceTileRemovingExistingTiles(t_x4,t_yMax,t_tileType,false,-1,false);
									}
								}
								for(int t_y4=t_yVal+1;t_y4<t_yMax;t_y4=t_y4+1){
									if(m_GetTileTypeAt(t_xVal,t_y4)!=108){
										m_PlaceTileRemovingExistingTiles(t_xVal,t_y4,t_tileType,false,-1,false);
									}
									if(m_GetTileTypeAt(t_xVal,t_y4)!=108){
										m_PlaceTileRemovingExistingTiles(t_xVal,t_y4,t_tileType,false,-1,false);
									}
								}
								m__CreateFloor(t_tiles,t_xVal,t_yVal,t_xMax,t_yMax,19);
							}else{
								if(t_39==8){
									m__CreateWalls(t_tiles,t_xVal,t_yVal,t_xMax,t_yMax,t_wallType);
									int t_xDiffMin=2;
									if(t_originX!=t_xVal){
										t_xDiffMin=((t_originX==t_xMax)?1:0)+1;
									}
									int t_yDiffMin=2;
									if(t_originY!=t_yVal){
										t_yDiffMin=((t_originY==t_yMax)?1:0)+1;
									}
									for(int t_x5=t_xVal+1;t_x5<t_xMax;t_x5=t_x5+1){
										for(int t_y5=t_yVal+1;t_y5<t_yMax;t_y5=t_y5+1){
											if(t_xDiffMin<bb_math_Abs(t_x5-t_originX) && t_yDiffMin<bb_math_Abs(t_y5-t_originY)){
												t_tiles->p_AddLast18((new c_TileData)->m_new(t_x5,t_y5,t_wallType));
											}else{
												t_tiles->p_AddLast18((new c_TileData)->m_new(t_x5,t_y5,0));
											}
										}
									}
								}else{
									if(t_39==10){
										m__CreateWalls(t_tiles,t_xVal,t_yVal,t_xMax,t_yMax,104);
										m__CreateFloor(t_tiles,t_xVal,t_yVal,t_xMax,t_yMax,0);
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return t_tiles;
}
int c_Level::m_lastCreatedRoomType;
c_Point* c_Level::m_GetExitValue(int t_xVal,int t_yVal){
	c_NodeEnumerator3* t_=m_exits->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Node33* t_node=t_->p_NextObject();
		c_Point* t_ex=t_node->p_Key();
		if(t_ex->m_x==t_xVal && t_ex->m_y==t_yVal){
			return t_node->p_Value();
		}
	}
	return (new c_Point)->m_new(-4,-4);
}
bool c_Level::m_IsExit(int t_xVal,int t_yVal){
	return m_GetExitValue(t_xVal,t_yVal)->m_x!=-4;
}
void c_Level::m_DumpMap(){
	int t_xMin=100;
	int t_yMin=100;
	int t_xMax=-100;
	int t_yMax=-100;
	c_NodeEnumerator* t_=m_tiles->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Node25* t_tilesOnXNode=t_->p_NextObject();
		c_NodeEnumerator2* t_2=t_tilesOnXNode->p_Value()->p_ObjectEnumerator();
		while(t_2->p_HasNext()){
			c_Node26* t_tileNode=t_2->p_NextObject();
			c_Tile* t_tile=t_tileNode->p_Value();
			if(-100<=t_tile->m_x && t_tile->m_x<=100 && (-100<=t_tile->m_y && t_tile->m_y<=100)){
				if(t_tile->m_x<=t_xMin){
					t_xMin=t_tile->m_x;
				}
				if(t_tile->m_y<=t_yMin){
					t_yMin=t_tile->m_y;
				}
				if(t_tile->m_x>=t_xMax){
					t_xMax=t_tile->m_x;
				}
				if(t_tile->m_y>=t_yMax){
					t_yMax=t_tile->m_y;
				}
			}
		}
	}
	bb_logger_Debug->p_WriteLine2(String(L"DUMPMAP:  ****** Start ******",29));
	for(int t_y=t_yMin;t_y<=t_yMax;t_y=t_y+1){
		c_StringStack* t_line=(new c_StringStack)->m_new2();
		for(int t_x=t_xMin;t_x<=t_xMax;t_x=t_x+1){
			c_Tile* t_tile2=0;
			if(m_tiles->p_Contains(t_x)){
				c_IntMap6* t_tilesOnX=m_tiles->p_Get2(t_x);
				if(t_tilesOnX->p_Contains(t_y)){
					t_tile2=t_tilesOnX->p_Get2(t_y);
				}
			}
			String t_value=String(L" ",1);
			if((t_tile2)!=0){
				if(t_tile2->p_GetType()==20){
					t_value=String(L"w",1);
				}else{
					if(t_x==0 && t_y==0){
						t_value=String(L"s",1);
					}else{
						if(m_IsExit(t_x,t_y)){
							t_value=String(L"e",1);
						}else{
							if(t_tile2->p_IsFloor()){
								t_value=String(L".",1);
							}else{
								if(t_tile2->p_IsDoor()){
									t_value=String(L"\\",1);
								}else{
									if(t_tile2->p_IsWall2()){
										if(t_tile2->p_GetType()!=102){
											t_value=String(L"#",1);
										}else{
											t_value=String(L"X",1);
										}
									}else{
										t_value=String(L"?",1);
									}
								}
							}
						}
					}
				}
			}
			t_line->p_Push7(t_value);
		}
		bb_logger_Debug->p_WriteLine2(String(L"DUMPMAP:  ",10)+String().Join(t_line->p_ToArray()));
	}
	bb_logger_Debug->p_WriteLine2(String(L"DUMPMAP:  ******* End *******",29));
}
bool c_Level::m_CreateRoom(int t_xVal,int t_yVal,int t_wVal,int t_hVal,bool t_pending,int t_roomType,int t_originX,int t_originY,int t_originX2,int t_originY2,bool t_wideCorridor,int t_wallType,bool t_allowWallOverlap,bool t_allowWaterTarOoze){
	if(bb_controller_game_currentZone<=3){
		if(m_levelConstraintX>t_xVal || m_levelConstraintY>t_yVal || t_xVal+t_wVal>m_levelConstraintX+m_levelConstraintW || t_yVal+t_hVal>m_levelConstraintY+m_levelConstraintH){
			if((bb_controller_game_currentLevel)!=0){
				m_levelConstraintNum+=1;
				if(m_levelConstraintNum>100){
					m_levelConstraintNum=0;
					m_levelConstraintX-=1;
					m_levelConstraintY-=1;
					m_levelConstraintW+=2;
					m_levelConstraintH+=2;
				}
				return false;
			}
		}
	}
	Float t_catacombWallChance=FLOAT(.0);
	int t_31=bb_controller_game_currentLevel;
	if(t_31==1){
		t_catacombWallChance=FLOAT(0.00);
	}else{
		if(t_31==2){
			t_catacombWallChance=FLOAT(0.10);
		}else{
			if(t_31==3){
				t_catacombWallChance=FLOAT(0.13);
			}else{
				if(t_31==4){
					t_catacombWallChance=FLOAT(0.16);
				}else{
					if(bb_controller_game_currentLevel>4){
						t_catacombWallChance=bb_math_Max2(Float(bb_controller_game_currentLevel)*FLOAT(0.04),FLOAT(0.40));
					}
				}
			}
		}
	}
	Float t_catacombWallRoll=c_Util::m_RndFloatRange(FLOAT(0.0),FLOAT(1.0),true);
	if(t_catacombWallChance>t_catacombWallRoll && t_roomType==-1 && bb_controller_game_currentZone==1){
		t_wallType=108;
	}
	int t_lastCreatedRoomType=t_roomType;
	c_List18* t_tiles=(new c_List18)->m_new();
	int t_32=t_roomType;
	if(t_32==-1){
		if(bb_controller_game_currentZone==1){
			if(bb_controller_game_currentLevel==1){
				if(!c_Util::m_RndBool(true)){
					t_lastCreatedRoomType=0;
					t_tiles=m__CreateRoom(t_xVal,t_yVal,t_wVal,t_hVal,0,t_originX,t_originY,t_originX2,t_originY2,t_wideCorridor,t_wallType);
				}else{
					t_lastCreatedRoomType=2;
					t_tiles=m__CreateRoom(t_xVal,t_yVal,t_wVal,t_hVal,2,t_originX,t_originY,t_originX2,t_originY2,t_wideCorridor,t_wallType);
				}
			}else{
				int t_33=c_Util::m_RndIntRangeFromZero(2,true);
				if(t_33==0){
					t_lastCreatedRoomType=0;
					t_tiles=m__CreateRoom(t_xVal,t_yVal,t_wVal,t_hVal,0,t_originX,t_originY,t_originX2,t_originY2,t_wideCorridor,t_wallType);
				}else{
					if(t_33==1){
						t_lastCreatedRoomType=2;
						t_tiles=m__CreateRoom(t_xVal,t_yVal,t_wVal,t_hVal,2,t_originX,t_originY,t_originX2,t_originY2,t_wideCorridor,t_wallType);
					}else{
						if(t_33==2){
							t_lastCreatedRoomType=1;
							t_tiles=m__CreateRoom(t_xVal,t_yVal,t_wVal,t_hVal,1,t_originX,t_originY,t_originX2,t_originY2,t_wideCorridor,t_wallType);
						}
					}
				}
			}
		}else{
			if(bb_controller_game_currentZone==4){
				if(!((c_Util::m_RndIntRangeFromZero(1,true))!=0)){
					t_lastCreatedRoomType=-1;
					t_tiles=m__CreateRoom(t_xVal,t_yVal,t_wVal,t_hVal,0,t_originX,t_originY,t_originX2,t_originY2,t_wideCorridor,t_wallType);
				}else{
					t_lastCreatedRoomType=0;
					t_tiles=m__CreateRoom(t_xVal,t_yVal,t_wVal,t_hVal,0,t_originX,t_originY,t_originX2,t_originY2,t_wideCorridor,t_wallType);
				}
			}else{
				int t_34=c_Util::m_RndIntRangeFromZero(3,true);
				if(t_34==0){
					t_lastCreatedRoomType=0;
					t_tiles=m__CreateRoom(t_xVal,t_yVal,t_wVal,t_hVal,0,t_originX,t_originY,t_originX2,t_originY2,t_wideCorridor,t_wallType);
				}else{
					if(t_34==1){
						t_lastCreatedRoomType=2;
						t_tiles=m__CreateRoom(t_xVal,t_yVal,t_wVal,t_hVal,2,t_originX,t_originY,t_originX2,t_originY2,t_wideCorridor,t_wallType);
					}else{
						if(t_34==2){
							t_lastCreatedRoomType=1;
							t_tiles=m__CreateRoom(t_xVal,t_yVal,t_wVal,t_hVal,1,t_originX,t_originY,t_originX2,t_originY2,t_wideCorridor,t_wallType);
						}else{
							if(t_34==3){
								t_lastCreatedRoomType=0;
								t_tiles=m__CreateRoom(t_xVal,t_yVal,t_wVal,t_hVal,8,t_originX,t_originY,t_originX2,t_originY2,t_wideCorridor,t_wallType);
							}
						}
					}
				}
			}
		}
	}else{
		if(t_32==1 || t_32==2 || t_32==3 || t_32==5 || t_32==6 || t_32==7 || t_32==8 || t_32==10){
			t_tiles=m__CreateRoom(t_xVal,t_yVal,t_wVal,t_hVal,t_roomType,t_originX,t_originY,t_originX2,t_originY2,t_wideCorridor,t_wallType);
		}else{
			t_tiles=m__CreateRoom(t_xVal,t_yVal,t_wVal,t_hVal,0,t_originX,t_originY,t_originX2,t_originY2,t_wideCorridor,t_wallType);
		}
	}
	if(t_allowWaterTarOoze){
		int t_liquidRoll=c_Util::m_RndIntRangeFromZero(100,true);
		int t_numLiquidMaxPart1=bb_math_Min(bb_controller_game_currentLevel-1,5);
		int t_numLiquidMaxPart2=c_Util::m_RndIntRange(2,7,true,-1);
		int t_numLiquidMaxPart3=c_Util::m_RndIntRangeFromZero(t_numLiquidMaxPart1,true);
		int t_numLiquidMax=t_numLiquidMaxPart2+t_numLiquidMaxPart3;
		int t_liquidTileType=0;
		int t_35=bb_controller_game_currentZone;
		if(t_35==2){
			t_numLiquidMaxPart2=c_Util::m_RndIntRange(2,7,true,-1);
			t_numLiquidMaxPart3=c_Util::m_RndIntRangeFromZero(t_numLiquidMaxPart1,true);
			t_numLiquidMax=t_numLiquidMaxPart2+t_numLiquidMaxPart3;
			t_liquidTileType=8;
		}else{
			if(t_35==4){
				t_liquidTileType=17;
			}else{
				t_liquidTileType=4;
			}
		}
		bool t_placeLiquid=false;
		int t_36=bb_controller_game_currentZone;
		if(t_36==1 || t_36==2 || t_36==4){
			int t_37=bb_controller_game_currentLevel;
			if(t_37==1){
				if(t_liquidRoll<=5){
					t_placeLiquid=true;
				}
			}else{
				if(t_37==2){
					if(t_liquidRoll<=25){
						t_placeLiquid=true;
					}
				}else{
					if(t_37==3){
						if(t_liquidRoll<=45){
							t_placeLiquid=true;
						}
					}else{
						if(bb_controller_game_currentLevel>3){
							if(t_liquidRoll<=65){
								t_placeLiquid=true;
							}
						}
					}
				}
			}
		}
		int t_38=t_lastCreatedRoomType;
		if(t_38==0 || t_38==1 || t_38==2){
		}else{
			t_placeLiquid=false;
		}
		if(t_placeLiquid){
			int t_numLiquid=0;
			c_Enumerator8* t_=t_tiles->p_ObjectEnumerator();
			while(t_->p_HasNext()){
				c_TileData* t_tile=t_->p_NextObject();
				if(t_tile->m_type==0){
					t_numLiquid+=1;
				}
			}
			int t_numFloorToConvert=bb_math_Min(t_numLiquid,t_numLiquidMax);
			int t_numFloorToSkip=c_Util::m_RndIntRangeFromZero(t_numLiquid-1,true);
			bool t_createdFirstLiquid=false;
			int t_lastLiquidX=0;
			int t_lastLiquidY=0;
			int t_i=1000;
			for(t_i=t_i-1;t_i>0;t_i=t_i+-1){
				c_Enumerator8* t_2=t_tiles->p_ObjectEnumerator();
				while(t_2->p_HasNext()){
					c_TileData* t_tile2=t_2->p_NextObject();
					if(t_tile2->m_type==0){
						if(!t_createdFirstLiquid){
							t_numFloorToSkip-=1;
							if(t_numFloorToSkip<0){
								t_lastLiquidX=t_tile2->m_x;
								t_lastLiquidY=t_tile2->m_y;
								t_tile2->m_type=t_liquidTileType;
								t_numFloorToConvert-=1;
								t_createdFirstLiquid=true;
								break;
							}
						}else{
							Float t_distanceToLastLiquid=c_Util::m_GetDist(t_lastLiquidX,t_lastLiquidY,t_tile2->m_x,t_tile2->m_y);
							if(t_distanceToLastLiquid<=FLOAT(1.01)){
								int t_convertToLiquidRoll=c_Util::m_RndIntRangeFromZero(3,true);
								if(t_convertToLiquidRoll==0){
									t_lastLiquidX=t_tile2->m_x;
									t_lastLiquidY=t_tile2->m_y;
									t_tile2->m_type=t_liquidTileType;
									t_numFloorToConvert-=1;
									break;
								}
							}
						}
					}
				}
				if(t_numFloorToConvert<=0){
					break;
				}
			}
			if(t_i==0){
				bb_logger_Debug->p_Log(String(L"CREATEROOM abort: failed to place liquid",40));
				return false;
			}
		}
	}
	c_Enumerator8* t_3=t_tiles->p_ObjectEnumerator();
	while(t_3->p_HasNext()){
		c_TileData* t_tile3=t_3->p_NextObject();
		int t_tileX=t_tile3->m_x;
		int t_tileY=t_tile3->m_y;
		int t_tileType=t_tile3->m_type;
		if(t_pending && m_GetTileTypeAt(t_tileX,t_tileY)!=-1){
			if(!t_allowWallOverlap){
				return false;
			}
			if(!m_IsWallAt(t_tileX,t_tileY,false,false)){
				return false;
			}
			(new c_Tile)->m_new(t_tileX,t_tileY,t_tileType,true,-1);
		}else{
			m_PlaceTileRemovingExistingTiles(t_tileX,t_tileY,t_tileType,t_pending,-1,false);
		}
	}
	m_lastCreatedRoomType=t_lastCreatedRoomType;
	bb_logger_Debug->p_WriteLine2(String(L"Placed room (",13)+String(t_xVal)+String(L", ",2)+String(t_yVal)+String(L", ",2)+String(t_wVal)+String(L", ",2)+String(t_hVal)+String(L", ",2)+String(t_originX)+String(L", ",2)+String(t_originY)+String(L")",1));
	return true;
}
bool c_Level::m_CreateRoom2(int t_xVal,int t_yVal,int t_wVal,int t_hVal,bool t_pending,int t_roomType,bool t_allowWaterTarOoze){
	return m_CreateRoom(t_xVal,t_yVal,t_wVal,t_hVal,t_pending,t_roomType,-1,-1,-1,-1,false,100,false,t_allowWaterTarOoze);
}
bool c_Level::m_CreateRoom3(int t_xVal,int t_yVal,int t_wVal,int t_hVal,bool t_pending,int t_roomType){
	return m_CreateRoom2(t_xVal,t_yVal,t_wVal,t_hVal,t_pending,t_roomType,true);
}
void c_Level::m_EnsureBossTraining(String t_name){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Level.EnsureBossTraining(String)",32));
}
void c_Level::m_AddExit(int t_xVal,int t_yVal,int t_levelPointer,int t_zonePointer){
	c_Point* t_location=(new c_Point)->m_new(t_xVal,t_yVal);
	c_Point* t_floor=(new c_Point)->m_new(t_levelPointer,t_zonePointer);
	m_exits->p_Set15(t_location,t_floor);
}
bool c_Level::m_skipNextPenaltyBox;
bool c_Level::m_WantPenaltyBox(){
	return m_previousLevelUnkilledStairLockingMinibosses->p_Length()>0 && !m_pacifismModeOn && !m_isLevelEditor && c_ControllerLevelEditor::m_playingLevel==-1 && !m_skipNextPenaltyBox;
}
void c_Level::m_PlaceFirstBossRoom(String t_bossTrainingName,int t_tilesetOverride){
	m_CreateRoom3(-3,-3,6,6,false,6);
	if(t_bossTrainingName!=String()){
		m_EnsureBossTraining(t_bossTrainingName);
	}
	if(m_isTrainingMode){
		m_AddExit(2,0,-2,1);
		m_PlaceTileRemovingExistingTiles2(2,0,2);
	}
	if(c_Util::m_IsCharacterActive(13)){
		if(m_WantPenaltyBox()){
			c_Sarcophagus* t_sarcophagus=(new c_Sarcophagus)->m_new(-2,2,1);
			t_sarcophagus->m_exemptFromPause=true;
			t_sarcophagus->m_hasBeenVisible=true;
			t_sarcophagus->m_coinsToDrop=0;
		}
	}
	m_PlaceTileRemovingExistingTiles2(-1,-1,109);
	m_PlaceTileRemovingExistingTiles2(1,-1,109);
	m_PlaceTileRemovingExistingTiles2(-1,1,109);
	m_PlaceTileRemovingExistingTiles2(1,1,109);
	m_GetTileAt(-1,-1)->p_AddTorch();
	m_GetTileAt(1,-1)->p_AddTorch();
	m_GetTileAt(-1,1)->p_AddTorch();
	m_GetTileAt(1,1)->p_AddTorch();
	for(int t_y=-3;t_y>=-5;t_y=t_y+-1){
		for(int t_x=-1;t_x<=1;t_x=t_x+1){
			if(t_y==-3){
				m_PlaceTileRemovingExistingTiles(t_x,t_y,14,false,t_tilesetOverride,false);
			}else{
				m_PlaceTileRemovingExistingTiles2(t_x,t_y,14);
			}
		}
	}
	m_PlaceTileRemovingExistingTiles2(-2,-4,109);
	m_PlaceTileRemovingExistingTiles2(2,-4,109);
	m_PlaceTileRemovingExistingTiles2(-2,-5,109);
	m_PlaceTileRemovingExistingTiles2(2,-5,109);
}
void c_Level::m_PlaceFirstBossRoom2(String t_bossTrainingName){
	m_PlaceFirstBossRoom(t_bossTrainingName,-1);
}
void c_Level::m_PlaceFirstBossRoom3(){
	m_PlaceFirstBossRoom2(String());
}
void c_Level::m_SetMagicBarrierAt(int t_xVal,int t_yVal,bool t_on){
	c_Tile* t_tile=m_GetTileAt(t_xVal,t_yVal);
	if(t_tile!=0){
		t_tile->m_magicBarrier=t_on;
	}
}
void c_Level::m_SetMagicBarrier(bool t_on){
	for(int t_x=-2;t_x<=3;t_x=t_x+1){
		m_SetMagicBarrierAt(t_x,-7,t_on);
	}
}
void c_Level::m_PaintTriggerInterior(int t_x,int t_y,int t_w,int t_h,int t_trigger){
	for(int t_a=t_x+1;t_a<=t_x+t_w-1;t_a=t_a+1){
		for(int t_b=t_y+1;t_b<=t_y+t_h-1;t_b=t_b+1){
			m_GetTileAt(t_a,t_b)->p_SetTrigger(t_trigger);
		}
	}
}
c_Point* c_Level::m_GetRandomOffsetPoint(){
	int t_x=0;
	int t_y=0;
	if(c_Util::m_RndIntRangeFromZero(1,true)!=0){
		if(c_Util::m_RndIntRangeFromZero(1,true)!=0){
			t_x=1;
		}else{
			t_x=-1;
		}
	}else{
		if(c_Util::m_RndIntRangeFromZero(1,true)!=0){
			t_y=1;
		}else{
			t_y=-1;
		}
	}
	return (new c_Point)->m_new(t_x,t_y);
}
void c_Level::m_BossMaybeMinibossesAt(int t_x1,int t_y1,int t_x2,int t_y2){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Level.BossMaybeMinibossesAt(Int, Int, Int, Int)",47));
}
void c_Level::m_CreateBossBattle1(){
	bb_logger_Debug->p_Log(String(L"CREATEBOSSBATTLE1: Creating conga line boss battle.",51));
	m_InitNewMap(true);
	m_DisableLevelConstraints();
	m_PlaceFirstBossRoom2(String(L"conga",5));
	m_CreateRoom3(-8,-18,16,12,false,6);
	for(int t_x=-1;t_x<=1;t_x=t_x+1){
		m_PlaceTileRemovingExistingTiles2(t_x,-6,103);
	}
	m_GetTileAt(-2,-6)->p_AddTorch();
	m_GetTileAt(2,-6)->p_AddTorch();
	m_GetTileAt(0,-5)->p_AddTextLabel(String(L"text/TEMP_conga_line.png",24),-1,4,FLOAT(2.0),true,false);
	for(int t_x2=-1;t_x2<=1;t_x2=t_x2+1){
		m_GetTileAt(t_x2,-6)->p_SetDoorTrigger(2);
	}
	m_SetMagicBarrier(true);
	m_PaintTriggerInterior(-8,-18,16,12,1);
	c_KingConga* t_kingConga=(new c_KingConga)->m_new(0,-17,1);
	t_kingConga->p_ActivateLight(FLOAT(0.01),FLOAT(0.02));
	c_Tile* t_throneTile=m_PlaceTileRemovingExistingTiles2(0,-17,108);
	t_throneTile->p_SetDigTrigger(24);
	t_throneTile->p_AddTorch();
	c_Point* t_zombieBasePoint=m_GetRandomOffsetPoint();
	if(t_zombieBasePoint->m_x<0){
		t_zombieBasePoint->m_x=1;
	}
	if(t_zombieBasePoint->m_y>0){
		t_zombieBasePoint->m_y=-1;
	}
	c_ZombieSnake* t_zombieLeftBottom1=(new c_ZombieSnake)->m_new(t_zombieBasePoint->m_x-3,t_zombieBasePoint->m_y-15,1);
	c_ZombieSnake* t_zombieLeftBottom2=(new c_ZombieSnake)->m_new(t_zombieBasePoint->m_x-4,t_zombieBasePoint->m_y-15,1);
	c_ZombieSnake* t_zombieLeftBottom3=(new c_ZombieSnake)->m_new(t_zombieBasePoint->m_x-5,t_zombieBasePoint->m_y-15,1);
	c_ZombieSnake* t_zombieLeftBottom4=(new c_ZombieSnake)->m_new(t_zombieBasePoint->m_x-6,t_zombieBasePoint->m_y-15,1);
	c_ZombieSnake* t_zombieLeftTop1=(new c_ZombieSnake)->m_new(t_zombieBasePoint->m_x-6,t_zombieBasePoint->m_y-16,1);
	c_ZombieSnake* t_zombieLeftTop2=(new c_ZombieSnake)->m_new(t_zombieBasePoint->m_x-5,t_zombieBasePoint->m_y-16,1);
	c_ZombieSnake* t_zombieLeftTop3=(new c_ZombieSnake)->m_new(t_zombieBasePoint->m_x-4,t_zombieBasePoint->m_y-16,1);
	c_ZombieSnake* t_zombieLeftTop4=(new c_ZombieSnake)->m_new(t_zombieBasePoint->m_x-3,t_zombieBasePoint->m_y-16,1);
	t_zombieLeftBottom1->m_movePriority=99200000;
	t_zombieLeftBottom1->p_SetChild(t_zombieLeftBottom2);
	t_zombieLeftBottom2->p_SetParent(t_zombieLeftBottom1);
	t_zombieLeftBottom2->p_SetChild(t_zombieLeftBottom3);
	t_zombieLeftBottom3->p_SetParent(t_zombieLeftBottom2);
	t_zombieLeftBottom3->p_SetChild(t_zombieLeftBottom4);
	t_zombieLeftBottom4->p_SetParent(t_zombieLeftBottom3);
	t_zombieLeftBottom4->p_SetChild(t_zombieLeftTop1);
	t_zombieLeftTop1->p_SetParent(t_zombieLeftBottom4);
	t_zombieLeftTop1->p_SetChild(t_zombieLeftTop2);
	t_zombieLeftTop2->p_SetParent(t_zombieLeftTop1);
	t_zombieLeftTop2->p_SetChild(t_zombieLeftTop3);
	t_zombieLeftTop3->p_SetParent(t_zombieLeftTop2);
	t_zombieLeftTop3->p_SetChild(t_zombieLeftTop4);
	t_zombieLeftTop4->p_SetParent(t_zombieLeftTop3);
	t_kingConga->p_AddZombieFriend(t_zombieLeftBottom1);
	t_kingConga->p_AddZombieFriend(t_zombieLeftBottom2);
	t_kingConga->p_AddZombieFriend(t_zombieLeftBottom3);
	t_kingConga->p_AddZombieFriend(t_zombieLeftBottom4);
	t_kingConga->p_AddZombieFriend(t_zombieLeftTop1);
	t_kingConga->p_AddZombieFriend(t_zombieLeftTop2);
	t_kingConga->p_AddZombieFriend(t_zombieLeftTop3);
	t_kingConga->p_AddZombieFriend(t_zombieLeftTop4);
	c_ZombieSnake* t_zombieRightBottom1=(new c_ZombieSnake)->m_new(t_zombieBasePoint->m_x+3,t_zombieBasePoint->m_y-15,1);
	c_ZombieSnake* t_zombieRightBottom2=(new c_ZombieSnake)->m_new(t_zombieBasePoint->m_x+4,t_zombieBasePoint->m_y-15,1);
	c_ZombieSnake* t_zombieRightBottom3=(new c_ZombieSnake)->m_new(t_zombieBasePoint->m_x+5,t_zombieBasePoint->m_y-15,1);
	c_ZombieSnake* t_zombieRightBottom4=(new c_ZombieSnake)->m_new(t_zombieBasePoint->m_x+6,t_zombieBasePoint->m_y-15,1);
	c_ZombieSnake* t_zombieRightTop1=(new c_ZombieSnake)->m_new(t_zombieBasePoint->m_x+6,t_zombieBasePoint->m_y-16,1);
	c_ZombieSnake* t_zombieRightTop2=(new c_ZombieSnake)->m_new(t_zombieBasePoint->m_x+5,t_zombieBasePoint->m_y-16,1);
	c_ZombieSnake* t_zombieRightTop3=(new c_ZombieSnake)->m_new(t_zombieBasePoint->m_x+4,t_zombieBasePoint->m_y-16,1);
	c_ZombieSnake* t_zombieRightTop4=(new c_ZombieSnake)->m_new(t_zombieBasePoint->m_x+3,t_zombieBasePoint->m_y-16,1);
	t_zombieRightBottom1->m_movePriority=99200000;
	t_zombieRightBottom1->p_SetChild(t_zombieRightBottom2);
	t_zombieRightBottom2->p_SetParent(t_zombieRightBottom1);
	t_zombieRightBottom2->p_SetChild(t_zombieRightBottom3);
	t_zombieRightBottom3->p_SetParent(t_zombieRightBottom2);
	t_zombieRightBottom3->p_SetChild(t_zombieRightBottom4);
	t_zombieRightBottom4->p_SetParent(t_zombieRightBottom3);
	t_zombieRightBottom4->p_SetChild(t_zombieRightTop1);
	t_zombieRightTop1->p_SetParent(t_zombieRightBottom4);
	t_zombieRightTop1->p_SetChild(t_zombieRightTop2);
	t_zombieRightTop2->p_SetParent(t_zombieRightTop1);
	t_zombieRightTop2->p_SetChild(t_zombieRightTop3);
	t_zombieRightTop3->p_SetParent(t_zombieRightTop2);
	t_zombieRightTop3->p_SetChild(t_zombieRightTop4);
	t_zombieRightTop4->p_SetParent(t_zombieRightTop3);
	t_kingConga->p_AddZombieFriend(t_zombieRightBottom1);
	t_kingConga->p_AddZombieFriend(t_zombieRightBottom2);
	t_kingConga->p_AddZombieFriend(t_zombieRightBottom3);
	t_kingConga->p_AddZombieFriend(t_zombieRightBottom4);
	t_kingConga->p_AddZombieFriend(t_zombieRightTop1);
	t_kingConga->p_AddZombieFriend(t_zombieRightTop2);
	t_kingConga->p_AddZombieFriend(t_zombieRightTop3);
	t_kingConga->p_AddZombieFriend(t_zombieRightTop4);
	c_Point* t_point=0;
	int t_7=bb_controller_game_currentZone;
	if(t_7==1){
		t_point=m_GetRandomOffsetPoint();
		if(t_point->m_y<0){
			t_point->m_y=1;
		}
		c_Ghost* t_leftGhost=(new c_Ghost)->m_new(-7,t_point->m_y-17,1);
		t_leftGhost->p_ActivateLight(FLOAT(0.01),FLOAT(0.02));
		t_point=m_GetRandomOffsetPoint();
		if(t_point->m_y<0){
			t_point->m_y=1;
		}
		c_Ghost* t_rightGhost=(new c_Ghost)->m_new(7,t_point->m_y-17,1);
		t_rightGhost->p_ActivateLight(FLOAT(0.01),FLOAT(0.02));
		c_Bat* t_leftBat=(new c_Bat)->m_new(-5,-11,1);
		t_leftBat->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
		c_Bat* t_rightBat=(new c_Bat)->m_new(5,-11,1);
		t_rightBat->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
		c_Bat* t_redBat=(new c_Bat)->m_new(0,-17,2);
		t_redBat->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
	}else{
		if(t_7==2){
			c_SkeletonMage* t_leftSkeletonMage=(new c_SkeletonMage)->m_new(-7,16,1);
			t_leftSkeletonMage->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
			c_SkeletonMage* t_rightSkeletonMage=(new c_SkeletonMage)->m_new(7,15,3);
			t_rightSkeletonMage->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
			t_point=m_GetRandomOffsetPoint();
			if(t_point->m_y<0){
				t_point->m_y=0;
			}
			c_Armadillo* t_leftArmadillo=(new c_Armadillo)->m_new(t_point->m_x-5,t_point->m_y-10,1);
			t_leftArmadillo->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
			t_point=m_GetRandomOffsetPoint();
			if(t_point->m_y>0){
				t_point->m_y=0;
			}
			c_Armadillo* t_rightArmadillo=(new c_Armadillo)->m_new(t_point->m_x+5,t_point->m_y-12,1);
			t_rightArmadillo->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
			t_point=m_GetRandomOffsetPoint();
			c_Armadillo* t_centerArmadillo=(new c_Armadillo)->m_new(t_point->m_x,t_point->m_y-13,2);
			t_centerArmadillo->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
			c_Bat* t_leftBat2=(new c_Bat)->m_new(-6,-8,1);
			t_leftBat2->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
			c_Bat* t_rightBat2=(new c_Bat)->m_new(6,-8,2);
			t_rightBat2->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
		}else{
			if(t_7==3){
				c_Hellhound* t_hellhound=(new c_Hellhound)->m_new(-7,-16,1);
				t_hellhound->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
				c_Yeti* t_yeti=(new c_Yeti)->m_new(7,-15,1);
				t_yeti->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
				t_point=m_GetRandomOffsetPoint();
				if(t_point->m_y>0){
					t_point->m_y=-1;
				}
				c_Goblin* t_leftGoblin=(new c_Goblin)->m_new(-5,t_point->m_y-8,2);
				t_leftGoblin->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
				t_point=m_GetRandomOffsetPoint();
				if(t_point->m_y>0){
					t_point->m_y=-1;
				}
				c_Goblin* t_rightGoblin=(new c_Goblin)->m_new(5,t_point->m_y-8,1);
				t_rightGoblin->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
				t_point=m_GetRandomOffsetPoint();
				if(t_point->m_y<0){
					t_point->m_y=1;
				}
				c_IceElemental* t_iceElemental=(new c_IceElemental)->m_new(t_point->m_x-1,t_point->m_y-13,1);
				t_iceElemental->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
				t_point=m_GetRandomOffsetPoint();
				if(t_point->m_y<0){
					t_point->m_y=1;
				}
				c_FireElemental* t_fireElemental=(new c_FireElemental)->m_new(t_point->m_x+1,t_point->m_y-13,1);
				t_fireElemental->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
				c_Bat* t_leftBat3=(new c_Bat)->m_new(-6,-8,1);
				t_leftBat3->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
				c_Bat* t_rightBat3=(new c_Bat)->m_new(6,-8,2);
				t_rightBat3->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
			}else{
				if(t_7==4){
					if(!c_Util::m_IsCharacterActive(3)){
						c_Blademaster* t_blademaster=(new c_Blademaster)->m_new(-7,-16,2);
						t_blademaster->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
					}else{
						c_Harpy* t_harpy=(new c_Harpy)->m_new(-7,-16,1);
						t_harpy->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
					}
					c_Warlock* t_warlock=(new c_Warlock)->m_new(7,-15,2);
					t_warlock->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
					t_point=m_GetRandomOffsetPoint();
					if(t_point->m_y>0){
						t_point->m_y=-1;
					}
					c_GoblinBomber* t_leftGoblinBomber=(new c_GoblinBomber)->m_new(-5,t_point->m_y-7,1);
					t_leftGoblinBomber->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
					t_point=m_GetRandomOffsetPoint();
					if(t_point->m_y>0){
						t_point->m_y=-1;
					}
					c_GoblinBomber* t_rightGoblinBomber=(new c_GoblinBomber)->m_new(5,t_point->m_y-8,1);
					t_rightGoblinBomber->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
					t_point=m_GetRandomOffsetPoint();
					if(t_point->m_y<0){
						t_point->m_y=1;
					}
					if(!c_Util::m_IsCharacterActive(3)){
						c_Blademaster* t_blademaster2=(new c_Blademaster)->m_new(t_point->m_x-1,t_point->m_y-13,1);
						t_blademaster2->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
					}else{
						c_Harpy* t_harpy2=(new c_Harpy)->m_new(t_point->m_x-1,t_point->m_y-13,1);
						t_harpy2->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
					}
					t_point=m_GetRandomOffsetPoint();
					if(t_point->m_y<0){
						t_point->m_y=1;
					}
					c_Warlock* t_warlock2=(new c_Warlock)->m_new(t_point->m_x+1,t_point->m_y-13,1);
					c_Bat* t_leftBat4=(new c_Bat)->m_new(-6,-8,1);
					t_leftBat4->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
					c_Bat* t_rightBat4=(new c_Bat)->m_new(6,-8,4);
					t_rightBat4->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
				}else{
					c_ElectricMage* t_leftElectricMage=(new c_ElectricMage)->m_new(-7,16,1);
					t_leftElectricMage->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
					if(!c_Util::m_IsCharacterActive(2)){
						c_ElectricMage* t_rightElectricMage=(new c_ElectricMage)->m_new(7,-15,3);
						t_rightElectricMage->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
					}
					t_point=m_GetRandomOffsetPoint();
					if(t_point->m_y>0){
						t_point->m_y=-1;
					}
					if(!c_Util::m_IsCharacterActive(2)){
						c_Devil* t_leftDevil=(new c_Devil)->m_new(-5,t_point->m_y-7,2);
						t_leftDevil->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
					}
					t_point=m_GetRandomOffsetPoint();
					if(t_point->m_y>0){
						t_point->m_y=-1;
					}
					c_Devil* t_rightDevil=(new c_Devil)->m_new(5,t_point->m_y-8,1);
					t_rightDevil->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
					t_point=m_GetRandomOffsetPoint();
					if(t_point->m_y<0){
						t_point->m_y=1;
					}
					if(t_point->m_x>0){
						t_point->m_x=-1;
					}
					c_EvilEye* t_leftEvilEye=(new c_EvilEye)->m_new(t_point->m_x-1,t_point->m_y-13,1);
					t_leftEvilEye->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
					t_point=m_GetRandomOffsetPoint();
					if(t_point->m_y<0){
						t_point->m_y=1;
					}
					if(!c_Util::m_IsCharacterActive(2)){
						c_EvilEye* t_rightEvilEye=(new c_EvilEye)->m_new(t_point->m_x+1,t_point->m_y-13,2);
						t_rightEvilEye->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
					}
					c_Bat* t_leftBat5=(new c_Bat)->m_new(-6,-8,1);
					t_leftBat5->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
					c_Bat* t_rightBat5=(new c_Bat)->m_new(6,-8,2);
					t_rightBat5->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
				}
			}
		}
	}
	m_BossMaybeMinibossesAt(-6,0,5,0);
	int t_8=bb_controller_game_currentZone;
	if(t_8==1){
		(new c_SpikeTrap)->m_new(-5,-11);
		(new c_SpikeTrap)->m_new(5,-11);
		(new c_SpeedUpTrap)->m_new(0,-14);
		(new c_SpikeTrap)->m_new(-5,-14);
		(new c_SpikeTrap)->m_new(5,-14);
		(new c_SpikeTrap)->m_new(-5,-8);
		(new c_SpikeTrap)->m_new(5,-8);
	}else{
		(new c_ConfuseTrap)->m_new(-5,-11);
		(new c_ConfuseTrap)->m_new(5,-11);
		(new c_SpeedUpTrap)->m_new(0,-14);
		(new c_SpeedUpTrap)->m_new(-5,-14);
		(new c_SpeedUpTrap)->m_new(5,-14);
		(new c_ConfuseTrap)->m_new(-5,-8);
		(new c_ConfuseTrap)->m_new(5,-8);
	}
	c_Enemy::m_enemiesPaused=true;
}
void c_Level::m_ClearMinibossWall(){
	c_Enumerator9* t_=m_minibossFormerWall->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_MinibossTileData* t_tileData=t_->p_NextObject();
		c_Tile* t_tile=m_GetTileAt(t_tileData->m_x,t_tileData->m_y);
		if(t_tile!=0 && !t_tile->p_IsFloor()){
			c_Tile* t_newTile=m_PlaceTileRemovingExistingTiles(t_tileData->m_x,t_tileData->m_y,t_tileData->m_type,false,-1,false);
			t_newTile->m_wireMask=t_tileData->m_wireMask;
		}
	}
}
int c_Level::m_ActivateTrigger(int t_triggerNum,c_Entity* t_ent,c_RenderableObject* t_target){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Level.ActivateTrigger(Int, Entity, RenderableObject)",52));
	return 0;
}
void c_Level::m_CreateBossBattle2(){
	bb_logger_Debug->p_Log(String(L"CREATEBOSSBATTLE2: Creating death metal boss battle.",52));
	m_InitNewMap(true);
	m_DisableLevelConstraints();
	m_PlaceFirstBossRoom2(String(L"deathmetal",10));
	m_CreateRoom3(-6,-16,12,10,false,6);
	for(int t_x=-1;t_x<=1;t_x=t_x+1){
		m_PlaceTileRemovingExistingTiles2(t_x,-6,103);
	}
	m_GetTileAt(-2,-6)->p_AddTorch();
	m_GetTileAt(2,-6)->p_AddTorch();
	for(int t_x2=-1;t_x2<=1;t_x2=t_x2+1){
		m_GetTileAt(t_x2,-6)->p_SetDoorTrigger(2);
	}
	m_SetMagicBarrier(true);
	m_PaintTriggerInterior(-6,-16,12,10,1);
	c_Point* t_point=m_GetRandomOffsetPoint();
	c_DeathMetal* t_deathMetal=(new c_DeathMetal)->m_new(t_point->m_x,-11,1);
	t_deathMetal->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
	int t_enemyType1=0;
	int t_enemyType2=0;
	int t_9=bb_controller_game_currentZone;
	if(t_9==1){
		t_enemyType1=11;
		t_enemyType2=11;
	}else{
		if(t_9==2){
			t_enemyType1=112;
			t_enemyType2=112;
		}else{
			if(t_9==3){
				t_enemyType1=210;
				t_enemyType2=209;
			}else{
				if(t_9==4){
					t_enemyType1=319;
					t_enemyType2=320;
				}else{
					t_enemyType1=717;
					t_enemyType2=719;
				}
			}
		}
	}
	t_point=m_GetRandomOffsetPoint();
	c_Enemy* t_enemy11=c_Enemy::m_MakeEnemy(t_point->m_x-3,bb_math_Abs(t_point->m_y)-15,t_enemyType1);
	t_enemy11->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
	t_point=m_GetRandomOffsetPoint();
	c_Enemy* t_enemy21=c_Enemy::m_MakeEnemy(t_point->m_x+3,bb_math_Abs(t_point->m_y)-15,t_enemyType2);
	t_enemy21->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
	t_point=m_GetRandomOffsetPoint();
	c_Enemy* t_enemy22=c_Enemy::m_MakeEnemy(t_point->m_x-3,t_point->m_y-9,t_enemyType2);
	t_enemy22->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
	t_point=m_GetRandomOffsetPoint();
	c_Enemy* t_enemy12=c_Enemy::m_MakeEnemy(t_point->m_x+3,t_point->m_y-9,t_enemyType1);
	t_enemy12->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
	m_BossMaybeMinibossesAt(-5,0,4,0);
	(new c_BounceTrap)->m_new(-4,-11,8);
	(new c_BounceTrap)->m_new(4,-11,8);
	(new c_BounceTrap)->m_new(0,-14,8);
	(new c_BounceTrap)->m_new(-4,-14,8);
	(new c_BounceTrap)->m_new(4,-14,8);
	(new c_BounceTrap)->m_new(-4,-8,8);
	(new c_BounceTrap)->m_new(4,-8,8);
	c_Enemy::m_enemiesPaused=true;
}
void c_Level::m_CreateBossBattle3(){
	bb_logger_Debug->p_Log(String(L"CREATEBOSSBATTLE3: Creating deep blues boss battle.",51));
	m_InitNewMap(true);
	m_DisableLevelConstraints();
	m_PlaceFirstBossRoom2(String(L"deepblues",9));
	m_CreateRoom3(-4,-15,9,9,false,6);
	for(int t_x=-1;t_x<=1;t_x=t_x+1){
		m_PlaceTileRemovingExistingTiles2(t_x,-6,103);
	}
	for(int t_x2=-1;t_x2<=1;t_x2=t_x2+1){
		m_GetTileAt(t_x2,-6)->p_SetDoorTrigger(2);
	}
	m_SetMagicBarrier(true);
	m_PaintTriggerInterior(-4,-15,9,9,1);
	m_GetTileAt(-2,-6)->p_AddTorch();
	m_GetTileAt(2,-6)->p_AddTorch();
	m_GetTileAt(-1,-15)->p_AddTorch();
	m_GetTileAt(3,-15)->p_AddTorch();
	m_GetTileAt(-4,-13)->p_AddTorch();
	m_GetTileAt(-4,-9)->p_AddTorch();
	m_GetTileAt(5,-12)->p_AddTorch();
	m_GetTileAt(5,-8)->p_AddTorch();
	int t_pawnMoveDelayBase=0;
	int t_leftKnightMoveDelay=0;
	int t_rightKnightMoveDelay=0;
	int t_moveDelayRoll=c_Util::m_RndIntRangeFromZero(8,true);
	if(t_moveDelayRoll!=0){
		t_pawnMoveDelayBase=1;
		t_leftKnightMoveDelay=4;
		t_rightKnightMoveDelay=6;
	}else{
		t_pawnMoveDelayBase=2;
		int t_knightMoveDelayRoll=c_Util::m_RndIntRangeFromZero(1,true);
		if(t_knightMoveDelayRoll==0){
			t_leftKnightMoveDelay=1;
			t_rightKnightMoveDelay=6;
		}else{
			t_leftKnightMoveDelay=6;
			t_rightKnightMoveDelay=1;
		}
	}
	int t_pawnMoveDelayDirectionRoll=c_Util::m_RndIntRangeFromZero(1,true);
	int t_pawnMoveDelayDirection=0;
	if(t_pawnMoveDelayDirectionRoll==1){
		t_pawnMoveDelayDirection=7;
	}
	int t_rookLevel=0;
	int t_leftKnightLevel=0;
	int t_bishopLevel=0;
	int t_kingLevel=0;
	int t_queenLevel=0;
	int t_rightKnightLevel=0;
	int t_10=bb_controller_game_currentDepth;
	if(t_10==2){
		int t_11=c_Util::m_RndIntRangeFromZero(2,true);
		if(t_11==0){
			t_rookLevel=2;
			t_leftKnightLevel=2;
			t_bishopLevel=1;
			t_rightKnightLevel=1;
		}else{
			if(t_11==1){
				t_rookLevel=1;
				t_leftKnightLevel=1;
				t_bishopLevel=2;
				t_rightKnightLevel=2;
			}else{
				t_rookLevel=1;
				t_leftKnightLevel=2;
				t_bishopLevel=1;
				t_rightKnightLevel=2;
			}
		}
		t_kingLevel=1;
		t_queenLevel=2;
	}else{
		if(t_10==3){
			t_rookLevel=1;
			t_leftKnightLevel=1;
			t_bishopLevel=1;
			t_kingLevel=2;
			t_queenLevel=1;
			t_rightKnightLevel=1;
		}else{
			if(t_10==4){
				t_rookLevel=1;
				t_leftKnightLevel=2;
				t_bishopLevel=1;
				t_kingLevel=2;
				t_queenLevel=2;
				t_rightKnightLevel=2;
			}else{
				if(bb_controller_game_currentDepth<=1){
					t_rookLevel=1;
					t_leftKnightLevel=1;
					t_bishopLevel=1;
					t_kingLevel=1;
					t_queenLevel=1;
					t_rightKnightLevel=1;
				}else{
					t_rookLevel=2;
					t_leftKnightLevel=2;
					t_bishopLevel=2;
					t_kingLevel=2;
					t_queenLevel=2;
					t_rightKnightLevel=2;
				}
			}
		}
	}
	c_Rook* t_leftRook=(new c_Rook)->m_new(-3,-14,t_rookLevel);
	t_leftRook->m_currentMoveDelay=8;
	t_leftRook->m_castleNextMove=true;
	c_Knight* t_leftKnight=(new c_Knight)->m_new(-2,-14,t_leftKnightLevel);
	t_leftKnight->m_currentMoveDelay=t_leftKnightMoveDelay;
	c_Bishop* t_leftBishop=(new c_Bishop)->m_new(-1,-14,t_bishopLevel);
	t_leftBishop->m_currentMoveDelay=4;
	c_King* t_king=(new c_King)->m_new(0,-14,t_kingLevel);
	t_king->m_currentMoveDelay=8;
	c_Queen* t_queen=(new c_Queen)->m_new(1,-14,t_queenLevel);
	t_queen->m_currentMoveDelay=6;
	c_Bishop* t_rightBishop=(new c_Bishop)->m_new(2,-14,t_bishopLevel);
	t_rightBishop->m_currentMoveDelay=6;
	c_Knight* t_rightKnight=(new c_Knight)->m_new(3,-14,t_rightKnightLevel);
	t_rightKnight->m_currentMoveDelay=t_rightKnightMoveDelay;
	c_Rook* t_rightRook=(new c_Rook)->m_new(4,-14,t_rookLevel);
	t_rightRook->m_currentMoveDelay=8;
	int t_pawnMoveDelayOffset=c_Util::m_RndIntRangeFromZero(7,true);
	int t_pawnLevel=1;
	if(bb_controller_game_currentDepth>=3){
		t_pawnLevel=2;
	}
	for(int t_i=0;t_i<8;t_i=t_i+1){
		c_Pawn* t_pawn=(new c_Pawn)->m_new(t_i-3,-13,t_pawnLevel);
		t_pawn->m_currentMoveDelay=t_pawnMoveDelayBase+bb_math_Abs(t_pawnMoveDelayDirection-(t_pawnMoveDelayOffset+t_i) % 8);
	}
	m_BossMaybeMinibossesAt(-3,0,3,0);
	c_Enemy::m_enemiesPaused=true;
}
void c_Level::m_CreateBossBattle4(){
	bb_logger_Debug->p_Log(String(L"CREATEBOSSBATTLE4: Creating octoboss battle.",44));
	m_InitNewMap(true);
	m_DisableLevelConstraints();
	m_PlaceFirstBossRoom2(String(L"octoboss",8));
	m_CreateRoom3(-6,-15,12,9,false,6);
	for(int t_x=-1;t_x<=1;t_x=t_x+1){
		m_PlaceTileRemovingExistingTiles2(t_x,-6,103);
	}
	m_GetTileAt(-2,-6)->p_AddTorch();
	m_GetTileAt(2,-6)->p_AddTorch();
	m_GetTileAt(-2,-15)->p_AddTorch();
	m_GetTileAt(2,-15)->p_AddTorch();
	m_GetTileAt(-6,-10)->p_AddTorch();
	m_GetTileAt(6,-10)->p_AddTorch();
	for(int t_x2=-1;t_x2<=1;t_x2=t_x2+1){
		m_GetTileAt(t_x2,-6)->p_SetDoorTrigger(2);
	}
	m_SetMagicBarrier(true);
	m_PaintTriggerInterior(-6,-15,12,9,1);
	for(int t_x3=-5;t_x3<=5;t_x3=t_x3+1){
		for(int t_y=-14;t_y<=-11;t_y=t_y+1){
			m_PlaceTileRemovingExistingTiles2(t_x3,t_y,4);
		}
	}
	c_Octoboss* t_coralRiff=(new c_Octoboss)->m_new(0,-14,1);
	t_coralRiff->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
	m_BossMaybeMinibossesAt(-5,0,4,0);
	c_Enemy::m_enemiesPaused=true;
}
c_List17* c_Level::m_charactersJustUnlocked;
void c_Level::m_CreateBossBattle5(){
	bb_logger_Debug->p_Log(String(L"CREATEBOSSBATTLE5: Creating dead ringer boss battle.",52));
	m_InitNewMap(true);
	m_DisableLevelConstraints();
	m_PlaceFirstBossRoom3();
	m_CreateRoom3(-6,-17,12,11,false,6);
	for(int t_x=-1;t_x<=1;t_x=t_x+1){
		m_PlaceTileRemovingExistingTiles2(t_x,-6,103);
	}
	m_GetTileAt(-2,-6)->p_AddTorch();
	m_GetTileAt(2,-6)->p_AddTorch();
	m_GetTileAt(-2,-17)->p_AddTorch();
	m_GetTileAt(2,-17)->p_AddTorch();
	m_GetTileAt(-6,-10)->p_AddTorch();
	m_GetTileAt(6,-10)->p_AddTorch();
	for(int t_x2=-1;t_x2<=1;t_x2=t_x2+1){
		m_GetTileAt(t_x2,-6)->p_SetDoorTrigger(2);
	}
	m_SetMagicBarrier(true);
	m_PaintTriggerInterior(-6,-17,12,11,1);
	c_Bell* t_bell1=(new c_Bell)->m_new(-3,13,1);
	c_Bell* t_bell2=(new c_Bell)->m_new(3,13,2);
	c_Bell* t_bell3=(new c_Bell)->m_new(3,-8,3);
	c_Bell* t_bell4=(new c_Bell)->m_new(-3,-8,4);
	t_bell1->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
	t_bell2->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
	t_bell3->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
	t_bell4->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
	int t_deadRingerX=-2;
	int t_deadRingerXRoll=c_Util::m_RndIntRangeFromZero(1,true);
	if(t_deadRingerXRoll==0){
		t_deadRingerX=2;
	}
	c_DeadRinger* t_deadRinger=(new c_DeadRinger)->m_new(t_deadRingerX,-12,1,t_bell1,t_bell2,t_bell3,t_bell4);
	t_deadRinger->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
	c_Sarcophagus* t_sarcophagusLeft=(new c_Sarcophagus)->m_new(-5,-16,1);
	t_sarcophagusLeft->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
	c_Sarcophagus* t_sarcophagusRight=(new c_Sarcophagus)->m_new(5,-16,1);
	t_sarcophagusRight->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
	if(c_GameData::m_GetNPCUnlock(String(L"bossmaster",10)) && !c_GameData::m_HasFoughtDeadRinger() && !m_isReplaying){
		m_charactersJustUnlocked->p_AddLast17(505);
	}
	c_GameData::m_SetFoughtDeadRinger();
}
void c_Level::m_FillTiles(c_Rect* t_rect,int t_tileType,int t_tileTypeEdge){
	if(t_tileTypeEdge==-1){
		t_tileTypeEdge=t_tileType;
	}
	int t_xMin=t_rect->m_x;
	int t_xMax=t_rect->p_GetRight();
	int t_yMin=t_rect->m_y;
	int t_yMax=t_rect->p_GetBottom();
	for(int t_x=t_xMin;t_x<=t_xMax;t_x=t_x+1){
		for(int t_y=t_yMin;t_y<=t_yMax;t_y=t_y+1){
			if(t_x==t_xMin || t_x==t_xMax || t_y==t_yMin || t_y==t_yMax){
				m_PlaceTileRemovingExistingTiles2(t_x,t_y,t_tileTypeEdge);
			}else{
				m_PlaceTileRemovingExistingTiles2(t_x,t_y,t_tileType);
			}
		}
	}
}
void c_Level::m_CreateBossBattle9(){
	bb_logger_Debug->p_Log(String(L"CREATEBOSSBATTLE9: Creating fortissimole boss battle.",53));
	m_InitNewMap(true);
	m_DisableLevelConstraints();
	c_Rect* t_bossRoom=(new c_Rect)->m_new(-8,-17,16,11);
	m_FillTiles(t_bossRoom,100,109);
	m_PlaceFirstBossRoom(String(L"fortissimole",12),5);
	m_CreateRoom3(-7,-16,14,9,false,4);
	for(int t_x=-1;t_x<=1;t_x=t_x+1){
		m_PlaceTileRemovingExistingTiles(t_x,-6,103,false,5,false);
	}
	for(int t_x2=-2;t_x2<=2;t_x2=t_x2+1){
		m_PlaceTileRemovingExistingTiles2(t_x2,-7,0);
	}
	m_GetTileAt(-3,-7)->p_AddTorch();
	m_GetTileAt(3,-7)->p_AddTorch();
	m_GetTileAt(-7,-10)->p_AddTorch();
	m_GetTileAt(7,-10)->p_AddTorch();
	m_GetTileAt(-2,-16)->p_AddTorch();
	m_GetTileAt(2,-16)->p_AddTorch();
	for(int t_x3=-1;t_x3<=1;t_x3=t_x3+1){
		m_GetTileAt(t_x3,-6)->p_SetDoorTrigger(2);
	}
	m_SetMagicBarrier(true);
	m_PaintTriggerInterior(-7,-15,14,9,1);
	m_PlaceTileRemovingExistingTiles2(-5,-15,115);
	m_PlaceTileRemovingExistingTiles2(-4,-15,113);
	m_PlaceTileRemovingExistingTiles2(-3,-15,113);
	m_PlaceTileRemovingExistingTiles2(-2,-15,113);
	m_PlaceTileRemovingExistingTiles2(-1,-15,112);
	m_PlaceTileRemovingExistingTiles2(0,-15,112);
	m_PlaceTileRemovingExistingTiles2(1,-15,112);
	m_PlaceTileRemovingExistingTiles2(2,-15,113);
	m_PlaceTileRemovingExistingTiles2(3,-15,113);
	m_PlaceTileRemovingExistingTiles2(4,-15,113);
	m_PlaceTileRemovingExistingTiles2(5,-15,115);
	int t_fortissimoleX=c_Util::m_RndIntRange(-2,2,true,-1);
	(new c_Fortissimole)->m_new(t_fortissimoleX,-15,1);
	c_Fortissimole::m_SpawnFans();
	int t_enemyType1=0;
	int t_enemyType2=0;
	int t_12=bb_controller_game_currentZone;
	if(t_12==1){
		t_enemyType1=11;
		t_enemyType2=11;
	}else{
		if(t_12==2){
			t_enemyType1=103;
			t_enemyType2=103;
		}else{
			if(t_12==3){
				t_enemyType1=205;
				t_enemyType2=206;
			}else{
				if(t_12==4){
					if(c_Util::m_IsCharacterActive(3)){
						t_enemyType1=308;
						t_enemyType2=308;
					}else{
						t_enemyType1=304;
						t_enemyType2=304;
					}
				}else{
					if(bb_controller_game_currentZone>=5){
						t_enemyType1=717;
						t_enemyType2=717;
					}
				}
			}
		}
	}
	c_Point* t_point=0;
	t_point=m_GetRandomOffsetPoint();
	c_Enemy* t_enemy1=c_Enemy::m_MakeEnemy(t_point->m_x,t_point->m_y,t_enemyType1);
	t_enemy1->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
	t_point=m_GetRandomOffsetPoint();
	c_Enemy* t_enemy2=c_Enemy::m_MakeEnemy(t_point->m_x,t_point->m_y,t_enemyType2);
	t_enemy2->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
	int t_enemyType3=0;
	int t_enemyType4=0;
	int t_13=bb_controller_game_currentZone;
	if(t_13==1){
		t_enemyType3=11;
		t_enemyType4=11;
	}else{
		if(t_13==2){
			t_enemyType3=108;
			t_enemyType4=108;
		}else{
			if(t_13==3){
				t_enemyType3=211;
				t_enemyType4=213;
			}else{
				if(t_13==4){
					t_enemyType3=307;
					t_enemyType4=307;
				}else{
					if(bb_controller_game_currentZone>=5){
						t_enemyType3=704;
						t_enemyType4=704;
					}
				}
			}
		}
	}
	t_point=m_GetRandomOffsetPoint();
	c_Enemy* t_enemy3=c_Enemy::m_MakeEnemy(t_point->m_x,t_point->m_y,t_enemyType3);
	t_enemy3->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
	t_point=m_GetRandomOffsetPoint();
	c_Enemy* t_enemy4=c_Enemy::m_MakeEnemy(t_point->m_x,t_point->m_y,t_enemyType4);
	t_enemy4->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
	m_BossMaybeMinibossesAt(-5,0,4,0);
	c_Enemy::m_enemiesPaused=true;
}
void c_Level::m_CreateBossBattleFrankensteinway(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Level.CreateBossBattleFrankensteinway()",39));
}
void c_Level::m_PlacePenaltyBoxEnemies(){
	int t_initialCorner=c_Util::m_RndIntRangeFromZero(3,true);
	c_IntPointStack* t_corners=(new c_IntPointStack)->m_new();
	t_corners->p_Push10((new c_Point)->m_new(-2,-2));
	t_corners->p_Push10((new c_Point)->m_new(2,-2));
	t_corners->p_Push10((new c_Point)->m_new(2,2));
	t_corners->p_Push10((new c_Point)->m_new(-2,2));
	c_IntPointStack* t_orderedCorners=(new c_IntPointStack)->m_new();
	for(int t_i=0;t_i<=3;t_i=t_i+1){
		c_Point* t_corner=t_corners->p_Get2((t_initialCorner+t_i) % 4);
		t_orderedCorners->p_Push10(t_corner);
	}
	c_IntStack* t_enemyTypes=(new c_IntStack)->m_new2();
	t_enemyTypes->p_Push4(0);
	int t_112=bb_controller_game_currentZone;
	if(t_112==1){
		int t_113=bb_controller_game_currentLevel;
		if(t_113==2){
			t_enemyTypes->p_Push4(6);
			t_enemyTypes->p_Push4(3);
		}else{
			if(t_113==3){
				t_enemyTypes->p_Push4(7);
				t_enemyTypes->p_Push4(4);
			}else{
				t_enemyTypes->p_Push4(7);
				t_enemyTypes->p_Push4(5);
			}
		}
		t_enemyTypes->p_Push4(11);
	}else{
		if(t_112==2){
			int t_114=bb_controller_game_currentLevel;
			if(t_114==2){
				t_enemyTypes->p_Push4(6);
				t_enemyTypes->p_Push4(100);
			}else{
				if(t_114==3){
					t_enemyTypes->p_Push4(7);
					t_enemyTypes->p_Push4(4);
				}else{
					t_enemyTypes->p_Push4(7);
					t_enemyTypes->p_Push4(5);
				}
			}
			t_enemyTypes->p_Push4(112);
		}else{
			if(t_112==3){
				if(bb_controller_game_currentLevel<=3){
					t_enemyTypes->p_Push4(206);
				}else{
					t_enemyTypes->p_Push4(205);
				}
				int t_115=bb_controller_game_currentLevel;
				if(t_115==2){
					t_enemyTypes->p_Push4(202);
				}else{
					if(t_115==3){
						t_enemyTypes->p_Push4(203);
					}else{
						t_enemyTypes->p_Push4(204);
					}
				}
				if(bb_controller_game_currentLevel<=3){
					t_enemyTypes->p_Push4(205);
				}else{
					t_enemyTypes->p_Push4(206);
				}
			}else{
				if(t_112==4){
					int t_116=bb_controller_game_currentLevel;
					if(t_116==2){
						t_enemyTypes->p_Push4(319);
						t_enemyTypes->p_Push4(309);
					}else{
						if(t_116==3){
							t_enemyTypes->p_Push4(320);
							t_enemyTypes->p_Push4(310);
						}else{
							t_enemyTypes->p_Push4(320);
							t_enemyTypes->p_Push4(311);
						}
					}
					if(c_Util::m_IsCharacterActive(3)){
						t_enemyTypes->p_Push4(308);
					}else{
						if(bb_controller_game_currentLevel<=3){
							t_enemyTypes->p_Push4(304);
						}else{
							t_enemyTypes->p_Push4(305);
						}
					}
				}else{
					int t_117=bb_controller_game_currentLevel;
					if(t_117==2){
						t_enemyTypes->p_Push4(710);
						t_enemyTypes->p_Push4(704);
					}else{
						if(t_117==3){
							t_enemyTypes->p_Push4(710);
							t_enemyTypes->p_Push4(705);
						}else{
							t_enemyTypes->p_Push4(710);
							t_enemyTypes->p_Push4(706);
						}
					}
					if(bb_controller_game_currentLevel<=3){
						t_enemyTypes->p_Push4(723);
					}else{
						t_enemyTypes->p_Push4(724);
					}
				}
			}
		}
	}
	bb_logger_Debug->p_Assert(t_enemyTypes->p_Length()==4,String());
	bb_logger_Debug->p_Assert(m_previousLevelUnkilledStairLockingMinibosses->p_Length()>0,String());
	c_Stack2* t_previousLevelUnkilledStairLockingMinibossesIndexes=(new c_Stack2)->m_new();
	t_previousLevelUnkilledStairLockingMinibossesIndexes->p_Push4(0);
	t_previousLevelUnkilledStairLockingMinibossesIndexes->p_Push4(2);
	t_previousLevelUnkilledStairLockingMinibossesIndexes->p_Push4(1);
	t_previousLevelUnkilledStairLockingMinibossesIndexes->p_Push4(3);
	for(int t_i2=0;t_i2<=3;t_i2=t_i2+1){
		int t_enemyType=t_enemyTypes->p_Get2(t_i2);
		int t_previousLevelUnkilledStairLockingMinibossesIndex=t_previousLevelUnkilledStairLockingMinibossesIndexes->p_Get2(t_i2);
		if(t_previousLevelUnkilledStairLockingMinibossesIndex<m_previousLevelUnkilledStairLockingMinibosses->p_Length()){
			t_enemyType=m_previousLevelUnkilledStairLockingMinibosses->p_Get2(t_previousLevelUnkilledStairLockingMinibossesIndex);
		}
		c_Point* t_corner2=t_orderedCorners->p_Get2(t_i2);
		c_Enemy* t_enemy=c_Enemy::m_MakeEnemy(t_corner2->m_x,t_corner2->m_y,t_enemyType);
		t_enemy->m_inPenaltyBox=true;
		t_enemy->m_hasBeenVisible=true;
		t_enemy->m_exemptFromPause=true;
		c_Dragon* t_dragon=dynamic_cast<c_Dragon*>(t_enemy);
		if(t_dragon!=0){
			t_dragon->m_seekDistance=0;
			if(t_dragon->m_level==2){
				t_dragon->m_seekDistance=10;
			}
			t_dragon->m_dontMove=true;
		}
	}
}
void c_Level::m_AddMinibossWall(int t_xVal,int t_yVal,int t_wallType){
	c_Tile* t_tile=m_GetTileAt(t_xVal,t_yVal);
	if((t_tile)!=0){
		if((t_tile->m_triggerDig)!=0){
			return;
		}
		c_MinibossTileData* t_tileData=(new c_MinibossTileData)->m_new();
		t_tileData->m_x=t_xVal;
		t_tileData->m_y=t_yVal;
		t_tileData->m_type=t_tile->m_type;
		t_tileData->m_wireMask=t_tile->m_wireMask;
		m_minibossFormerWall->p_AddLast13(t_tileData);
	}
	m_PlaceTileRemovingExistingTiles(t_xVal,t_yVal,t_wallType,false,-1,false);
	m_wasMinibossLockedInBattle=true;
}
void c_Level::m_CreateBossBattle(){
	if(m_IsFinalBossZone()){
		if(c_Util::m_IsCharacterActive(2)){
			m_bossNumber=7;
		}else{
			if(c_Util::m_IsCharacterActive(10)){
				m_bossNumber=10;
			}else{
				if(c_Util::m_IsCharacterActive(0)){
					m_bossNumber=5;
				}
			}
		}
	}else{
		c_IntStack* t_bossNumbers=(new c_IntStack)->m_new2();
		t_bossNumbers->p_Push4(1);
		t_bossNumbers->p_Push4(2);
		t_bossNumbers->p_Push4(3);
		t_bossNumbers->p_Push4(4);
		if(m_isHardcoreMode || bb_controller_game_currentZone>4){
			t_bossNumbers->p_Push4(9);
		}
		bb_logger_Debug->p_Log(String(L"CREATEBOSSBATTLE Selecting randomly from eligible bosses:",57));
		c_StackEx* t_eligibleBossNumbers=(new c_StackEx)->m_new();
		c_Enumerator6* t_=t_bossNumbers->p_ObjectEnumerator();
		while(t_->p_HasNext()){
			int t_bossNumber=t_->p_NextObject();
			if(m_usedBosses->p_Contains(t_bossNumber)){
				continue;
			}
			bb_logger_Debug->p_Log(String(L"  Eligible boss :  ",19)+String(t_bossNumber));
			t_eligibleBossNumbers->p_Push4(t_bossNumber);
		}
		m_bossNumber=1;
		if(t_eligibleBossNumbers->p_Length()>0){
			m_bossNumber=t_eligibleBossNumbers->p_ChooseRandom(true);
		}
		bb_logger_Debug->p_Log(String(L"Selected boss :  ",17)+String(m_bossNumber));
	}
	if(m_forceBoss!=-1){
		m_bossNumber=m_forceBoss;
		m_forceBoss=-1;
	}
	m_usedBosses->p_Insert5(m_bossNumber);
	int t_6=m_bossNumber;
	if(t_6==1){
		m_CreateBossBattle1();
	}else{
		if(t_6==2){
			m_CreateBossBattle2();
		}else{
			if(t_6==3){
				m_CreateBossBattle3();
			}else{
				if(t_6==4){
					m_CreateBossBattle4();
				}else{
					if(t_6==5){
						m_CreateBossBattle5();
					}else{
						if(t_6==9){
							m_CreateBossBattle9();
						}else{
							if(t_6==10){
								m_CreateBossBattleFrankensteinway();
							}
						}
					}
				}
			}
		}
	}
	m_outsideBossChamber=true;
	if(m_WantPenaltyBox()){
		m_PlacePenaltyBoxEnemies();
		gc_assign(m_minibossFormerWall,(new c_List13)->m_new());
		m_AddMinibossWall(-1,-3,109);
		m_AddMinibossWall(0,-3,109);
		m_AddMinibossWall(1,-3,109);
		m_PlaceTileRemovingExistingTiles(-1,-1,14,false,-1,false);
		m_PlaceTileRemovingExistingTiles(1,-1,14,false,-1,false);
		m_PlaceTileRemovingExistingTiles(-1,1,14,false,-1,false);
		m_PlaceTileRemovingExistingTiles(1,1,14,false,-1,false);
		m_GetTileAt(-3,0)->p_AddTorch();
		m_GetTileAt(3,0)->p_AddTorch();
		m_GetTileAt(0,-3)->p_AddTorch();
		m_GetTileAt(0,3)->p_AddTorch();
	}
}
int c_Level::m_GetInitialZone(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Level.GetInitialZone()",22));
	return 0;
}
c_StackEx* c_Level::m_previousLevelMinibosses;
bool c_Level::m_IsFreeLevelForSpecialRoom(int t_tempLevel,int t_tempDepth){
	return !(t_tempLevel==-1 || t_tempDepth==-1 || t_tempLevel==m_placeBloodShopOnLevel && t_tempDepth==m_placeBloodShopOnDepth || t_tempLevel==m_placeFoodShopOnLevel && t_tempDepth==m_placeFoodShopOnDepth || t_tempLevel==m_placeGlassShopOnLevel && t_tempDepth==m_placeGlassShopOnDepth || t_tempLevel==m_placeArenaOnLevel && t_tempDepth==m_placeArenaOnDepth || t_tempLevel==m_placeTransmogrifierOnLevel && t_tempDepth==m_placeTransmogrifierOnDepth || t_tempLevel==m_placeConjurerOnLevel && t_tempDepth==m_placeConjurerOnDepth || t_tempLevel==m_placeShrinerOnLevel && t_tempDepth==m_placeShrinerOnDepth || t_tempLevel==m_placePawnbrokerOnLevel && t_tempDepth==m_placePawnbrokerOnDepth);
}
int c_Level::m_arenaNum;
void c_Level::m_CreateExit(int t_exitX,int t_exitY){
	m_GetTileAt(t_exitX,t_exitY)->p_Die();
	c_Tile* t_exitTile=(new c_Tile)->m_new(t_exitX,t_exitY,9,false,-1);
	t_exitTile->m_flyawayText=String(L"|198|DEFEAT THE MINIBOSS!|",26);
	m_exits->p_Set15((new c_Point)->m_new(t_exitX,t_exitY),(new c_Point)->m_new(-6,-6));
}
int c_Level::m_secretAtX;
int c_Level::m_secretAtY;
bool c_Level::m_IsFloorAt(int t_xVal,int t_yVal){
	c_Tile* t_tile=m_GetTileAt(t_xVal,t_yVal);
	return ((t_tile)!=0) && t_tile->p_IsFloor();
}
bool c_Level::m_IsFloorAdjacent(int t_xVal,int t_yVal){
	if(m_IsFloorAt(t_xVal-1,t_yVal)){
		return true;
	}
	if(m_IsFloorAt(t_xVal+1,t_yVal)){
		return true;
	}
	if(m_IsFloorAt(t_xVal,t_yVal-1)){
		return true;
	}
	if(m_IsFloorAt(t_xVal,t_yVal+1)){
		return true;
	}
	return false;
}
void c_Level::m_AddCrackedWall(int t_roomType){
	bb_logger_Debug->p_Log(String(L"Adding cracked wall...",22));
	c_IntPointList* t_lowHealthWallLocations=(new c_IntPointList)->m_new();
	c_NodeEnumerator* t_=m_tiles->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Node25* t_tilesOnXNode=t_->p_NextObject();
		c_NodeEnumerator2* t_2=t_tilesOnXNode->p_Value()->p_ObjectEnumerator();
		while(t_2->p_HasNext()){
			c_Node26* t_tileNode=t_2->p_NextObject();
			c_Tile* t_tile=t_tileNode->p_Value();
			if(t_tile->p_IsWall(false,true,false,false)){
				if(t_tile->m_health<=1){
					t_lowHealthWallLocations->p_AddLast26((new c_Point)->m_new(t_tile->m_x,t_tile->m_y));
				}
			}
		}
	}
	Array<c_Point* > t_lowHealthWallLocationsArray=t_lowHealthWallLocations->p_ToArray();
	int t_lowHealthWallLocationsCount=t_lowHealthWallLocations->p_Count();
	c_Point* t_lowHealthWallLocation=0;
	while(true){
		int t_i=c_Util::m_RndIntRangeFromZero(t_lowHealthWallLocationsCount-1,true);
		t_lowHealthWallLocation=t_lowHealthWallLocationsArray[t_i];
		if(m_IsFloorAdjacent(t_lowHealthWallLocation->m_x,t_lowHealthWallLocation->m_y)){
			break;
		}
	}
	c_Tile* t_lowHealthWall=m_GetTileAt(t_lowHealthWallLocation->m_x,t_lowHealthWallLocation->m_y);
	int t_1=t_roomType;
	if(t_1==1){
		t_lowHealthWall->p_SetDigTrigger(10);
		t_lowHealthWall->p_BecomeStone();
	}else{
		if(t_1==2){
			t_lowHealthWall->p_SetDigTrigger(19);
		}else{
			if(t_1==3){
				t_lowHealthWall->p_SetDigTrigger(21);
				t_lowHealthWall->p_BecomeStone();
			}else{
				if(t_1==4){
					t_lowHealthWall->p_SetDigTrigger(22);
					t_lowHealthWall->p_BecomeStone();
				}else{
					if(t_1==5){
						t_lowHealthWall->p_SetDigTrigger(23);
						t_lowHealthWall->p_BecomeHarderStone();
					}else{
						if(t_1==6){
							t_lowHealthWall->p_SetDigTrigger(35);
						}else{
							if(t_1==7){
								t_lowHealthWall->p_SetDigTrigger(36);
							}else{
								if(t_1==8){
									t_lowHealthWall->p_SetDigTrigger(37);
									t_lowHealthWall->p_BecomeHarderStone();
								}
							}
						}
					}
				}
			}
		}
	}
	t_lowHealthWall->p_BecomeCracked();
	m_secretAtX=t_lowHealthWallLocation->m_x;
	m_secretAtY=t_lowHealthWallLocation->m_y;
	bb_logger_Debug->p_Log(String(L"Finished adding cracked wall",28));
}
int c_Level::m_specialRoomEntranceX;
int c_Level::m_specialRoomEntranceY;
String c_Level::m_RandomFood(){
	int t_162=c_Util::m_RndIntRangeFromZero(5,true);
	if(t_162==0){
		return String(L"food_1",6);
	}else{
		if(t_162==1){
			return String(L"food_2",6);
		}else{
			if(t_162==2){
				return String(L"food_3",6);
			}else{
				if(t_162==3){
					return String(L"food_4",6);
				}else{
					if(t_162==4){
						return String(L"food_carrot",11);
					}
				}
			}
		}
	}
	return String(L"food_cookies",12);
}
void c_Level::m_PlaceSecondarySpecialShop(bool t_useBloodCost,bool t_isFoodShop){
	bb_logger_Debug->p_Log(String(L"Placing Secondary Special Shop",30));
	if(t_isFoodShop){
		m_CreateRoom(-200,-207,8,8,false,10,-1,-1,-1,-1,false,100,false,true);
	}else{
		m_CreateRoom(-200,-207,6,8,false,10,-1,-1,-1,-1,false,100,false,true);
	}
	m_GetTileAt(-197,-207)->p_AddTorch();
	c_Medic* t_medic=(new c_Medic)->m_new(-197,-205,1,false);
	String t_itemName=c_Item::m_GetRandomItemInClass(String(),bb_controller_game_currentLevel+3,String(L"shopChance",10),0,true,String(),false);
	int t_coinCost=c_Item::m_GetCost(t_itemName);
	int t_forceCost=t_coinCost/10;
	if(t_useBloodCost){
		t_forceCost=0;
	}
	(new c_SaleItem)->m_new(-197,-203,t_itemName,t_useBloodCost,0,Float(t_forceCost),t_medic);
	bb_logger_Debug->p_Log(String(L"Done Placing Secondary Special Shop",35));
}
void c_Level::m_AddSpecialRoom(int t_roomType,bool t_addCrack){
	bb_logger_Debug->p_Log(String(L"Adding special room",19));
	if(t_addCrack){
		m_AddCrackedWall(t_roomType);
	}
	m_DisableLevelConstraints();
	int t_3=t_roomType;
	if(t_3==5){
		m_CreateRoom(-200,-200,8,10,false,10,-1,-1,-1,-1,false,100,false,true);
		m_GetTileAt(-198,-200)->p_AddTorch();
		m_GetTileAt(-194,-200)->p_AddTorch();
		m_GetTileAt(-198,-190)->p_AddTorch();
		m_GetTileAt(-194,-190)->p_AddTorch();
		m_GetTileAt(-200,-197)->p_AddTorch();
		m_GetTileAt(-192,-197)->p_AddTorch();
		m_GetTileAt(-200,-193)->p_AddTorch();
		m_GetTileAt(-192,-193)->p_AddTorch();
		int t_entranceX=-196;
		int t_entranceY=-193;
		m_specialRoomEntranceX=t_entranceX;
		m_specialRoomEntranceY=t_entranceY;
		(new c_TravelRune)->m_new(t_entranceX,t_entranceY,m_secretAtX,m_secretAtY,5);
		c_Shopkeeper* t_shopkeeper=(new c_Shopkeeper)->m_new(t_entranceX,t_entranceY-4,4,false);
		String t_food=m_RandomFood();
		(new c_SaleItem)->m_new(t_entranceX-1,t_entranceY-2,t_food,false,t_shopkeeper,FLOAT(-1.0),0);
		int t_heartContainerRoll=c_Util::m_RndIntRangeFromZero(100,true);
		String t_heartContainer=String();
		if(t_heartContainerRoll<=20){
			t_heartContainer=String(L"misc_heart_container",20);
		}else{
			if(t_heartContainerRoll<=25){
				t_heartContainer=String(L"misc_heart_container2",21);
			}else{
				if(t_heartContainerRoll<=50){
					t_heartContainer=String(L"misc_heart_container_empty2",27);
				}else{
					t_heartContainer=String(L"misc_heart_container_empty",26);
				}
			}
		}
		(new c_SaleItem)->m_new(t_entranceX+1,t_entranceY-2,t_heartContainer,false,t_shopkeeper,FLOAT(-1.0),0);
		if(!((c_Util::m_RndIntRangeFromZero(9,true))!=0)){
			m_PlaceSecondarySpecialShop(false,true);
		}
	}else{
		if(t_3==3){
			m_CreateRoom(-200,-200,6,8,false,10,-1,-1,-1,-1,false,100,false,true);
			m_GetTileAt(-199,-200)->p_AddTorch();
			m_GetTileAt(-195,-200)->p_AddTorch();
			m_GetTileAt(-199,-192)->p_AddTorch();
			m_GetTileAt(-195,-192)->p_AddTorch();
			m_GetTileAt(-200,-198)->p_AddTorch();
			m_GetTileAt(-194,-198)->p_AddTorch();
			m_GetTileAt(-200,-194)->p_AddTorch();
			m_GetTileAt(-194,-194)->p_AddTorch();
			int t_entranceX2=-197;
			int t_entranceY2=-194;
			m_specialRoomEntranceX=t_entranceX2;
			m_specialRoomEntranceY=t_entranceY2;
			(new c_TravelRune)->m_new(t_entranceX2,t_entranceY2,m_secretAtX,m_secretAtY,3);
			c_Shopkeeper* t_shopkeeper2=(new c_Shopkeeper)->m_new(t_entranceX2,t_entranceY2-4,2,false);
			int t_requestedLevel=bb_controller_game_currentLevel+2;
			int t_saleItemXOff=-1;
			if(!c_Util::m_IsWeaponlessCharacterActive()){
				t_saleItemXOff=0;
				String t_itemClass=String();
				if(m_isDailyChallenge){
					t_itemClass=String();
				}else{
					t_itemClass=String(L"isGold",6);
				}
				String t_randomItem1=c_Item::m_GetRandomItemInClass(t_itemClass,t_requestedLevel,String(L"anyChest",8),0,true,String(),false);
				if(c_Item::m_IsValidRandomItem(t_randomItem1)){
					(new c_SaleItem)->m_new(t_entranceX2-1,t_entranceY2-2,t_randomItem1,true,0,FLOAT(-1.0),0);
				}
			}
			String t_randomItem2=c_Item::m_GetRandomItemInClass(String(),t_requestedLevel,String(L"anyChest",8),0,true,String(),false);
			if(c_Item::m_IsValidRandomItem(t_randomItem2)){
				(new c_SaleItem)->m_new(t_entranceX2+t_saleItemXOff,t_entranceY2-2,t_randomItem2,true,0,FLOAT(-1.0),0);
			}
			String t_randomItem3=c_Item::m_GetRandomItemInClass(String(),t_requestedLevel,String(L"anyChest",8),0,true,String(),false);
			if(c_Item::m_IsValidRandomItem(t_randomItem3)){
				(new c_SaleItem)->m_new(t_entranceX2+1,t_entranceY2-2,t_randomItem3,true,0,FLOAT(-1.0),0);
			}
			if(!((c_Util::m_RndIntRangeFromZero(9,true))!=0)){
				m_PlaceSecondarySpecialShop(true,false);
			}
		}else{
			if(t_3==4){
				m_CreateRoom(-200,-200,6,8,false,10,-1,-1,-1,-1,false,100,false,true);
				m_GetTileAt(-199,-200)->p_AddTorch();
				m_GetTileAt(-195,-200)->p_AddTorch();
				m_GetTileAt(-199,-192)->p_AddTorch();
				m_GetTileAt(-195,-192)->p_AddTorch();
				m_GetTileAt(-200,-198)->p_AddTorch();
				m_GetTileAt(-194,-198)->p_AddTorch();
				m_GetTileAt(-200,-194)->p_AddTorch();
				m_GetTileAt(-194,-194)->p_AddTorch();
				int t_entranceX3=-197;
				int t_entranceY3=-194;
				m_specialRoomEntranceX=t_entranceX3;
				m_specialRoomEntranceY=t_entranceY3;
				(new c_TravelRune)->m_new(t_entranceX3,t_entranceY3,m_secretAtX,m_secretAtY,4);
				c_Shopkeeper* t_shopkeeper3=(new c_Shopkeeper)->m_new(-197,-198,3,false);
				c_Stack3* t_glassItems=(new c_Stack3)->m_new();
				t_glassItems->p_Push7(String(L"armor_glass",11));
				t_glassItems->p_Push7(String(L"shovel_glass",12));
				t_glassItems->p_Push7(String(L"torch_glass",11));
				t_glassItems->p_Push7(String(L"feet_glass_slippers",19));
				c_Stack3* t_validGlassItems=(new c_Stack3)->m_new();
				c_Enumerator12* t_=t_glassItems->p_ObjectEnumerator();
				while(t_->p_HasNext()){
					String t_glassItem=t_->p_NextObject();
					c_XMLNode* t_glassItemNode=c_Item::m_GetItemXML(t_glassItem);
					if(c_Item::m_IsValidItemForCurrentChars(t_glassItemNode)){
						t_validGlassItems->p_Push7(t_glassItem);
					}
				}
				c_Stack3* t_anotherItems=(new c_Stack3)->m_new();
				c_StringSet* t_newItems=(new c_StringSet)->m_new();
				c_Enumerator12* t_2=t_validGlassItems->p_ObjectEnumerator();
				while(t_2->p_HasNext()){
					String t_validGlassItem=t_2->p_NextObject();
					if(!c_Item::m_seenItems->p_Contains2(t_validGlassItem)){
						t_anotherItems->p_Push7(t_validGlassItem);
						t_newItems->p_Insert7(t_validGlassItem);
					}
				}
				c_Enumerator12* t_4=t_validGlassItems->p_ObjectEnumerator();
				while(t_4->p_HasNext()){
					String t_validGlassItem2=t_4->p_NextObject();
					if(!t_newItems->p_Contains2(t_validGlassItem2)){
						t_anotherItems->p_Push7(t_validGlassItem2);
					}
				}
				while(t_anotherItems->p_Length()>2){
					t_anotherItems->p_Pop();
				}
				while(t_anotherItems->p_Length()<=2){
					String t_glassWeapon=c_Item::m_GetRandomItemInClass(String(L"isGlass",7),bb_controller_game_currentLevel,String(L"anyChest",8),0,true,String(L"weapon",6),false);
					t_anotherItems->p_Push7(t_glassWeapon);
				}
				int t_glassItemXOff=-1;
				for(int t_i=0;t_i<3;t_i=t_i+1){
					String t_anotherItem=t_anotherItems->p_Get2(t_i);
					if(c_Item::m_IsValidRandomItem(t_anotherItem)){
						c_SaleItem* t_glassItem2=(new c_SaleItem)->m_new(t_entranceX3+t_glassItemXOff,t_entranceY3-2,t_anotherItem,false,t_shopkeeper3,FLOAT(-1.0),0);
						t_glassItem2->p_ApplyDiscount(FLOAT(0.5));
					}
					if(c_Util::m_IsWeaponlessCharacterActive()){
						t_glassItemXOff+=2;
					}else{
						t_glassItemXOff+=1;
					}
					if(t_glassItemXOff>1){
						break;
					}
				}
				if(!((c_Util::m_RndIntRangeFromZero(9,true))!=0)){
					m_PlaceSecondarySpecialShop(false,false);
				}
			}else{
				if(t_3==2){
					m_CreateRoom(-200,-200,6,8,false,10,-1,-1,-1,-1,false,100,false,true);
					m_GetTileAt(-199,-200)->p_AddTorch();
					m_GetTileAt(-195,-200)->p_AddTorch();
					m_GetTileAt(-199,-192)->p_AddTorch();
					m_GetTileAt(-195,-192)->p_AddTorch();
					m_GetTileAt(-200,-198)->p_AddTorch();
					m_GetTileAt(-194,-198)->p_AddTorch();
					m_GetTileAt(-200,-194)->p_AddTorch();
					m_GetTileAt(-194,-194)->p_AddTorch();
					int t_entranceX4=-197;
					int t_entranceY4=-195;
					m_specialRoomEntranceX=t_entranceX4;
					m_specialRoomEntranceY=t_entranceY4;
					(new c_TravelRune)->m_new(t_entranceX4,t_entranceY4+1,m_secretAtX,m_secretAtY,2);
					int t_requestedLevel2=bb_controller_game_currentLevel+2;
					String t_randomRedChestItemType=c_Item::m_GetRandomItemInClass(String(),t_requestedLevel2,String(L"chestChance",11),1,false,String(),false);
					c_Item* t_randomRedChestItem=(new c_Item)->m_new(-198,-197,t_randomRedChestItemType,false,-1,false);
					t_randomRedChestItem->m_singleChoiceItem=true;
					String t_randomWhiteChestItemType=c_Item::m_GetRandomItemInClass(String(),t_requestedLevel2,String(L"chestChance",11),3,false,String(),false);
					c_Item* t_randomWhiteChestItem=(new c_Item)->m_new(-197,-197,t_randomWhiteChestItemType,false,-1,false);
					t_randomWhiteChestItem->m_singleChoiceItem=true;
					String t_randomBlackChestItemType=c_Item::m_GetRandomItemInClass(String(),t_requestedLevel2,String(L"chestChance",11),2,false,String(),false);
					c_Item* t_randomBlackChestItem=(new c_Item)->m_new(-196,-197,t_randomBlackChestItemType,false,-1,false);
					t_randomBlackChestItem->m_singleChoiceItem=true;
					m_GetTileAt(-198,-197)->p_SetTrigger(18);
					m_GetTileAt(-197,-197)->p_SetTrigger(18);
					m_GetTileAt(-196,-197)->p_SetTrigger(18);
				}else{
					if(t_3==1){
						m_CreateRoom(-200,-200,6,9,false,10,-1,-1,-1,-1,false,100,false,true);
						m_GetTileAt(-199,-200)->p_AddTorch();
						m_GetTileAt(-195,-200)->p_AddTorch();
						m_GetTileAt(-199,-191)->p_AddTorch();
						m_GetTileAt(-195,-191)->p_AddTorch();
						m_GetTileAt(-200,-198)->p_AddTorch();
						m_GetTileAt(-194,-198)->p_AddTorch();
						m_GetTileAt(-200,-194)->p_AddTorch();
						m_GetTileAt(-194,-194)->p_AddTorch();
						int t_entranceX5=-197;
						int t_entranceY5=-193;
						m_specialRoomEntranceX=t_entranceX5;
						m_specialRoomEntranceY=t_entranceY5;
						(new c_TravelRune)->m_new(t_entranceX5,t_entranceY5+1,m_secretAtX,m_secretAtY,1);
						gc_assign(m_transmogrifier,(new c_Transmogrifier)->m_new(t_entranceX5,t_entranceY5-3,1,false));
						c_Tile* t_headTile=m_GetTileAt(t_entranceX5-1,t_entranceY5-4);
						t_headTile->p_AddFloorOverlayImage(String(L"level/tile_transmogrify_head.png",32));
						t_headTile->p_SetTrigger(11);
						c_Tile* t_bodyTile=m_GetTileAt(t_entranceX5-1,t_entranceY5-3);
						t_bodyTile->p_AddFloorOverlayImage(String(L"level/tile_transmogrify_body.png",32));
						t_bodyTile->p_SetTrigger(12);
						c_Tile* t_feetTile=m_GetTileAt(t_entranceX5-1,t_entranceY5-3);
						t_feetTile->p_AddFloorOverlayImage(String(L"level/tile_transmogrify_feet.png",32));
						t_feetTile->p_SetTrigger(13);
						c_Tile* t_torchTile=m_GetTileAt(t_entranceX5-1,t_entranceY5-2);
						t_torchTile->p_AddFloorOverlayImage(String(L"level/tile_transmogrify_torch.png",33));
						t_torchTile->p_SetTrigger(14);
						c_Tile* t_weaponTile=m_GetTileAt(t_entranceX5+1,t_entranceY5-2);
						t_weaponTile->p_AddFloorOverlayImage(String(L"level/tile_transmogrify_weapon.png",34));
						t_weaponTile->p_SetTrigger(15);
						c_Tile* t_shovelTile=m_GetTileAt(t_entranceX5+1,t_entranceY5-3);
						t_shovelTile->p_AddFloorOverlayImage(String(L"level/tile_transmogrify_shovel.png",34));
						t_shovelTile->p_SetTrigger(17);
						c_Tile* t_ringTile=m_GetTileAt(t_entranceX5+1,t_entranceY5-4);
						t_ringTile->p_AddFloorOverlayImage(String(L"level/tile_transmogrify_ring.png",32));
						t_ringTile->p_SetTrigger(16);
					}else{
						if(t_3==6){
							m_CreateRoom(-200,-200,6,9,false,10,-1,-1,-1,-1,false,100,false,true);
							m_GetTileAt(-199,-200)->p_AddTorch();
							m_GetTileAt(-195,-200)->p_AddTorch();
							m_GetTileAt(-199,-191)->p_AddTorch();
							m_GetTileAt(-195,-191)->p_AddTorch();
							m_GetTileAt(-200,-198)->p_AddTorch();
							m_GetTileAt(-194,-198)->p_AddTorch();
							m_GetTileAt(-200,-194)->p_AddTorch();
							m_GetTileAt(-194,-194)->p_AddTorch();
							int t_entranceX6=-197;
							int t_entranceY6=-193;
							m_specialRoomEntranceX=t_entranceX6;
							m_specialRoomEntranceY=t_entranceY6;
							(new c_TravelRune)->m_new(t_entranceX6,t_entranceY6,m_secretAtX,m_secretAtY,6);
							gc_assign(m_conjurer,(new c_Conjurer)->m_new(t_entranceX6-1,t_entranceY6-6,1,false));
							c_Tile* t_headTile2=m_GetTileAt(t_entranceX6-1,t_entranceY6-4);
							t_headTile2->p_AddFloorOverlayImage(String(L"level/tile_transmogrify_head.png",32));
							t_headTile2->p_SetTrigger(38);
							c_Tile* t_bodyTile2=m_GetTileAt(t_entranceX6-1,t_entranceY6-3);
							t_bodyTile2->p_AddFloorOverlayImage(String(L"level/tile_transmogrify_body.png",32));
							t_bodyTile2->p_SetTrigger(39);
							c_Tile* t_feetTile2=m_GetTileAt(t_entranceX6-1,t_entranceY6-3);
							t_feetTile2->p_AddFloorOverlayImage(String(L"level/tile_transmogrify_feet.png",32));
							t_feetTile2->p_SetTrigger(40);
							c_Tile* t_torchTile2=m_GetTileAt(t_entranceX6-1,t_entranceY6-2);
							t_torchTile2->p_AddFloorOverlayImage(String(L"level/tile_transmogrify_torch.png",33));
							t_torchTile2->p_SetTrigger(41);
							c_Tile* t_weaponTile2=m_GetTileAt(t_entranceX6+1,t_entranceY6-2);
							t_weaponTile2->p_AddFloorOverlayImage(String(L"level/tile_transmogrify_weapon.png",34));
							t_weaponTile2->p_SetTrigger(42);
							c_Tile* t_shovelTile2=m_GetTileAt(t_entranceX6+1,t_entranceY6-3);
							t_shovelTile2->p_AddFloorOverlayImage(String(L"level/tile_transmogrify_shovel.png",34));
							t_shovelTile2->p_SetTrigger(44);
							c_Tile* t_ringTile2=m_GetTileAt(t_entranceX6+1,t_entranceY6-4);
							t_ringTile2->p_AddFloorOverlayImage(String(L"level/tile_transmogrify_ring.png",32));
							t_ringTile2->p_SetTrigger(43);
						}else{
							if(t_3==7){
								m_CreateRoom(-200,-200,6,9,false,10,-1,-1,-1,-1,false,100,false,true);
								m_GetTileAt(-199,-200)->p_AddTorch();
								m_GetTileAt(-195,-200)->p_AddTorch();
								m_GetTileAt(-199,-191)->p_AddTorch();
								m_GetTileAt(-195,-191)->p_AddTorch();
								m_GetTileAt(-200,-198)->p_AddTorch();
								m_GetTileAt(-194,-198)->p_AddTorch();
								m_GetTileAt(-200,-194)->p_AddTorch();
								m_GetTileAt(-194,-194)->p_AddTorch();
								int t_entranceX7=-197;
								int t_entranceY7=-193;
								m_specialRoomEntranceX=t_entranceX7;
								m_specialRoomEntranceY=t_entranceY7;
								(new c_TravelRune)->m_new(t_entranceX7,t_entranceY7,m_secretAtX,m_secretAtY,7);
								c_Shriner* t_shriner=(new c_Shriner)->m_new(t_entranceX7,t_entranceY7-4,1,false);
								gc_assign(m_shriner,t_shriner);
								int t_shrineType1=c_Shrine::m_GetRandomShrineInt(true,-1,-2);
								int t_shrineType2=c_Shrine::m_GetRandomShrineInt(true,t_shrineType1,-2);
								int t_shrineType3=c_Shrine::m_GetRandomShrineInt(true,t_shrineType1,t_shrineType2);
								gc_assign(t_shriner->m_shrine1,(new c_Shrine)->m_new(t_entranceX7-1,t_entranceY7-2,t_shrineType1,0,true,true));
								gc_assign(t_shriner->m_shrine2,(new c_Shrine)->m_new(t_entranceX7,t_entranceY7-2,t_shrineType2,0,true,true));
								gc_assign(t_shriner->m_shrine3,(new c_Shrine)->m_new(t_entranceX7+1,t_entranceY7-2,t_shrineType3,0,true,true));
							}else{
								if(t_3==8){
									m_CreateRoom(-200,-200,6,9,false,10,-1,-1,-1,-1,false,100,false,true);
									m_GetTileAt(-199,-200)->p_AddTorch();
									m_GetTileAt(-195,-200)->p_AddTorch();
									m_GetTileAt(-199,-191)->p_AddTorch();
									m_GetTileAt(-195,-191)->p_AddTorch();
									m_GetTileAt(-200,-198)->p_AddTorch();
									m_GetTileAt(-194,-198)->p_AddTorch();
									m_GetTileAt(-200,-194)->p_AddTorch();
									m_GetTileAt(-194,-194)->p_AddTorch();
									int t_entranceX8=-197;
									int t_entranceY8=-193;
									m_specialRoomEntranceX=t_entranceX8;
									m_specialRoomEntranceY=t_entranceY8;
									(new c_TravelRune)->m_new(t_entranceX8,t_entranceY8,m_secretAtX,m_secretAtY,8);
									gc_assign(m_pawnbroker,(new c_Pawnbroker)->m_new(t_entranceX8,t_entranceY8-6,1,false));
									c_Tile* t_headTile3=m_GetTileAt(t_entranceX8-1,t_entranceY8-4);
									t_headTile3->p_AddFloorOverlayImage(String(L"level/tile_transmogrify_head.png",32));
									t_headTile3->p_SetTrigger(45);
									c_Tile* t_bodyTile3=m_GetTileAt(t_entranceX8-1,t_entranceY8-3);
									t_bodyTile3->p_AddFloorOverlayImage(String(L"level/tile_transmogrify_body.png",32));
									t_bodyTile3->p_SetTrigger(46);
									c_Tile* t_feetTile3=m_GetTileAt(t_entranceX8-1,t_entranceY8-3);
									t_feetTile3->p_AddFloorOverlayImage(String(L"level/tile_transmogrify_feet.png",32));
									t_feetTile3->p_SetTrigger(47);
									c_Tile* t_torchTile3=m_GetTileAt(t_entranceX8-1,t_entranceY8-2);
									t_torchTile3->p_AddFloorOverlayImage(String(L"level/tile_transmogrify_torch.png",33));
									t_torchTile3->p_SetTrigger(48);
									c_Tile* t_weaponTile3=m_GetTileAt(t_entranceX8+1,t_entranceY8-2);
									t_weaponTile3->p_AddFloorOverlayImage(String(L"level/tile_transmogrify_weapon.png",34));
									t_weaponTile3->p_SetTrigger(49);
									c_Tile* t_shovelTile3=m_GetTileAt(t_entranceX8+1,t_entranceY8-3);
									t_shovelTile3->p_AddFloorOverlayImage(String(L"level/tile_transmogrify_shovel.png",34));
									t_shovelTile3->p_SetTrigger(51);
									c_Tile* t_ringTile3=m_GetTileAt(t_entranceX8+1,t_entranceY8-4);
									t_ringTile3->p_AddFloorOverlayImage(String(L"level/tile_transmogrify_ring.png",32));
									t_ringTile3->p_SetTrigger(50);
									c_Tile* t_tile=m_GetTileAt(t_entranceX8,t_entranceY8-5);
									t_tile->p_AddTextLabel(String(L"|124|SELL ONE OF YOUR ITEMS?|",29),0,20,FLOAT(0.0),false,true);
								}
							}
						}
					}
				}
			}
		}
	}
	bb_logger_Debug->p_Log(String(L"Finished adding special room",28));
}
bool c_Level::m__ReplaceIndestructibleOrphans(){
	c_NodeEnumerator* t_=m_tiles->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Node25* t_tilesOnXNode=t_->p_NextObject();
		c_NodeEnumerator2* t_2=t_tilesOnXNode->p_Value()->p_ObjectEnumerator();
		while(t_2->p_HasNext()){
			c_Node26* t_tileNode=t_2->p_NextObject();
			int t_x0=t_tilesOnXNode->p_Key();
			int t_y0=t_tileNode->p_Key();
			if(m_GetTileTypeAt(t_x0,t_y0)==102){
				int t_i=0;
				for(int t_y=t_y0-1;t_y<=t_y0+1;t_y=t_y+1){
					for(int t_x=t_x0-1;t_x<=t_x0+1;t_x=t_x+1){
						if(t_x==t_x0 && t_y==t_y0){
							continue;
						}
						if((m_GetTileAt(t_x,t_y))!=0){
							t_i+=1;
						}
					}
				}
				if(t_i==8){
					m_PlaceTileRemovingExistingTiles(t_x0,t_y0,100,false,-1,false);
					return false;
				}
			}
		}
	}
	return true;
}
void c_Level::m_CreateIndestructibleBorder(){
	bb_logger_Debug->p_Log(String(L"CREATEINDESTRUCTIBLEBORDER: Creating indestructible outer wall",62));
	c_List18* t_borderTiles=(new c_List18)->m_new();
	c_NodeEnumerator* t_=m_tiles->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Node25* t_tilesOnXNode=t_->p_NextObject();
		c_NodeEnumerator2* t_2=t_tilesOnXNode->p_Value()->p_ObjectEnumerator();
		while(t_2->p_HasNext()){
			c_Node26* t_tileNode=t_2->p_NextObject();
			int t_x0=t_tilesOnXNode->p_Key();
			int t_y0=t_tileNode->p_Key();
			for(int t_y=t_y0-1;t_y<=t_y0+1;t_y=t_y+1){
				for(int t_x=t_x0-1;t_x<=t_x0+1;t_x=t_x+1){
					if(t_x==t_x0 && t_y==t_y0){
						continue;
					}
					if(m_GetTileAt(t_x,t_y)==0){
						t_borderTiles->p_AddLast18((new c_TileData)->m_new(t_x,t_y,102));
					}
				}
			}
		}
	}
	c_Enumerator8* t_3=t_borderTiles->p_ObjectEnumerator();
	while(t_3->p_HasNext()){
		c_TileData* t_borderTile=t_3->p_NextObject();
		(new c_Tile)->m_new(t_borderTile->m_x,t_borderTile->m_y,t_borderTile->m_type,false,-1);
	}
	bb_logger_Debug->p_Log(String(L"CREATEINDESTRUCTIBLEBORDER: Replacing indestructible orphans",60));
	while(!m__ReplaceIndestructibleOrphans()){
	}
}
void c_Level::m_CreateSwarmMap(){
	m_InitNewMap(true);
	m_DisableLevelConstraints();
	m_CreateRoom(-9,-5,18,10,false,4,-1,-1,-1,-1,false,100,false,true);
	(new c_SwarmSarcophagus)->m_new(-7,-3);
	(new c_SwarmSarcophagus)->m_new(-7,-1);
	(new c_SwarmSarcophagus)->m_new(-7,1);
	(new c_SwarmSarcophagus)->m_new(-7,3);
	(new c_SwarmSarcophagus)->m_new(7,-3);
	(new c_SwarmSarcophagus)->m_new(7,-1);
	(new c_SwarmSarcophagus)->m_new(7,1);
	(new c_SwarmSarcophagus)->m_new(7,3);
	m_CreateIndestructibleBorder();
}
c_RoomData* c_Level::m_PlaceFirstRoom(){
	bb_logger_Debug->p_Log(String(L"Creating first room",19));
	m_CreateRoom(-3,-3,6,6,false,4,-1,-1,-1,-1,false,100,false,true);
	c_RoomData* t_roomData=(new c_RoomData)->m_new(-3,-3,6,6,4,false);
	gc_assign(m_firstRoom,t_roomData);
	return t_roomData;
}
void c_Level::m_PlaceConnectedWireDoor(c_Point* t_p){
	c_Tile* t_wiredDoor=m_PlaceTileRemovingExistingTiles2(t_p->m_x,t_p->m_y,118);
	for(int t_d=0;t_d<3;t_d=t_d+1){
		c_Point* t_offset=c_Util::m_GetPointFromDir(t_d);
		c_Point* t_connectionPoint=t_p->p_Add5(t_offset);
		if(m_IsFloorAt(t_connectionPoint->m_x,t_connectionPoint->m_y)){
			t_wiredDoor->p_AddWireConnection(t_d);
		}
	}
}
bool c_Level::m_debugForceMonstrousShop;
bool c_Level::m_IsDoorAt(int t_xVal,int t_yVal){
	c_Tile* t_tile=m_GetTileAt(t_xVal,t_yVal);
	return ((t_tile)!=0) && t_tile->p_IsDoor();
}
bool c_Level::m_IsDoorAdjacent(int t_x,int t_y){
	c_Point* t_center=(new c_Point)->m_new(t_x,t_y);
	for(int t_i=0;t_i<=3;t_i=t_i+1){
		c_Point* t_offset=c_Util::m_GetPointFromDir(t_i);
		c_Point* t_adjacent=t_center->p_Add5(t_offset);
		if(m_IsDoorAt(t_adjacent->m_x,t_adjacent->m_y)){
			return true;
		}
	}
	return false;
}
void c_Level::m_PlaceShopItemsAt(int t_tmpX,int t_tmpY,c_Rect* t_door){
	int t_itemsXMid=t_tmpX+3;
	int t_itemsY=t_tmpY+5;
	if(t_door==0){
		t_door=(new c_Rect)->m_new(m_carveX,m_carveY,0,0);
	}
	bool t_monstrousShop=false;
	if(m_isHardcoreMode || bb_controller_game_currentDepth>1){
		t_monstrousShop=true;
		if(c_Util::m_RndIntRangeFromZero(160,true)!=0){
			t_monstrousShop=m_debugForceMonstrousShop;
		}
	}
	if(!c_Util::m_IsCharacterActive(15)){
		if(!m_shopkeeperDead){
			if(t_monstrousShop){
				(new c_Shopkeeper)->m_new(t_itemsXMid,t_itemsY-2,5,false);
			}else{
				(new c_Shopkeeper)->m_new(t_itemsXMid,t_itemsY-2,1,false);
			}
		}
	}
	bool t_createKey=false;
	if(!m_isHardcoreMode && !m_isDDRMode && !m_isLevelEditor){
		if(bb_controller_game_currentZone==1 && bb_controller_game_currentLevel==1){
			t_createKey=!c_GameData::m_GetNPCUnlock(String(L"beastmaster",11));
		}else{
			if(bb_controller_game_currentZone==1 && bb_controller_game_currentLevel==3){
				t_createKey=!c_GameData::m_GetNPCUnlock(String(L"bossmaster",10));
			}else{
				if(bb_controller_game_currentZone==2 && bb_controller_game_currentLevel==2){
					t_createKey=!c_GameData::m_GetNPCUnlock(String(L"weaponmaster",12));
				}
			}
		}
	}
	int t_lockedShopRoll=c_Util::m_RndIntRangeFromZero(3,true);
	if(t_lockedShopRoll==0 && bb_controller_game_currentLevel>1 && !m_lockedShopPlaced){
		c_Point* t_randomPoint=t_door->p_RandomPoint();
		(new c_Tile)->m_new(t_randomPoint->m_x,t_randomPoint->m_y,110,false,-1);
		m_addKeyInSecretChest=true;
		if(!c_Util::m_IsCharacterActive(15)){
			if(t_createKey){
				String t_key=String();
				int t_145=bb_controller_game_currentLevel;
				if(t_145==1){
					t_key=String(L"misc_golden_key",15);
				}else{
					if(t_145==2){
						t_key=String(L"misc_golden_key3",16);
					}else{
						t_key=String(L"misc_golden_key2",16);
					}
				}
				(new c_SaleItem)->m_new(t_itemsXMid-1,t_itemsY,t_key,false,0,FLOAT(-1.0),0);
			}else{
				String t_item1Name=c_SaleItem::m_GetRandomItem(bb_controller_game_currentLevel,String(L"lockedShopChance",16));
				c_SaleItem* t_item1=(new c_SaleItem)->m_new(t_itemsXMid-1,t_itemsY,t_item1Name,false,0,FLOAT(-1.0),0);
				t_item1->p_ApplyDiscount(FLOAT(0.5));
				if(t_item1->m_itemType==String(L"resource_hoard_gold",19)){
					t_item1->p_Die();
				}
			}
			if(!c_Util::m_IsWeaponlessCharacterActive()){
				String t_item2Name=c_SaleItem::m_GetRandomItem(bb_controller_game_currentLevel,String(L"lockedShopChance",16));
				c_SaleItem* t_item2=(new c_SaleItem)->m_new(t_itemsXMid+0,t_itemsY,t_item2Name,false,0,FLOAT(-1.0),0);
				t_item2->p_ApplyDiscount(FLOAT(0.5));
				if(t_item2->m_itemType==String(L"resource_hoard_gold",19)){
					t_item2->p_Die();
				}
			}
			String t_item3Name=c_SaleItem::m_GetRandomItem(bb_controller_game_currentLevel,String(L"lockedShopChance",16));
			c_SaleItem* t_item3=(new c_SaleItem)->m_new(t_itemsXMid+1,t_itemsY,t_item3Name,false,0,FLOAT(-1.0),0);
			t_item3->p_ApplyDiscount(FLOAT(0.5));
			if(t_item3->m_itemType==String(L"resource_hoard_gold",19)){
				t_item3->p_Die();
			}
			bb_logger_Debug->p_Log(String(L"PlaceShopItemsAt ZONE ",22)+String(bb_controller_game_currentZone)+String(L": Placing LOCKED shop at ",25)+String(t_tmpX)+String(L", ",2)+String(t_tmpY));
			if(m_shopkeeperDead){
				bb_logger_Debug->p_Log(String(L"PlaceShopItemsAt: REMOVING items since shopkeeper is dead.",58));
				c_Item* t_item1Pickup=c_Item::m_GetPickupAt(t_itemsXMid-1,t_itemsY,0);
				if((t_item1Pickup)!=0){
					t_item1Pickup->p_Die();
				}
				c_Item* t_item2Pickup=c_Item::m_GetPickupAt(t_itemsXMid+0,t_itemsY,0);
				if((t_item2Pickup)!=0){
					t_item2Pickup->p_Die();
				}
				c_Item* t_item3Pickup=c_Item::m_GetPickupAt(t_itemsXMid+1,t_itemsY,0);
				if((t_item3Pickup)!=0){
					t_item3Pickup->p_Die();
				}
			}
		}
		m_lockedShopPlaced=true;
	}else{
		if(!m_isHardcoreMode || ((c_Util::m_RndIntRangeFromZero(8,true))!=0)){
			c_Enumerator24* t_=t_door->p_GetPoints()->p_ObjectEnumerator();
			while(t_->p_HasNext()){
				c_Point* t_point=t_->p_NextObject();
				c_Tile* t_tile=(new c_Tile)->m_new(t_point->m_x,t_point->m_y,103,false,-1);
				t_tile->p_SetDoorTrigger(3);
			}
		}else{
			c_Point* t_randomPoint2=t_door->p_RandomPoint();
			c_Tile* t_tile2=(new c_Tile)->m_new(t_randomPoint2->m_x,t_randomPoint2->m_y,111,false,-1);
			t_tile2->p_SetDoorTrigger(3);
		}
		int t_replaceWithChestPosition=-1;
		if(c_Util::m_RndIntRangeFromZero(3,true)==0){
			t_replaceWithChestPosition=c_Util::m_RndIntRange(1,3,true,-1);
		}
		int t_chestColor=c_Util::m_RndIntRange(1,3,true,-1);
		if(m_isFloorIsLavaMode){
			t_replaceWithChestPosition=-1;
		}
		if(!c_Util::m_IsCharacterActive(15)){
			c_Entity* t_item12=0;
			if(t_createKey){
				String t_key2=String();
				int t_146=bb_controller_game_currentLevel;
				if(t_146==1){
					t_key2=String(L"misc_golden_key",15);
				}else{
					if(t_146==2){
						t_key2=String(L"misc_golden_key3",16);
					}else{
						t_key2=String(L"misc_golden_key2",16);
					}
				}
				t_item12=((new c_SaleItem)->m_new(t_itemsXMid-1,t_itemsY,t_key2,false,0,FLOAT(-1.0),0));
			}else{
				if(t_replaceWithChestPosition==1){
					t_item12=((new c_SaleChest)->m_new(t_itemsXMid-1,t_itemsY,String(L"no_item",7),false,false,false,t_chestColor));
				}else{
					String t_randomItemName=c_SaleItem::m_GetRandomItem(bb_controller_game_currentLevel,String(L"shopChance",10));
					t_item12=((new c_SaleItem)->m_new(t_itemsXMid-1,t_itemsY,t_randomItemName,false,0,FLOAT(-1.0),0));
				}
			}
			if(m_shopkeeperDead){
				t_item12->p_Die();
			}
			if(!c_Util::m_IsWeaponlessCharacterActive()){
				c_Entity* t_item22=0;
				if(t_replaceWithChestPosition==2){
					t_item22=((new c_SaleChest)->m_new(t_itemsXMid+0,t_itemsY,String(L"no_item",7),false,false,false,t_chestColor));
				}else{
					String t_randomItemName2=c_SaleItem::m_GetRandomItem(bb_controller_game_currentLevel,String(L"shopChance",10));
					t_item22=((new c_SaleItem)->m_new(t_itemsXMid+0,t_itemsY,t_randomItemName2,false,0,FLOAT(-1.0),0));
				}
				if(m_shopkeeperDead){
					t_item22->p_Die();
				}
			}
			c_Entity* t_item32=0;
			if(t_replaceWithChestPosition==3){
				t_item32=((new c_SaleChest)->m_new(t_itemsXMid+1,t_itemsY,String(L"no_item",7),false,false,false,t_chestColor));
			}else{
				String t_randomItemName3=c_SaleItem::m_GetRandomItem(bb_controller_game_currentLevel,String(L"shopChance",10));
				t_item32=((new c_SaleItem)->m_new(t_itemsXMid+1,t_itemsY,t_randomItemName3,false,0,FLOAT(-1.0),0));
			}
			if(m_shopkeeperDead){
				t_item32->p_Die();
			}
			bb_logger_Debug->p_Log(String(L"PlaceShopItemsAt ZONE ",22)+String(bb_controller_game_currentZone)+String(L": Placing shop at ",18)+String(t_tmpX)+String(L", ",2)+String(t_tmpY));
		}
	}
	c_NodeEnumerator* t_2=m_tiles->p_ObjectEnumerator();
	while(t_2->p_HasNext()){
		c_Node25* t_tilesOnXNode=t_2->p_NextObject();
		c_NodeEnumerator2* t_3=t_tilesOnXNode->p_Value()->p_ObjectEnumerator();
		while(t_3->p_HasNext()){
			c_Node26* t_tileNode=t_3->p_NextObject();
			c_Tile* t_tile3=t_tileNode->p_Value();
			if(t_tile3->p_IsShopWall()){
				t_tile3->p_SetDigTrigger(3);
				if(t_monstrousShop){
					t_tile3->p_DarkenShopWall();
				}
			}
		}
	}
	if(bb_controller_game_currentDepth>2 && !t_monstrousShop){
		int t_fakeWallRoll=c_Util::m_RndIntRange(1,5,true,-1);
		if(t_fakeWallRoll<=2){
			c_IntPointStack* t_pointsNotAdjacentToDoors=(new c_IntPointStack)->m_new();
			c_NodeEnumerator* t_4=m_tiles->p_ObjectEnumerator();
			while(t_4->p_HasNext()){
				c_Node25* t_tilesOnXNode2=t_4->p_NextObject();
				c_NodeEnumerator2* t_5=t_tilesOnXNode2->p_Value()->p_ObjectEnumerator();
				while(t_5->p_HasNext()){
					c_Node26* t_tileNode2=t_5->p_NextObject();
					c_Tile* t_tile4=t_tileNode2->p_Value();
					if(!m_IsDoorAdjacent(t_tile4->m_x,t_tile4->m_y) && m_GetTileTypeAt(t_tile4->m_x,t_tile4->m_y)==104){
						t_pointsNotAdjacentToDoors->p_Push10((new c_Point)->m_new(t_tile4->m_x,t_tile4->m_y));
					}
				}
			}
			c_Point* t_fakeWallLocation=t_pointsNotAdjacentToDoors->p_ChooseRandom(true);
			m_PlaceTileRemovingExistingTiles2(t_fakeWallLocation->m_x,t_fakeWallLocation->m_y,0);
			(new c_FakeWall)->m_new(t_fakeWallLocation->m_x,t_fakeWallLocation->m_y,2);
		}
	}
}
void c_Level::m_CreateRoomZone5(c_RoomWithDoor* t_rm,int t_roomType){
	bb_logger_Debug->p_Log(String(L"CREATEROOMZONE5: Placing room ",30)+t_rm->m_body->p_ToString()+String(L" with door ",11)+t_rm->m_door->p_ToString()+String(L" of type ",9)+String(t_roomType));
	int t_40=t_roomType;
	if(t_40==3){
		m_CreateRoom3(t_rm->m_body->m_x,t_rm->m_body->m_y,t_rm->m_body->m_w,t_rm->m_body->m_h,false,t_roomType);
		m_PlaceShopItemsAt(t_rm->m_body->m_x,t_rm->m_body->m_y,t_rm->m_door);
	}else{
		m_FillTiles(t_rm->m_body,0,100);
		m_FillTiles(t_rm->m_door,103,-1);
		c_Point* t_doorCenter=t_rm->m_door->p_GetCenter();
		m_PlaceConnectedWireDoor(t_doorCenter);
	}
	m_rooms->p_AddLast14(t_rm->p_ToRoomData(t_roomType));
}
bool c_Level::m_IsZone5RoomLegal(c_Rect* t_loc){
	for(int t_x=t_loc->p_GetLeft();t_x<=t_loc->p_GetRight();t_x=t_x+1){
		for(int t_y=t_loc->p_GetTop();t_y<=t_loc->p_GetBottom();t_y=t_y+1){
			c_Tile* t_tile=m_GetTileAt(t_x,t_y);
			if(t_tile==0){
				continue;
			}
			int t_tileType=t_tile->p_GetType();
			if(t_tileType!=-1 && (t_tileType!=100 || !t_loc->p_OnBorder(t_x,t_y))){
				return false;
			}
		}
	}
	return true;
}
c_RoomWithDoor* c_Level::m_PlaceRoomZone5(c_PortalSeg* t_pseg,int t_width,int t_height,int t_minEntryDist){
	c_Point* t_origin=t_pseg->p_GetOrigin();
	c_Point* t_normal=t_pseg->p_GetNormal();
	c_Point* t_faceVector=t_pseg->p_GetFaceVector();
	int t_length=t_pseg->p_GetLength();
	int t_faceScalar=t_width;
	int t_normalScalar=t_height;
	if(t_faceVector->m_y!=0){
		t_faceScalar=t_height;
		t_normalScalar=t_width;
	}
	c_StackEx4* t_rooms=(new c_StackEx4)->m_new();
	for(int t_i=3;t_i<t_faceScalar+t_length-2;t_i=t_i+1){
		c_Point* t_scaledFaceVector1=t_faceVector->p_Scale(t_i);
		c_Point* t_offsetOrigin1=t_origin->p_Add5(t_scaledFaceVector1);
		c_Point* t_scaledNormal=t_normal->p_Scale(t_normalScalar);
		c_Point* t_offsetOrigin2=t_offsetOrigin1->p_Add5(t_scaledNormal);
		c_Point* t_scaledFaceVector2=t_faceVector->p_Scale(-t_faceScalar);
		t_offsetOrigin2=t_offsetOrigin2->p_Add5(t_scaledFaceVector2);
		int t_bodyX=bb_math_Min(t_offsetOrigin1->m_x,t_offsetOrigin2->m_x);
		int t_bodyY=bb_math_Min(t_offsetOrigin1->m_y,t_offsetOrigin2->m_y);
		int t_bodyXMax=bb_math_Max(t_offsetOrigin1->m_x,t_offsetOrigin2->m_x);
		int t_bodyYMax=bb_math_Max(t_offsetOrigin1->m_y,t_offsetOrigin2->m_y);
		c_Rect* t_body=c_Rect::m_MakeBounds(t_bodyX,t_bodyY,t_bodyXMax,t_bodyYMax);
		if(m_IsZone5RoomLegal(t_body)){
			c_Rect* t_firstRoomBounds=m_firstRoom->p_GetBounds();
			if(t_firstRoomBounds->p_GetL1Dist2(t_body)>=t_minEntryDist){
				for(int t_j=1;t_j<t_length-1;t_j=t_j+1){
					c_Point* t_scaledFaceVector3=t_faceVector->p_Scale(t_j);
					c_Point* t_offsetOrigin3=t_origin->p_Add5(t_scaledFaceVector3);
					c_Point* t_scaledFaceVector4=t_faceVector->p_Scale(2);
					c_Point* t_offsetOrigin4=t_offsetOrigin3->p_Add5(t_scaledFaceVector4);
					int t_doorX=bb_math_Min(t_offsetOrigin3->m_x,t_offsetOrigin4->m_x);
					int t_doorY=bb_math_Min(t_offsetOrigin3->m_y,t_offsetOrigin4->m_y);
					int t_doorXMax=bb_math_Max(t_offsetOrigin3->m_x,t_offsetOrigin4->m_x);
					int t_doorYMax=bb_math_Max(t_offsetOrigin3->m_y,t_offsetOrigin4->m_y);
					c_Rect* t_door=c_Rect::m_MakeBounds(t_doorX,t_doorY,t_doorXMax,t_doorYMax);
					if(t_body->p_ContainsNoCorners(t_door)){
						c_RoomWithDoor* t_room=(new c_RoomWithDoor)->m_new(t_body,t_door);
						bb_logger_Debug->p_Assert(t_body->p_Contains6(t_door),String());
						t_rooms->p_Push25(t_room);
					}
				}
			}
		}
	}
	if(t_rooms->p_Length()!=0){
		return t_rooms->p_ChooseRandom(true);
	}
	return 0;
}
c_RoomWithDoor* c_Level::m_PlaceRoomZone52(c_StackEx3* t_portalSegs,int t_width,int t_height,int t_minEntryDist,int t_roomType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Level.PlaceRoomZone5(StackEx<PortalSeg>, Int, Int, Int, Int)",60));
	return 0;
}
c_RoomWithDoor* c_Level::m_CreateRoomZone52(c_StackEx3* t_portalSegs,int t_width,int t_height,int t_minEntryDist,int t_roomType){
	t_portalSegs->p_Shuffle(true);
	c_Enumerator23* t_=t_portalSegs->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_PortalSeg* t_portalSeg=t_->p_NextObject();
		c_RoomWithDoor* t_room=m_PlaceRoomZone5(t_portalSeg,t_width,t_height,t_minEntryDist);
		if(t_room!=0){
			m_CreateRoomZone5(t_room,t_roomType);
			return t_room;
		}
	}
	return 0;
}
c_RoomWithDoor* c_Level::m_CreateRoomZone53(c_StackEx3* t_portalSegs,int t_width,int t_height,int t_minEntryDist){
	return m_CreateRoomZone52(t_portalSegs,t_width,t_height,t_minEntryDist,0);
}
bool c_Level::m_IsWallAdjacent8(int t_xVal,int t_yVal){
	for(int t_y=t_yVal-1;t_y<=t_yVal+1;t_y=t_y+1){
		for(int t_x=t_xVal-1;t_x<=t_xVal+1;t_x=t_x+1){
			if(t_x==t_xVal && t_y==t_yVal){
				continue;
			}
			if(m_IsWallAt(t_x,t_y,false,false)){
				return true;
			}
		}
	}
	return false;
}
bool c_Level::m_IsExitAt(int t_x,int t_y){
	c_Tile* t_tile=m_GetTileAt(t_x,t_y);
	return ((t_tile)!=0) && t_tile->p_IsExit();
}
bool c_Level::m_PlaceWire(c_Point* t_src,c_Point* t_dst){
	bb_logger_Debug->p_Log(String(L"PLACEWIRE: Wiring ",18)+t_src->p_ToString()+String(L" to ",4)+t_dst->p_ToString());
	c_IntPointMap2* t_connections=(new c_IntPointMap2)->m_new();
	c_List26* t_wirePoints=(new c_List26)->m_new();
	t_connections->p_Add6(t_src,0);
	t_wirePoints->p_AddLast26(t_src);
	while(t_wirePoints->p_Count()>0){
		c_Point* t_wirePoint=t_wirePoints->p_RemoveFirst();
		for(int t_dir=0;t_dir<=3;t_dir=t_dir+1){
			c_Point* t_offset=c_Util::m_GetPointFromDir(t_dir);
			c_Point* t_wirePointCandidate=t_wirePoint->p_Add5(t_offset);
			if(t_wirePointCandidate->p_Equals8(t_dst) || !m_IsWallAdjacent8(t_wirePointCandidate->m_x,t_wirePointCandidate->m_y)){
				if(m_IsFloorAt(t_wirePointCandidate->m_x,t_wirePointCandidate->m_y) && !t_connections->p_Contains5(t_wirePointCandidate)){
					t_connections->p_Add6(t_wirePointCandidate,t_wirePoint);
					t_wirePoints->p_AddLast26(t_wirePointCandidate);
				}
			}
		}
	}
	c_Point* t_dstKey=t_dst;
	if(t_connections->p_Contains5(t_dstKey)){
		c_Point* t_dstValue=0;
		int t_dirToPrev=-1;
		do{
			int t_dirToNext=-1;
			t_dstValue=t_connections->p_Get4(t_dstKey);
			if(t_dstValue!=0){
				int t_xDiff=t_dstValue->m_x-t_dstKey->m_x;
				int t_yDiff=t_dstValue->m_y-t_dstKey->m_y;
				if(t_xDiff>0){
					if(t_yDiff>0){
						t_dirToNext=4;
					}else{
						if(t_yDiff<0){
							t_dirToNext=7;
						}
					}
				}else{
					if(t_xDiff<0){
						if(t_yDiff>0){
							t_dirToNext=5;
						}else{
							if(t_yDiff<0){
								t_dirToNext=6;
							}
						}
					}else{
						if(t_yDiff>0){
							t_dirToNext=1;
						}else{
							if(t_yDiff<0){
								t_dirToNext=3;
							}
						}
					}
				}
				if(t_yDiff==0){
					if(t_xDiff>0){
						t_dirToNext=0;
					}else{
						if(t_xDiff<0){
							t_dirToNext=2;
						}
					}
				}
			}
			if(!m_IsExitAt(t_dstKey->m_x,t_dstKey->m_y)){
				c_Tile* t_wire=m_PlaceTileRemovingExistingTiles2(t_dstKey->m_x,t_dstKey->m_y,20);
				if(t_dirToPrev!=-1){
					t_wire->p_AddWireConnection(t_dirToPrev);
				}
				if(t_dirToNext!=-1){
					t_wire->p_AddWireConnection(t_dirToNext);
				}
			}
			int t_160=t_dirToNext;
			if(t_160==3){
				t_dirToPrev=1;
			}else{
				if(t_160==1){
					t_dirToPrev=3;
				}else{
					if(t_160==2){
						t_dirToPrev=0;
					}else{
						if(t_160==0){
							t_dirToPrev=2;
						}else{
							if(t_160==6){
								t_dirToPrev=4;
							}else{
								if(t_160==7){
									t_dirToPrev=5;
								}else{
									if(t_160==5){
										t_dirToPrev=7;
									}else{
										if(t_160==4){
											t_dirToPrev=6;
										}else{
											t_dirToPrev=-1;
										}
									}
								}
							}
						}
					}
				}
			}
			t_dstKey=t_dstValue;
		}while(!(t_dstValue==0));
		return true;
	}
	bb_logger_Debug->p_Log(String(L"PLACEWIRE: Failed to find route to destination",46));
	return false;
}
c_Point* c_Level::m_GetStandardExitCoords(){
	c_NodeEnumerator3* t_=m_exits->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Node33* t_ex=t_->p_NextObject();
		c_Point* t_exitValue=t_ex->p_Value();
		int t_57=t_exitValue->m_x;
		if(t_57==-3 || t_57==-6){
			return t_ex->p_Key();
		}
	}
	return 0;
}
bool c_Level::m_IsTileTypeAdjacent(int t_xVal,int t_yVal,int t_tempType){
	return m_GetTileTypeAt(t_xVal-1,t_yVal)==t_tempType || m_GetTileTypeAt(t_xVal+1,t_yVal)==t_tempType || m_GetTileTypeAt(t_xVal,t_yVal-1)==t_tempType || m_GetTileTypeAt(t_xVal,t_yVal+1)==t_tempType;
}
c_List26* c_Level::m_tempTileWalk;
void c_Level::m_RandomWalkOfTempTiles(int t_xVal,int t_yVal,int t_distCounter){
	do{
		if(c_Util::m_RndBool(true)){
			if(c_Util::m_RndBool(true)){
				t_xVal+=1;
			}else{
				t_xVal-=1;
			}
		}else{
			if(c_Util::m_RndBool(true)){
				t_yVal+=1;
			}else{
				t_yVal-=1;
			}
		}
		m_tempTileWalk->p_AddLast26((new c_Point)->m_new(t_xVal,t_yVal));
		t_distCounter-=1;
	}while(!(t_distCounter<=0));
}
void c_Level::m_PadWalls(){
	bb_logger_Debug->p_Log(String(L"PADWALLS: Padding walls",23));
	c_NodeEnumerator* t_=m_tiles->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Node25* t_tilesOnXNode=t_->p_NextObject();
		c_NodeEnumerator2* t_2=t_tilesOnXNode->p_Value()->p_ObjectEnumerator();
		while(t_2->p_HasNext()){
			c_Node26* t_tileNode=t_2->p_NextObject();
			c_Tile* t_tile=t_tileNode->p_Value();
			if(t_tile->p_IsWall2()){
				int t_x=t_tilesOnXNode->p_Key();
				int t_y=t_tileNode->p_Key();
				m_RandomWalkOfTempTiles(t_x,t_y,2);
			}
		}
	}
	c_Enumerator16* t_3=m_tempTileWalk->p_ObjectEnumerator();
	while(t_3->p_HasNext()){
		c_Point* t_location=t_3->p_NextObject();
		int t_x2=t_location->m_x;
		int t_y2=t_location->m_y;
		if(!((m_GetTileAt(t_x2,t_y2))!=0)){
			(new c_Tile)->m_new(t_x2,t_y2,101,false,-1);
		}
	}
	m_tempTileWalk->p_Clear();
}
void c_Level::m_ProcessSpecialRoom(){
	bb_logger_Debug->p_Log(String(L"Processing special rooms",24));
	if(bb_controller_game_currentDepth==m_placeTransmogrifierOnDepth && bb_controller_game_currentLevel==m_placeTransmogrifierOnLevel){
		m_AddSpecialRoom(1,true);
	}else{
		if(bb_controller_game_currentDepth==m_placeArenaOnDepth && bb_controller_game_currentLevel==m_placeArenaOnLevel){
			m_AddSpecialRoom(2,true);
		}else{
			if(bb_controller_game_currentDepth==m_placeBloodShopOnDepth && bb_controller_game_currentLevel==m_placeBloodShopOnLevel){
				m_AddSpecialRoom(3,true);
			}else{
				if(bb_controller_game_currentDepth==m_placeGlassShopOnDepth && bb_controller_game_currentLevel==m_placeGlassShopOnLevel){
					m_AddSpecialRoom(4,true);
				}else{
					if(bb_controller_game_currentDepth==m_placeFoodShopOnDepth && bb_controller_game_currentLevel==m_placeFoodShopOnLevel){
						m_AddSpecialRoom(5,true);
					}else{
						if(bb_controller_game_currentDepth==m_placeConjurerOnDepth && bb_controller_game_currentLevel==m_placeConjurerOnLevel){
							m_AddSpecialRoom(6,true);
						}else{
							if(bb_controller_game_currentDepth==m_placeShrinerOnDepth && bb_controller_game_currentLevel==m_placeShrinerOnLevel){
								m_AddSpecialRoom(7,true);
							}else{
								if(bb_controller_game_currentDepth==m_placePawnbrokerOnDepth && bb_controller_game_currentLevel==m_placePawnbrokerOnLevel){
									m_AddSpecialRoom(8,true);
								}
							}
						}
					}
				}
			}
		}
	}
	bb_logger_Debug->p_Log(String(L"Done processing special rooms",29));
}
int c_Level::m_chestsStillToPlace;
bool c_Level::m_IsSurroundedByDestructibleWalls(int t_xVal,int t_yVal){
	for(int t_x=t_xVal-1;t_x<=t_xVal+1;t_x=t_x+1){
		for(int t_y=t_yVal-1;t_y<=t_yVal+1;t_y=t_y+1){
			if(!m_IsWallAt(t_x,t_y,true,false)){
				return false;
			}
		}
	}
	return true;
}
bool c_Level::m_IsCrackedWallAt(int t_xVal,int t_yVal){
	c_Tile* t_tile=m_GetTileAt(t_xVal,t_yVal);
	return ((t_tile)!=0) && t_tile->m_isCracked;
}
bool c_Level::m_IsCrackedWallAdjacent(int t_xVal,int t_yVal){
	for(int t_x=t_xVal-1;t_x<=t_xVal+1;t_x=t_x+1){
		for(int t_y=t_yVal-1;t_y<=t_yVal+1;t_y=t_y+1){
			if(t_x==t_xVal && t_y==t_yVal){
				continue;
			}
			if(m_IsCrackedWallAt(t_x,t_y)){
				return true;
			}
		}
	}
	return false;
}
c_SecretRoomData* c_Level::m__CreateSecretRoom(int t_xVal,int t_yVal,int t_width,int t_height){
	bool t_isCrackedWallAdjacentToRoom=false;
	for(int t_x=t_xVal;t_x<=t_xVal+t_width;t_x=t_x+1){
		for(int t_y=t_yVal;t_y<=t_yVal+t_height;t_y=t_y+1){
			if(!m_IsSurroundedByDestructibleWalls(t_x,t_y)){
				return 0;
			}
			if(m_IsCrackedWallAdjacent(t_x,t_y)){
				t_isCrackedWallAdjacentToRoom=true;
			}
		}
	}
	int t_roomX=t_xVal-1;
	int t_roomY=t_yVal-1;
	int t_roomW=t_width+2;
	int t_roomH=t_height+2;
	return (new c_SecretRoomData)->m_new(t_roomX,t_roomY,t_roomW,t_roomH,t_isCrackedWallAdjacentToRoom);
}
void c_Level::m_PlaceSecretRooms(int t_numRooms){
	c_SecretRoomData* t_room=0;
	c_NodeEnumerator* t_=m_tiles->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Node25* t_tilesOnXNode=t_->p_NextObject();
		c_NodeEnumerator2* t_2=t_tilesOnXNode->p_Value()->p_ObjectEnumerator();
		while(t_2->p_HasNext()){
			c_Node26* t_tileNode=t_2->p_NextObject();
			int t_x=t_tilesOnXNode->p_Key();
			int t_y=t_tileNode->p_Key();
			t_room=m__CreateSecretRoom(t_x,t_y,2,2);
			if(!((t_room)!=0)){
				t_room=m__CreateSecretRoom(t_x,t_y,1,2);
			}
			if(!((t_room)!=0)){
				t_room=m__CreateSecretRoom(t_x,t_y,2,1);
			}
			if(!((t_room)!=0)){
				t_room=m__CreateSecretRoom(t_x,t_y,1,1);
			}
			if((t_room)!=0){
				int t_rndVal=c_Util::m_RndIntRangeFromZero(10,true);
				int t_roomType=0;
				if(t_rndVal<1 && (t_room->m_w==4 && t_room->m_h==4) && !m_secretRockRoomPlaced && !t_room->m_isCrackedWallAdjacent){
					t_roomType=7;
					m_secretRockRoomPlaced=true;
				}else{
					t_roomType=5;
				}
				if(m_CreateRoom(t_room->m_x,t_room->m_y,t_room->m_w,t_room->m_h,false,t_roomType,-1,-1,-1,-1,false,100,false,true)){
					c_RoomData* t_roomData=(new c_RoomData)->m_new(t_room->m_x,t_room->m_y,t_room->m_w,t_room->m_h,t_roomType,false);
					m_rooms->p_AddLast14(t_roomData);
					c_Point* t_location=(new c_Point)->m_new(t_room->m_x,t_room->m_y);
					c_Point* t_size=(new c_Point)->m_new(t_room->m_w,t_room->m_h);
					int t_rock=0;
					if(t_roomType==7){
						t_rock=1;
					}
					bb_logger_Debug->p_Log(String(L"Created secret room at ",23)+t_location->p_ToString()+String(L" of size ",9)+t_size->p_ToString()+String(L" rock = ",8)+String(t_rock));
					t_numRooms-=1;
					if(t_numRooms<=0){
						return;
					}
				}
			}
		}
	}
	bb_logger_Debug->p_WriteLine2(String(L"WARN: Failed to place secret rooms.",35));
}
bool c_Level::m_IsSecretRoom(int t_rmType){
	int t_59=t_rmType;
	if(t_59==5 || t_59==7){
		return true;
	}
	return false;
}
void c_Level::m_FillVault(c_RoomData* t_tmpRoom){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Level.FillVault(RoomData)",25));
}
c_Point* c_Level::m_GetRandPointInRoomWithOptions(c_RoomBase* t_room,bool t_skipCollisions,bool t_skipExit,bool t_skipTraps,bool t_skipWater,bool t_nearWallIsOk,bool t_secretRoomOK){
	c_IntPointSet* t_pointsTested=(new c_IntPointSet)->m_new();
	int t_i=1000;
	for(t_i=t_i-1;t_i>0;t_i=t_i+-1){
		c_Point* t_point=t_room->p_GetRandPoint();
		if(t_pointsTested->p_Contains5(t_point)){
			continue;
		}
		t_pointsTested->p_Insert9(t_point);
		int t_x=t_point->m_x;
		int t_y=t_point->m_y;
		if(t_skipCollisions){
			if(c_Util::m_IsGlobalCollisionAt(t_x,t_y,false,false,false,false,false)){
				continue;
			}
			if(c_Enemy::m_GetEnemyAt(t_x,t_y,true)!=0){
				continue;
			}
		}
		if(t_skipExit){
			if(m_GetExitValue(t_x,t_y)->m_x!=-4){
				continue;
			}
		}
		if(t_skipTraps){
			if(c_Trap::m_GetTrapAt(t_x,t_y)!=0){
				continue;
			}
		}
		if(t_skipWater){
			int t_55=m_GetTileTypeAt(t_x,t_y);
			if(t_55==4 || t_55==8 || t_55==5){
				continue;
			}
		}
		if(!t_nearWallIsOk){
			if(m_IsWallAdjacent8(t_x,t_y)){
				continue;
			}
		}
		if(!t_secretRoomOK){
			if(m_GetTileTypeAt(t_x,t_y)==19){
				continue;
			}
		}
		return t_point;
	}
	return 0;
}
c_Point* c_Level::m_GetRandPointInRoomWithOptions2(c_RoomBase* t_room,bool t_skipWater,bool t_nearWallIsOk,bool t_secretRoomOK){
	return m_GetRandPointInRoomWithOptions(t_room,true,true,true,t_skipWater,t_nearWallIsOk,t_secretRoomOK);
}
c_Point* c_Level::m_GetRandPointInRoomWithOptions3(int t_xVal,int t_yVal,int t_wVal,int t_hVal,bool t_skipCollisions,bool t_skipExit,bool t_skipTraps,bool t_skipWater,bool t_nearWallIsOk,bool t_secretRoomOK){
	c_Rect* t_body=(new c_Rect)->m_new(t_xVal,t_yVal,t_wVal,t_hVal);
	c_RectRoom* t_room=(new c_RectRoom)->m_new2(t_body);
	return m_GetRandPointInRoomWithOptions((t_room),t_skipCollisions,t_skipExit,t_skipTraps,t_skipWater,t_nearWallIsOk,t_secretRoomOK);
}
c_Point* c_Level::m_GetRandPointInRoomWithOptions4(int t_xVal,int t_yVal,int t_wVal,int t_hVal,bool t_skipWater,bool t_nearWallIsOk,bool t_secretRoomOK){
	return m_GetRandPointInRoomWithOptions3(t_xVal,t_yVal,t_wVal,t_hVal,true,true,true,t_skipWater,t_nearWallIsOk,t_secretRoomOK);
}
c_Point* c_Level::m_GetRandPointInRoomWithOptions5(c_RoomData* t_room,bool t_skipWater,bool t_nearWallIsOk,bool t_secretRoomOK){
	return m_GetRandPointInRoomWithOptions4(t_room->m_x,t_room->m_y,t_room->m_w,t_room->m_h,t_skipWater,t_nearWallIsOk,t_secretRoomOK);
}
c_Point* c_Level::m_GetRandPointInRoomWithOptions6(c_RoomData* t_room){
	return m_GetRandPointInRoomWithOptions5(t_room,true,true,true);
}
int c_Level::m_GetAppropriateCoins(){
	int t_numCoinBonusFactor=bb_math_Min(3,bb_controller_game_currentDepth);
	return t_numCoinBonusFactor*10+15;
}
void c_Level::m_PutCrateOrBarrel(int t_x,int t_y){
	if(m_isHardcoreMode || bb_controller_game_currentDepth>1){
		int t_trapChestRoll=c_Util::m_RndIntRange(1,100,true,-1);
		if(t_trapChestRoll<=3){
			int t_trapChestBaseLevel=c_Util::m_RndIntRangeFromZero(1,true);
			(new c_TrapChest)->m_new(t_x,t_y,t_trapChestBaseLevel+4);
			return;
		}
	}
	int t_crateType=c_Util::m_RndIntRangeFromZero(1,true);
	(new c_Crate)->m_new(t_x,t_y,t_crateType,String(L"no_item",7));
}
bool c_Level::m_AllowSpirit(){
	return c_Poltergeist::m_theGhoul==0 && c_Wraith::m_theCursedWraith==0;
}
void c_Level::m_MakeInvisibleChestAt(int t_tmpX,int t_tmpY){
	int t_requestedLevel=bb_controller_game_currentLevel+3;
	String t_itemName=c_Item::m_GetRandomItemInClass(String(),t_requestedLevel,String(L"chestChance",11),0,false,String(),false);
	(new c_Chest)->m_new(t_tmpX,t_tmpY,t_itemName,true,false,true,0);
}
bool c_Level::m_FillSecretRoomsZone4(){
	c_Enumerator26* t_=m_rooms->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_RoomData* t_room=t_->p_NextObject();
		if(!m_IsSecretRoom(t_room->m_type)){
			continue;
		}
		int t_secretRoomVariantRoll=c_Util::m_RndIntRangeFromZero(100,true);
		if(t_room->m_type==7){
			m_CreateRoom(t_room->m_x,t_room->m_y,t_room->m_w,t_room->m_h,false,7,-1,-1,-1,-1,false,107,true,true);
			int t_50=bb_controller_game_currentLevel;
			if(t_50==2 || t_50==3){
				int t_vaultRoll=c_Util::m_RndIntRangeFromZero(5,true);
				if(t_vaultRoll==0){
					m_FillVault(t_room);
					continue;
				}
			}
			(new c_Item)->m_new(t_room->m_x+2,t_room->m_y+2,String(L"misc_potion",11),false,-1,false);
			continue;
		}
		if(m_addKeyInSecretChest){
			c_Point* t_point=m_GetRandPointInRoomWithOptions5(t_room,true,true,true);
			if(t_point==0){
				continue;
			}
			if(c_Util::m_IsBomblessCharacterActive()){
				int t_numCoins=m_GetAppropriateCoins();
				(new c_Item)->m_new(t_point->m_x,t_point->m_y,String(L"resource_coin0",14),false,t_numCoins,false);
			}else{
				int t_bombRoll=c_Util::m_RndIntRangeFromZero(100,true);
				if(t_bombRoll>=45){
					(new c_Item)->m_new(t_point->m_x,t_point->m_y,String(L"bomb",4),false,-1,false);
				}else{
					(new c_Item)->m_new(t_point->m_x,t_point->m_y,String(L"bomb_3",6),false,-1,false);
				}
			}
			m_addKeyInSecretChest=false;
			continue;
		}
		if(t_secretRoomVariantRoll<=4){
			if(t_room->m_w<=3 && t_room->m_h<=3){
				m_PutCrateOrBarrel(t_room->m_x+1,t_room->m_y+1);
				m_PutCrateOrBarrel(t_room->m_x+2,t_room->m_y+1);
				m_PutCrateOrBarrel(t_room->m_x+1,t_room->m_y+2);
				m_PutCrateOrBarrel(t_room->m_x+2,t_room->m_y+2);
				continue;
			}
		}
		if(t_secretRoomVariantRoll<=5){
			if(t_room->m_w>=4 && t_room->m_h>=4){
				int t_trapTypeRoll=c_Util::m_RndIntRangeFromZero(2,true);
				int t_51=t_trapTypeRoll;
				if(t_51==0){
					c_BounceTrap* t_bounceTrapDown=(new c_BounceTrap)->m_new(t_room->m_x+1,t_room->m_y+2,0);
					t_bounceTrapDown->m_canBeReplacedByTempoTrap=false;
					c_BounceTrap* t_bounceTrapLeft=(new c_BounceTrap)->m_new(t_room->m_x+3,t_room->m_y+2,1);
					t_bounceTrapLeft->m_canBeReplacedByTempoTrap=false;
					c_BounceTrap* t_bounceTrapRight=(new c_BounceTrap)->m_new(t_room->m_x+2,t_room->m_y+1,2);
					t_bounceTrapRight->m_canBeReplacedByTempoTrap=false;
					c_BounceTrap* t_bounceTrapUp=(new c_BounceTrap)->m_new(t_room->m_x+2,t_room->m_y+3,3);
					t_bounceTrapUp->m_canBeReplacedByTempoTrap=false;
				}else{
					if(t_51==1){
						(new c_SpikeTrap)->m_new(t_room->m_x+1,t_room->m_y+2);
						(new c_SpikeTrap)->m_new(t_room->m_x+3,t_room->m_y+2);
						(new c_SpikeTrap)->m_new(t_room->m_x+2,t_room->m_y+1);
						(new c_SpikeTrap)->m_new(t_room->m_x+2,t_room->m_y+3);
					}else{
						(new c_TrapDoor)->m_new(t_room->m_x+1,t_room->m_y+2);
						(new c_TrapDoor)->m_new(t_room->m_x+3,t_room->m_y+2);
						(new c_TrapDoor)->m_new(t_room->m_x+2,t_room->m_y+1);
						(new c_TrapDoor)->m_new(t_room->m_x+2,t_room->m_y+3);
					}
				}
				int t_itemRoll=c_Util::m_RndIntRangeFromZero(1,true);
				if(t_itemRoll==0){
					String t_foodName=m_RandomFood();
					(new c_Item)->m_new(t_room->m_x+2,t_room->m_y+2,t_foodName,false,-1,false);
				}else{
					int t_requestedLevel=bb_controller_game_currentLevel+1;
					String t_itemName=c_Item::m_GetRandomItemInClass(String(),t_requestedLevel,String(L"chestChance",11),0,false,String(),false);
					(new c_Item)->m_new(t_room->m_x+2,t_room->m_y+2,t_itemName,false,-1,false);
				}
				continue;
			}
		}
		if((t_secretRoomVariantRoll>50 || m_isHardcoreMode) && t_secretRoomVariantRoll>25){
			if(t_secretRoomVariantRoll<=65 && !m_isHardcoreMode || t_secretRoomVariantRoll<=45){
				int t_numTraps=(t_room->m_w-1)*(t_room->m_h-1);
				t_numTraps-=2;
				if(c_Util::m_RndBool(true)){
					(new c_BounceTrap)->m_new(t_room->m_x+1,t_room->m_y+1,-1);
					(new c_BounceTrap)->m_new(t_room->m_x+t_room->m_w-1,t_room->m_y+t_room->m_h-1,-1);
				}else{
					(new c_BounceTrap)->m_new(t_room->m_x+t_room->m_w-1,t_room->m_y+1,-1);
					(new c_BounceTrap)->m_new(t_room->m_x+1,t_room->m_y+t_room->m_h-1,-1);
				}
				for(int t_i=t_numTraps;t_i>0;t_i=t_i+-1){
					c_Point* t_point2=m_GetRandPointInRoomWithOptions5(t_room,true,true,true);
					if(t_point2==0){
						continue;
					}
					int t_bombTrapRoll=c_Util::m_RndIntRangeFromZero(10,true);
					if(t_bombTrapRoll==0){
						(new c_BombTrap)->m_new(t_point2->m_x,t_point2->m_y);
					}else{
						if(c_Util::m_RndBool(true)){
							(new c_SpikeTrap)->m_new(t_point2->m_x,t_point2->m_y);
						}else{
							(new c_TrapDoor)->m_new(t_point2->m_x,t_point2->m_y);
						}
					}
				}
				continue;
			}
			if(t_secretRoomVariantRoll<=80 && bb_controller_game_currentLevel>2 && m_AllowSpirit()){
				c_Point* t_point3=m_GetRandPointInRoomWithOptions5(t_room,true,true,true);
				if(t_point3==0){
					continue;
				}
				c_Poltergeist* t_poltergeist=(new c_Poltergeist)->m_new(t_point3->m_x,t_point3->m_y,1);
				t_poltergeist->m_inSecretRoom=true;
				continue;
			}
			int t_secretRoomVariantVariantRoll=c_Util::m_RndIntRangeFromZero(100,true);
			if(t_secretRoomVariantVariantRoll<=30){
				int t_batLevel=1;
				int t_invisibleChestRoll=c_Util::m_RndIntRangeFromZero(4,true);
				if(t_invisibleChestRoll==0){
					t_batLevel=4;
					c_Point* t_point4=m_GetRandPointInRoomWithOptions5(t_room,true,true,true);
					if(t_point4!=0){
						if(!m_isHardcoreMode || m_chestsStillToPlace>0){
							m_MakeInvisibleChestAt(t_point4->m_x,t_point4->m_y);
							m_chestsStillToPlace-=1;
						}
					}
				}
				int t_numBats=(t_room->m_w-1)*(t_room->m_h-1);
				for(t_numBats=t_numBats;t_numBats>0;t_numBats=t_numBats+-1){
					c_Point* t_point5=m_GetRandPointInRoomWithOptions5(t_room,true,true,true);
					if(t_point5==0){
						continue;
					}
					c_Bat* t_bat=(new c_Bat)->m_new(t_point5->m_x,t_point5->m_y,t_batLevel);
					t_bat->m_inSecretRoom=true;
				}
				continue;
			}
			if(t_secretRoomVariantVariantRoll<=35){
				int t_skeletonLevel=1;
				int t_skeletonLevel2Roll=c_Util::m_RndIntRangeFromZero(2,true);
				if(t_skeletonLevel2Roll==0){
					t_skeletonLevel=2;
				}
				int t_skeletonLevel3Roll=c_Util::m_RndIntRangeFromZero(3,true);
				if(t_skeletonLevel3Roll==0){
					t_skeletonLevel=3;
				}
				int t_numSkeletons=(t_room->m_w-1)*(t_room->m_h-1);
				for(t_numSkeletons=t_numSkeletons;t_numSkeletons>0;t_numSkeletons=t_numSkeletons+-1){
					c_Point* t_point6=m_GetRandPointInRoomWithOptions6(t_room);
					if(t_point6==0){
						continue;
					}
					c_Skeleton* t_skeleton=(new c_Skeleton)->m_new(t_point6->m_x,t_point6->m_y,t_skeletonLevel);
					t_skeleton->m_inSecretRoom=true;
				}
				continue;
			}
			if(t_secretRoomVariantVariantRoll<=75){
				c_Point* t_point7=m_GetRandPointInRoomWithOptions5(t_room,true,true,true);
				if(t_point7==0){
					continue;
				}
				int t_secretRoomVariantVariantVariantRoll=c_Util::m_RndIntRangeFromZero(100,true);
				if(t_secretRoomVariantVariantVariantRoll<=34){
					if(!c_Util::m_IsBomblessCharacterActive()){
						(new c_Item)->m_new(t_point7->m_x,t_point7->m_y,String(L"bomb_3",6),false,-1,false);
						continue;
					}
				}
				if(t_secretRoomVariantVariantVariantRoll>=80 || c_Util::m_IsBomblessCharacterActive()){
					int t_numCoins2=m_GetAppropriateCoins();
					(new c_Item)->m_new(t_point7->m_x,t_point7->m_y,String(L"resource_coin0",14),false,t_numCoins2,false);
					continue;
				}
				(new c_Item)->m_new(t_point7->m_x,t_point7->m_y,String(L"bomb",4),false,-1,false);
			}
		}else{
			c_Point* t_point8=m_GetRandPointInRoomWithOptions5(t_room,true,true,true);
			if(t_point8==0){
				continue;
			}
			int t_urnRoll=c_Util::m_RndIntRangeFromZero(40,true);
			if(t_urnRoll==0 && !m_placedUrnThisRun){
				(new c_Crate)->m_new(t_point8->m_x,t_point8->m_y,2,String(L"no_item",7));
				m_placedUrnThisRun=true;
				continue;
			}
			int t_chestRoll=c_Util::m_RndIntRangeFromZero(4,true);
			if(t_chestRoll==0){
				if(m_chestsStillToPlace>0){
					m_MakeInvisibleChestAt(t_point8->m_x,t_point8->m_y);
					m_chestsStillToPlace-=1;
				}
				continue;
			}
			int t_placeTrapChestRoll=c_Util::m_RndIntRangeFromZero(99,true);
			bool t_placeTrapChest=false;
			int t_52=bb_controller_game_currentLevel;
			if(t_52==1){
				if(t_placeTrapChestRoll<=3){
					t_placeTrapChest=true;
				}
			}else{
				if(t_52==2){
					if(t_placeTrapChestRoll<=9){
						t_placeTrapChest=true;
					}
				}else{
					if(t_52==3){
						if(t_placeTrapChestRoll<=12){
							t_placeTrapChest=true;
						}
					}else{
						if(t_52==4){
							if(t_placeTrapChestRoll<=15){
								t_placeTrapChest=true;
							}
						}else{
							if(bb_controller_game_currentLevel>4){
								if(t_placeTrapChestRoll<=18){
									t_placeTrapChest=true;
								}
							}
						}
					}
				}
			}
			if(m_chestsStillToPlace>0){
				if(t_placeTrapChest){
					int t_trapChestLevelRoll=c_Util::m_RndIntRangeFromZero(9,true);
					int t_trapChestLevel=0;
					int t_53=t_trapChestLevelRoll;
					if(t_53==0){
						t_trapChestLevel=3;
					}else{
						if(t_53==1){
							t_trapChestLevel=2;
						}else{
							t_trapChestLevel=1;
						}
					}
					c_TrapChest* t_trapChest=(new c_TrapChest)->m_new(t_point8->m_x,t_point8->m_y,t_trapChestLevel);
					t_trapChest->m_inSecretRoom=true;
				}else{
					(new c_Chest)->m_new(t_point8->m_x,t_point8->m_y,String(L"no_item",7),false,false,true,0);
				}
				m_chestsStillToPlace-=1;
			}
		}
	}
	return true;
}
bool c_Level::m_FillSecretRoomsZone2(){
	bool t_placeGlassKey=false;
	if(bb_controller_game_currentLevel==2){
		if(!c_GameData::m_GetNPCUnlock(String(L"diamonddealer",13))){
			t_placeGlassKey=true;
		}
	}
	if(m_isHardcoreMode || m_isDDRMode || m_isLevelEditor){
		t_placeGlassKey=false;
	}
	c_Enumerator26* t_=m_rooms->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_RoomData* t_room=t_->p_NextObject();
		if(!m_IsSecretRoom(t_room->m_type)){
			continue;
		}
		int t_secretRoomVariantRoll=c_Util::m_RndIntRangeFromZero(100,true);
		if(t_room->m_type==7){
			if(bb_controller_game_currentLevel==3){
				int t_vaultRoll=c_Util::m_RndIntRangeFromZero(5,true);
				if(t_vaultRoll==0){
					m_FillVault(t_room);
					continue;
				}
			}
			(new c_Item)->m_new(t_room->m_x+2,t_room->m_y+2,String(L"misc_potion",11),false,-1,false);
			continue;
		}
		if(m_addKeyInSecretChest){
			c_Point* t_point=m_GetRandPointInRoomWithOptions5(t_room,true,true,true);
			if(t_point==0){
				continue;
			}
			if(c_Util::m_IsBomblessCharacterActive()){
				int t_numCoins=m_GetAppropriateCoins();
				(new c_Item)->m_new(t_point->m_x,t_point->m_y,String(L"resource_coin0",14),false,t_numCoins,false);
			}else{
				int t_bombRoll=c_Util::m_RndIntRangeFromZero(100,true);
				if(t_bombRoll>=45){
					(new c_Item)->m_new(t_point->m_x,t_point->m_y,String(L"bomb",4),false,-1,false);
				}else{
					(new c_Item)->m_new(t_point->m_x,t_point->m_y,String(L"bomb_3",6),false,-1,false);
				}
			}
			m_addKeyInSecretChest=false;
			continue;
		}
		if(t_placeGlassKey){
			if(m_isHardcoreMode || m_isDDRMode){
				continue;
			}
			(new c_Item)->m_new(t_room->m_x+1,t_room->m_y+1,String(L"misc_glass_key",14),false,-1,false);
			t_placeGlassKey=false;
			continue;
		}
		if(t_secretRoomVariantRoll<=4){
			if(t_room->m_w<=3 && t_room->m_h<=3){
				m_PutCrateOrBarrel(t_room->m_x+1,t_room->m_y+1);
				m_PutCrateOrBarrel(t_room->m_x+2,t_room->m_y+1);
				m_PutCrateOrBarrel(t_room->m_x+1,t_room->m_y+2);
				m_PutCrateOrBarrel(t_room->m_x+2,t_room->m_y+2);
				continue;
			}
			if(t_room->m_w>=4 && t_room->m_h>=4){
				int t_trapTypeRoll=c_Util::m_RndIntRangeFromZero(2,true);
				int t_47=t_trapTypeRoll;
				if(t_47==0){
					c_BounceTrap* t_bounceTrapDown=(new c_BounceTrap)->m_new(t_room->m_x+1,t_room->m_y+2,0);
					t_bounceTrapDown->m_canBeReplacedByTempoTrap=false;
					c_BounceTrap* t_bounceTrapLeft=(new c_BounceTrap)->m_new(t_room->m_x+3,t_room->m_y+2,1);
					t_bounceTrapLeft->m_canBeReplacedByTempoTrap=false;
					c_BounceTrap* t_bounceTrapRight=(new c_BounceTrap)->m_new(t_room->m_x+2,t_room->m_y+1,2);
					t_bounceTrapRight->m_canBeReplacedByTempoTrap=false;
					c_BounceTrap* t_bounceTrapUp=(new c_BounceTrap)->m_new(t_room->m_x+2,t_room->m_y+3,3);
					t_bounceTrapUp->m_canBeReplacedByTempoTrap=false;
				}else{
					if(t_47==1){
						(new c_SpikeTrap)->m_new(t_room->m_x+1,t_room->m_y+2);
						(new c_SpikeTrap)->m_new(t_room->m_x+3,t_room->m_y+2);
						(new c_SpikeTrap)->m_new(t_room->m_x+2,t_room->m_y+1);
						(new c_SpikeTrap)->m_new(t_room->m_x+2,t_room->m_y+3);
					}else{
						(new c_TrapDoor)->m_new(t_room->m_x+1,t_room->m_y+2);
						(new c_TrapDoor)->m_new(t_room->m_x+3,t_room->m_y+2);
						(new c_TrapDoor)->m_new(t_room->m_x+2,t_room->m_y+1);
						(new c_TrapDoor)->m_new(t_room->m_x+2,t_room->m_y+3);
					}
				}
				int t_itemRoll=c_Util::m_RndIntRangeFromZero(1,true);
				if(t_itemRoll==0){
					String t_foodName=m_RandomFood();
					(new c_Item)->m_new(t_room->m_x+2,t_room->m_y+2,t_foodName,false,-1,false);
				}else{
					int t_requestedLevel=bb_controller_game_currentLevel+1;
					String t_itemName=c_Item::m_GetRandomItemInClass(String(),t_requestedLevel,String(L"chestChance",11),0,false,String(),false);
					(new c_Item)->m_new(t_room->m_x+2,t_room->m_y+2,t_itemName,false,-1,false);
				}
				continue;
			}
		}
		if((t_secretRoomVariantRoll>50 || m_isHardcoreMode) && t_secretRoomVariantRoll>25){
			if(t_secretRoomVariantRoll<=65 && !m_isHardcoreMode || t_secretRoomVariantRoll<=45){
				int t_numTraps=(t_room->m_w-1)*(t_room->m_h-1);
				t_numTraps-=2;
				if(c_Util::m_RndBool(true)){
					(new c_BounceTrap)->m_new(t_room->m_x+1,t_room->m_y+1,-1);
					(new c_BounceTrap)->m_new(t_room->m_x+t_room->m_w-1,t_room->m_y+t_room->m_h-1,-1);
				}else{
					(new c_BounceTrap)->m_new(t_room->m_x+t_room->m_w-1,t_room->m_y+1,-1);
					(new c_BounceTrap)->m_new(t_room->m_x+1,t_room->m_y+t_room->m_h-1,-1);
				}
				for(int t_i=t_numTraps;t_i>0;t_i=t_i+-1){
					c_Point* t_point2=m_GetRandPointInRoomWithOptions5(t_room,true,true,true);
					if(t_point2==0){
						continue;
					}
					int t_bombTrapRoll=c_Util::m_RndIntRangeFromZero(10,true);
					if(t_bombTrapRoll==0){
						(new c_BombTrap)->m_new(t_point2->m_x,t_point2->m_y);
					}else{
						if(c_Util::m_RndBool(true)){
							(new c_SpikeTrap)->m_new(t_point2->m_x,t_point2->m_y);
						}else{
							(new c_TrapDoor)->m_new(t_point2->m_x,t_point2->m_y);
						}
					}
				}
				continue;
			}
			if(t_secretRoomVariantRoll<=80 && bb_controller_game_currentLevel>2){
				c_Point* t_point3=m_GetRandPointInRoomWithOptions5(t_room,true,true,true);
				if(t_point3==0){
					continue;
				}
				c_Wight* t_wight=(new c_Wight)->m_new(t_point3->m_x,t_point3->m_y,1);
				t_wight->m_inSecretRoom=true;
				continue;
			}
			if(t_secretRoomVariantRoll<=95){
				c_Point* t_point4=m_GetRandPointInRoomWithOptions5(t_room,true,true,true);
				if(t_point4==0){
					continue;
				}
				int t_bombRoll2=c_Util::m_RndIntRangeFromZero(100,true);
				if(c_Util::m_IsBomblessCharacterActive()){
					int t_numCoins2=m_GetAppropriateCoins();
					(new c_Item)->m_new(t_point4->m_x,t_point4->m_y,String(L"resource_coin0",14),false,t_numCoins2,false);
					continue;
				}
				if(t_bombRoll2<45){
					(new c_Item)->m_new(t_point4->m_x,t_point4->m_y,String(L"bomb_3",6),false,-1,false);
				}else{
					if(t_bombRoll2<80){
						(new c_Item)->m_new(t_point4->m_x,t_point4->m_y,String(L"bomb",4),false,-1,false);
					}else{
						int t_numCoins3=m_GetAppropriateCoins();
						(new c_Item)->m_new(t_point4->m_x,t_point4->m_y,String(L"resource_coin0",14),false,t_numCoins3,false);
					}
				}
				continue;
			}
		}else{
			c_Point* t_point5=m_GetRandPointInRoomWithOptions6(t_room);
			if(t_point5==0){
				continue;
			}
			int t_urnRoll=c_Util::m_RndIntRangeFromZero(40,true);
			if(t_urnRoll==0 && !m_placedUrnThisRun){
				(new c_Crate)->m_new(t_point5->m_x,t_point5->m_y,2,String(L"no_item",7));
				m_placedUrnThisRun=true;
				continue;
			}
			int t_invisibleChestRoll=c_Util::m_RndIntRangeFromZero(4,true);
			if(t_invisibleChestRoll==0){
				if(m_chestsStillToPlace>0){
					m_MakeInvisibleChestAt(t_point5->m_x,t_point5->m_y);
					m_chestsStillToPlace-=1;
				}
				continue;
			}
			int t_trapChestRoll=c_Util::m_RndIntRangeFromZero(99,true);
			bool t_placeTrapChest=false;
			int t_48=bb_controller_game_currentLevel;
			if(t_48==1){
				if(t_trapChestRoll<=3){
					t_placeTrapChest=true;
				}
			}else{
				if(t_48==2){
					if(t_trapChestRoll<=9){
						t_placeTrapChest=true;
					}
				}else{
					if(t_48==3){
						if(t_trapChestRoll<=12){
							t_placeTrapChest=true;
						}
					}else{
						if(t_48==4){
							if(t_trapChestRoll<=15){
								t_placeTrapChest=true;
							}
						}else{
							if(bb_controller_game_currentLevel>4){
								if(t_trapChestRoll<=18){
									t_placeTrapChest=true;
								}
							}
						}
					}
				}
			}
			if(m_chestsStillToPlace<=0){
				continue;
			}
			if(t_placeTrapChest){
				int t_trapChestLevelRoll=c_Util::m_RndIntRangeFromZero(9,true);
				int t_trapChestLevel=0;
				int t_49=t_trapChestLevelRoll;
				if(t_49==0){
					t_trapChestLevel=3;
				}else{
					if(t_49==0){
						t_trapChestLevel=2;
					}else{
						t_trapChestLevel=1;
					}
				}
				c_TrapChest* t_trapChest=(new c_TrapChest)->m_new(t_point5->m_x,t_point5->m_y,t_trapChestLevel);
				t_trapChest->m_inSecretRoom=true;
			}else{
				(new c_Chest)->m_new(t_point5->m_x,t_point5->m_y,String(L"no_item",7),false,false,true,0);
			}
			m_chestsStillToPlace-=1;
		}
	}
	if(m_addKeyInSecretChest){
		bb_logger_Debug->p_Log(String(L"FILLSECRETROOMS: Utterly failed to place bomb for 'locked' shop!",64));
	}
	if(t_placeGlassKey){
		bb_logger_Debug->p_Log(String(L"FILLSECRETROOMS: Failed to place NPC!",37));
	}
	return !m_addKeyInSecretChest && !t_placeGlassKey;
}
bool c_Level::m_MaybeForbidTrapdoor(){
	if(bb_controller_game_currentZone!=5){
		return false;
	}
	if(bb_controller_game_currentLevel==3){
		return true;
	}
	return c_Util::m_RndBool(true);
}
bool c_Level::m_FillSecretRoomsZone1(){
	bool t_placeGoldenKey=false;
	if(bb_controller_game_currentZone==1 && bb_controller_game_currentLevel==2){
		if(!c_GameData::m_GetNPCUnlock(String(L"merlin",6))){
			t_placeGoldenKey=!m_isLevelEditor;
		}
	}
	if(m_isHardcoreMode || m_isDDRMode){
		t_placeGoldenKey=false;
	}
	c_Enumerator26* t_=m_rooms->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_RoomData* t_room=t_->p_NextObject();
		if(!m_IsSecretRoom(t_room->m_type)){
			continue;
		}
		int t_secretRoomVariantRoll=c_Util::m_RndIntRangeFromZero(100,true);
		if(t_room->m_type==7){
			if(bb_controller_game_currentLevel==3){
				int t_vaultRoll=c_Util::m_RndIntRangeFromZero(5,true);
				if(t_vaultRoll==0){
					m_FillVault(t_room);
				}
				continue;
			}
			(new c_Item)->m_new(t_room->m_x+2,t_room->m_y+2,String(L"misc_potion",11),false,-1,false);
			continue;
		}
		if(m_addKeyInSecretChest){
			c_Point* t_point=m_GetRandPointInRoomWithOptions6(t_room);
			if(t_point!=0){
				if(c_Util::m_IsBomblessCharacterActive()){
					int t_numCoinBonusFactor=bb_math_Min(bb_controller_game_currentDepth,3);
					int t_numCoins=t_numCoinBonusFactor*10+15;
					(new c_Item)->m_new(t_point->m_x,t_point->m_y,String(L"resource_coin0",14),false,t_numCoins,false);
					m_addKeyInSecretChest=false;
				}else{
					int t_bombRoll=c_Util::m_RndIntRangeFromZero(100,true);
					if(t_bombRoll<45){
						(new c_Item)->m_new(t_point->m_x,t_point->m_y,String(L"bomb_3",6),false,-1,false);
					}else{
						(new c_Item)->m_new(t_point->m_x,t_point->m_y,String(L"bomb",4),false,-1,false);
					}
				}
				m_addKeyInSecretChest=false;
			}
			continue;
		}
		if(t_placeGoldenKey){
			if(!m_isHardcoreMode && !m_isDDRMode){
				(new c_Item)->m_new(t_room->m_x+1,t_room->m_y+1,String(L"misc_golden_key",15),false,-1,false);
			}
			t_placeGoldenKey=false;
			continue;
		}
		if(t_secretRoomVariantRoll<=4 && t_room->m_w<=3 && t_room->m_h<=3){
			m_PutCrateOrBarrel(t_room->m_x+1,t_room->m_y+1);
			m_PutCrateOrBarrel(t_room->m_x+2,t_room->m_y+1);
			m_PutCrateOrBarrel(t_room->m_x+1,t_room->m_y+2);
			m_PutCrateOrBarrel(t_room->m_x+2,t_room->m_y+2);
			continue;
		}
		if(t_secretRoomVariantRoll<=5 && t_room->m_w>=4 && t_room->m_h>=4){
			int t_trapTypeLimitRoll=2;
			if(m_MaybeForbidTrapdoor()){
				t_trapTypeLimitRoll=1;
			}
			int t_trapTypeRoll=c_Util::m_RndIntRangeFromZero(t_trapTypeLimitRoll,true);
			int t_44=t_trapTypeRoll;
			if(t_44==0){
				c_BounceTrap* t_bounceTrap1=(new c_BounceTrap)->m_new(t_room->m_x+1,t_room->m_y+2,0);
				c_BounceTrap* t_bounceTrap2=(new c_BounceTrap)->m_new(t_room->m_x+3,t_room->m_y+2,1);
				c_BounceTrap* t_bounceTrap3=(new c_BounceTrap)->m_new(t_room->m_x+2,t_room->m_y+1,2);
				c_BounceTrap* t_bounceTrap4=(new c_BounceTrap)->m_new(t_room->m_x+2,t_room->m_y+3,3);
				t_bounceTrap1->m_canBeReplacedByTempoTrap=false;
				t_bounceTrap2->m_canBeReplacedByTempoTrap=false;
				t_bounceTrap3->m_canBeReplacedByTempoTrap=false;
				t_bounceTrap4->m_canBeReplacedByTempoTrap=false;
			}else{
				if(t_44==1){
					(new c_SpikeTrap)->m_new(t_room->m_x+1,t_room->m_y+2);
					(new c_SpikeTrap)->m_new(t_room->m_x+3,t_room->m_y+2);
					(new c_SpikeTrap)->m_new(t_room->m_x+2,t_room->m_y+1);
					(new c_SpikeTrap)->m_new(t_room->m_x+2,t_room->m_y+3);
				}else{
					(new c_TrapDoor)->m_new(t_room->m_x+1,t_room->m_y+2);
					(new c_TrapDoor)->m_new(t_room->m_x+3,t_room->m_y+2);
					(new c_TrapDoor)->m_new(t_room->m_x+2,t_room->m_y+1);
					(new c_TrapDoor)->m_new(t_room->m_x+2,t_room->m_y+3);
				}
			}
			String t_itemName=String();
			if(c_Util::m_RndIntRangeFromZero(1,true)!=0){
				int t_requestedLevel=bb_controller_game_currentLevel+1;
				t_itemName=c_Item::m_GetRandomItemInClass(String(),t_requestedLevel,String(L"chestChance",11),0,false,String(),false);
			}else{
				t_itemName=m_RandomFood();
			}
			(new c_Item)->m_new(t_room->m_x+2,t_room->m_y+2,t_itemName,false,-1,false);
			continue;
		}
		if((t_secretRoomVariantRoll>50 || m_isHardcoreMode) && t_secretRoomVariantRoll>25){
			if(t_secretRoomVariantRoll<=60 && !m_isHardcoreMode || t_secretRoomVariantRoll<=45){
				int t_i=(t_room->m_w-1)*(t_room->m_h-1)-2;
				if(c_Util::m_RndBool(true)){
					(new c_BounceTrap)->m_new(t_room->m_x+1,t_room->m_y+1,-1);
					(new c_BounceTrap)->m_new(t_room->m_x+t_room->m_w-1,t_room->m_y+t_room->m_h-1,-1);
				}else{
					(new c_BounceTrap)->m_new(t_room->m_x+t_room->m_w-1,t_room->m_y+1,-1);
					(new c_BounceTrap)->m_new(t_room->m_x+1,t_room->m_y+t_room->m_h-1,-1);
				}
				for(t_i=t_i-1;t_i>0;t_i=t_i+-1){
					c_Point* t_point2=m_GetRandPointInRoomWithOptions6(t_room);
					if(t_point2!=0){
						int t_bombTrapRoll=c_Util::m_RndIntRangeFromZero(10,true);
						if(t_bombTrapRoll!=0){
							if(c_Util::m_RndBool(true)){
								(new c_SpikeTrap)->m_new(t_point2->m_x,t_point2->m_y);
							}else{
								if(c_Util::m_RndBool(true) || m_MaybeForbidTrapdoor()){
									(new c_SpikeTrap)->m_new(t_point2->m_x,t_point2->m_y);
								}else{
									(new c_TrapDoor)->m_new(t_point2->m_x,t_point2->m_y);
								}
							}
						}else{
							(new c_BombTrap)->m_new(t_point2->m_x,t_point2->m_y);
						}
					}
				}
				continue;
			}
			if(t_secretRoomVariantRoll<=80 && bb_controller_game_currentLevel>2 && m_AllowSpirit()){
				c_Point* t_point3=m_GetRandPointInRoomWithOptions6(t_room);
				if(t_point3!=0){
					c_Enemy* t_wraith=0;
					int t_45=bb_controller_game_currentZone;
					if(t_45==5){
						t_wraith=((new c_Wraith)->m_new(t_point3->m_x,t_point3->m_y,2));
					}else{
						if(t_45==3){
							t_wraith=((new c_Ghast)->m_new(t_point3->m_x,t_point3->m_y,1));
						}else{
							t_wraith=((new c_Wraith)->m_new(t_point3->m_x,t_point3->m_y,1));
						}
					}
					t_wraith->m_inSecretRoom=true;
				}
				continue;
			}
			int t_secretRoomVariantVariantRoll=c_Util::m_RndIntRangeFromZero(100,true);
			if(t_secretRoomVariantVariantRoll<=30){
				int t_batLevel=1;
				int t_redBatCaveRoll=c_Util::m_RndIntRangeFromZero(4,true);
				if(t_redBatCaveRoll==0){
					t_batLevel=2;
					c_Point* t_point4=m_GetRandPointInRoomWithOptions6(t_room);
					if(t_point4!=0){
						if(!m_isHardcoreMode || m_chestsStillToPlace>0){
							m_MakeInvisibleChestAt(t_point4->m_x,t_point4->m_y);
							m_chestsStillToPlace-=1;
						}
					}
				}
				int t_roomInnerArea=(t_room->m_w-1)*(t_room->m_h-1);
				for(int t_i2=t_roomInnerArea;t_i2>0;t_i2=t_i2+-1){
					c_Point* t_point5=m_GetRandPointInRoomWithOptions6(t_room);
					if(t_point5!=0){
						c_Bat* t_bat=(new c_Bat)->m_new(t_point5->m_x,t_point5->m_y,t_batLevel);
						t_bat->m_inSecretRoom=true;
					}
				}
				continue;
			}
			if(t_secretRoomVariantVariantRoll<=35){
				int t_skeletonLevel=1;
				int t_skeletonLevel2Roll=c_Util::m_RndIntRangeFromZero(2,true);
				if(t_skeletonLevel2Roll==0){
					t_skeletonLevel=2;
				}
				int t_skeletonLevel3Roll=c_Util::m_RndIntRangeFromZero(3,true);
				if(t_skeletonLevel3Roll==0){
					t_skeletonLevel=3;
				}
				int t_roomInnerArea2=(t_room->m_w-1)*(t_room->m_h-1);
				for(int t_i3=t_roomInnerArea2;t_i3>0;t_i3=t_i3+-1){
					c_Point* t_point6=m_GetRandPointInRoomWithOptions6(t_room);
					if(t_point6!=0){
						c_Skeleton* t_skeleton=(new c_Skeleton)->m_new(t_point6->m_x,t_point6->m_y,t_skeletonLevel);
						t_skeleton->m_inSecretRoom=true;
					}
				}
				continue;
			}
			if(t_secretRoomVariantVariantRoll<=75){
				c_Point* t_point7=m_GetRandPointInRoomWithOptions6(t_room);
				if(t_point7!=0){
					int t_secretRoomVariantVariantVariantRoll=c_Util::m_RndIntRangeFromZero(100,true);
					if(t_secretRoomVariantVariantVariantRoll<=34){
						if(!c_Util::m_IsBomblessCharacterActive()){
							(new c_Item)->m_new(t_point7->m_x,t_point7->m_y,String(L"bomb_3",6),false,-1,false);
							continue;
						}
					}
					if(t_secretRoomVariantVariantVariantRoll>=80 || c_Util::m_IsBomblessCharacterActive()){
						int t_coinBonusFactor=bb_math_Min(bb_controller_game_currentDepth,3);
						int t_numCoins2=10*t_coinBonusFactor+15;
						(new c_Item)->m_new(t_point7->m_x,t_point7->m_y,String(L"resource_coin0",14),false,t_numCoins2,false);
						continue;
					}
					(new c_Item)->m_new(t_point7->m_x,t_point7->m_y,String(L"bomb",4),false,-1,false);
				}
			}
		}else{
			c_Point* t_point8=m_GetRandPointInRoomWithOptions6(t_room);
			if(t_point8!=0){
				int t_urnRoll=c_Util::m_RndIntRangeFromZero(40,true);
				if(t_urnRoll==0 && !m_placedUrnThisRun){
					(new c_Crate)->m_new(t_point8->m_x,t_point8->m_y,2,String(L"no_item",7));
					m_placedUrnThisRun=true;
					continue;
				}
				int t_chestRoll=c_Util::m_RndIntRangeFromZero(4,true);
				if(t_chestRoll==0){
					if(m_chestsStillToPlace>0){
						m_MakeInvisibleChestAt(t_point8->m_x,t_point8->m_y);
						m_chestsStillToPlace-=1;
					}
					continue;
				}
				int t_placeTrapChestRoll=c_Util::m_RndIntRangeFromZero(99,true);
				bool t_placeTrapChest=false;
				if(bb_controller_game_currentLevel==1 && t_placeTrapChestRoll<=3){
					t_placeTrapChest=true;
				}
				if(bb_controller_game_currentLevel==2 && t_placeTrapChestRoll<=9){
					t_placeTrapChest=true;
				}
				if(bb_controller_game_currentLevel==3 && t_placeTrapChestRoll<=12){
					t_placeTrapChest=true;
				}
				if(bb_controller_game_currentLevel==4 && t_placeTrapChestRoll<=15){
					t_placeTrapChest=true;
				}
				if(bb_controller_game_currentLevel>4 && t_placeTrapChestRoll<=18){
					t_placeTrapChest=true;
				}
				if(m_chestsStillToPlace>0){
					if(t_placeTrapChest){
						int t_trapChestLevelRoll=c_Util::m_RndIntRangeFromZero(9,true);
						int t_trapChestLevel=0;
						int t_46=t_trapChestLevelRoll;
						if(t_46==0){
							t_trapChestLevel=3;
						}else{
							if(t_46==1){
								t_trapChestLevel=2;
							}else{
								t_trapChestLevel=1;
							}
						}
						(new c_TrapChest)->m_new(t_point8->m_x,t_point8->m_y,t_trapChestLevel);
					}else{
						(new c_Chest)->m_new(t_point8->m_x,t_point8->m_y,String(L"no_item",7),false,false,true,0);
					}
					m_chestsStillToPlace-=1;
				}
			}
		}
	}
	if(m_addKeyInSecretChest){
		bb_logger_Debug->p_Log(String(L"FILLSECRETROOMS: Utterly failed to place bomb for locked shop!",62));
		return false;
	}
	if(t_placeGoldenKey){
		bb_logger_Debug->p_Log(String(L"FILLSECRETROOMS: Failed to place golden key!",44));
		return false;
	}
	return true;
}
bool c_Level::m_FillSecretRooms(){
	int t_43=bb_controller_game_currentZone;
	if(t_43==4){
		return m_FillSecretRoomsZone4();
	}else{
		if(t_43==2){
			return m_FillSecretRoomsZone2();
		}
	}
	return m_FillSecretRoomsZone1();
}
bool c_Level::m__FailMap(){
	m_CreateMap(0);
	return false;
}
void c_Level::m_AddStone(){
	bb_logger_Debug->p_Log(String(L"Adding stone",12));
	Float t_stoneCountMultiplier=FLOAT(.0);
	int t_4=bb_controller_game_currentLevel;
	if(t_4==1){
		t_stoneCountMultiplier=FLOAT(0.08);
	}else{
		if(t_4==2){
			t_stoneCountMultiplier=FLOAT(0.14);
		}else{
			t_stoneCountMultiplier=FLOAT(0.20);
		}
	}
	if(m_isHardcoreMode){
		t_stoneCountMultiplier+=FLOAT(0.13);
	}
	c_List26* t_stoneCandidateLocations=(new c_List26)->m_new();
	c_NodeEnumerator* t_=m_tiles->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Node25* t_tilesOnXNode=t_->p_NextObject();
		c_NodeEnumerator2* t_2=t_tilesOnXNode->p_Value()->p_ObjectEnumerator();
		while(t_2->p_HasNext()){
			c_Node26* t_tileNode=t_2->p_NextObject();
			c_Tile* t_tile=t_tileNode->p_Value();
			if(t_tile->p_IsWall(false,true,false,false) && t_tile->m_health<=1 && !t_tile->m_isCracked){
				t_stoneCandidateLocations->p_AddLast26((new c_Point)->m_new(t_tile->m_x,t_tile->m_y));
			}
		}
	}
	int t_i=5000;
	int t_numTilesToConvert=int(Float(t_stoneCandidateLocations->p_Count())*t_stoneCountMultiplier);
	for(t_i=t_i-1;t_i>0;t_i=t_i+-1){
		if(t_numTilesToConvert==0){
			break;
		}
		int t_randomIndex=c_Util::m_RndIntRangeFromZero(t_stoneCandidateLocations->p_Count()-1,true);
		Array<c_Point* > t_stoneCandidateLocationsArray=t_stoneCandidateLocations->p_ToArray();
		c_Point* t_randomPoint=t_stoneCandidateLocationsArray[t_randomIndex];
		m_GetTileAt(t_randomPoint->m_x,t_randomPoint->m_y)->p_BecomeStone();
		t_stoneCandidateLocations->p_RemoveEach13(t_randomPoint);
		t_numTilesToConvert-=1;
	}
	if(t_i==0){
		bb_logger_Debug->p_Log(String(L"****************** ADDSTONE: Unable to place the desired amount of stone! ******************",92));
	}
}
bool c_Level::m_IsCorridorFloorOrDoorAdjacent(int t_xVal,int t_yVal){
	return m_IsTileTypeAdjacent(t_xVal,t_yVal,1) || m_IsTileTypeAdjacent(t_xVal,t_yVal,103) || m_IsTileTypeAdjacent(t_xVal,t_yVal,111) || m_IsTileTypeAdjacent(t_xVal,t_yVal,106) || m_IsTileTypeAdjacent(t_xVal,t_yVal,118);
}
c_Trap* c_Level::m_PlaceTrapInRoom(int t_xVal,int t_yVal,int t_wVal,int t_hVal,int t_trapType,int t_bounceDir,c_Trap* t_twoAwayTrap){
	for(int t_i=200;t_i>0;t_i=t_i+-1){
		c_Point* t_point=0;
		if(t_trapType==1 && (4<=t_bounceDir && t_bounceDir<=7)){
			t_point=m_GetRandPointInRoomWithOptions4(t_xVal+1,t_yVal+1,t_wVal-2,t_hVal-2,true,true,false);
		}else{
			t_point=m_GetRandPointInRoomWithOptions4(t_xVal,t_yVal,t_wVal,t_hVal,true,true,false);
		}
		if(t_point==0){
			continue;
		}
		if(m_IsWallAt(t_point->m_x,t_point->m_y+1,false,false)){
			continue;
		}
		if(m_IsCorridorFloorOrDoorAdjacent(t_point->m_x,t_point->m_y)){
			continue;
		}
		if(m_GetTileTypeAt(t_point->m_x,t_point->m_y)==20){
			continue;
		}
		if(m_GetTileTypeAt(t_point->m_x,t_point->m_y)==118){
			continue;
		}
		int t_147=t_trapType;
		if(t_147==1){
			if(c_Trap::m_GetTrapTypeAt(t_point->m_x+1,t_point->m_y)==1){
				continue;
			}
			if(c_Trap::m_GetTrapTypeAt(t_point->m_x,t_point->m_y+1)==1){
				continue;
			}
			if(c_Trap::m_GetTrapTypeAt(t_point->m_x-1,t_point->m_y)==1){
				continue;
			}
			if(c_Trap::m_GetTrapTypeAt(t_point->m_x,t_point->m_y-1)==1){
				continue;
			}
			if(4<=t_bounceDir && t_bounceDir<=7){
				if(c_Trap::m_GetTrapTypeAt(t_point->m_x+1,t_point->m_y+1)==1){
					continue;
				}
				if(c_Trap::m_GetTrapTypeAt(t_point->m_x+1,t_point->m_y-1)==1){
					continue;
				}
				if(c_Trap::m_GetTrapTypeAt(t_point->m_x-1,t_point->m_y+1)==1){
					continue;
				}
				if(c_Trap::m_GetTrapTypeAt(t_point->m_x-1,t_point->m_y-1)==1){
					continue;
				}
			}
			return ((new c_BounceTrap)->m_new(t_point->m_x,t_point->m_y,t_bounceDir));
		}else{
			if(t_147==2){
				return ((new c_SpikeTrap)->m_new(t_point->m_x,t_point->m_y));
			}else{
				if(t_147==3){
					return ((new c_TrapDoor)->m_new(t_point->m_x,t_point->m_y));
				}else{
					if(t_147==4){
						return ((new c_ConfuseTrap)->m_new(t_point->m_x,t_point->m_y));
					}else{
						if(t_147==5){
							return ((new c_TeleportTrap)->m_new(t_point->m_x,t_point->m_y));
						}else{
							if(t_147==11){
								return ((new c_ABTeleportTrap)->m_new(t_point->m_x,t_point->m_y));
							}else{
								if(t_147==9){
									return ((new c_BombTrap)->m_new(t_point->m_x,t_point->m_y));
								}else{
									if(t_147==14){
										return ((new c_ScatterTrap)->m_new(t_point->m_x,t_point->m_y));
									}
								}
							}
						}
					}
				}
			}
		}
	}
	bb_logger_Debug->p_Log(String(L"FAILED TO PLACE TRAP AT ROOM: ",30)+String(t_xVal)+String(L", ",2)+String(t_yVal)+String(L", ",2)+String(t_wVal)+String(L", ",2)+String(t_hVal)+String(L" type: ",7)+String(t_trapType));
	return 0;
}
c_Trap* c_Level::m_PlaceTrapInRoom2(int t_xVal,int t_yVal,int t_wVal,int t_hVal,int t_trapType,int t_bounceDir){
	return m_PlaceTrapInRoom(t_xVal,t_yVal,t_wVal,t_hVal,t_trapType,t_bounceDir,0);
}
c_Trap* c_Level::m_PlaceTrapInRoom3(c_RoomData* t_room,int t_trapType,int t_bounceDir){
	return m_PlaceTrapInRoom2(t_room->m_x,t_room->m_y,t_room->m_w,t_room->m_h,t_trapType,t_bounceDir);
}
c_Trap* c_Level::m_PlaceTrapInRoom4(c_RoomData* t_room,int t_trapType){
	return m_PlaceTrapInRoom3(t_room,t_trapType,-1);
}
void c_Level::m_PlaceTrapZone5(int t_xVal,int t_yVal,int t_wVal,int t_hVal){
	int t_trapDoorWeight=5;
	if(m_MaybeForbidTrapdoor()){
		t_trapDoorWeight=0;
	}
	c_WeightedPicker* t_weights=(new c_WeightedPicker)->m_new();
	t_weights->p_Push4(10);
	t_weights->p_Push4(20);
	t_weights->p_Push4(t_trapDoorWeight);
	t_weights->p_Push4(50);
	t_weights->p_Push4(10);
	int t_trapType=0;
	int t_159=t_weights->p_PickRandom(true);
	if(t_159==0){
		t_trapType=9;
	}else{
		if(t_159==1){
			t_trapType=2;
		}else{
			if(t_159==2){
				t_trapType=3;
			}else{
				if(t_159==3){
					t_trapType=1;
				}else{
					t_trapType=14;
				}
			}
		}
	}
	m_PlaceTrapInRoom2(t_xVal,t_yVal,t_wVal,t_hVal,t_trapType,-1);
}
void c_Level::m_PlaceTrapsZone5(){
	c_Enumerator26* t_=m_rooms->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_RoomData* t_room=t_->p_NextObject();
		int t_157=t_room->m_type;
		if(t_157==3 || t_157==5 || t_157==7){
			continue;
		}
		if(t_room->m_hasExit){
			continue;
		}
		int t_158=bb_controller_game_currentLevel;
		if(t_158==1){
			bool t_trapRoll=c_Util::m_RndBool(true);
			if(t_trapRoll){
				m_PlaceTrapZone5(t_room->m_x,t_room->m_y,t_room->m_w,t_room->m_h);
			}
			int t_trapRoll2=c_Util::m_RndIntRangeFromZero(2,true);
			if(t_trapRoll2==0){
				m_PlaceTrapZone5(t_room->m_x,t_room->m_y,t_room->m_w,t_room->m_h);
			}
		}else{
			if(t_158==2){
				int t_trapRoll3=c_Util::m_RndIntRangeFromZero(4,true);
				if(t_trapRoll3==0){
					m_PlaceTrapZone5(t_room->m_x,t_room->m_y,t_room->m_w,t_room->m_h);
				}
				int t_trapRoll22=c_Util::m_RndIntRangeFromZero(3,true);
				if(t_trapRoll22==0){
					m_PlaceTrapZone5(t_room->m_x,t_room->m_y,t_room->m_w,t_room->m_h);
				}
				int t_trapRoll32=c_Util::m_RndIntRangeFromZero(3,true);
				if(t_trapRoll32==0){
					m_PlaceTrapZone5(t_room->m_x,t_room->m_y,t_room->m_w,t_room->m_h);
				}
				bool t_trapRoll4=c_Util::m_RndBool(true);
				if(t_trapRoll4){
					m_PlaceTrapZone5(t_room->m_x,t_room->m_y,t_room->m_w,t_room->m_h);
				}
			}else{
				if(t_158==3){
					int t_trapRoll5=c_Util::m_RndIntRangeFromZero(2,true);
					if(t_trapRoll5==0){
						m_PlaceTrapZone5(t_room->m_x,t_room->m_y,t_room->m_w,t_room->m_h);
					}
					bool t_trapRoll23=c_Util::m_RndBool(true);
					if(t_trapRoll23){
						m_PlaceTrapZone5(t_room->m_x,t_room->m_y,t_room->m_w,t_room->m_h);
					}
					int t_numTraps=c_Util::m_RndIntRange(1,3,true,-1);
					for(t_numTraps=t_numTraps;t_numTraps>0;t_numTraps=t_numTraps+-1){
						m_PlaceTrapZone5(t_room->m_x,t_room->m_y,t_room->m_w,t_room->m_h);
					}
				}
			}
		}
	}
}
void c_Level::m_PlaceTrapZone4(int t_xVal,int t_yVal,int t_wVal,int t_hVal){
	int t_trapTypeRoll=c_Util::m_RndIntRangeFromZero(100,true);
	int t_trapType=0;
	int t_direction=-1;
	if(t_trapTypeRoll<=5){
		t_trapType=1;
		t_direction=8;
	}else{
		if(t_trapTypeRoll<=10){
			t_trapType=3;
		}else{
			if(t_trapTypeRoll<=20){
				t_trapType=4;
			}else{
				if(t_trapTypeRoll<=30){
					t_trapType=9;
				}else{
					if(t_trapTypeRoll<=40){
						t_trapType=2;
					}else{
						if(t_trapTypeRoll<=55){
							t_trapType=1;
							t_direction=4;
						}else{
							if(t_trapTypeRoll<=70){
								t_trapType=1;
								t_direction=5;
							}else{
								if(t_trapTypeRoll<=85){
									t_trapType=1;
									t_direction=6;
								}else{
									t_trapType=1;
									t_direction=7;
								}
							}
						}
					}
				}
			}
		}
	}
	m_PlaceTrapInRoom2(t_xVal,t_yVal,t_wVal,t_hVal,t_trapType,t_direction);
}
void c_Level::m_PlaceTrapsZone4(){
	c_Enumerator26* t_=m_rooms->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_RoomData* t_room=t_->p_NextObject();
		int t_155=t_room->m_type;
		if(t_155==3 || t_155==5 || t_155==7){
			continue;
		}
		if(t_room->m_hasExit){
			continue;
		}
		int t_156=bb_controller_game_currentLevel;
		if(t_156==1){
			bool t_trapRoll=c_Util::m_RndBool(true);
			if(t_trapRoll){
				m_PlaceTrapZone4(t_room->m_x,t_room->m_y,t_room->m_w,t_room->m_h);
			}
			int t_trapRoll2=c_Util::m_RndIntRangeFromZero(2,true);
			if(t_trapRoll2==0){
				m_PlaceTrapZone4(t_room->m_x,t_room->m_y,t_room->m_w,t_room->m_h);
			}
		}else{
			if(t_156==2){
				int t_trapRoll3=c_Util::m_RndIntRangeFromZero(4,true);
				if(t_trapRoll3==0){
					m_PlaceTrapZone4(t_room->m_x,t_room->m_y,t_room->m_w,t_room->m_h);
				}
				int t_trapRoll22=c_Util::m_RndIntRangeFromZero(3,true);
				if(t_trapRoll22==0){
					m_PlaceTrapZone4(t_room->m_x,t_room->m_y,t_room->m_w,t_room->m_h);
				}
				int t_trapRoll32=c_Util::m_RndIntRangeFromZero(3,true);
				if(t_trapRoll32==0){
					m_PlaceTrapZone4(t_room->m_x,t_room->m_y,t_room->m_w,t_room->m_h);
				}
				bool t_trapRoll4=c_Util::m_RndBool(true);
				if(t_trapRoll4){
					m_PlaceTrapZone4(t_room->m_x,t_room->m_y,t_room->m_w,t_room->m_h);
				}
			}else{
				if(t_156==3){
					int t_trapRoll5=c_Util::m_RndIntRangeFromZero(2,true);
					if(t_trapRoll5==0){
						m_PlaceTrapZone4(t_room->m_x,t_room->m_y,t_room->m_w,t_room->m_h);
					}
					bool t_trapRoll23=c_Util::m_RndBool(true);
					if(t_trapRoll23){
						m_PlaceTrapZone4(t_room->m_x,t_room->m_y,t_room->m_w,t_room->m_h);
					}
					int t_numTraps=c_Util::m_RndIntRange(1,3,true,-1);
					for(t_numTraps=t_numTraps;t_numTraps>0;t_numTraps=t_numTraps+-1){
						m_PlaceTrapZone4(t_room->m_x,t_room->m_y,t_room->m_w,t_room->m_h);
					}
				}
			}
		}
	}
	c_IntPointList* t_destructibleWalls=(new c_IntPointList)->m_new();
	c_NodeEnumerator* t_2=m_tiles->p_ObjectEnumerator();
	while(t_2->p_HasNext()){
		c_Node25* t_tilesOnXNode=t_2->p_NextObject();
		c_NodeEnumerator2* t_3=t_tilesOnXNode->p_Value()->p_ObjectEnumerator();
		while(t_3->p_HasNext()){
			c_Node26* t_tileNode=t_3->p_NextObject();
			c_Tile* t_tile=t_tileNode->p_Value();
			if(t_tile->p_IsWall(false,true,false,false)){
				t_destructibleWalls->p_AddLast26((new c_Point)->m_new(t_tile->m_x,t_tile->m_y));
			}
		}
	}
	for(int t_limit=500;t_limit>0;t_limit=t_limit+-1){
		int t_destructibleWallsIndex=c_Util::m_RndIntRangeFromZero(t_destructibleWalls->p_Count()-1,true);
		Array<c_Point* > t_destructibleWallsArray=t_destructibleWalls->p_ToArray();
		c_Point* t_destructibleWall=t_destructibleWallsArray[t_destructibleWallsIndex];
		if(c_Util::m_GetDist(0,t_destructibleWall->m_y,t_destructibleWall->m_x,0)<FLOAT(5.0)){
			continue;
		}
		if(c_Util::m_RndBool(true)){
			if(!m_IsFloorAt(t_destructibleWall->m_x+1,t_destructibleWall->m_y)){
				continue;
			}
			if(t_destructibleWall->m_y==0){
				continue;
			}
			m_PlaceTileRemovingExistingTiles2(t_destructibleWall->m_x,t_destructibleWall->m_y,108);
			(new c_FireTrap)->m_new(t_destructibleWall->m_x,t_destructibleWall->m_y,0,false);
		}else{
			if(!m_IsFloorAt(t_destructibleWall->m_x-1,t_destructibleWall->m_y)){
				continue;
			}
			if(t_destructibleWall->m_y==0){
				continue;
			}
			m_PlaceTileRemovingExistingTiles2(t_destructibleWall->m_x,t_destructibleWall->m_y,108);
			(new c_FireTrap)->m_new(t_destructibleWall->m_x,t_destructibleWall->m_y,2,false);
		}
		return;
	}
}
void c_Level::m_PlaceTrapZone3(int t_xVal,int t_yVal,int t_wVal,int t_hVal){
	int t_trapTypeRoll=c_Util::m_RndIntRangeFromZero(100,true);
	int t_trapType=0;
	int t_direction=-1;
	if(t_trapTypeRoll<=1){
		t_trapType=1;
		t_direction=9;
	}else{
		if(t_trapTypeRoll<=5){
			t_trapType=1;
			t_direction=8;
		}else{
			if(t_trapTypeRoll<=10){
				t_trapType=3;
			}else{
				if(t_trapTypeRoll<=30){
					t_trapType=4;
				}else{
					if(t_trapTypeRoll<=45){
						t_trapType=5;
					}else{
						if(t_trapTypeRoll<=60){
							t_trapType=2;
						}else{
							if(t_trapTypeRoll<=75){
								t_trapType=9;
							}else{
								t_trapType=1;
							}
						}
					}
				}
			}
		}
	}
	m_PlaceTrapInRoom2(t_xVal,t_yVal,t_wVal,t_hVal,t_trapType,t_direction);
}
void c_Level::m_PlaceTrapsZone3(){
	c_Enumerator26* t_=m_rooms->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_RoomData* t_room=t_->p_NextObject();
		int t_153=t_room->m_type;
		if(t_153==3 || t_153==5 || t_153==7){
			continue;
		}
		if(t_room->m_hasExit){
			continue;
		}
		int t_154=bb_controller_game_currentLevel;
		if(t_154==1){
			bool t_trapRoll=c_Util::m_RndBool(true);
			if(t_trapRoll){
				m_PlaceTrapZone3(t_room->m_x,t_room->m_y,t_room->m_w,t_room->m_h);
			}
			int t_trapRoll2=c_Util::m_RndIntRangeFromZero(2,true);
			if(t_trapRoll2==0){
				m_PlaceTrapZone3(t_room->m_x,t_room->m_y,t_room->m_w,t_room->m_h);
			}
		}else{
			if(t_154==2){
				int t_trapRoll3=c_Util::m_RndIntRangeFromZero(4,true);
				if(t_trapRoll3==0){
					m_PlaceTrapZone3(t_room->m_x,t_room->m_y,t_room->m_w,t_room->m_h);
				}
				int t_trapRoll22=c_Util::m_RndIntRangeFromZero(3,true);
				if(t_trapRoll22==0){
					m_PlaceTrapZone3(t_room->m_x,t_room->m_y,t_room->m_w,t_room->m_h);
				}
				int t_trapRoll32=c_Util::m_RndIntRangeFromZero(3,true);
				if(t_trapRoll32==0){
					m_PlaceTrapZone3(t_room->m_x,t_room->m_y,t_room->m_w,t_room->m_h);
				}
				bool t_trapRoll4=c_Util::m_RndBool(true);
				if(t_trapRoll4){
					m_PlaceTrapZone3(t_room->m_x,t_room->m_y,t_room->m_w,t_room->m_h);
				}
			}else{
				if(t_154==3){
					int t_trapRoll5=c_Util::m_RndIntRangeFromZero(2,true);
					if(t_trapRoll5==0){
						m_PlaceTrapZone3(t_room->m_x,t_room->m_y,t_room->m_w,t_room->m_h);
					}
					bool t_trapRoll23=c_Util::m_RndBool(true);
					if(t_trapRoll23){
						m_PlaceTrapZone3(t_room->m_x,t_room->m_y,t_room->m_w,t_room->m_h);
					}
					int t_numTraps=c_Util::m_RndIntRange(1,3,true,-1);
					for(t_numTraps=t_numTraps;t_numTraps>0;t_numTraps=t_numTraps+-1){
						m_PlaceTrapZone3(t_room->m_x,t_room->m_y,t_room->m_w,t_room->m_h);
					}
				}else{
					int t_trapRoll6=c_Util::m_RndIntRangeFromZero(2,true);
					if(t_trapRoll6==0){
						m_PlaceTrapZone3(t_room->m_x,t_room->m_y,t_room->m_w,t_room->m_h);
					}
					bool t_trapRoll24=c_Util::m_RndBool(true);
					if(t_trapRoll24){
						m_PlaceTrapZone3(t_room->m_x,t_room->m_y,t_room->m_w,t_room->m_h);
					}
					int t_trapRoll33=c_Util::m_RndIntRangeFromZero(4,true);
					if(t_trapRoll33==0){
						m_PlaceTrapZone3(t_room->m_x,t_room->m_y,t_room->m_w,t_room->m_h);
					}
					int t_numTraps2=c_Util::m_RndIntRange(1,3,true,-1);
					for(t_numTraps2=t_numTraps2;t_numTraps2>0;t_numTraps2=t_numTraps2+-1){
						m_PlaceTrapZone3(t_room->m_x,t_room->m_y,t_room->m_w,t_room->m_h);
					}
				}
			}
		}
	}
}
void c_Level::m_PlaceTrapsZone2(){
	c_Enumerator26* t_=m_rooms->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_RoomData* t_room=t_->p_NextObject();
		int t_151=t_room->m_type;
		if(t_151==3 || t_151==5 || t_151==7){
			continue;
		}
		if(t_room->m_hasExit){
			continue;
		}
		int t_152=bb_controller_game_currentLevel;
		if(t_152==1){
			bool t_bounceTrapRoll=c_Util::m_RndBool(true);
			if(t_bounceTrapRoll){
				m_PlaceTrapInRoom4(t_room,1);
			}
			int t_bounceTrapRoll2=c_Util::m_RndIntRangeFromZero(2,true);
			if(t_bounceTrapRoll2==0){
				m_PlaceTrapInRoom4(t_room,1);
			}else{
				int t_bombTrapRoll=c_Util::m_RndIntRangeFromZero(3,true);
				if(t_bombTrapRoll==0){
					m_PlaceTrapInRoom4(t_room,9);
				}
			}
		}else{
			if(t_152==2){
				int t_trapDoorRoll=c_Util::m_RndIntRangeFromZero(4,true);
				if(t_trapDoorRoll==0){
					m_PlaceTrapInRoom4(t_room,3);
				}else{
					int t_bombTrapRoll2=c_Util::m_RndIntRangeFromZero(3,true);
					if(t_bombTrapRoll2==0){
						m_PlaceTrapInRoom4(t_room,9);
					}
				}
				int t_spikeTrapRoll=c_Util::m_RndIntRangeFromZero(3,true);
				if(t_spikeTrapRoll==0){
					m_PlaceTrapInRoom4(t_room,2);
				}
				int t_bounceTrapRoll3=c_Util::m_RndIntRangeFromZero(3,true);
				if(t_bounceTrapRoll3==0){
					m_PlaceTrapInRoom4(t_room,1);
				}
				bool t_bounceTrapRoll22=c_Util::m_RndBool(true);
				if(t_bounceTrapRoll22){
					m_PlaceTrapInRoom4(t_room,1);
				}
			}else{
				if(t_152==3){
					int t_trapDoorRoll2=c_Util::m_RndIntRangeFromZero(2,true);
					if(t_trapDoorRoll2==0){
						m_PlaceTrapInRoom4(t_room,3);
					}else{
						int t_bombTrapRoll3=c_Util::m_RndIntRangeFromZero(3,true);
						if(t_bombTrapRoll3==0){
							m_PlaceTrapInRoom4(t_room,9);
						}
					}
					bool t_spikeTrapRoll2=c_Util::m_RndBool(true);
					if(t_spikeTrapRoll2){
						m_PlaceTrapInRoom4(t_room,2);
					}
					int t_numBounceTraps=c_Util::m_RndIntRange(1,3,true,-1);
					for(int t_numBounceTraps2=t_numBounceTraps;t_numBounceTraps2>0;t_numBounceTraps2=t_numBounceTraps2+-1){
						bool t_bounceTrapDirectionRoll=c_Util::m_RndBool(true);
						int t_bounceTrapDirection=-1;
						if(!t_bounceTrapDirectionRoll){
							t_bounceTrapDirection=8;
						}
						m_PlaceTrapInRoom3(t_room,1,t_bounceTrapDirection);
					}
				}else{
					if(bb_controller_game_currentLevel>3){
						int t_trapDoorRoll3=c_Util::m_RndIntRangeFromZero(2,true);
						if(t_trapDoorRoll3==0){
							m_PlaceTrapInRoom4(t_room,3);
						}else{
							int t_bombTrapRoll4=c_Util::m_RndIntRangeFromZero(3,true);
							if(t_bombTrapRoll4==0){
								m_PlaceTrapInRoom4(t_room,9);
							}
						}
						bool t_spikeTrapRoll3=c_Util::m_RndBool(true);
						if(t_spikeTrapRoll3){
							m_PlaceTrapInRoom4(t_room,2);
						}
						int t_spikeTrapRoll22=c_Util::m_RndIntRangeFromZero(4,true);
						if(t_spikeTrapRoll22==0){
							m_PlaceTrapInRoom4(t_room,2);
						}
						int t_numBounceTraps3=c_Util::m_RndIntRange(1,3,true,-1);
						for(int t_numBounceTraps4=t_numBounceTraps3;t_numBounceTraps4>0;t_numBounceTraps4=t_numBounceTraps4+-1){
							int t_bounceTrapDirectionRoll2=c_Util::m_RndIntRangeFromZero(2,true);
							int t_bounceTrapDirection2=-1;
							if(t_bounceTrapDirectionRoll2!=0){
								bool t_bounceTrapDirectionRoll22=c_Util::m_RndBool(true);
								if(t_bounceTrapDirectionRoll22){
									t_bounceTrapDirection2=8;
								}else{
									t_bounceTrapDirection2=9;
								}
							}
							m_PlaceTrapInRoom3(t_room,1,t_bounceTrapDirection2);
						}
					}
				}
			}
		}
	}
}
void c_Level::m_PlaceTrapsZone1(){
	c_Enumerator26* t_=m_rooms->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_RoomData* t_room=t_->p_NextObject();
		int t_149=t_room->m_type;
		if(t_149==3 || t_149==5 || t_149==7){
			continue;
		}
		if(t_room->m_hasExit){
			continue;
		}
		int t_150=bb_controller_game_currentLevel;
		if(t_150==1){
			if(c_Util::m_RndBool(true)){
				m_PlaceTrapInRoom4(t_room,1);
			}
			int t_bounceTrapRoll=c_Util::m_RndIntRangeFromZero(2,true);
			if(t_bounceTrapRoll==0){
				m_PlaceTrapInRoom4(t_room,1);
			}else{
				int t_bombTrapRoll=c_Util::m_RndIntRangeFromZero(3,true);
				if(t_bombTrapRoll==0){
					m_PlaceTrapInRoom4(t_room,9);
				}
			}
		}else{
			if(t_150==2){
				int t_trapDoorRoll=c_Util::m_RndIntRangeFromZero(4,true);
				if(t_trapDoorRoll==0){
					m_PlaceTrapInRoom4(t_room,3);
				}else{
					int t_bombTrapRoll2=c_Util::m_RndIntRangeFromZero(3,true);
					if(t_bombTrapRoll2==0){
						m_PlaceTrapInRoom4(t_room,9);
					}
				}
				int t_spikeTrapRoll=c_Util::m_RndIntRangeFromZero(3,true);
				if(t_spikeTrapRoll==0){
					m_PlaceTrapInRoom4(t_room,2);
				}
				int t_bounceTrapRoll2=c_Util::m_RndIntRangeFromZero(3,true);
				if(t_bounceTrapRoll2==0){
					m_PlaceTrapInRoom4(t_room,1);
				}
				if(c_Util::m_RndBool(true)){
					m_PlaceTrapInRoom4(t_room,1);
				}
			}else{
				if(t_150==3){
					int t_trapDoorRoll2=c_Util::m_RndIntRangeFromZero(2,true);
					if(t_trapDoorRoll2==0){
						m_PlaceTrapInRoom4(t_room,3);
					}else{
						int t_bombTrapRoll3=c_Util::m_RndIntRangeFromZero(3,true);
						if(t_bombTrapRoll3==0){
							m_PlaceTrapInRoom4(t_room,9);
						}
					}
					if(c_Util::m_RndBool(true)){
						m_PlaceTrapInRoom4(t_room,2);
					}
					int t_numBounceTraps=c_Util::m_RndIntRange(1,3,true,-1);
					for(int t_i=0;t_i<t_numBounceTraps;t_i=t_i+1){
						m_PlaceTrapInRoom4(t_room,1);
					}
				}else{
					if(bb_controller_game_currentLevel<=0){
						continue;
					}
					int t_trapDoorRoll3=c_Util::m_RndIntRangeFromZero(2,true);
					if(t_trapDoorRoll3==0){
						m_PlaceTrapInRoom4(t_room,3);
					}else{
						int t_bombTrapRoll4=c_Util::m_RndIntRangeFromZero(3,true);
						if(t_bombTrapRoll4==0){
							m_PlaceTrapInRoom4(t_room,9);
						}
					}
					if(c_Util::m_RndBool(true)){
						m_PlaceTrapInRoom4(t_room,2);
					}
					int t_spikeTrapRoll2=c_Util::m_RndIntRangeFromZero(4,true);
					if(t_spikeTrapRoll2==0){
						m_PlaceTrapInRoom4(t_room,2);
					}
					int t_numBounceTraps2=c_Util::m_RndIntRange(1,3,true,-1);
					for(int t_i2=0;t_i2<t_numBounceTraps2;t_i2=t_i2+1){
						m_PlaceTrapInRoom4(t_room,1);
					}
				}
			}
		}
	}
}
void c_Level::m_PlaceTraps(){
	bb_logger_Debug->p_Log(String(L"PLACETRAPS",10));
	int t_148=bb_controller_game_currentZone;
	if(t_148==5){
		m_PlaceTrapsZone5();
	}else{
		if(t_148==4){
			m_PlaceTrapsZone4();
		}else{
			if(t_148==3){
				m_PlaceTrapsZone3();
			}else{
				if(t_148==2){
					m_PlaceTrapsZone2();
				}else{
					m_PlaceTrapsZone1();
				}
			}
		}
	}
}
c_BlobRoom* c_Level::m_hallwayZone5;
bool c_Level::m_isHardMode;
c_XMLDoc* c_Level::m_GetHardModeXML(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Level.GetHardModeXML()",22));
	return 0;
}
c_Enemy* c_Level::m_PlaceMinibossOfShapeAt(int t_newMiniboss,int t_xVal,int t_yVal){
	int t_level=1;
	if(bb_controller_game_currentLevel>=3){
		t_level=2;
	}
	if(m_isHardcoreMode && bb_controller_game_currentLevel>=2){
		t_level=2;
	}
	if(bb_controller_game_currentDepth>=2 && t_level==1){
		int t_109=t_newMiniboss;
		if(t_109==402 || t_109==400 || t_109==407){
			t_level=2;
		}
	}
	if(bb_controller_game_currentZone==3 && t_level==2 && t_newMiniboss==402){
		t_level=3;
	}
	if(bb_controller_game_currentDepth>=4){
		int t_110=t_newMiniboss;
		if(t_110==405 || t_110==409){
			t_level=2;
		}else{
			if(t_110==402){
				t_level=c_Util::m_RndIntRange(2,3,true,-1);
			}
		}
	}
	if(bb_controller_game_currentZone==5 && t_newMiniboss==402){
		if(c_Util::m_RndBool(true)){
			t_level=4;
		}
	}
	if(c_Player::m_DoesAnyPlayerHaveItemOfType(String(L"ring_peace",10),false)){
		t_level=1;
	}
	if(c_Player::m_DoesAnyPlayerHaveItemOfType(String(L"ring_war",8),false)){
		t_level=2;
	}
	if(m_isHardMode){
		bb_logger_Debug->p_TraceNotImplemented(String(L"Level.PlaceMinibossOfShapeAt(Int, Int, Int) (Hard Mode)",55));
	}
	c_Enemy* t_miniboss=0;
	int t_111=t_newMiniboss;
	if(t_111==402){
		t_miniboss=((new c_Dragon)->m_new(t_xVal,t_yVal,t_level));
	}else{
		if(t_111==400){
			t_miniboss=((new c_BatMiniboss)->m_new(t_xVal,t_yVal,t_level));
		}else{
			if(t_111==405){
				t_miniboss=((new c_Banshee)->m_new(t_xVal,t_yVal,t_level));
			}else{
				if(t_111==409){
					t_miniboss=((new c_Nightmare)->m_new(t_xVal,t_yVal,t_level));
				}else{
					if(t_111==407){
						t_miniboss=((new c_Minotaur)->m_new(t_xVal,t_yVal,t_level));
					}else{
						if(t_111==412){
							t_miniboss=((new c_Ogre)->m_new(t_xVal,t_yVal,1));
						}else{
							if(t_111==411){
								t_miniboss=((new c_Mommy)->m_new(t_xVal,t_yVal,1));
							}else{
								t_miniboss=((new c_MetroGnome)->m_new(t_xVal,t_yVal,t_level));
							}
						}
					}
				}
			}
		}
	}
	return t_miniboss;
}
void c_Level::m_PlaceAppropriateMinibosses(c_RoomBase* t_room){
	c_WeightedPicker* t_weights=(new c_WeightedPicker)->m_new();
	c_IntStack* t_minibossTypes=(new c_IntStack)->m_new2();
	int t_82=bb_controller_game_currentZone;
	if(t_82==1){
		t_weights->p_Push4(1);
		t_minibossTypes->p_Push4(402);
		t_weights->p_Push4(1);
		t_minibossTypes->p_Push4(407);
		if(bb_controller_game_currentLevel<=2){
			t_weights->p_Push4(1);
			t_minibossTypes->p_Push4(400);
		}
	}else{
		if(t_82==4){
			t_weights->p_Push4(20);
			t_minibossTypes->p_Push4(402);
			t_weights->p_Push4(15);
			t_minibossTypes->p_Push4(405);
			t_weights->p_Push4(15);
			t_minibossTypes->p_Push4(409);
			t_weights->p_Push4(25);
			t_minibossTypes->p_Push4(412);
			t_weights->p_Push4(25);
			t_minibossTypes->p_Push4(411);
		}else{
			if(t_82==5){
				t_weights->p_Push4(2);
				t_minibossTypes->p_Push4(402);
				t_weights->p_Push4(1);
				t_minibossTypes->p_Push4(407);
				t_weights->p_Push4(1);
				t_minibossTypes->p_Push4(413);
			}else{
				t_weights->p_Push4(25);
				t_minibossTypes->p_Push4(402);
				t_weights->p_Push4(15);
				t_minibossTypes->p_Push4(400);
				t_weights->p_Push4(20);
				t_minibossTypes->p_Push4(405);
				t_weights->p_Push4(15);
				t_minibossTypes->p_Push4(409);
				t_weights->p_Push4(25);
				t_minibossTypes->p_Push4(407);
			}
		}
	}
	bb_logger_Debug->p_Assert(t_weights->p_Length()==t_minibossTypes->p_Length(),String());
	int t_numMinibosses=1;
	if(c_Shrine::m_bossShrineActive){
		t_numMinibosses+=1;
	}
	if(m_isHardMode || c_Util::m_IsCharacterActive(13)){
		c_XMLDoc* t_hardModeNode=m_GetHardModeXML();
		int t_extraMinibossesPerExit=t_hardModeNode->p_GetAttribute3(String(L"extraMinibossesPerExit",22),0);
		t_numMinibosses+=t_extraMinibossesPerExit;
	}
	c_IntStack* t_placedMinibossTypes=(new c_IntStack)->m_new2();
	c_Point* t_minibossPoint=m_GetStandardExitCoords();
	for(int t_i=0;t_i<t_numMinibosses;t_i=t_i+1){
		if(t_i>0){
			t_minibossPoint=m_GetRandPointInRoomWithOptions2(t_room,true,true,false);
			if(t_minibossPoint==0){
				break;
			}
		}
		c_IntStack* t_minibossesPlacedFlags=(new c_IntStack)->m_new2();
		int t_minibossPlacedFlagsMin=999999;
		c_Enumerator6* t_=t_minibossTypes->p_ObjectEnumerator();
		while(t_->p_HasNext()){
			int t_minibossType=t_->p_NextObject();
			int t_minibossPlacedFlags=0;
			c_Enumerator6* t_2=m_previousLevelMinibosses->p_ObjectEnumerator();
			while(t_2->p_HasNext()){
				int t_previousLevelMiniboss=t_2->p_NextObject();
				if(t_minibossType==c_Enemy::m_GetBaseType(t_previousLevelMiniboss)){
					t_minibossPlacedFlags+=1;
				}
			}
			c_Enumerator6* t_3=t_placedMinibossTypes->p_ObjectEnumerator();
			while(t_3->p_HasNext()){
				int t_placedMinibossType=t_3->p_NextObject();
				if(t_minibossType==t_placedMinibossType){
					t_minibossPlacedFlags+=2;
				}
			}
			t_minibossesPlacedFlags->p_Push4(t_minibossPlacedFlags);
			t_minibossPlacedFlagsMin=bb_math_Min(t_minibossPlacedFlagsMin,t_minibossPlacedFlags);
		}
		for(int t_j=0;t_j<t_weights->p_Length();t_j=t_j+1){
			int t_minibossPlacedFlags2=t_minibossesPlacedFlags->p_Get2(t_j);
			bool t_enabled=false;
			if(t_minibossPlacedFlags2==t_minibossPlacedFlagsMin){
				t_enabled=true;
			}
			t_weights->p_SetEnabled(t_j,t_enabled);
		}
		int t_minibossTypeIndex=t_weights->p_PickRandom(true);
		int t_minibossType2=t_minibossTypes->p_Get2(t_minibossTypeIndex);
		t_placedMinibossTypes->p_Push4(t_minibossType2);
		c_Enemy* t_miniboss=m_PlaceMinibossOfShapeAt(t_minibossType2,t_minibossPoint->m_x,t_minibossPoint->m_y);
		t_miniboss->m_isStairLockingMiniboss=true;
		c_Dragon* t_dragon=dynamic_cast<c_Dragon*>(t_miniboss);
		if(t_dragon!=0){
			t_dragon->m_seekDistance=0;
			if(t_dragon->m_level==2){
				t_dragon->m_seekDistance=10;
			}
			t_dragon->m_dontMove=true;
		}
		c_MetroGnome* t_metroGnome=dynamic_cast<c_MetroGnome*>(t_miniboss);
		if(t_metroGnome!=0){
			t_metroGnome->m_originX=t_minibossPoint->m_x;
			t_metroGnome->m_originY=t_minibossPoint->m_y;
		}
	}
}
void c_Level::m_PlaceShopkeeperGhostIfNeededAt(int t_xVal,int t_yVal){
	if(m_shopkeeperGhostLevel==bb_controller_game_currentLevel && m_shopkeeperGhostDepth==bb_controller_game_currentDepth){
		(new c_ShopkeeperGhost)->m_new(t_xVal,t_yVal,1);
	}
}
void c_Level::m_PlaceExitRoomMiniboss(c_RoomBase* t_rd){
	m_PlaceAppropriateMinibosses(t_rd);
	c_Point* t_exitCoords=m_GetStandardExitCoords();
	m_PlaceShopkeeperGhostIfNeededAt(t_exitCoords->m_x,t_exitCoords->m_y);
}
int c_Level::m_GetZone3ElementalType(int t_xVal,int t_yVal){
	if(Float(t_yVal)*m_zone3DividingLineX-Float(t_xVal)*m_zone3DividingLineY>FLOAT(0.0)){
		return 206;
	}
	return 205;
}
int c_Level::m_GetZone3YetiHellhoundType(int t_xVal,int t_yVal){
	if(Float(t_yVal)*m_zone3DividingLineX-Float(t_xVal)*m_zone3DividingLineY>FLOAT(0.0)){
		return 213;
	}
	return 211;
}
int c_Level::m_GetZone3BeetleType(int t_xVal,int t_yVal){
	if(Float(t_yVal)*m_zone3DividingLineX-Float(t_xVal)*m_zone3DividingLineY>FLOAT(0.0)){
		return 210;
	}
	return 209;
}
void c_Level::m_PlaceRareEnemies(c_RoomBase* t_room,bool t_hasExit){
	c_Point* t_point=0;
	if(m_isHardcoreMode){
		int t_greenBatRoll=c_Util::m_RndIntRangeFromZero(5000,true);
		if(t_greenBatRoll==0){
			t_point=m_GetRandPointInRoomWithOptions(t_room,true,true,true,false,true,false);
			if(t_point==0){
				return;
			}
			(new c_Bat)->m_new(t_point->m_x,t_point->m_y,3);
		}
		int t_purpleSlimeRoll=c_Util::m_RndIntRangeFromZero(1000,true);
		if(t_purpleSlimeRoll==0){
			t_point=m_GetRandPointInRoomWithOptions(t_room,true,true,true,false,true,false);
			if(t_point==0){
				return;
			}
			(new c_Slime)->m_new(t_point->m_x,t_point->m_y,6);
		}
	}
	if(!m_isHardMode || t_hasExit){
		return;
	}
	c_XMLDoc* t_hardModeXML=m_GetHardModeXML();
	int t_minibossesPerNonExit=t_hardModeXML->p_GetAttribute3(String(L"minibossesPerNonExit",20),0);
	c_WeightedPicker* t_weights=(new c_WeightedPicker)->m_new();
	c_IntStack* t_enemyTypes=(new c_IntStack)->m_new2();
	t_weights->p_Push4(1);
	t_enemyTypes->p_Push4(402);
	int t_118=bb_controller_game_currentZone;
	if(t_118==1 || t_118==2 || t_118==3 || t_118==5){
		t_weights->p_Push4(1);
		t_enemyTypes->p_Push4(407);
	}
	int t_119=bb_controller_game_currentZone;
	if(t_119==1 || t_119==2 || t_119==3){
		t_weights->p_Push4(1);
		t_enemyTypes->p_Push4(400);
	}
	int t_120=bb_controller_game_currentZone;
	if(t_120==2 || t_120==3 || t_120==4){
		t_weights->p_Push4(1);
		t_enemyTypes->p_Push4(405);
		t_weights->p_Push4(1);
		t_enemyTypes->p_Push4(409);
	}
	int t_121=bb_controller_game_currentZone;
	if(t_121==5){
		t_weights->p_Push4(1);
		t_enemyTypes->p_Push4(413);
	}
	if(t_minibossesPerNonExit>0){
		for(int t_i=0;t_i<t_minibossesPerNonExit;t_i=t_i+1){
			t_point=m_GetRandPointInRoomWithOptions(t_room,true,true,true,true,true,false);
			if(t_point==0){
				break;
			}
			int t_enemyTypeIndex=t_weights->p_PickRandom(true);
			int t_enemyType=t_enemyTypes->p_Get2(t_enemyTypeIndex);
			c_Enemy::m_MakeEnemy(t_point->m_x,t_point->m_y,t_enemyType);
		}
	}
	int t_sarcsPerRoom=c_ToughSarcophagus::m_GetPerRoomCount();
	if(t_sarcsPerRoom>0){
		c_StackEx* t_toughSarcophagusEnemyTypes=(new c_StackEx)->m_new();
		int t_122=bb_controller_game_currentZone;
		if(t_122==1){
			int t_123=bb_controller_game_currentLevel;
			if(t_123==1){
				t_toughSarcophagusEnemyTypes->p_Push4(3);
			}else{
				if(t_123==2){
					t_toughSarcophagusEnemyTypes->p_Push4(4);
				}else{
					t_toughSarcophagusEnemyTypes->p_Push4(5);
				}
			}
			if(bb_controller_game_currentLevel<=2){
				t_toughSarcophagusEnemyTypes->p_Push4(9);
			}else{
				t_toughSarcophagusEnemyTypes->p_Push4(10);
			}
			t_toughSarcophagusEnemyTypes->p_Push4(11);
		}else{
			if(t_122==2){
				int t_124=bb_controller_game_currentLevel;
				if(t_124==1){
					t_toughSarcophagusEnemyTypes->p_Push4(100);
					t_toughSarcophagusEnemyTypes->p_Push4(103);
				}else{
					if(t_124==2){
						t_toughSarcophagusEnemyTypes->p_Push4(101);
						t_toughSarcophagusEnemyTypes->p_Push4(104);
					}else{
						t_toughSarcophagusEnemyTypes->p_Push4(102);
						t_toughSarcophagusEnemyTypes->p_Push4(105);
					}
				}
				if(bb_controller_game_currentLevel<=2){
					t_toughSarcophagusEnemyTypes->p_Push4(108);
					t_toughSarcophagusEnemyTypes->p_Push4(110);
				}else{
					t_toughSarcophagusEnemyTypes->p_Push4(109);
					t_toughSarcophagusEnemyTypes->p_Push4(111);
				}
				t_toughSarcophagusEnemyTypes->p_Push4(114);
			}else{
				if(t_122==3){
					int t_125=bb_controller_game_currentLevel;
					if(t_125==1){
						t_toughSarcophagusEnemyTypes->p_Push4(202);
					}else{
						if(t_125==2){
							t_toughSarcophagusEnemyTypes->p_Push4(203);
						}else{
							t_toughSarcophagusEnemyTypes->p_Push4(204);
						}
					}
					if(bb_controller_game_currentLevel<=2){
						t_toughSarcophagusEnemyTypes->p_Push4(207);
					}else{
						t_toughSarcophagusEnemyTypes->p_Push4(208);
					}
					if(bb_controller_game_currentLevel==1){
						t_toughSarcophagusEnemyTypes->p_Push4(212);
					}else{
						t_toughSarcophagusEnemyTypes->p_Push4(219);
					}
					t_toughSarcophagusEnemyTypes->p_Push4(205);
					t_toughSarcophagusEnemyTypes->p_Push4(211);
					t_toughSarcophagusEnemyTypes->p_Push4(209);
				}else{
					if(t_122==4){
						int t_126=bb_controller_game_currentLevel;
						if(t_126==1){
							t_toughSarcophagusEnemyTypes->p_Push4(309);
						}else{
							if(t_126==2){
								t_toughSarcophagusEnemyTypes->p_Push4(310);
							}else{
								t_toughSarcophagusEnemyTypes->p_Push4(311);
							}
						}
						if(!c_Util::m_IsCharacterActive(3)){
							if(bb_controller_game_currentLevel<=2){
								t_toughSarcophagusEnemyTypes->p_Push4(304);
							}else{
								t_toughSarcophagusEnemyTypes->p_Push4(305);
							}
						}
						if(bb_controller_game_currentLevel==1){
							t_toughSarcophagusEnemyTypes->p_Push4(319);
						}else{
							t_toughSarcophagusEnemyTypes->p_Push4(320);
						}
						t_toughSarcophagusEnemyTypes->p_Push4(300);
						t_toughSarcophagusEnemyTypes->p_Push4(303);
						t_toughSarcophagusEnemyTypes->p_Push4(307);
						t_toughSarcophagusEnemyTypes->p_Push4(308);
						t_toughSarcophagusEnemyTypes->p_Push4(312);
						t_toughSarcophagusEnemyTypes->p_Push4(313);
					}else{
						int t_127=bb_controller_game_currentLevel;
						if(t_127==1){
							t_toughSarcophagusEnemyTypes->p_Push4(701);
							t_toughSarcophagusEnemyTypes->p_Push4(704);
							t_toughSarcophagusEnemyTypes->p_Push4(720);
						}else{
							if(t_127==2){
								t_toughSarcophagusEnemyTypes->p_Push4(712);
								t_toughSarcophagusEnemyTypes->p_Push4(705);
								t_toughSarcophagusEnemyTypes->p_Push4(721);
							}else{
								t_toughSarcophagusEnemyTypes->p_Push4(713);
								t_toughSarcophagusEnemyTypes->p_Push4(706);
								t_toughSarcophagusEnemyTypes->p_Push4(722);
							}
						}
						if(bb_controller_game_currentLevel==1){
							t_toughSarcophagusEnemyTypes->p_Push4(717);
						}else{
							t_toughSarcophagusEnemyTypes->p_Push4(719);
						}
						if(bb_controller_game_currentLevel<=2){
							t_toughSarcophagusEnemyTypes->p_Push4(723);
						}else{
							t_toughSarcophagusEnemyTypes->p_Push4(724);
						}
						t_toughSarcophagusEnemyTypes->p_Push4(702);
					}
				}
			}
		}
		bb_logger_Debug->p_Assert(t_toughSarcophagusEnemyTypes->p_Length()>0,String());
		t_toughSarcophagusEnemyTypes->p_Shuffle(true);
		for(int t_i2=0;t_i2<t_sarcsPerRoom;t_i2=t_i2+1){
			bool t_nearWallIsOk=false;
			int t_128=bb_controller_game_currentZone;
			if(t_128==1 || t_128==4){
				t_nearWallIsOk=false;
			}else{
				t_nearWallIsOk=true;
			}
			t_point=m_GetRandPointInRoomWithOptions(t_room,true,true,true,true,t_nearWallIsOk,false);
			if(t_point==0){
				break;
			}
			int t_enemyType2=t_toughSarcophagusEnemyTypes->p_Get2(t_i2 % t_toughSarcophagusEnemyTypes->p_Length());
			int t_129=t_enemyType2;
			if(t_129==205){
				t_enemyType2=m_GetZone3ElementalType(t_point->m_x,t_point->m_y);
			}else{
				if(t_129==211){
					t_enemyType2=m_GetZone3YetiHellhoundType(t_point->m_x,t_point->m_y);
				}else{
					if(t_129==209){
						t_enemyType2=m_GetZone3BeetleType(t_point->m_x,t_point->m_y);
					}
				}
			}
			(new c_ToughSarcophagus)->m_new(t_point->m_x,t_point->m_y,t_enemyType2);
		}
	}
}
c_Point* c_Level::m_GetRandPointInRoomOfTileType(c_RoomBase* t_room,int t_tileType,bool t_skipCollisions){
	int t_i=200;
	for(t_i=t_i-1;t_i>0;t_i=t_i+-1){
		c_Point* t_point=t_room->p_GetRandPoint();
		c_Tile* t_tile=m_GetTileAt(t_point->m_x,t_point->m_y);
		int t_tileTypeAtPoint=-1;
		if(t_tile!=0){
			t_tileTypeAtPoint=t_tile->p_GetType();
		}
		if(t_tileTypeAtPoint==t_tileType){
			if(!t_skipCollisions || !c_Util::m_IsGlobalCollisionAt2(t_point->m_x,t_point->m_y,false,false,false,false) && c_Enemy::m_GetEnemyAt(t_point->m_x,t_point->m_y,true)==0){
				return t_point;
			}
		}
	}
	return 0;
}
c_Point* c_Level::m_GetRandPointInRoomOfTileType2(int t_xVal,int t_yVal,int t_wVal,int t_hVal,int t_tileType,bool t_skipCollisions){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Level.GetRandPointInRoomOfTileType(Int, Int, Int, Int, Int, Bool)",65));
	return 0;
}
int c_Level::m_GetHardModeExtraEnemies(){
	if(m_isHardMode || c_Util::m_IsCharacterActive(13)){
		c_XMLDoc* t_hardModeXML=m_GetHardModeXML();
		return t_hardModeXML->p_GetAttribute3(String(L"extraEnemiesPerRoom",19),0);
	}
	return 0;
}
int c_Level::m_GetExtraEnemiesBase(){
	int t_extraEnemies=0;
	if(c_Player::m_DoesAnyPlayerHaveItemOfType(String(L"ring_war",8),false) && m_randSeed==-1){
		t_extraEnemies=1;
	}
	if(m_isHardcoreMode){
		t_extraEnemies+=1;
	}
	return t_extraEnemies+m_GetHardModeExtraEnemies();
}
void c_Level::m_PutVariedEnemiesZone5(c_StackEx2* t_pts){
	t_pts->p_Shuffle(true);
	c_WeightedPicker* t_picker=(new c_WeightedPicker)->m_new();
	t_picker->p_Push4(100);
	t_picker->p_Push4(50);
	t_picker->p_Push4(50);
	t_picker->p_Push4(200);
	t_picker->p_Push4(100);
	t_picker->p_Push4(100);
	t_picker->p_Push4(100);
	Array<int > t_selected=Array<int >(7);
	c_Enumerator24* t_=t_pts->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Point* t_point=t_->p_NextObject();
		int t_minSelected=999;
		Array<int > t_2=t_selected;
		int t_3=0;
		while(t_3<t_2.Length()){
			int t_s=t_2[t_3];
			t_3=t_3+1;
			t_minSelected=bb_math_Min(t_minSelected,t_s);
		}
		for(int t_i=0;t_i<t_picker->m_weights->p_Length();t_i=t_i+1){
			int t_s2=t_selected[t_i];
			bool t_isMinSelected=t_s2==t_minSelected;
			t_picker->p_SetEnabled(t_i,t_isMinSelected);
		}
		int t_enemyTypeRoll=t_picker->p_PickRandom(true);
		int t_weight=t_picker->m_weights->p_Get2(t_enemyTypeRoll);
		t_picker->m_weights->p_Set6(t_enemyTypeRoll,t_weight+1);
		int t_161=t_enemyTypeRoll;
		if(t_161==0){
			int t_electricMageLevelHigh=bb_math_Min(3,bb_controller_game_currentLevel);
			int t_electricMageLevel=c_Util::m_RndIntRange(1,t_electricMageLevelHigh,true,-1);
			(new c_ElectricMage)->m_new(t_point->m_x,t_point->m_y,t_electricMageLevel);
		}else{
			if(t_161==1){
				(new c_WaterBall)->m_new(t_point->m_x,t_point->m_y,1);
			}else{
				if(t_161==2){
					int t_gorgonLevel=1;
					if(bb_controller_game_currentLevel>=2){
						int t_gorgonLevelRoll=c_Util::m_RndIntRangeFromZero(2,true);
						if(t_gorgonLevelRoll==0){
							t_gorgonLevel=2;
						}
					}
					(new c_Gorgon)->m_new(t_point->m_x,t_point->m_y,t_gorgonLevel);
				}else{
					if(t_161==3){
						int t_skullLevelHigh=bb_math_Min(3,bb_controller_game_currentLevel);
						int t_skullLevel=c_Util::m_RndIntRange(1,t_skullLevelHigh,true,-1);
						(new c_Skull)->m_new(t_point->m_x,t_point->m_y,t_skullLevel);
					}else{
						if(t_161==4){
							int t_evilEyeLevelHigh=bb_math_Min(2,bb_controller_game_currentLevel);
							int t_evilEyeLevel=c_Util::m_RndIntRange(1,t_evilEyeLevelHigh,true,-1);
							(new c_EvilEye)->m_new(t_point->m_x,t_point->m_y,t_evilEyeLevel);
						}else{
							if(t_161==5){
								int t_orcLevelHigh=bb_math_Min(3,bb_controller_game_currentLevel);
								int t_orcLevel=c_Util::m_RndIntRange(1,t_orcLevelHigh,true,-1);
								(new c_Orc)->m_new(t_point->m_x,t_point->m_y,t_orcLevel);
							}else{
								int t_devilLevelHigh=bb_math_Min(2,bb_controller_game_currentLevel);
								int t_devilLevel=c_Util::m_RndIntRange(1,t_devilLevelHigh,true,-1);
								(new c_Devil)->m_new(t_point->m_x,t_point->m_y,t_devilLevel);
							}
						}
					}
				}
			}
		}
	}
}
void c_Level::m_PutEnemyZone5(int t_x,int t_y){
	c_StackEx2* t_pts=(new c_StackEx2)->m_new();
	t_pts->p_Push10((new c_Point)->m_new(t_x,t_y));
	m_PutVariedEnemiesZone5(t_pts);
}
void c_Level::m_PutRoomEnemiesZone5(c_RoomBase* t_room,bool t_hasExit){
	if(t_hasExit){
		m_PlaceExitRoomMiniboss(t_room);
	}
	m_PlaceRareEnemies(t_room,t_hasExit);
	c_Point* t_wire=m_GetRandPointInRoomOfTileType(t_room,20,true);
	if(t_wire!=0){
		(new c_ZombieElectric)->m_new(t_wire->m_x,t_wire->m_y,1);
	}
	c_Point* t_point=0;
	int t_extraEnemies=m_GetExtraEnemiesBase();
	if(c_Util::m_IsCharacterActive(2)){
		t_extraEnemies+=1;
	}
	for(int t_limit=500;t_limit>0;t_limit=t_limit+-1){
		if(t_extraEnemies<=0){
			break;
		}
		t_point=m_GetRandPointInRoomWithOptions2(t_room,false,true,false);
		if(t_point==0){
			return;
		}
		t_extraEnemies-=1;
		m_PutEnemyZone5(t_point->m_x,t_point->m_y);
	}
	t_point=m_GetRandPointInRoomWithOptions2(t_room,false,true,false);
	if(t_point==0){
		return;
	}
	bool t_electricMageOrSkullRoll=c_Util::m_RndBool(true);
	if(t_electricMageOrSkullRoll){
		int t_levelHigh=bb_math_Min(3,bb_controller_game_currentLevel);
		int t_electricMageLevel=c_Util::m_RndIntRange(1,t_levelHigh,true,-1);
		(new c_ElectricMage)->m_new(t_point->m_x,t_point->m_y,t_electricMageLevel);
	}else{
		int t_levelHigh2=bb_math_Min(3,bb_controller_game_currentLevel);
		int t_skullLevel=c_Util::m_RndIntRange(1,t_levelHigh2,true,-1);
		(new c_Skull)->m_new(t_point->m_x,t_point->m_y,t_skullLevel);
	}
	t_point=m_GetRandPointInRoomWithOptions2(t_room,false,true,false);
	if(t_point==0){
		return;
	}
	bool t_orcOrWaterBallOrGorgonRoll=c_Util::m_RndBool(true);
	if(t_orcOrWaterBallOrGorgonRoll){
		int t_levelHigh3=bb_math_Min(3,bb_controller_game_currentLevel);
		int t_orcLevel=c_Util::m_RndIntRange(1,t_levelHigh3,true,-1);
		(new c_Orc)->m_new(t_point->m_x,t_point->m_y,t_orcLevel);
	}else{
		bool t_waterBallOrGorgonRoll=c_Util::m_RndBool(true);
		if(t_waterBallOrGorgonRoll){
			(new c_WaterBall)->m_new(t_point->m_x,t_point->m_y,1);
		}else{
			int t_gorgonLevelRoll=c_Util::m_RndIntRangeFromZero(3,true);
			int t_gorgonLevel=1;
			if(t_gorgonLevelRoll==0){
				t_gorgonLevel=2;
			}
			(new c_Gorgon)->m_new(t_point->m_x,t_point->m_y,t_gorgonLevel);
		}
	}
	t_point=m_GetRandPointInRoomWithOptions2(t_room,false,true,false);
	if(t_point==0){
		return;
	}
	bool t_devilOrEvilEyeRoll=c_Util::m_RndBool(true);
	if(t_devilOrEvilEyeRoll){
		int t_levelHigh4=bb_math_Min(2,bb_controller_game_currentLevel);
		int t_devilLevel=c_Util::m_RndIntRange(1,t_levelHigh4,true,-1);
		(new c_Devil)->m_new(t_point->m_x,t_point->m_y,t_devilLevel);
	}else{
		int t_levelHigh5=bb_math_Min(2,bb_controller_game_currentLevel);
		int t_evilEyeLevel=c_Util::m_RndIntRange(1,t_levelHigh5,true,-1);
		(new c_EvilEye)->m_new(t_point->m_x,t_point->m_y,t_evilEyeLevel);
	}
	if(t_hasExit){
		t_point=m_GetRandPointInRoomWithOptions2(t_room,false,true,false);
		if(t_point==0){
			return;
		}
		int t_electricMageLevel2=bb_math_Min(3,bb_controller_game_currentLevel);
		(new c_ElectricMage)->m_new(t_point->m_x,t_point->m_y,t_electricMageLevel2);
		t_point=m_GetRandPointInRoomWithOptions2(t_room,false,true,false);
		if(t_point==0){
			return;
		}
		int t_skullLevel2=bb_math_Min(3,bb_controller_game_currentLevel);
		(new c_Skull)->m_new(t_point->m_x,t_point->m_y,t_skullLevel2);
		t_point=m_GetRandPointInRoomWithOptions2(t_room,false,true,false);
		if(t_point==0){
			return;
		}
		int t_evilEyeLevel2=bb_math_Min(2,bb_controller_game_currentLevel);
		(new c_EvilEye)->m_new(t_point->m_x,t_point->m_y,t_evilEyeLevel2);
	}
}
void c_Level::m_PlaceEnemiesZone5(){
	bb_logger_Debug->p_Log(String(L"PLACEENEMIES: Placing zone 5 enemies",36));
	c_StackEx5* t_wraithRooms=(new c_StackEx5)->m_new();
	c_Enumerator26* t_=m_rooms->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_RoomData* t_roomData=t_->p_NextObject();
		int t_106=t_roomData->m_type;
		if(t_106==3 || t_106==4 || t_106==5 || t_106==7){
			continue;
		}
		c_RectRoom* t_room=(new c_RectRoom)->m_new(t_roomData);
		m_PutRoomEnemiesZone5((t_room),t_roomData->m_hasExit);
		t_wraithRooms->p_Push28(t_room);
	}
	m_PutRoomEnemiesZone5((m_hallwayZone5),false);
	m_PutRoomEnemiesZone5((m_hallwayZone5),false);
	t_wraithRooms->p_Push28(m_hallwayZone5);
	if(m_AllowSpirit()){
		c_RoomBase* t_room2=t_wraithRooms->p_ChooseRandom(true);
		c_Point* t_point=m_GetRandPointInRoomWithOptions(t_room2,true,true,true,false,true,false);
		if(t_point==0){
			return;
		}
		(new c_Wraith)->m_new(t_point->m_x,t_point->m_y,2);
	}
	if(!m_isHardcoreMode){
		bb_logger_Debug->p_TraceNotImplemented(String(L"Level.PlaceEnemiesZone5() (Non-Hardcore Mode)",45));
	}
	if(c_Util::m_IsCharacterActive(13)){
		bb_logger_Debug->p_TraceNotImplemented(String(L"Level.PlaceEnemiesZone5() (Tempo)",33));
	}
}
bool c_Level::m_IsWaterOrTarAt(int t_xVal,int t_yVal){
	int t_61=m_GetTileTypeAt(t_xVal,t_yVal);
	if(t_61==4 || t_61==8 || t_61==5){
		return true;
	}
	return false;
}
c_Gargoyle* c_Level::m_PlaceGargoyle(int t_xVal,int t_yVal,int t_l){
	if(c_Util::m_IsGlobalCollisionAt2(t_xVal,t_yVal,false,false,false,false)){
		return 0;
	}
	if(m_IsExit(t_xVal,t_yVal)){
		return 0;
	}
	if(c_Trap::m_GetTrapAt(t_xVal,t_yVal)!=0){
		return 0;
	}
	if(m_IsWaterOrTarAt(t_xVal,t_yVal)){
		return 0;
	}
	return (new c_Gargoyle)->m_new(t_xVal,t_yVal,t_l);
}
c_Gargoyle* c_Level::m_PlaceGargoyle2(int t_xVal,int t_yVal){
	int t_level=c_Util::m_RndIntRange(1,5,true,-1);
	return m_PlaceGargoyle(t_xVal,t_yVal,t_level);
}
void c_Level::m_PlaceEnemiesZone4(){
	bb_logger_Debug->p_Log(String(L"PLACEENEMIES: Placing zone 4 enemies",36));
	c_Enumerator26* t_=m_rooms->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_RoomData* t_room=t_->p_NextObject();
		int t_104=t_room->m_type;
		if(t_104==3 || t_104==4 || t_104==5 || t_104==7){
			continue;
		}
		if(t_room->m_hasExit){
			m_PlaceExitRoomMiniboss((new c_RectRoom)->m_new(t_room));
		}
		m_PlaceRareEnemies(((new c_RectRoom)->m_new(t_room)),t_room->m_hasExit);
		int t_extraEnemies=m_GetExtraEnemiesBase();
		if(t_room->m_w*t_room->m_h>40){
			if(t_room->m_w*t_room->m_h<=60){
				t_extraEnemies+=1;
			}else{
				t_extraEnemies+=2;
			}
		}
		c_Point* t_point=0;
		int t_limit=500;
		for(t_limit=t_limit-1;t_limit>0;t_limit=t_limit+-1){
			if(t_extraEnemies<=0){
				break;
			}
			t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
			if(t_point==0){
				continue;
			}
			t_extraEnemies-=1;
			int t_enemyTypeRoll=c_Util::m_RndIntRangeFromZero(4,true);
			int t_105=t_enemyTypeRoll;
			if(t_105==0){
				if(bb_controller_game_currentLevel<=2){
					(new c_Monkey)->m_new(t_point->m_x,t_point->m_y,4);
				}else{
					(new c_Monkey)->m_new(t_point->m_x,t_point->m_y,3);
				}
			}else{
				if(t_105==1){
				}else{
					if(t_105==2){
						(new c_Golem)->m_new(t_point->m_x,t_point->m_y,3);
					}else{
						if(t_105==3){
							(new c_Harpy)->m_new(t_point->m_x,t_point->m_y,1);
						}else{
							(new c_Harpy)->m_new(t_point->m_x,t_point->m_y,1);
						}
					}
				}
			}
		}
		if(t_room->m_type==0){
			int t_gargoyleRoll=c_Util::m_RndIntRangeFromZero(4,true);
			if(t_gargoyleRoll==0 && !t_room->m_hasExit){
				if(t_room->m_w<=5 && t_room->m_h<=5){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					int t_gargoyleLevel=c_Util::m_RndIntRange(1,5,true,-1);
					(new c_Gargoyle)->m_new(t_point->m_x,t_point->m_y,t_gargoyleLevel);
				}else{
					if(c_Util::m_RndBool(true)){
						m_PlaceGargoyle2(t_room->m_x+2,t_room->m_y+2);
						m_PlaceGargoyle2(t_room->m_x+2,t_room->m_y+t_room->m_h-2);
						m_PlaceGargoyle2(t_room->m_x+t_room->m_w-2,t_room->m_y+2);
						m_PlaceGargoyle2(t_room->m_x+t_room->m_w-2,t_room->m_y+t_room->m_h-2);
					}else{
						int t_gargoyleY=c_Util::m_RndIntRange(t_room->m_y+1,t_room->m_y+t_room->m_h-2,true,-1);
						int t_roomXMax=t_room->m_x+t_room->m_w-1;
						for(int t_gargoyleX=t_room->m_x+2;t_gargoyleX<t_roomXMax;t_gargoyleX=t_gargoyleX+2){
							m_PlaceGargoyle2(t_gargoyleX,t_gargoyleY);
						}
					}
				}
			}
		}
		int t_poltergeistRoll=c_Util::m_RndIntRangeFromZero(4,true);
		if(t_poltergeistRoll==0 && m_AllowSpirit()){
			t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
			if(t_point==0){
				continue;
			}
			(new c_Poltergeist)->m_new(t_point->m_x,t_point->m_y,1);
		}
		int t_warlockOrBatRoll=c_Util::m_RndIntRangeFromZero(2,true);
		if(t_warlockOrBatRoll==0){
			t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
			if(t_point==0){
				continue;
			}
			(new c_Bat)->m_new(t_point->m_x,t_point->m_y,4);
		}else{
			t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
			if(t_point==0){
				continue;
			}
			int t_warlockLevel=bb_math_Min(2,bb_controller_game_currentLevel);
			(new c_Warlock)->m_new(t_point->m_x,t_point->m_y,t_warlockLevel);
		}
		int t_monkeyOrBlademasterRoll=c_Util::m_RndIntRangeFromZero(3,true);
		if(t_monkeyOrBlademasterRoll==0 || c_Util::m_IsCharacterActive(3)){
			t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
			if(t_point==0){
				continue;
			}
			int t_monkeyLevel=3;
			if(bb_controller_game_currentLevel>=3){
				t_monkeyLevel=4;
			}
			(new c_Monkey)->m_new(t_point->m_x,t_point->m_y,t_monkeyLevel);
		}else{
			t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
			if(t_point==0){
				continue;
			}
			int t_blademasterLevel=1;
			if(bb_controller_game_currentLevel>=3){
				t_blademasterLevel=2;
			}
			(new c_Blademaster)->m_new(t_point->m_x,t_point->m_y,t_blademasterLevel);
		}
		if(bb_controller_game_currentLevel>=2){
			int t_armadilloRoll=c_Util::m_RndIntRangeFromZero(5,true);
			if(t_armadilloRoll==0){
				t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
				if(t_point==0){
					continue;
				}
				(new c_Armadillo)->m_new(t_point->m_x,t_point->m_y,3);
			}
		}
		if(bb_controller_game_currentLevel>=3){
			int t_pixieRoll=c_Util::m_RndIntRangeFromZero(4,true);
			if(t_pixieRoll==0){
				t_point=m_GetRandPointInRoomWithOptions5(t_room,false,false,false);
				if(t_point==0){
					continue;
				}
				(new c_Pixie)->m_new(t_point->m_x,t_point->m_y,1);
			}
		}
		int t_goblinBomberRoll=c_Util::m_RndIntRangeFromZero(3,true);
		if(t_goblinBomberRoll==0){
			t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
			if(t_point==0){
				continue;
			}
			(new c_GoblinBomber)->m_new(t_point->m_x,t_point->m_y,1);
		}
		int t_lichRoll=c_Util::m_RndIntRangeFromZero(2,true);
		if(t_lichRoll==0){
			t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
			if(t_point==0){
				continue;
			}
			int t_lichLevel=bb_math_Min(3,bb_controller_game_currentLevel);
			(new c_Lich)->m_new(t_point->m_x,t_point->m_y,t_lichLevel);
		}
		bool t_sleepingGoblinOrHarpyRoll=c_Util::m_RndBool(true);
		if(t_sleepingGoblinOrHarpyRoll){
			t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
			if(t_point==0){
				continue;
			}
			(new c_SleepingGoblin)->m_new(t_point->m_x,t_point->m_y,1);
		}else{
			t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
			if(t_point==0){
				continue;
			}
			(new c_Harpy)->m_new(t_point->m_x,t_point->m_y,1);
		}
		if(t_room->m_hasExit){
			if(!c_Util::m_IsCharacterActive(6)){
				t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
				if(t_point==0){
					continue;
				}
				int t_sarcophagusLevel=bb_math_Min(3,bb_controller_game_currentLevel);
				(new c_Sarcophagus)->m_new(t_point->m_x,t_point->m_y,t_sarcophagusLevel);
			}
			t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
			if(t_point==0){
				continue;
			}
			(new c_Golem)->m_new(t_point->m_x,t_point->m_y,3);
		}
	}
	if(c_Util::m_IsCharacterActive(13)){
		bb_logger_Debug->p_TraceNotImplemented(String(L"Level.PlaceEnemiesZone4() (Tempo section)",41));
	}
	c_IntPointList* t_walls=(new c_IntPointList)->m_new();
	c_NodeEnumerator* t_2=m_tiles->p_ObjectEnumerator();
	while(t_2->p_HasNext()){
		c_Node25* t_tilesOnXNode=t_2->p_NextObject();
		c_NodeEnumerator2* t_3=t_tilesOnXNode->p_Value()->p_ObjectEnumerator();
		while(t_3->p_HasNext()){
			c_Node26* t_tileNode=t_3->p_NextObject();
			c_Tile* t_tile=t_tileNode->p_Value();
			if(!t_tile->p_IsWall(false,true,false,false)){
				continue;
			}
			if(t_tile->m_health>=3){
				continue;
			}
			t_walls->p_AddLast26((new c_Point)->m_new(t_tile->m_x,t_tile->m_y));
		}
	}
	for(int t_numSpiders=3;t_numSpiders>0;t_numSpiders=t_numSpiders+-1){
		int t_wallsIndex=c_Util::m_RndIntRangeFromZero(t_walls->p_Count()-1,true);
		Array<c_Point* > t_wallsArray=t_walls->p_ToArray();
		c_Point* t_wall=t_wallsArray[t_wallsIndex];
		if(c_Enemy::m_GetEnemyAt(t_wall->m_x,t_wall->m_y,true)!=0){
			continue;
		}
		if(c_Trap::m_GetTrapAt(t_wall->m_x,t_wall->m_y)!=0){
			continue;
		}
		(new c_Spider)->m_new(t_wall->m_x,t_wall->m_y,1);
	}
}
c_Enemy* c_Level::m_PlaceZone3Cauldron(int t_xVal,int t_yVal){
	int t_trapCauldronRoll=c_Util::m_RndIntRangeFromZero(20,true);
	if(t_trapCauldronRoll==0){
		return ((new c_TrapCauldron)->m_new(t_xVal,t_yVal,1));
	}
	return ((new c_Cauldron)->m_new(t_xVal,t_yVal,1));
}
bool c_Level::m_IsInZone3Hot(int t_xVal,int t_yVal){
	return Float(t_yVal)*m_zone3DividingLineX-Float(t_xVal)*m_zone3DividingLineY<=FLOAT(0.0);
}
c_Enemy* c_Level::m_PlaceZone3YetiHellhound(int t_xVal,int t_yVal){
	if(m_IsInZone3Hot(t_xVal,t_yVal)){
		return c_Enemy::m_MakeEnemy(t_xVal,t_yVal,211);
	}
	return c_Enemy::m_MakeEnemy(t_xVal,t_yVal,213);
}
c_Enemy* c_Level::m_PlaceZone3Elemental(int t_xVal,int t_yVal){
	if(m_IsInZone3Hot(t_xVal,t_yVal)){
		return c_Enemy::m_MakeEnemy(t_xVal,t_yVal,205);
	}
	return c_Enemy::m_MakeEnemy(t_xVal,t_yVal,206);
}
c_Enemy* c_Level::m_PlaceZone3Slime(int t_xVal,int t_yVal){
	if(m_IsInZone3Hot(t_xVal,t_yVal)){
		return ((new c_Slime)->m_new(t_xVal,t_yVal,5));
	}
	return ((new c_Slime)->m_new(t_xVal,t_yVal,4));
}
c_Enemy* c_Level::m_PlaceZone3Beetle(int t_xVal,int t_yVal){
	if(m_IsInZone3Hot(t_xVal,t_yVal)){
		return c_Enemy::m_MakeEnemy(t_xVal,t_yVal,209);
	}
	return c_Enemy::m_MakeEnemy(t_xVal,t_yVal,210);
}
void c_Level::m_PlaceEnemiesZone3(){
	bb_logger_Debug->p_Log(String(L"PLACEENEMIES: Placing zone 3 enemies",36));
	c_Enumerator26* t_=m_rooms->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_RoomData* t_room=t_->p_NextObject();
		int t_101=t_room->m_type;
		if(t_101==3 || t_101==5 || t_101==7){
			continue;
		}
		if(t_room->m_hasExit){
			m_PlaceAppropriateMinibosses((new c_RectRoom)->m_new(t_room));
			c_Point* t_exitCoords=m_GetStandardExitCoords();
			m_PlaceShopkeeperGhostIfNeededAt(t_exitCoords->m_x,t_exitCoords->m_y);
		}
		c_Point* t_point=m_GetRandPointInRoomWithOptions5(t_room,true,true,false);
		if(t_point==0){
			continue;
		}
		m_PlaceZone3Cauldron(t_point->m_x,t_point->m_y);
		int t_cauldronRoll=c_Util::m_RndIntRangeFromZero(10,true);
		if(t_cauldronRoll==0){
			t_point=m_GetRandPointInRoomWithOptions5(t_room,true,true,false);
			if(t_point==0){
				continue;
			}
			m_PlaceZone3Cauldron(t_point->m_x,t_point->m_y);
		}
		m_PlaceRareEnemies(((new c_RectRoom)->m_new(t_room)),t_room->m_hasExit);
		int t_extraEnemies=m_GetExtraEnemiesBase();
		int t_i=500;
		for(t_i=t_i-1;t_i>0;t_i=t_i+-1){
			if(t_extraEnemies<=0){
				break;
			}
			t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
			if(t_point==0){
				continue;
			}
			t_extraEnemies-=1;
			int t_102=c_Util::m_RndIntRangeFromZero(4,true);
			if(t_102==0){
				m_PlaceZone3YetiHellhound(t_point->m_x,t_point->m_y);
			}else{
				if(t_102==1){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,false,false);
				}else{
					if(t_102==2){
						int t_skeletonKnightLevel=c_Util::m_RndIntRange(2,3,true,-1);
						(new c_SkeletonKnight)->m_new(t_point->m_x,t_point->m_y,t_skeletonKnightLevel);
					}else{
						m_PlaceZone3Elemental(t_point->m_x,t_point->m_y);
					}
				}
			}
		}
		int t_103=bb_controller_game_currentLevel;
		if(t_103==1){
			int t_ghastRoll=c_Util::m_RndIntRangeFromZero(4,true);
			if(t_ghastRoll==0){
				t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
				if(t_point==0){
					continue;
				}
				(new c_Ghast)->m_new(t_point->m_x,t_point->m_y,1);
			}
			int t_skeletonKnightRoll=c_Util::m_RndIntRangeFromZero(2,true);
			if(t_skeletonKnightRoll==0){
				t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
				if(t_point==0){
					continue;
				}
				(new c_SkeletonKnight)->m_new(t_point->m_x,t_point->m_y,1);
			}
			bool t_shoveMonsterOrSlimeRoll=c_Util::m_RndBool(true);
			if(t_shoveMonsterOrSlimeRoll){
				t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
				if(t_point==0){
					continue;
				}
				(new c_ShoveMonster)->m_new(t_point->m_x,t_point->m_y,1);
			}else{
				t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
				if(t_point==0){
					continue;
				}
				m_PlaceZone3Slime(t_point->m_x,t_point->m_y);
			}
			int t_elementalOrGoblinRoll=c_Util::m_RndIntRangeFromZero(2,true);
			if(t_elementalOrGoblinRoll==0){
				t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
				if(t_point==0){
					continue;
				}
				c_Util::m_RndBool(true);
				m_PlaceZone3Elemental(t_point->m_x,t_point->m_y);
			}else{
				t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
				if(t_point==0){
					continue;
				}
				(new c_Goblin)->m_new(t_point->m_x,t_point->m_y,1);
			}
			if(t_room->m_hasExit){
				t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
				if(t_point==0){
					continue;
				}
				(new c_Goblin)->m_new(t_point->m_x,t_point->m_y,1);
				t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
				if(t_point==0){
					continue;
				}
				m_PlaceZone3YetiHellhound(t_point->m_x,t_point->m_y);
				if(c_Util::m_IsCharacterActive(2)){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Sarcophagus)->m_new(t_point->m_x,t_point->m_y,1);
				}
			}
			t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
			if(t_point==0){
				continue;
			}
			m_PlaceZone3Slime(t_point->m_x,t_point->m_y);
		}else{
			if(t_103==2){
				int t_ghastRoll2=c_Util::m_RndIntRangeFromZero(4,true);
				if(t_ghastRoll2==0){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Ghast)->m_new(t_point->m_x,t_point->m_y,1);
				}
				bool t_skeletonKnightRoll2=c_Util::m_RndBool(true);
				if(t_skeletonKnightRoll2){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_SkeletonKnight)->m_new(t_point->m_x,t_point->m_y,2);
				}
				bool t_shoveMonsterOrSlimeRoll2=c_Util::m_RndBool(true);
				if(t_shoveMonsterOrSlimeRoll2){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_ShoveMonster)->m_new(t_point->m_x,t_point->m_y,1);
				}else{
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					m_PlaceZone3Slime(t_point->m_x,t_point->m_y);
				}
				int t_beetleRoll=c_Util::m_RndIntRangeFromZero(5,true);
				if(t_beetleRoll==0){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					m_PlaceZone3Beetle(t_point->m_x,t_point->m_y);
				}
				int t_elementalOrGoblinRoll2=c_Util::m_RndIntRangeFromZero(2,true);
				if(t_elementalOrGoblinRoll2==0){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					c_Util::m_RndBool(true);
					m_PlaceZone3Elemental(t_point->m_x,t_point->m_y);
				}else{
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Goblin)->m_new(t_point->m_x,t_point->m_y,1);
				}
				if(t_room->m_hasExit){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					m_PlaceZone3YetiHellhound(t_point->m_x,t_point->m_y);
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Goblin)->m_new(t_point->m_x,t_point->m_y,2);
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					m_PlaceZone3Beetle(t_point->m_x,t_point->m_y);
					if(c_Util::m_IsCharacterActive(2)){
						t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
						if(t_point==0){
							continue;
						}
						(new c_Sarcophagus)->m_new(t_point->m_x,t_point->m_y,2);
					}
				}
				int t_yetiHellhoundOrSlimeRoll=c_Util::m_RndIntRangeFromZero(4,true);
				if(t_yetiHellhoundOrSlimeRoll==0){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					m_PlaceZone3YetiHellhound(t_point->m_x,t_point->m_y);
				}else{
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					m_PlaceZone3Slime(t_point->m_x,t_point->m_y);
				}
			}else{
				int t_ghastRoll3=c_Util::m_RndIntRangeFromZero(3,true);
				if(t_ghastRoll3==0){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Ghast)->m_new(t_point->m_x,t_point->m_y,1);
				}
				bool t_skeletonKnightOrYetiHellhoundRoll=c_Util::m_RndBool(true);
				if(t_skeletonKnightOrYetiHellhoundRoll){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_SkeletonKnight)->m_new(t_point->m_x,t_point->m_y,3);
				}else{
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					m_PlaceZone3YetiHellhound(t_point->m_x,t_point->m_y);
				}
				bool t_shoveMonsterOrSlimeRoll3=c_Util::m_RndBool(true);
				if(t_shoveMonsterOrSlimeRoll3){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_ShoveMonster)->m_new(t_point->m_x,t_point->m_y,2);
				}else{
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					m_PlaceZone3Slime(t_point->m_x,t_point->m_y);
				}
				int t_yetiHellhoundRoll=c_Util::m_RndIntRangeFromZero(5,true);
				if(t_yetiHellhoundRoll==0){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					m_PlaceZone3YetiHellhound(t_point->m_x,t_point->m_y);
				}
				int t_goblinOrElementalRoll=c_Util::m_RndIntRangeFromZero(2,true);
				if(t_goblinOrElementalRoll==0){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					int t_goblinLevel=c_Util::m_RndIntRange(1,2,true,-1);
					(new c_Goblin)->m_new(t_point->m_x,t_point->m_y,t_goblinLevel);
				}else{
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					c_Util::m_RndBool(true);
					m_PlaceZone3Elemental(t_point->m_x,t_point->m_y);
				}
				if(t_room->m_hasExit){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					m_PlaceZone3YetiHellhound(t_point->m_x,t_point->m_y);
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Goblin)->m_new(t_point->m_x,t_point->m_y,2);
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					m_PlaceZone3Beetle(t_point->m_x,t_point->m_y);
					if(c_Util::m_IsCharacterActive(2)){
						t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
						if(t_point==0){
							continue;
						}
						(new c_Sarcophagus)->m_new(t_point->m_x,t_point->m_y,3);
					}
				}
				int t_beetleOrSlimeRoll=c_Util::m_RndIntRangeFromZero(4,true);
				if(t_beetleOrSlimeRoll==0){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					m_PlaceZone3Beetle(t_point->m_x,t_point->m_y);
				}else{
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					m_PlaceZone3Slime(t_point->m_x,t_point->m_y);
				}
			}
		}
	}
	if(c_Util::m_IsCharacterActive(2)){
		bb_logger_Debug->p_TraceNotImplemented(String(L"Level.PlaceEnemiesZone3() (Aria section)",40));
	}
	if(c_Util::m_IsCharacterActive(13)){
		bb_logger_Debug->p_TraceNotImplemented(String(L"Level.PlaceEnemiesZone3() (Tempo section)",41));
	}
}
void c_Level::m_PlaceEnemiesZone2(){
	bb_logger_Debug->p_Log(String(L"PLACEENEMIES: Placing zone 2 enemies",36));
	c_Enumerator26* t_=m_rooms->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_RoomData* t_room=t_->p_NextObject();
		int t_98=t_room->m_type;
		if(t_98==3 || t_98==5 || t_98==7){
			continue;
		}
		if(t_room->m_hasExit){
			c_RectRoom* t_lastRoom=(new c_RectRoom)->m_new(t_room);
			m_PlaceAppropriateMinibosses(t_lastRoom);
			c_Point* t_exitCoords=m_GetStandardExitCoords();
			m_PlaceShopkeeperGhostIfNeededAt(t_exitCoords->m_x,t_exitCoords->m_y);
		}
		c_Point* t_point=m_GetRandPointInRoomWithOptions5(t_room,true,true,false);
		if(t_point==0){
			continue;
		}
		(new c_MushroomLight)->m_new3(t_point->m_x,t_point->m_y,1);
		int t_mushroomLightRoll=c_Util::m_RndIntRangeFromZero(10,true);
		if(t_mushroomLightRoll==0){
			t_point=m_GetRandPointInRoomWithOptions5(t_room,true,true,false);
			if(t_point==0){
				continue;
			}
			(new c_MushroomLight)->m_new3(t_point->m_x,t_point->m_y,1);
		}
		c_RectRoom* t_rectRoom=(new c_RectRoom)->m_new(t_room);
		m_PlaceRareEnemies((t_rectRoom),t_room->m_hasExit);
		int t_extraEnemies=m_GetExtraEnemiesBase();
		if(c_Util::m_IsCharacterActive(2)){
			t_extraEnemies+=1;
		}
		int t_i=500;
		for(int t_i2=t_i-1;t_i2>0;t_i2=t_i2+-1){
			if(t_extraEnemies<=0){
				break;
			}
			t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
			if(t_point==0){
				continue;
			}
			t_extraEnemies-=1;
			int t_enemyTypeRoll=c_Util::m_RndIntRangeFromZero(4,true);
			int t_99=t_enemyTypeRoll;
			if(t_99==0){
				(new c_Wight)->m_new(t_point->m_x,t_point->m_y,1);
			}else{
				if(t_99==1){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,false,false);
					if(t_point==0){
						continue;
					}
					int t_skeletonMageLevelRoll=c_Util::m_RndIntRange(2,3,true,-1);
					(new c_SkeletonMage)->m_new(t_point->m_x,t_point->m_y,t_skeletonMageLevelRoll);
				}else{
					if(t_99==2){
						int t_armoredSkeletonLevelRoll=c_Util::m_RndIntRange(2,3,true,-1);
						(new c_ArmoredSkeleton)->m_new(t_point->m_x,t_point->m_y,t_armoredSkeletonLevelRoll);
					}else{
						if(t_99==3){
							int t_batLevelRoll=c_Util::m_RndIntRange(1,2,true,-1);
							(new c_Bat)->m_new(t_point->m_x,t_point->m_y,t_batLevelRoll);
						}else{
							int t_armadilloLevelRoll=c_Util::m_RndIntRange(1,2,true,-1);
							(new c_Armadillo)->m_new(t_point->m_x,t_point->m_y,t_armadilloLevelRoll);
						}
					}
				}
			}
		}
		int t_100=bb_controller_game_currentLevel;
		if(t_100==1){
			bool t_skeletonMageRoll=c_Util::m_RndBool(true);
			if(t_skeletonMageRoll){
				t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
				if(t_point==0){
					continue;
				}
				(new c_SkeletonMage)->m_new(t_point->m_x,t_point->m_y,1);
			}
			bool t_mushroomOrArmoredSkeletonRoll=c_Util::m_RndBool(true);
			if(t_mushroomOrArmoredSkeletonRoll){
				t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
				if(t_point==0){
					continue;
				}
				(new c_Mushroom)->m_new(t_point->m_x,t_point->m_y,1);
			}else{
				t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
				if(t_point==0){
					continue;
				}
				(new c_ArmoredSkeleton)->m_new(t_point->m_x,t_point->m_y,1);
			}
			int t_armadilloRoll=c_Util::m_RndIntRangeFromZero(3,true);
			if(t_armadilloRoll==0){
				t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
				if(t_point==0){
					continue;
				}
				(new c_Armadillo)->m_new(t_point->m_x,t_point->m_y,1);
			}
			int t_mushroomOrGolemRoll=c_Util::m_RndIntRangeFromZero(2,true);
			if(t_mushroomOrGolemRoll==0){
				t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
				if(t_point==0){
					continue;
				}
				(new c_Golem)->m_new(t_point->m_x,t_point->m_y,1);
			}else{
				t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
				if(t_point==0){
					continue;
				}
				(new c_Mushroom)->m_new(t_point->m_x,t_point->m_y,1);
			}
			if(t_room->m_hasExit){
				t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
				if(t_point==0){
					continue;
				}
				(new c_Golem)->m_new(t_point->m_x,t_point->m_y,1);
				t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
				if(t_point==0){
					continue;
				}
				(new c_ArmoredSkeleton)->m_new(t_point->m_x,t_point->m_y,1);
				t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
				if(t_point==0){
					continue;
				}
				(new c_Armadillo)->m_new(t_point->m_x,t_point->m_y,1);
				if(c_Util::m_IsCharacterActive(2)){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Sarcophagus)->m_new(t_point->m_x,t_point->m_y,1);
				}
			}
			int t_cloneOrArmoredSkeletonRoll=c_Util::m_RndIntRangeFromZero(2,true);
			if(t_cloneOrArmoredSkeletonRoll==0){
				t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
				if(t_point==0){
					continue;
				}
				(new c_Clone)->m_new(t_point->m_x,t_point->m_y,1);
			}else{
				t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
				if(t_point==0){
					continue;
				}
				(new c_ArmoredSkeleton)->m_new(t_point->m_x,t_point->m_y,1);
			}
		}else{
			if(t_100==2){
				bool t_skeletonMageRoll2=c_Util::m_RndBool(true);
				if(t_skeletonMageRoll2){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					int t_skeletonMageLevelRoll2=c_Util::m_RndIntRange(1,2,true,-1);
					(new c_SkeletonMage)->m_new(t_point->m_x,t_point->m_y,t_skeletonMageLevelRoll2);
				}
				int t_wightOrMoleRoll=c_Util::m_RndIntRangeFromZero(5,true);
				if(t_wightOrMoleRoll==0){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Wight)->m_new(t_point->m_x,t_point->m_y,1);
				}else{
					bool t_moleRoll=c_Util::m_RndBool(true);
					if(t_moleRoll){
						t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
						if(t_point==0){
							continue;
						}
						(new c_Mole)->m_new(t_point->m_x,t_point->m_y,1);
					}
				}
				int t_golemOrMushroomRoll=c_Util::m_RndIntRangeFromZero(2,true);
				if(t_golemOrMushroomRoll==0){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Golem)->m_new(t_point->m_x,t_point->m_y,1);
				}else{
					bool t_mushroomRoll=c_Util::m_RndBool(true);
					if(t_mushroomRoll){
						t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
						if(t_point==0){
							continue;
						}
						(new c_Mushroom)->m_new(t_point->m_x,t_point->m_y,1);
					}
				}
				if(t_room->m_hasExit){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Golem)->m_new(t_point->m_x,t_point->m_y,2);
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_ArmoredSkeleton)->m_new(t_point->m_x,t_point->m_y,2);
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Armadillo)->m_new(t_point->m_x,t_point->m_y,1);
					if(c_Util::m_IsCharacterActive(2)){
						t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
						if(t_point==0){
							continue;
						}
						(new c_Sarcophagus)->m_new(t_point->m_x,t_point->m_y,2);
					}
				}
				int t_cloneOrArmoredSkeletonRoll2=c_Util::m_RndIntRangeFromZero(2,true);
				if(t_cloneOrArmoredSkeletonRoll2==0){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Clone)->m_new(t_point->m_x,t_point->m_y,1);
				}else{
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_ArmoredSkeleton)->m_new(t_point->m_x,t_point->m_y,1);
				}
				bool t_armadilloOrMushroomRoll=c_Util::m_RndBool(true);
				if(t_armadilloOrMushroomRoll){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					int t_armadilloLevelRoll2=c_Util::m_RndIntRange(1,2,true,-1);
					(new c_Armadillo)->m_new(t_point->m_x,t_point->m_y,t_armadilloLevelRoll2);
				}else{
					bool t_mushroomRoll2=c_Util::m_RndBool(true);
					if(t_mushroomRoll2){
						t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
						if(t_point==0){
							continue;
						}
						(new c_Mushroom)->m_new(t_point->m_x,t_point->m_y,2);
					}
				}
				int t_batRoll=c_Util::m_RndIntRangeFromZero(4,true);
				if(t_batRoll==0){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Bat)->m_new(t_point->m_x,t_point->m_y,1);
				}
			}else{
				bool t_skeletonMageRoll3=c_Util::m_RndBool(true);
				if(t_skeletonMageRoll3){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					int t_skeletonMageLevelRoll3=c_Util::m_RndIntRange(2,3,true,-1);
					(new c_SkeletonMage)->m_new(t_point->m_x,t_point->m_y,t_skeletonMageLevelRoll3);
				}
				int t_wightOrMoleRoll2=c_Util::m_RndIntRangeFromZero(4,true);
				if(t_wightOrMoleRoll2==0){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Wight)->m_new(t_point->m_x,t_point->m_y,1);
				}else{
					bool t_moleRoll2=c_Util::m_RndBool(true);
					if(t_moleRoll2){
						t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
						if(t_point==0){
							continue;
						}
						(new c_Mole)->m_new(t_point->m_x,t_point->m_y,1);
					}
				}
				int t_golemOrMushroomRoll2=c_Util::m_RndIntRangeFromZero(2,true);
				if(t_golemOrMushroomRoll2==0){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Golem)->m_new(t_point->m_x,t_point->m_y,2);
				}else{
					bool t_mushroomRoll3=c_Util::m_RndBool(true);
					if(t_mushroomRoll3){
						t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
						if(t_point==0){
							continue;
						}
						(new c_Mushroom)->m_new(t_point->m_x,t_point->m_y,2);
					}
				}
				if(t_room->m_hasExit){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Golem)->m_new(t_point->m_x,t_point->m_y,2);
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_ArmoredSkeleton)->m_new(t_point->m_x,t_point->m_y,3);
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Armadillo)->m_new(t_point->m_x,t_point->m_y,2);
					if(c_Util::m_IsCharacterActive(2)){
						t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
						if(t_point==0){
							continue;
						}
						(new c_Sarcophagus)->m_new(t_point->m_x,t_point->m_y,3);
					}
				}
				int t_cloneOrArmoredSkeletonRoll3=c_Util::m_RndIntRangeFromZero(2,true);
				if(t_cloneOrArmoredSkeletonRoll3==0){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Clone)->m_new(t_point->m_x,t_point->m_y,1);
				}else{
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_ArmoredSkeleton)->m_new(t_point->m_x,t_point->m_y,2);
				}
				int t_armoredSkeletonRoll=c_Util::m_RndIntRangeFromZero(2,true);
				if(t_armoredSkeletonRoll==0){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_ArmoredSkeleton)->m_new(t_point->m_x,t_point->m_y,3);
				}
				int t_armadilloOrMushroomRoll2=c_Util::m_RndIntRangeFromZero(3,true);
				if(t_armadilloOrMushroomRoll2==0){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					int t_armadilloLevelRoll3=c_Util::m_RndIntRange(1,2,true,-1);
					(new c_Armadillo)->m_new(t_point->m_x,t_point->m_y,t_armadilloLevelRoll3);
				}else{
					bool t_mushroomRoll4=c_Util::m_RndBool(true);
					if(t_mushroomRoll4){
						(new c_Mushroom)->m_new(t_point->m_x,t_point->m_y,2);
					}
				}
				int t_batRoll2=c_Util::m_RndIntRangeFromZero(3,true);
				if(t_batRoll2==0){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Bat)->m_new(t_point->m_x,t_point->m_y,1);
				}
				int t_batRoll22=c_Util::m_RndIntRangeFromZero(4,true);
				if(t_batRoll22==0){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Bat)->m_new(t_point->m_x,t_point->m_y,2);
				}
				int t_tarMonsterRoll=c_Util::m_RndIntRangeFromZero(2,true);
				if(t_tarMonsterRoll==0){
					t_point=m_GetRandPointInRoomOfTileType(((new c_RectRoom)->m_new(t_room)),8,true);
					if(t_point==0){
						continue;
					}
					(new c_TarMonster)->m_new(t_point->m_x,t_point->m_y,1);
				}
			}
		}
	}
	if(c_Util::m_IsCharacterActive(2)){
		bb_logger_Debug->p_TraceNotImplemented(String(L"Level.PlaceEnemiesZone2() (Aria)",32));
	}
	if(c_Util::m_IsCharacterActive(13)){
		bb_logger_Debug->p_TraceNotImplemented(String(L"Level.PlaceEnemiesZone2() (Tempo)",33));
	}
}
void c_Level::m_PlaceEnemiesZone1(){
	bb_logger_Debug->p_Log(String(L"PLACEENEMIES: Placing zone 1 enemies",36));
	c_Enumerator26* t_=m_rooms->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_RoomData* t_room=t_->p_NextObject();
		int t_94=t_room->m_type;
		if(t_94==3 || t_94==5 || t_94==7){
			continue;
		}
		if(t_room->m_hasExit){
			m_PlaceAppropriateMinibosses((new c_RectRoom)->m_new(t_room));
			c_Point* t_exitCoords=m_GetStandardExitCoords();
			m_PlaceShopkeeperGhostIfNeededAt(t_exitCoords->m_x,t_exitCoords->m_y);
		}
		if(m_GetRandPointInRoomWithOptions5(t_room,false,true,false)==0){
			continue;
		}
		m_PlaceRareEnemies(((new c_RectRoom)->m_new(t_room)),t_room->m_hasExit);
		int t_extraEnemies=m_GetExtraEnemiesBase();
		if(c_Util::m_IsCharacterActive(2)){
			t_extraEnemies+=2;
		}
		c_Point* t_point=0;
		int t_i=500;
		for(t_i=t_i-1;t_i>0;t_i=t_i+-1){
			if(t_extraEnemies<=0){
				break;
			}
			t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
			if(t_point==0){
				continue;
			}
			t_extraEnemies-=1;
			int t_enemyRoll=c_Util::m_RndIntRangeFromZero(3,true);
			int t_95=t_enemyRoll;
			if(t_95==0){
				(new c_Wraith)->m_new(t_point->m_x,t_point->m_y,1);
			}else{
				if(t_95==1){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,false,false);
					if(t_point==0){
						continue;
					}
					int t_batLevel=c_Util::m_RndIntRange(1,2,true,-1);
					(new c_Bat)->m_new(t_point->m_x,t_point->m_y,t_batLevel);
				}else{
					if(t_95==2){
						int t_skeletonLevel=c_Util::m_RndIntRange(2,3,true,-1);
						(new c_Skeleton)->m_new(t_point->m_x,t_point->m_y,t_skeletonLevel);
					}else{
						(new c_Ghost)->m_new(t_point->m_x,t_point->m_y,1);
					}
				}
			}
		}
		int t_96=bb_controller_game_currentLevel;
		if(t_96==1){
			int t_batRoll=c_Util::m_RndIntRangeFromZero(5,true);
			if(t_batRoll==0){
				t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
				if(t_point==0){
					continue;
				}
				(new c_Bat)->m_new(t_point->m_x,t_point->m_y,1);
			}
			int t_monkeyRoll=c_Util::m_RndIntRangeFromZero(4,true);
			if(t_monkeyRoll==0){
				t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
				if(t_point==0){
					continue;
				}
				(new c_Monkey)->m_new(t_point->m_x,t_point->m_y,1);
			}
			int t_zombieRoll=c_Util::m_RndIntRangeFromZero(4,true);
			if(t_zombieRoll==0){
				t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
				if(t_point==0){
					continue;
				}
				(new c_Zombie)->m_new(t_point->m_x,t_point->m_y,1);
			}
			if(t_room->m_hasExit){
				t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
				if(t_point==0){
					continue;
				}
				(new c_Skeleton)->m_new(t_point->m_x,t_point->m_y,1);
				t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
				if(t_point==0){
					continue;
				}
				(new c_Monkey)->m_new(t_point->m_x,t_point->m_y,1);
				if(c_Util::m_IsCharacterActive(2)){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Sarcophagus)->m_new(t_point->m_x,t_point->m_y,1);
				}
			}
			t_point=m_GetRandPointInRoomWithOptions5(t_room,false,false,false);
			if(t_point==0){
				continue;
			}
			(new c_Slime)->m_new(t_point->m_x,t_point->m_y,2);
			int t_skeletonRoll=c_Util::m_RndIntRangeFromZero(4,true);
			if(t_skeletonRoll==0){
				t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
				if(t_point==0){
					continue;
				}
				(new c_Skeleton)->m_new(t_point->m_x,t_point->m_y,1);
			}else{
				t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
				if(t_point==0){
					continue;
				}
				(new c_Slime)->m_new(t_point->m_x,t_point->m_y,1);
			}
			bool t_slimeRoll=c_Util::m_RndBool(true);
			if(t_slimeRoll){
				t_point=m_GetRandPointInRoomWithOptions5(t_room,false,false,false);
				if(t_point==0){
					continue;
				}
				(new c_Slime)->m_new(t_point->m_x,t_point->m_y,2);
			}
			bool t_slimeRoll2=c_Util::m_RndBool(true);
			if(t_slimeRoll2){
				t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
				if(t_point==0){
					continue;
				}
				(new c_Slime)->m_new(t_point->m_x,t_point->m_y,1);
			}else{
				t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
				if(t_point==0){
					continue;
				}
				(new c_Skeleton)->m_new(t_point->m_x,t_point->m_y,1);
			}
		}else{
			if(t_96==2){
				bool t_batRoll2=c_Util::m_RndBool(true);
				if(t_batRoll2){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Bat)->m_new(t_point->m_x,t_point->m_y,1);
				}
				int t_wraithRoll=c_Util::m_RndIntRangeFromZero(5,true);
				if(t_wraithRoll==0){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Wraith)->m_new(t_point->m_x,t_point->m_y,1);
				}
				int t_zombieRoll2=c_Util::m_RndIntRangeFromZero(3,true);
				if(t_zombieRoll2==0){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Zombie)->m_new(t_point->m_x,t_point->m_y,1);
				}
				int t_ghostRoll=c_Util::m_RndIntRangeFromZero(2,true);
				if(t_ghostRoll==0){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Ghost)->m_new(t_point->m_x,t_point->m_y,1);
				}else{
					int t_monkeyRoll2=c_Util::m_RndIntRangeFromZero(4,true);
					if(t_monkeyRoll2==0){
						t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
						if(t_point==0){
							continue;
						}
						(new c_Monkey)->m_new(t_point->m_x,t_point->m_y,1);
					}else{
						t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
						if(t_point==0){
							continue;
						}
						bool t_skeletonLevelRoll=c_Util::m_RndBool(true);
						if(t_skeletonLevelRoll){
							(new c_Skeleton)->m_new(t_point->m_x,t_point->m_y,1);
						}else{
							(new c_Skeleton)->m_new(t_point->m_x,t_point->m_y,2);
						}
					}
				}
				int t_monkeyRoll3=c_Util::m_RndIntRangeFromZero(7,true);
				if(t_monkeyRoll3==0){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Monkey)->m_new(t_point->m_x,t_point->m_y,1);
				}
				if(t_room->m_hasExit){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Skeleton)->m_new(t_point->m_x,t_point->m_y,2);
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,false,false);
					if(t_point==0){
						continue;
					}
					(new c_Slime)->m_new(t_point->m_x,t_point->m_y,3);
					if(c_Util::m_IsCharacterActive(2)){
						t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
						if(t_point==0){
							continue;
						}
						(new c_Sarcophagus)->m_new(t_point->m_x,t_point->m_y,2);
					}
				}
				t_point=m_GetRandPointInRoomWithOptions5(t_room,false,false,false);
				if(t_point==0){
					continue;
				}
				(new c_Slime)->m_new(t_point->m_x,t_point->m_y,2);
				int t_slimeRoll3=c_Util::m_RndIntRangeFromZero(4,true);
				if(t_slimeRoll3!=0){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,false,false);
					if(t_point==0){
						continue;
					}
					(new c_Slime)->m_new(t_point->m_x,t_point->m_y,3);
				}
				bool t_slimeRoll22=c_Util::m_RndBool(true);
				if(t_slimeRoll22){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Slime)->m_new(t_point->m_x,t_point->m_y,1);
				}
			}else{
				int t_ghostRoll2=c_Util::m_RndIntRangeFromZero(6,true);
				if(t_ghostRoll2!=0){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Ghost)->m_new(t_point->m_x,t_point->m_y,1);
				}
				bool t_wraithRoll2=c_Util::m_RndBool(true);
				if(t_wraithRoll2){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Wraith)->m_new(t_point->m_x,t_point->m_y,1);
				}
				int t_wraithRoll22=c_Util::m_RndIntRangeFromZero(4,true);
				if(t_wraithRoll22==0){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Wraith)->m_new(t_point->m_x,t_point->m_y,1);
				}
				int t_skeletonRoll2=c_Util::m_RndIntRangeFromZero(2,true);
				if(t_skeletonRoll2!=0){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Skeleton)->m_new(t_point->m_x,t_point->m_y,2);
				}
				bool t_skeletonRoll22=c_Util::m_RndBool(true);
				if(t_skeletonRoll22){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Skeleton)->m_new(t_point->m_x,t_point->m_y,2);
				}
				int t_skeletonRoll3=c_Util::m_RndIntRangeFromZero(5,true);
				if(t_skeletonRoll3==0){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Skeleton)->m_new(t_point->m_x,t_point->m_y,3);
				}
				int t_skeletonRoll4=c_Util::m_RndIntRangeFromZero(2,true);
				if(t_skeletonRoll4==0){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Skeleton)->m_new(t_point->m_x,t_point->m_y,3);
				}
				int t_batRoll3=c_Util::m_RndIntRangeFromZero(3,true);
				if(t_batRoll3==0){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Bat)->m_new(t_point->m_x,t_point->m_y,2);
				}
				int t_batRoll22=c_Util::m_RndIntRangeFromZero(2,true);
				if(t_batRoll22==0){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Bat)->m_new(t_point->m_x,t_point->m_y,1);
				}
				bool t_zombieRoll3=c_Util::m_RndBool(true);
				if(t_zombieRoll3){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Zombie)->m_new(t_point->m_x,t_point->m_y,1);
				}
				int t_monkeyRoll4=c_Util::m_RndIntRangeFromZero(3,true);
				if(t_monkeyRoll4==0){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Monkey)->m_new(t_point->m_x,t_point->m_y,1);
				}
				int t_monkeyRoll22=c_Util::m_RndIntRangeFromZero(3,true);
				if(t_monkeyRoll22==0){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Monkey)->m_new(t_point->m_x,t_point->m_y,2);
				}
				if(t_room->m_hasExit){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Skeleton)->m_new(t_point->m_x,t_point->m_y,3);
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Monkey)->m_new(t_point->m_x,t_point->m_y,2);
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					(new c_Slime)->m_new(t_point->m_x,t_point->m_y,1);
					if(c_Util::m_IsCharacterActive(2)){
						t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
						if(t_point==0){
							continue;
						}
						(new c_Sarcophagus)->m_new(t_point->m_x,t_point->m_y,3);
					}
				}
				Float t_numEnemies=(Float)floor(Float(bb_controller_game_currentLevel-3)*FLOAT(0.5));
				int t_i2=500;
				for(t_i2=t_i2-1;t_i2>0;t_i2=t_i2+-1){
					if(t_numEnemies<=FLOAT(0.0)){
						break;
					}
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,true,false);
					if(t_point==0){
						continue;
					}
					int t_enemyRoll2=c_Util::m_RndIntRangeFromZero(3,true);
					int t_97=t_enemyRoll2;
					if(t_97==0){
						(new c_Wraith)->m_new(t_point->m_x,t_point->m_y,1);
					}else{
						if(t_97==1){
							t_point=m_GetRandPointInRoomWithOptions5(t_room,false,false,false);
							if(t_point==0){
								continue;
							}
							(new c_Slime)->m_new(t_point->m_x,t_point->m_y,3);
						}else{
							if(t_97==2){
								(new c_Skeleton)->m_new(t_point->m_x,t_point->m_y,3);
							}else{
								(new c_Monkey)->m_new(t_point->m_x,t_point->m_y,2);
							}
						}
					}
				}
				int t_slimeRoll4=c_Util::m_RndIntRangeFromZero(3,true);
				if(t_slimeRoll4!=0){
					t_point=m_GetRandPointInRoomWithOptions5(t_room,false,false,false);
					if(t_point==0){
						continue;
					}
					(new c_Slime)->m_new(t_point->m_x,t_point->m_y,3);
				}
			}
		}
	}
	if(c_Util::m_IsCharacterActive(2)){
		bb_logger_Debug->p_TraceNotImplemented(String(L"Level.PlaceEnemiesZone1() (Aria)",32));
	}
	if(c_Util::m_IsCharacterActive(13)){
		bb_logger_Debug->p_TraceNotImplemented(String(L"Level.PlaceEnemiesZone1() (Tempo)",33));
	}
}
void c_Level::m_PlaceEnemies(){
	bb_logger_Debug->p_Log(String(L"PLACEENEMIES",12));
	int t_92=bb_controller_game_currentZone;
	if(t_92==5){
		m_PlaceEnemiesZone5();
	}else{
		if(t_92==4){
			m_PlaceEnemiesZone4();
		}else{
			if(t_92==3){
				m_PlaceEnemiesZone3();
			}else{
				if(t_92==2){
					m_PlaceEnemiesZone2();
				}else{
					m_PlaceEnemiesZone1();
				}
			}
		}
	}
	if(c_Util::m_IsCharacterActive(2) || c_Util::m_IsCharacterActive(7) || c_Util::m_IsCharacterActive(6) || c_Util::m_IsCharacterActive(8)){
		int t_maxEnemies=0;
		if(c_Player::m_DoesAnyPlayerHaveItemOfType(String(L"ring_war",8),false)){
			t_maxEnemies=5;
		}
		t_maxEnemies+=5*m_GetHardModeExtraEnemies();
		t_maxEnemies+=bb_controller_game_currentLevel;
		int t_93=bb_controller_game_currentZone;
		if(t_93==1 || t_93==4){
			t_maxEnemies+=24;
		}else{
			if(t_93==3){
				t_maxEnemies+=17;
			}else{
				t_maxEnemies+=20;
			}
		}
		if(m_isHardcoreMode){
			t_maxEnemies+=3;
			if(bb_controller_game_currentZone==3){
				t_maxEnemies-=1;
			}
		}
		c_Enemy::m_CullEnemiesDownTo(t_maxEnemies);
	}
	if(m_placeLordOnLevel==-1){
		m_placeLordOnLevel=c_Util::m_RndIntRangeFromZero(11,true);
	}
	if(bb_controller_game_currentLevel<=3 && bb_controller_game_currentDepth*bb_controller_game_currentLevel==m_placeLordOnLevel){
		c_Enemy::m_CreateLord();
	}
	if(c_Player::m_DoesAnyPlayerHaveItemOfType(String(L"ring_peace",10),false) || m_isDDRMode){
		int t_i=500;
		int t_numEnemiesToCull=8;
		for(t_i=t_i-1;t_i>0;t_i=t_i+-1){
			int t_enemyIndex=c_Util::m_RndIntRangeFromZero(c_Enemy::m_enemyList->p_Count()-1,false);
			Array<c_Enemy* > t_enemies=c_Enemy::m_enemyList->p_ToArray();
			c_Enemy* t_enemy=t_enemies[t_enemyIndex];
			if(!t_enemy->m_isNPC && !t_enemy->m_isSarcophagus && !t_enemy->m_containsItem && t_enemy->m_level<=1 && !t_enemy->m_isMiniboss && !t_enemy->m_dead && !t_enemy->m_isLord){
				t_numEnemiesToCull-=1;
				t_enemy->p_Cull();
			}
			if(t_numEnemiesToCull<=0){
				break;
			}
		}
	}
}
c_Point* c_Level::m_FindTileOfType(int t_tileType,bool t_ignoreCrackedWalls){
	while(true){
		c_Node25* t_tilesOnXNode=0;
		int t_i=c_Util::m_RndIntRangeFromZero(m_tiles->p_Count()-1,true);
		c_NodeEnumerator* t_=m_tiles->p_ObjectEnumerator();
		while(t_->p_HasNext()){
			t_tilesOnXNode=t_->p_NextObject();
			if(t_i==0){
				break;
			}
			t_i-=1;
		}
		c_IntMap6* t_tilesOnX=t_tilesOnXNode->p_Value();
		c_Node26* t_tileNode=0;
		int t_j=c_Util::m_RndIntRangeFromZero(t_tilesOnX->p_Count()-1,true);
		c_NodeEnumerator2* t_2=t_tilesOnX->p_ObjectEnumerator();
		while(t_2->p_HasNext()){
			t_tileNode=t_2->p_NextObject();
			if(t_j==0){
				break;
			}
			t_j-=1;
		}
		c_Tile* t_tile=t_tileNode->p_Value();
		if(!t_ignoreCrackedWalls || !t_tile->m_isCracked){
			if(t_tileType==98 && t_tile->p_IsWall(true,false,false,false) || t_tileType==t_tile->p_GetType()){
				int t_x=t_tilesOnXNode->p_Key();
				int t_y=t_tileNode->p_Key();
				return (new c_Point)->m_new(t_x,t_y);
			}
		}
	}
}
c_Point* c_Level::m_FindTileOfType2(int t_tileType){
	return m_FindTileOfType(t_tileType,true);
}
Float c_Level::m_GetDistanceToNearestTorch(c_RenderableObject* t_r){
	Float t_distance=FLOAT(10000000.0);
	c_Point* t_from=t_r->p_GetLocation();
	c_NodeEnumerator* t_=m_tiles->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Node25* t_tilesOnXNode=t_->p_NextObject();
		c_NodeEnumerator2* t_2=t_tilesOnXNode->p_Value()->p_ObjectEnumerator();
		while(t_2->p_HasNext()){
			c_Node26* t_tileNode=t_2->p_NextObject();
			c_Tile* t_tile=t_tileNode->p_Value();
			if(t_tile->p_HasTorch()){
				int t_tileX=t_tilesOnXNode->p_Key();
				int t_tileY=t_tileNode->p_Key();
				t_distance=bb_math_Min2(t_distance,c_Util::m_GetDist(t_from->m_x,t_from->m_y,t_tileX,t_tileY));
			}
		}
	}
	return t_distance;
}
void c_Level::m_PlaceTorchesAnywhere(){
	bb_logger_Debug->p_Log(String(L"PLACETORCHESANYWHERE: Placing torches",37));
	for(int t_limit=5000;t_limit>0;t_limit=t_limit+-1){
		int t_wallTypeRoll=c_Util::m_RndIntRangeFromZero(1,true);
		int t_wallType=104;
		if(t_wallType==0){
			t_wallType=100;
		}
		c_Point* t_wallLocation=m_FindTileOfType2(t_wallType);
		c_Tile* t_wall=m_GetTileAt(t_wallLocation->m_x,t_wallLocation->m_y);
		if(t_wall==0){
			continue;
		}
		if(m_GetDistanceToNearestTorch(t_wall)<FLOAT(4.0)){
			continue;
		}
		if(c_Enemy::m_GetEnemyAt(t_wallLocation->m_x,t_wallLocation->m_y,true)!=0){
			continue;
		}
		t_wall->p_AddTorch();
	}
}
void c_Level::m_PlaceCrateOrBarrel(){
	bb_logger_Debug->p_Log(String(L"CREATEMAP: Placing crate or barrel",34));
	c_IntMap3* t_failedRooms=(new c_IntMap3)->m_new();
	int t_i=100;
	for(t_i=t_i-1;t_i>0;t_i=t_i+-1){
		int t_roomIndex=c_Util::m_RndIntRangeFromZero(m_rooms->p_Count()-1,true);
		if(!t_failedRooms->p_Contains(t_roomIndex)){
			Array<c_RoomData* > t_roomsArray=m_rooms->p_ToArray();
			c_RoomData* t_room=t_roomsArray[t_roomIndex];
			int t_91=t_room->m_type;
			if(t_91==3 || t_91==5 || t_91==7){
				continue;
			}
			if(t_room->m_hasExit){
				continue;
			}
			t_failedRooms->p_Add4(t_roomIndex,1);
			for(int t_j=40;t_j>0;t_j=t_j+-1){
				c_Point* t_point=m_GetRandPointInRoomWithOptions5(t_room,true,true,false);
				if(t_point==0){
					continue;
				}
				if(!m_IsTileTypeAdjacent(t_point->m_x,t_point->m_y,1) && !m_IsDoorAdjacent(t_point->m_x,t_point->m_y)){
					m_PutCrateOrBarrel(t_point->m_x,t_point->m_y);
					return;
				}
			}
		}
	}
	bb_logger_Debug->p_Log(String(L"CREATEMAP: ********* Failed to place a crate or barrel",54));
}
bool c_Level::m_DoWePlaceAdditionalChestThisLevel(){
	if(m_isHardcoreMode){
		return false;
	}
	int t_41=bb_controller_game_currentLevel;
	if(t_41==1){
		return c_GameData::m_GetItemUnlocked(String(L"addchest_red",12),true) && !m_placedAdditionalRedChest;
	}else{
		if(t_41==2){
			return c_GameData::m_GetItemUnlocked(String(L"addchest_white",14),true) && !m_placedAdditionalWhiteChest;
		}else{
			if(t_41==3){
				return c_GameData::m_GetItemUnlocked(String(L"addchest_black",14),true) && !m_placedAdditionalBlackChest;
			}
		}
	}
	return false;
}
bool c_Level::m_PlaceAdditionalChestAt(int t_xVal,int t_yVal){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Level.PlaceAdditionalChestAt(Int, Int)",38));
	return false;
}
void c_Level::m_PlaceZoneAppropriateNumberOfDiamondsAt(int t_xVal,int t_yVal){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Level.PlaceZoneAppropriateNumberOfDiamondsAt(Int, Int)",54));
}
void c_Level::m_PlaceChests(bool t_freeBroadsword){
	int t_trapChestRoll=c_Util::m_RndIntRangeFromZero(99,true);
	bool t_placeTrapChest=false;
	int t_83=bb_controller_game_currentLevel;
	if(t_83==1){
		if(t_trapChestRoll<=0){
			t_placeTrapChest=true;
		}
	}else{
		if(t_83==2){
			if(t_trapChestRoll<=3){
				t_placeTrapChest=true;
			}
		}else{
			if(t_83==3){
				if(t_trapChestRoll<=7){
					t_placeTrapChest=true;
				}
			}else{
				if(t_83==4){
					if(t_trapChestRoll<=10){
						t_placeTrapChest=true;
					}
				}else{
					if(bb_controller_game_currentLevel>=5){
						if(t_trapChestRoll<=13){
							t_placeTrapChest=true;
						}
					}
				}
			}
		}
	}
	if(c_Player::m_DoesPlayer1HaveItemOfType(String(L"weapon_broadsword",17))){
		t_freeBroadsword=false;
	}
	if(c_Util::m_IsCharacterActive(11)){
		t_freeBroadsword=false;
	}
	if(m_isHardcoreMode){
		t_freeBroadsword=false;
	}
	bb_logger_Debug->p_Log(String(L"PLACECHESTS: Placing chests: ",29)+String(m_chestsStillToPlace));
	c_IntSet* t_usedRooms=(new c_IntSet)->m_new();
	bool t_placedDiamonds=false;
	int t_i=100;
	while(m_chestsStillToPlace>0 || m_DoWePlaceAdditionalChestThisLevel()){
		t_i-=1;
		if(t_i<=0){
			break;
		}
		int t_roomIndex=c_Util::m_RndIntRangeFromZero(m_rooms->p_Count()-1,true);
		if(t_usedRooms->p_Contains(t_roomIndex)){
			continue;
		}
		Array<c_RoomData* > t_roomsArray=m_rooms->p_ToArray();
		c_RoomData* t_room=t_roomsArray[t_roomIndex];
		int t_84=t_room->m_type;
		if(t_84==3 || t_84==5 || t_84==7){
			continue;
		}
		if(t_room->m_hasExit){
			continue;
		}
		t_usedRooms->p_Insert5(t_roomIndex);
		c_Point* t_point=0;
		for(int t_j=0;t_j<40;t_j=t_j+1){
			if(m_chestsStillToPlace<=0 && !m_DoWePlaceAdditionalChestThisLevel()){
				break;
			}
			t_point=m_GetRandPointInRoomWithOptions5(t_room,true,true,false);
			if(t_point==0){
				continue;
			}
			if(!m_IsTileTypeAdjacent(t_point->m_x,t_point->m_y,1) && !m_IsDoorAdjacent(t_point->m_x,t_point->m_y)){
				break;
			}
		}
		if(t_point==0){
			continue;
		}
		if(m_DoWePlaceAdditionalChestThisLevel()){
			m_PlaceAdditionalChestAt(t_point->m_x,t_point->m_y);
			continue;
		}
		if(t_placeTrapChest && (t_placedDiamonds || m_isHardcoreMode)){
			int t_trapChestLevelRoll=c_Util::m_RndIntRangeFromZero(9,true);
			if(m_chestsStillToPlace>0){
				int t_85=t_trapChestLevelRoll;
				if(t_85==0){
					(new c_TrapChest)->m_new(t_point->m_x,t_point->m_y,3);
				}else{
					if(t_85==1){
						(new c_TrapChest)->m_new(t_point->m_x,t_point->m_y,2);
					}else{
						(new c_TrapChest)->m_new(t_point->m_x,t_point->m_y,1);
					}
				}
			}
			m_chestsStillToPlace-=1;
			t_placeTrapChest=false;
			continue;
		}
		if(t_freeBroadsword){
			String t_itemName=String();
			for(int t_k=0;t_k<c_GameData::m_GetNumPendingSpawnItems();t_k=t_k+1){
				t_itemName=String(c_GameData::m_GetPendingSpawnItem(t_k));
				String t_itemSlot=c_Item::m_GetSlot2(t_itemName);
				if(t_itemSlot==String(L"weapon",6)){
					c_GameData::m_RemovePendingSpawnItem(t_itemName);
				}
			}
			if(t_itemName!=String()){
				(new c_Chest)->m_new(t_point->m_x,t_point->m_y,t_itemName,false,false,false,0);
				m_chestsStillToPlace-=1;
				t_freeBroadsword=false;
				continue;
			}
			int t_weaponQualityRoll=c_Util::m_RndIntRangeFromZero(99,true);
			int t_weaponQuality=0;
			if(t_weaponQualityRoll<10){
				t_weaponQuality=1;
			}
			if(t_weaponQualityRoll<20){
				t_weaponQuality=2;
			}
			if(t_weaponQualityRoll<25){
				t_weaponQuality=3;
			}
			if(t_weaponQualityRoll==25){
				t_weaponQuality=4;
			}
			String t_contents=String();
			int t_weaponTypeRoll=c_Util::m_RndIntRangeFromZero(99,true);
			if(t_weaponTypeRoll<=40){
				int t_86=t_weaponQuality;
				if(t_86==1){
					t_contents=String(L"weapon_golden_broadsword",24);
				}else{
					if(t_86==2){
						t_contents=String(L"weapon_blood_broadsword",23);
					}else{
						if(t_86==3){
							t_contents=String(L"weapon_titanium_broadsword",26);
						}else{
							if(t_86==4){
								t_contents=String(L"weapon_obsidian_broadsword",26);
							}else{
								t_contents=String(L"weapon_broadsword",17);
							}
						}
					}
				}
			}else{
				if(t_weaponTypeRoll<=55){
					if(c_Item::m_IsUnlocked(String(L"weapon_rapier",13))){
						int t_87=t_weaponQuality;
						if(t_87==1){
							t_contents=String(L"weapon_golden_rapier",20);
						}else{
							if(t_87==2){
								t_contents=String(L"weapon_blood_rapier",19);
							}else{
								if(t_87==3){
									t_contents=String(L"weapon_titanium_rapier",22);
								}else{
									if(t_87==4){
										t_contents=String(L"weapon_obsidian_rapier",22);
									}else{
										t_contents=String(L"weapon_rapier",13);
									}
								}
							}
						}
					}
				}else{
					if(t_weaponTypeRoll<=80 && !c_Util::m_IsCharacterActive(12) && !c_Util::m_IsCharacterActive(8)){
						if(c_Item::m_IsUnlocked(String(L"weapon_spear",12))){
							int t_88=t_weaponQuality;
							if(t_88==1){
								t_contents=String(L"weapon_golden_spear",19);
							}else{
								if(t_88==2){
									t_contents=String(L"weapon_blood_spear",18);
								}else{
									if(t_88==3){
										t_contents=String(L"weapon_titanium_spear",21);
									}else{
										if(t_88==4){
											t_contents=String(L"weapon_obsidian_spear",21);
										}else{
											t_contents=String(L"weapon_spear",12);
										}
									}
								}
							}
						}
					}else{
						if(c_Item::m_IsUnlocked(String(L"weapon_whip",11))){
							int t_89=t_weaponQuality;
							if(t_89==1){
								t_contents=String(L"weapon_golden_whip",18);
							}else{
								if(t_89==2){
									t_contents=String(L"weapon_blood_whip",17);
								}else{
									if(t_89==3){
										t_contents=String(L"weapon_titanium_whip",20);
									}else{
										if(t_89==4){
											t_contents=String(L"weapon_obsidian_whip",20);
										}else{
											t_contents=String(L"weapon_whip",11);
										}
									}
								}
							}
						}else{
							int t_90=t_weaponQuality;
							if(t_90==1){
								t_contents=String(L"weapon_golden_broadsword",24);
							}else{
								if(t_90==2){
									t_contents=String(L"weapon_blood_broadsword",23);
								}else{
									if(t_90==3){
										t_contents=String(L"weapon_titanium_broadsword",26);
									}else{
										if(t_90==4){
											t_contents=String(L"weapon_obsidian_broadsword",26);
										}else{
											t_contents=String(L"weapon_broadsword",17);
										}
									}
								}
							}
						}
					}
				}
			}
			(new c_Chest)->m_new(t_point->m_x,t_point->m_y,t_contents,false,false,false,0);
			m_chestsStillToPlace-=1;
			t_freeBroadsword=false;
			continue;
		}
		if(t_placedDiamonds || m_isHardcoreMode){
			if(m_chestsStillToPlace>0){
				(new c_Chest)->m_new(t_point->m_x,t_point->m_y,String(L"no_item",7),false,false,false,0);
			}
			m_chestsStillToPlace-=1;
		}else{
			m_PlaceZoneAppropriateNumberOfDiamondsAt(t_point->m_x,t_point->m_y);
			m_chestsStillToPlace-=1;
			t_placedDiamonds=true;
		}
	}
	if(m_chestsStillToPlace>0){
		bb_logger_Debug->p_Log(String(L"PLACECHESTS: ********* Failed to place all the chests!: ",56)+String(m_chestsStillToPlace));
	}
}
void c_Level::m_PlaceResourceWall(){
	bb_logger_Debug->p_Log(String(L"PLACERESOURCEWALL: Placing diamond or gold in wall",50));
	if(m_isHardcoreMode){
		if(c_Util::m_IsCharacterActive(5) || c_Util::m_IsCharacterActive(7)){
			bb_logger_Debug->p_Log(String(L"Skipping wall gold for Monk/Coda",32));
			return;
		}
	}
	c_Point* t_dirtWallLocation=m_FindTileOfType2(100);
	if(t_dirtWallLocation!=0){
		c_Tile* t_dirtWall=m_GetTileAt(t_dirtWallLocation->m_x,t_dirtWallLocation->m_y);
		if(t_dirtWall!=0){
			t_dirtWall->p_BecomeDiamond();
		}
	}
}
void c_Level::m_PlaceLockedChests(){
	bb_logger_Debug->p_Log(String(L"PLACELOCKEDCHESTS: Deciding on locked chests",44));
	int t_lockedChestsChance=c_Util::m_RndIntRangeFromZero(99,true);
	if(t_lockedChestsChance<=15 && c_Chest::m_GetNumEmptySecretChests()>0 && c_Chest::m_GetNumEmptyNonSecretChests()>0){
		bb_logger_Debug->p_Log(String(L"PLACELOCKEDCHESTS: Placing locked chest and key",47));
		c_Chest* t_emptySecretChest=c_Chest::m_GetEmptySecretChest();
		t_emptySecretChest->p_AddKeyToContents();
		c_Chest* t_emptyNonSecretChest=c_Chest::m_GetEmptyNonSecretChest();
		t_emptyNonSecretChest->p_BecomeLocked();
	}
}
c_Point* c_Level::m_GetShrinePoint(){
	for(int t_i=50;t_i>0;t_i=t_i+-1){
		int t_roomIndex=c_Util::m_RndIntRangeFromZero(m_rooms->p_Count()-1,true);
		Array<c_RoomData* > t_roomsArray=m_rooms->p_ToArray();
		c_RoomData* t_room=t_roomsArray[t_roomIndex];
		int t_56=t_room->m_type;
		if(t_56==3 || t_56==4 || t_56==5 || t_56==7){
			continue;
		}
		if(t_room->m_hasExit){
			continue;
		}
		c_Point* t_point=m_GetRandPointInRoomWithOptions4(t_room->m_x+1,t_room->m_y+1,t_room->m_w-2,t_room->m_h-2,true,true,false);
		if(t_point==0){
			continue;
		}
		if(c_Item::m_GetPickupAt(t_point->m_x,t_point->m_y,0)!=0){
			continue;
		}
		if(!m_IsFloorAt(t_point->m_x-1,t_point->m_y+1)){
			continue;
		}
		if(dynamic_cast<c_ToughSarcophagus*>(c_Enemy::m_GetEnemyAt(t_point->m_x-1,t_point->m_y+1,true))!=0){
			continue;
		}
		if(!m_IsFloorAt(t_point->m_x+0,t_point->m_y+1)){
			continue;
		}
		if(dynamic_cast<c_ToughSarcophagus*>(c_Enemy::m_GetEnemyAt(t_point->m_x+0,t_point->m_y+1,true))!=0){
			continue;
		}
		if(!m_IsFloorAt(t_point->m_x+1,t_point->m_y+1)){
			continue;
		}
		if(dynamic_cast<c_ToughSarcophagus*>(c_Enemy::m_GetEnemyAt(t_point->m_x+1,t_point->m_y+1,true))!=0){
			continue;
		}
		return t_point;
	}
	return 0;
}
void c_Level::m_PlaceShrine(){
	c_Shrine::m_AddPendingShrinesToUsedList();
	if(!m_placeShrineOnLevel->p_Contains(bb_controller_game_currentZone)){
		int t_level=0;
		if(bb_controller_game_currentDepth!=1 || !m_isHardcoreMode || m_isDailyChallenge){
			t_level=c_Util::m_RndIntRange(1,3,true,-1);
		}else{
			t_level=c_Util::m_RndIntRange(2,3,true,-1);
		}
		m_placeShrineOnLevel->p_Set6(bb_controller_game_currentZone,t_level);
	}
	if(m_placeShrineOnLevel->p_Get2(bb_controller_game_currentZone)==bb_controller_game_currentLevel){
		c_Point* t_point=m_GetShrinePoint();
		if(t_point!=0){
			int t_shrineInt=0;
			do{
				t_shrineInt=c_Shrine::m_GetRandomShrineInt(false,-1,-2);
			}while(!(t_shrineInt!=-1));
			c_RNG* t_shrineRNG=m_currentFloorRNG->p_Split();
			(new c_Shrine)->m_new(t_point->m_x,t_point->m_y,t_shrineInt,t_shrineRNG,false,false);
		}
	}else{
		int t_trapChestRoll=c_Util::m_RndIntRange(1,50,true,-1);
		if(t_trapChestRoll==1){
			c_Point* t_point2=m_GetShrinePoint();
			if(t_point2!=0){
				(new c_TrapChest)->m_new(t_point2->m_x,t_point2->m_y,6);
			}
		}
	}
}
bool c_Level::m_CreateMapZone5(bool t_recursive){
	bool t_saveGameData=!t_recursive;
	m_InitNewMap(t_saveGameData);
	c_RoomData* t_room1Data=m_PlaceFirstRoom();
	c_BlobRoom* t_hallway=(new c_BlobRoom)->m_new();
	t_hallway->p_FillRect(t_room1Data->m_x,t_room1Data->m_y-10,4,10);
	t_hallway->p_FillRect(t_room1Data->m_x,t_room1Data->m_y-14,14,4);
	if(c_Util::m_RndBool(true)){
		t_hallway->p_ReflectHorizontallyAbout(t_room1Data->m_x+2);
	}
	c_Point* t_rotationPoint=0;
	int t_numRotations=0;
	t_rotationPoint=(new c_Point)->m_new(t_room1Data->m_x+2,t_room1Data->m_y-2);
	t_numRotations=c_Util::m_RndIntRangeFromZero(2,true);
	if(t_numRotations==2){
		t_numRotations=3;
	}
	for(t_numRotations=t_numRotations;t_numRotations>0;t_numRotations=t_numRotations+-1){
		t_hallway->p_RotateCWAbout(t_rotationPoint);
	}
	int t_translateX=c_Util::m_RndIntRangeFromZero(2,true);
	t_hallway->p_TranslateBy((new c_Point)->m_new(t_translateX,0));
	t_rotationPoint=(new c_Point)->m_new(0,0);
	t_numRotations=c_Util::m_RndIntRangeFromZero(3,true);
	for(t_numRotations=t_numRotations;t_numRotations>0;t_numRotations=t_numRotations+-1){
		t_hallway->p_RotateCWAbout(t_rotationPoint);
	}
	c_Stack7* t_hallwayTiles=t_hallway->p_MakeTiles();
	c_Enumerator22* t_=t_hallwayTiles->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_TileData* t_hallwayTile=t_->p_NextObject();
		m_PlaceTileRemovingExistingTiles2(t_hallwayTile->m_x,t_hallwayTile->m_y,t_hallwayTile->m_type);
	}
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE5: Placed hallway at ",35)+t_hallway->p_GetBounds()->p_ToString());
	m_DumpMap();
	bool t_isEntryDoorPlaced=false;
	c_RectRoom* t_room1=(new c_RectRoom)->m_new2(t_room1Data->p_GetBounds());
	c_Enumerator23* t_2=t_room1->p_GetPortalSegs()->p_ObjectEnumerator();
	while(t_2->p_HasNext()){
		c_PortalSeg* t_room1PortalSeg=t_2->p_NextObject();
		c_Enumerator23* t_3=t_hallway->p_GetPortalSegs()->p_ObjectEnumerator();
		while(t_3->p_HasNext()){
			c_PortalSeg* t_hallwayPortalSeg=t_3->p_NextObject();
			c_PortalSeg* t_intersection=t_room1PortalSeg->p_Intersect(t_hallwayPortalSeg);
			if(t_intersection==0){
				continue;
			}
			bb_logger_Debug->p_Assert(t_intersection->m_length+1>=3,String());
			int t_scalar=c_Util::m_RndIntRangeFromZero(t_intersection->m_length-2,false);
			c_Point* t_origin=t_intersection->p_GetOrigin();
			c_Point* t_faceVector=t_intersection->p_GetFaceVector()->p_Scale(t_scalar);
			c_Point* t_offsetOrigin=t_origin->p_Add5(t_faceVector);
			c_Point* t_faceVector2=t_intersection->p_GetFaceVector()->p_Scale(2);
			c_Point* t_offsetOrigin2=t_offsetOrigin->p_Add5(t_faceVector2);
			int t_x=bb_math_Min(t_offsetOrigin->m_x,t_offsetOrigin2->m_x);
			int t_y=bb_math_Min(t_offsetOrigin->m_y,t_offsetOrigin2->m_y);
			int t_w=bb_math_Max(t_offsetOrigin->m_x,t_offsetOrigin2->m_x);
			int t_h=bb_math_Max(t_offsetOrigin->m_y,t_offsetOrigin2->m_y);
			c_Rect* t_doorBounds=c_Rect::m_MakeBounds(t_x,t_y,t_w,t_h);
			m_FillTiles(t_doorBounds,103,-1);
			m_PlaceConnectedWireDoor(t_doorBounds->p_GetCenter());
			bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE5: Placed entry door at ",38)+t_doorBounds->p_ToString());
			t_isEntryDoorPlaced=true;
			break;
		}
		if(t_isEntryDoorPlaced){
			break;
		}
	}
	bb_logger_Debug->p_Assert(t_isEntryDoorPlaced,String());
	m_DumpMap();
	c_StackEx3* t_hallwayPortalSegs=t_hallway->p_GetPortalSegs();
	bb_logger_Debug->p_Log(String(L"CREATEMAPZONE5: Place miniboss room connected to central hallway",64));
	c_RoomWithDoor* t_minibossRoom=m_CreateRoomZone53(t_hallwayPortalSegs,9,9,5);
	if(t_minibossRoom==0){
		bb_logger_Debug->p_Log(String(L"Retrying: could not place miniboss room",39));
		return m_CreateMapZone5(true);
	}
	c_RoomData* t_lastRoom=m_rooms->p_Last2();
	t_lastRoom->m_hasExit=true;
	m_DumpMap();
	bb_logger_Debug->p_Log(String(L"CREATEMAPZONE5: Place two small rooms connected to central hallway",66));
	c_RoomWithDoor* t_smallRoom1=m_CreateRoomZone53(t_hallwayPortalSegs,6,5,0);
	if(t_smallRoom1==0){
		bb_logger_Debug->p_Log(String(L"Retrying: could not place first two misc rooms",46));
		return m_CreateMapZone5(true);
	}
	c_RoomWithDoor* t_smallRoom2=m_CreateRoomZone53(t_hallwayPortalSegs,6,5,0);
	if(t_smallRoom2==0){
		bb_logger_Debug->p_Log(String(L"Retrying: could not place first two misc rooms",46));
		return m_CreateMapZone5(true);
	}
	m_DumpMap();
	bb_logger_Debug->p_Log(String(L"CREATEMAPZONE5: Place two small rooms connected to central hallway or another small room",88));
	t_hallwayPortalSegs->p_Extend(t_smallRoom1->p_GetPortalSegs());
	t_hallwayPortalSegs->p_Extend(t_smallRoom2->p_GetPortalSegs());
	c_RoomWithDoor* t_smallRoom3=m_CreateRoomZone53(t_hallwayPortalSegs,6,5,0);
	if(t_smallRoom3==0){
		bb_logger_Debug->p_Log(String(L"Retrying: could not place last two misc rooms",45));
		return m_CreateMapZone5(true);
	}
	c_RoomWithDoor* t_smallRoom4=m_CreateRoomZone53(t_hallwayPortalSegs,6,5,0);
	if(t_smallRoom4==0){
		bb_logger_Debug->p_Log(String(L"Retrying: could not place last two misc rooms",45));
		return m_CreateMapZone5(true);
	}
	m_DumpMap();
	bb_logger_Debug->p_Log(String(L"CREATEMAPZONE5: Place exit",26));
	c_IntPointStack* t_points=(new c_IntPointStack)->m_new();
	c_Rect* t_rect=0;
	c_Point* t_point=0;
	t_rect=(new c_Rect)->m_new(t_minibossRoom->m_body->m_x+2,t_minibossRoom->m_body->m_y+2,2,1);
	t_point=t_rect->p_RandomPoint();
	t_points->p_Push10(t_point);
	t_rect=(new c_Rect)->m_new(t_minibossRoom->m_body->m_x+6,t_minibossRoom->m_body->m_y+2,1,2);
	t_point=t_rect->p_RandomPoint();
	t_points->p_Push10(t_point);
	t_rect=(new c_Rect)->m_new(t_minibossRoom->m_body->m_x+2,t_minibossRoom->m_body->m_y+5,1,2);
	t_point=t_rect->p_RandomPoint();
	t_points->p_Push10(t_point);
	t_rect=(new c_Rect)->m_new(t_minibossRoom->m_body->m_x+5,t_minibossRoom->m_body->m_y+6,2,1);
	t_point=t_rect->p_RandomPoint();
	t_points->p_Push10(t_point);
	t_points->p_Shuffle(true);
	int t_pointsIndex=0;
	for(int t_i=1;t_i<t_points->p_Length();t_i=t_i+1){
		c_Point* t_point2=t_points->p_Get2(t_pointsIndex);
		int t_pointL1Dist=c_Util::m_GetL1Dist(0,0,t_point2->m_x,t_point2->m_y);
		c_Point* t_nextPoint=t_points->p_Get2(t_i);
		int t_nextPointL1Dist=c_Util::m_GetL1Dist(0,0,t_nextPoint->m_x,t_nextPoint->m_y);
		if(t_pointL1Dist<t_nextPointL1Dist){
			t_pointsIndex=t_i;
		}
	}
	c_Point* t_exitPoint=t_points->p_Get2(t_pointsIndex);
	t_points->p_Remove2(t_pointsIndex);
	m_CreateExit(t_exitPoint->m_x,t_exitPoint->m_y);
	t_points->p_Shuffle(true);
	bb_logger_Debug->p_Log(String(L"CREATEMAPZONE5: Place wire",26));
	t_points->p_Pop();
	c_Enumerator24* t_4=t_points->p_ObjectEnumerator();
	while(t_4->p_HasNext()){
		c_Point* t_point3=t_4->p_NextObject();
		m_PlaceWire(t_exitPoint,t_point3);
	}
	c_Stack10* t_rooms=(new c_Stack10)->m_new();
	t_rooms->p_Push28(t_room1);
	t_rooms->p_Push28(t_hallway);
	t_rooms->p_Push28(t_minibossRoom);
	t_rooms->p_Push28(t_smallRoom1);
	t_rooms->p_Push28(t_smallRoom2);
	t_rooms->p_Push28(t_smallRoom3);
	t_rooms->p_Push28(t_smallRoom4);
	c_Enumerator25* t_5=t_rooms->p_ObjectEnumerator();
	while(t_5->p_HasNext()){
		c_RoomBase* t_room=t_5->p_NextObject();
		c_IntPointStack* t_internalNodePoints=(new c_IntPointStack)->m_new();
		c_IntPointStack* t_wirePoints=(new c_IntPointStack)->m_new();
		bool t_hasExit=false;
		c_Point* t_exitCoords=m_GetStandardExitCoords();
		if(t_room->p_IsFloor2(t_exitCoords->m_x,t_exitCoords->m_y)){
			t_wirePoints->p_Push10(t_exitCoords);
			t_hasExit=true;
		}
		bool t_hasStart=t_room->p_IsFloor2(0,0);
		c_Enumerator24* t_6=t_room->p_GetFloor()->p_ObjectEnumerator();
		while(t_6->p_HasNext()){
			c_Point* t_roomFloorPoint=t_6->p_NextObject();
			if(m_IsTileTypeAdjacent(t_roomFloorPoint->m_x,t_roomFloorPoint->m_y,118)){
				t_wirePoints->p_Push10(t_roomFloorPoint);
				c_Tile* t_wire=m_PlaceTileRemovingExistingTiles2(t_roomFloorPoint->m_x,t_roomFloorPoint->m_y,20);
				for(int t_dir=0;t_dir<3;t_dir=t_dir+1){
					c_Point* t_offset=c_Util::m_GetPointFromDir(t_dir);
					c_Point* t_connectionPoint=t_roomFloorPoint->p_Add5(t_offset);
					if(m_GetTileTypeAt(t_connectionPoint->m_x,t_connectionPoint->m_y)==118){
						t_wire->p_AddWireConnection(t_dir);
					}
				}
			}else{
				if(!m_IsWallAdjacent8(t_roomFloorPoint->m_x,t_roomFloorPoint->m_y)){
					t_internalNodePoints->p_Push10(t_roomFloorPoint);
				}
			}
		}
		if(t_hasStart){
			t_wirePoints->p_Push10((new c_Point)->m_new(0,0));
		}else{
			if(!t_hasExit && t_wirePoints->p_Length()==1){
				c_Point* t_internalNodePoint=t_internalNodePoints->p_ChooseRandom(true);
				bb_logger_Debug->p_Log(String(L"CREATEMAPZONE5: Creating internal node in leaf room at ",55)+t_internalNodePoint->p_ToString());
				t_wirePoints->p_Push10(t_internalNodePoint);
			}
		}
		for(int t_i2=1;t_i2<t_wirePoints->p_Length();t_i2=t_i2+1){
			c_Point* t_src=t_wirePoints->p_Get2(0);
			c_Point* t_dst=t_wirePoints->p_Get2(t_i2);
			m_PlaceWire(t_src,t_dst);
		}
	}
	m_DumpMap();
	bb_logger_Debug->p_Log(String(L"Place shop connected to hallway",31));
	t_hallwayPortalSegs=t_hallway->p_GetPortalSegs();
	c_RoomWithDoor* t_shop=m_CreateRoomZone52(t_hallwayPortalSegs,6,8,0,3);
	if(t_shop==0){
		bb_logger_Debug->p_Log(String(L"Retrying: could not place shop",30));
		return m_CreateMapZone5(true);
	}
	m_DumpMap();
	m_PadWalls();
	m_DumpMap();
	m_ProcessSpecialRoom();
	if(!m_isLevelEditor){
		m_CreateIndestructibleBorder();
	}
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE5: Placing secret rooms",37));
	m_chestsStillToPlace=1;
	if(!m_isHardcoreMode){
		int t_extraChestRoll=c_Util::m_RndIntRangeFromZero(100,true);
		if(t_extraChestRoll<=9){
			m_chestsStillToPlace+=1;
		}
	}
	m_PlaceSecretRooms(4);
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE5: Filling secret rooms",37));
	if(!m_FillSecretRooms()){
		return m__FailMap();
	}
	if(!m_isHardcoreMode){
		if(m_chestsStillToPlace<=1){
			m_chestsStillToPlace=1;
		}
		if(bb_controller_game_currentLevel<=2){
			m_chestsStillToPlace=2;
		}
	}
	m_AddStone();
	m_PlaceTraps();
	gc_assign(m_hallwayZone5,t_hallway);
	m_PlaceEnemies();
	m_PlaceTorchesAnywhere();
	if(m_randSeed==1){
		int t_30=bb_controller_game_currentLevel;
		if(t_30==1){
			c_Util::m_SeedRnd(1886524724);
		}else{
			if(t_30==2){
				c_Util::m_SeedRnd(-1252834530);
			}else{
				if(t_30==3){
					c_Util::m_SeedRnd(-1503261912);
				}
			}
		}
	}
	m_PlaceCrateOrBarrel();
	m_PlaceChests(false);
	m_PlaceResourceWall();
	m_PlaceLockedChests();
	m_PlaceShrine();
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE5: Cleaning up pending tiles",42));
	c_Tile::m_CleanUpPendingTiles();
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE5: Finished!",26));
	return true;
}
bool c_Level::m_IsTileEmpty(int t_xVal,int t_yVal){
	return m_GetTileTypeAt(t_xVal,t_yVal)==-1;
}
void c_Level::m_CarveCorridorTile(int t_xVal,int t_yVal,bool t_horizontal,bool t_pending,bool t_skipWalls,int t_roomType,bool t_wideCorridor){
	if(m_IsSecretRoom(t_roomType)){
		(new c_Tile)->m_new(t_xVal,t_yVal,101,t_pending,-1);
	}else{
		(new c_Tile)->m_new(t_xVal,t_yVal,1,t_pending,-1);
		if(t_wideCorridor){
			if(t_horizontal){
				(new c_Tile)->m_new(t_xVal,t_yVal+1,1,t_pending,-1);
			}else{
				(new c_Tile)->m_new(t_xVal+1,t_yVal,1,t_pending,-1);
			}
		}
	}
	if(!t_skipWalls){
		if(t_horizontal){
			if(!m_IsFloorAt(t_xVal,t_yVal-1)){
				(new c_Tile)->m_new(t_xVal,t_yVal-1,101,t_pending,-1);
			}
			if(t_wideCorridor){
				t_yVal+=2;
			}else{
				t_yVal+=1;
			}
		}else{
			if(!m_IsFloorAt(t_xVal-1,t_yVal)){
				(new c_Tile)->m_new(t_xVal-1,t_yVal,101,t_pending,-1);
			}
			if(t_wideCorridor){
				t_xVal+=2;
			}else{
				t_xVal+=1;
			}
		}
		if(!m_IsFloorAt(t_xVal,t_yVal)){
			(new c_Tile)->m_new(t_xVal,t_yVal,101,t_pending,-1);
		}
	}
}
c_RoomData* c_Level::m_PlaceRoomZone4(int t_roomType){
	m_pendingTiles->p_Clear();
	c_Tile::m_CleanUpPendingTiles();
	c_RoomData* t_roomToAttachTo=0;
	do{
		int t_roomsIndex=c_Util::m_RndIntRangeFromZero(m_rooms->p_Count()-1,true);
		Array<c_RoomData* > t_roomsArray=m_rooms->p_ToArray();
		t_roomToAttachTo=t_roomsArray[t_roomsIndex];
		int t_141=t_roomToAttachTo->m_type;
		if(t_141==5 || t_141==7){
			continue;
		}
		break;
	}while(!(false));
	int t_x=0;
	int t_y=0;
	do{
		if(t_roomToAttachTo->m_x==t_x){
			break;
		}
		if(t_roomToAttachTo->m_x+t_roomToAttachTo->m_w==t_x){
			break;
		}
		if(t_roomToAttachTo->m_y==t_y){
			break;
		}
		if(t_roomToAttachTo->m_y+t_roomToAttachTo->m_h==t_y){
			break;
		}
		t_x=t_roomToAttachTo->m_x+c_Util::m_RndIntRangeFromZero(t_roomToAttachTo->m_w,true);
		t_y=t_roomToAttachTo->m_y+c_Util::m_RndIntRangeFromZero(t_roomToAttachTo->m_h,true);
	}while(!(false));
	int t_numFloor=0;
	if(m_GetTileTypeAt(t_x+1,t_y)==0){
		t_numFloor+=1;
	}
	if(m_GetTileTypeAt(t_x,t_y+1)==0){
		t_numFloor+=1;
	}
	if(m_GetTileTypeAt(t_x-1,t_y)==0){
		t_numFloor+=1;
	}
	if(m_GetTileTypeAt(t_x,t_y-1)==0){
		t_numFloor+=1;
	}
	if(t_numFloor!=1){
		bb_logger_Debug->p_WriteLine2(String(L"Failed to place room for zone 4. Attachment point has ",54)+String(t_numFloor)+String(L" tiles adjacent that are Floor (expected 1).",44));
		return 0;
	}
	int t_moveX=0;
	int t_moveY=0;
	if(m_GetTileTypeAt(t_x+1,t_y)==0){
		t_moveX=-1;
	}
	if(m_GetTileTypeAt(t_x,t_y+1)==0){
		t_moveY=-1;
	}
	if(m_GetTileTypeAt(t_x-1,t_y)==0){
		t_moveX=1;
	}
	if(m_GetTileTypeAt(t_x,t_y-1)==0){
		t_moveY=1;
	}
	bool t_horizontal=true;
	if(t_moveX==0){
		t_horizontal=false;
	}
	m_carveX=t_x;
	m_carveY=t_y;
	m_CarveCorridorTile(t_x,t_y,t_horizontal,true,false,t_roomType,false);
	int t_wVal=c_Util::m_RndIntRange(5,7,true,-1);
	int t_hVal=c_Util::m_RndIntRange(5,7,true,-1);
	int t_142=t_roomType;
	if(t_142==3){
		t_wVal=6;
		t_hVal=8;
	}else{
		if(t_142==5){
			t_wVal=4;
			t_hVal=3;
		}else{
			if(t_142==7){
				t_wVal=4;
				t_hVal=3;
			}
		}
	}
	int t_xVal=0;
	int t_yVal=0;
	int t_xOff=0;
	int t_yOff=0;
	int t_originX=m_carveX;
	int t_originY=m_carveY;
	int t_143=t_moveX;
	if(t_143==-1){
		t_yOff=c_Util::m_RndIntRangeFromZero(t_hVal-3,true);
		t_xVal=t_originX-t_wVal;
		t_yVal=t_originY-t_yOff-1;
	}else{
		if(t_143==1){
			t_yOff=c_Util::m_RndIntRangeFromZero(t_hVal-3,true);
			t_xVal=t_originX;
			t_yVal=t_originY-t_yOff-1;
		}else{
			t_xOff=c_Util::m_RndIntRangeFromZero(t_wVal-3,true);
			t_xVal=t_originX-t_xOff-1;
			t_yVal=t_originY;
			if(t_moveY==-1){
				t_yVal-=t_hVal;
			}
		}
	}
	int t_originX2=t_originX+1;
	int t_originY2=t_originY;
	if(t_horizontal){
		t_originX2=t_originX;
		t_originY2=t_originY+1;
	}
	if(!m_CreateRoom(t_xVal,t_yVal,t_wVal,t_hVal,true,t_roomType,t_originX,t_originY,t_originX2,t_originY2,false,100,true,true)){
		return 0;
	}
	c_NodeEnumerator* t_=m_pendingTiles->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Node25* t_pendingTilesOnXNode=t_->p_NextObject();
		c_NodeEnumerator2* t_2=t_pendingTilesOnXNode->p_Value()->p_ObjectEnumerator();
		while(t_2->p_HasNext()){
			c_Node26* t_pendingTileNode=t_2->p_NextObject();
			int t_tileX=t_pendingTilesOnXNode->p_Key();
			int t_tileY=t_pendingTileNode->p_Key();
			c_Tile* t_tile=m_GetTileAt(t_tileX,t_tileY);
			int t_tileType=t_pendingTileNode->p_Value()->p_GetType();
			if(t_tile!=0){
				t_tile->p_Die();
			}
			(new c_Tile)->m_new(t_tileX,t_tileY,t_tileType,false,-1);
		}
	}
	int t_144=t_roomType;
	if(t_144==3){
		m_PlaceShopItemsAt(t_xVal,t_yVal,0);
	}else{
		if(t_144==5 || t_144==7){
		}else{
			(new c_Tile)->m_new(t_originX,t_originY,103,false,-1);
		}
	}
	c_RoomData* t_room=(new c_RoomData)->m_new(t_xVal,t_yVal,t_wVal,t_hVal,m_lastCreatedRoomType,false);
	m_rooms->p_AddLast14(t_room);
	return t_room;
}
void c_Level::m_AddHarderStone(){
	bb_logger_Debug->p_Log(String(L"Adding harder stone",19));
	Float t_percentToConvert=FLOAT(0.01);
	int t_2=bb_controller_game_currentLevel;
	if(t_2==2){
		t_percentToConvert=FLOAT(0.02);
	}else{
		if(t_2==3){
			t_percentToConvert=FLOAT(0.03);
		}else{
			if(t_2==4){
				t_percentToConvert=FLOAT(0.04);
			}else{
				if(bb_controller_game_currentDepth>4){
					t_percentToConvert=bb_math_Min2(FLOAT(0.1),Float(bb_controller_game_currentLevel)*FLOAT(0.01));
				}
			}
		}
	}
	if(bb_controller_game_currentZone==4){
		t_percentToConvert=bb_math_Min2(FLOAT(0.01),t_percentToConvert);
	}
	c_IntPointList* t_conversionCandidates=(new c_IntPointList)->m_new();
	c_NodeEnumerator* t_=m_tiles->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Node25* t_tilesOnXNode=t_->p_NextObject();
		c_NodeEnumerator2* t_3=t_tilesOnXNode->p_Value()->p_ObjectEnumerator();
		while(t_3->p_HasNext()){
			c_Node26* t_tileNode=t_3->p_NextObject();
			c_Tile* t_tile=t_tileNode->p_Value();
			if(t_tile->p_IsWall(false,true,false,false) && t_tile->m_health<=1 && !t_tile->m_isCracked){
				t_conversionCandidates->p_AddLast26((new c_Point)->m_new(t_tile->m_x,t_tile->m_y));
			}
		}
	}
	int t_i=5000;
	int t_numWallsToConvert=int(Float(t_conversionCandidates->p_Count())*t_percentToConvert);
	for(t_i=t_i-1;t_i>0;t_i=t_i+-1){
		if(t_numWallsToConvert<=0){
			break;
		}
		t_numWallsToConvert-=1;
		int t_conversionCandidatesIndex=c_Util::m_RndIntRangeFromZero(t_conversionCandidates->p_Count()-1,true);
		Array<c_Point* > t_conversionCandidatesArray=t_conversionCandidates->p_ToArray();
		c_Point* t_wallToConvert=t_conversionCandidatesArray[t_conversionCandidatesIndex];
		m_GetTileAt(t_wallToConvert->m_x,t_wallToConvert->m_y)->p_BecomeHarderStone();
		t_conversionCandidates->p_RemoveEach13(t_wallToConvert);
	}
	if(t_i<=0){
		bb_logger_Debug->p_Log(String(L"****************** ADDSTONE: Unable to place the desired amount of stone! ******************",92));
	}
}
void c_Level::m_CheckMapConsistency(){
	bb_logger_Debug->p_Log(String(L"Checking map consistency for seed ",34)+String(m_randSeed)+String(L" z ",3)+String(bb_controller_game_currentZone)+String(L" l ",3)+String(bb_controller_game_currentLevel));
	c_Enumerator7* t_=c_Trap::m_trapList->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Trap* t_trap=t_->p_NextObject();
		int t_5=t_trap->m_trapType;
		if(t_5==1 || t_5==2 || t_5==3 || t_5==4 || t_5==5 || t_5==6 || t_5==7 || t_5==9){
			if(m_IsWallAt(t_trap->m_x,t_trap->m_y,false,false)){
				bb_logger_Debug->p_Log(String(L"MAP INCONSISTENCY: Trap type ",29)+String(t_trap->m_trapType)+String(L" inside wall at ",16)+t_trap->p_GetLocation()->p_ToString());
			}
		}
	}
	c_Enumerator10* t_2=c_Item::m_pickupList->p_ObjectEnumerator();
	while(t_2->p_HasNext()){
		c_Item* t_pickup=t_2->p_NextObject();
		if(m_IsWallAt(t_pickup->m_x,t_pickup->m_y,false,false)){
			bb_logger_Debug->p_Log(String(L"MAP INCONSISTENCY: Item ",24)+t_pickup->m_itemType+String(L" inside wall at ",16)+t_pickup->p_GetLocation()->p_ToString());
		}
	}
	c_Enumerator4* t_3=c_Enemy::m_enemyList->p_ObjectEnumerator();
	while(t_3->p_HasNext()){
		c_Enemy* t_enemy=t_3->p_NextObject();
		if(m_IsWallAt(t_enemy->m_x,t_enemy->m_y,false,false)){
			if(t_enemy->m_xmlName!=String(L"spider",6)){
				bb_logger_Debug->p_Log(String(L"MAP INCONSISTENCY: Enemy ",25)+t_enemy->m_xmlName+String(L" inside wall at ",16)+t_enemy->p_GetLocation()->p_ToString());
			}
		}
	}
}
void c_Level::m_PlaceNocturnaArea(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Level.PlaceNocturnaArea()",25));
}
bool c_Level::m_CreateMapZone4(bool t_recursive){
	bool t_saveGameData=!t_recursive;
	m_InitNewMap(t_saveGameData);
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE4: Creating room stubs",36));
	int t_roomPositionRoll=c_Util::m_RndIntRangeFromZero(3,true);
	gc_assign(m_rooms,(new c_List14)->m_new());
	c_RoomData* t_room1=m_PlaceFirstRoom();
	m_rooms->p_AddLast14(t_room1);
	c_RoomData* t_exitRoom=0;
	int t_xLow=0;
	int t_xHigh=0;
	int t_yLow=0;
	int t_yHigh=0;
	int t_26=t_roomPositionRoll;
	if(t_26==0){
		t_xLow=-2;
		t_xHigh=12;
		t_yLow=-2;
		t_yHigh=12;
		t_exitRoom=(new c_RoomData)->m_new(t_xHigh,t_yHigh,5,5,0,false);
	}else{
		if(t_26==1){
			t_xLow=-2;
			t_xHigh=12;
			t_yLow=-17;
			t_yHigh=-3;
			t_exitRoom=(new c_RoomData)->m_new(t_xHigh,t_yLow,5,5,0,false);
		}else{
			if(t_26==2){
				t_xLow=-17;
				t_xHigh=-3;
				t_yLow=-2;
				t_yHigh=12;
				t_exitRoom=(new c_RoomData)->m_new(t_xLow,t_yHigh,5,5,0,false);
			}else{
				t_xLow=-17;
				t_xHigh=-3;
				t_yLow=-17;
				t_yHigh=-3;
				t_exitRoom=(new c_RoomData)->m_new(t_xLow,t_yLow,5,5,0,false);
			}
		}
	}
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE4: Creating exit room stub at ",44)+t_exitRoom->p_GetLocation()->p_ToString()+String(L" of size ",9)+t_exitRoom->p_GetSize()->p_ToString());
	m_rooms->p_AddLast14(t_exitRoom);
	if(!m_CreateRoom2(t_exitRoom->m_x,t_exitRoom->m_y,t_exitRoom->m_w,t_exitRoom->m_h,false,0,false)){
		return m_CreateMapZone4(true);
	}
	int t_limit=500;
	for(int t_i=1;t_i<=6;t_i=t_i+1){
		int t_x=c_Util::m_RndIntRange(t_xLow,t_xHigh,true,-1);
		int t_y=c_Util::m_RndIntRange(t_yLow,t_yHigh,true,-1);
		bool t_createRoom=true;
		int t_j=0;
		for(t_j=0;t_j<=t_i;t_j=t_j+1){
			Array<c_RoomData* > t_roomsArray=m_rooms->p_ToArray();
			c_RoomData* t_room=t_roomsArray[t_j];
			if(bb_math_Abs(t_room->m_x-t_x)<=5 && bb_math_Abs(t_room->m_y-t_y)<=5){
				t_limit-=1;
				t_i-=1;
				t_createRoom=false;
				break;
			}
		}
		if(t_createRoom){
			c_RoomData* t_room2=(new c_RoomData)->m_new(t_x,t_y,5,5,0,false);
			bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE4: Creating room stub at ",39)+t_room2->p_GetLocation()->p_ToString()+String(L" of size ",9)+t_room2->p_GetSize()->p_ToString());
			m_rooms->p_AddLast14(t_room2);
			if(!m_CreateRoom3(t_room2->m_x,t_room2->m_y,t_room2->m_w,t_room2->m_h,false,0)){
				return m_CreateMapZone4(true);
			}
		}
		if(t_limit<=0){
			return m_CreateMapZone4(true);
		}
	}
	int t_xMax=t_xHigh+5;
	int t_yMax=t_yHigh+5;
	for(int t_x2=t_xLow;t_x2<=t_xMax;t_x2=t_x2+1){
		for(int t_y2=t_yLow;t_y2<=t_yMax;t_y2=t_y2+1){
			if(!m_IsTileEmpty(t_x2,t_y2)){
				continue;
			}
			m_PlaceTileRemovingExistingTiles2(t_x2,t_y2,100);
		}
	}
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE4: Placing secret rooms 1",39));
	m_PlaceSecretRooms(3);
	int t_i2=0;
	int t_j2=0;
	for(t_i2=500;t_i2>0;t_i2=t_i2+-1){
		int t_roomsIndex=c_Util::m_RndIntRange(1,7,true,-1);
		Array<c_RoomData* > t_roomsArray2=m_rooms->p_ToArray();
		c_RoomData* t_room3=t_roomsArray2[t_roomsIndex];
		int t_direction=c_Util::m_RndIntRangeFromZero(3,true);
		int t_27=t_direction;
		if(t_27==0){
			if(t_room3->m_x+t_room3->m_w>=t_xMax){
				continue;
			}
			if(t_room3->m_w>8){
				continue;
			}
			if(t_room3->m_h>=0){
				int t_yOff=0;
				for(t_yOff=0;t_yOff<=t_room3->m_h;t_yOff=t_yOff+1){
					if(m_IsFloorAt(t_room3->m_x+t_room3->m_w+1,t_room3->m_y+t_yOff)){
						break;
					}
				}
				if(t_yOff<=t_room3->m_h){
					continue;
				}
			}
		}else{
			if(t_27==1){
				if(t_room3->m_y+t_room3->m_h>=t_yMax){
					continue;
				}
				if(t_room3->m_h>8){
					continue;
				}
				if(t_room3->m_w>=0){
					int t_xOff=0;
					for(t_xOff=0;t_xOff<=t_room3->m_w;t_xOff=t_xOff+1){
						if(m_IsFloorAt(t_room3->m_x+t_xOff,t_room3->m_y+t_room3->m_h+1)){
							break;
						}
					}
					if(t_xOff<=t_room3->m_w){
						continue;
					}
				}
			}else{
				if(t_27==2){
					if(t_xLow>=t_room3->m_x){
						continue;
					}
					if(t_room3->m_w>8){
						continue;
					}
					if(t_room3->m_h>=0){
						int t_yOff2=0;
						for(t_yOff2=0;t_yOff2<=t_room3->m_h;t_yOff2=t_yOff2+1){
							if(m_IsFloorAt(t_room3->m_x-1,t_room3->m_y+t_yOff2)){
								break;
							}
						}
						if(t_yOff2<=t_room3->m_h){
							continue;
						}
					}
				}else{
					if(t_27==3){
						if(t_yLow>=t_room3->m_y){
							continue;
						}
						if(t_room3->m_h>8){
							continue;
						}
						if(t_room3->m_w>=0){
							int t_xOff2=0;
							for(t_xOff2=0;t_xOff2<=t_room3->m_w;t_xOff2=t_xOff2+1){
								if(m_IsFloorAt(t_room3->m_x+t_xOff2,t_room3->m_y-1)){
									break;
								}
							}
							if(t_xOff2<=t_room3->m_w){
								continue;
							}
						}
					}
				}
			}
		}
		bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE4: Expanding room at ",35)+t_room3->p_GetLocation()->p_ToString()+String(L" of size ",9)+t_room3->p_GetSize()->p_ToString()+String(L" in direction ",14)+c_Util::m_DirToString(t_direction));
		int t_28=t_direction;
		if(t_28==0){
			t_room3->m_w+=1;
		}else{
			if(t_28==1){
				t_room3->m_h+=1;
			}else{
				if(t_28==2){
					t_room3->m_x-=1;
					t_room3->m_w+=1;
				}else{
					if(t_28==3){
						t_room3->m_y-=1;
						t_room3->m_h+=1;
					}
				}
			}
		}
		bool t_allowWaterTarOoze=t_roomsIndex!=1;
		if(!m_CreateRoom2(t_room3->m_x,t_room3->m_y,t_room3->m_w,t_room3->m_h,false,0,t_allowWaterTarOoze)){
			return m_CreateMapZone4(true);
		}
		t_i2+=1;
		t_j2+=1;
		if(t_j2>40){
			break;
		}
	}
	if(t_i2<0){
		return m_CreateMapZone4(true);
	}
	int t_roomsIndex2=c_Util::m_RndIntRange(2,7,true,-1);
	Array<c_RoomData* > t_roomsArray3=m_rooms->p_ToArray();
	c_RoomData* t_room4=t_roomsArray3[t_roomsIndex2];
	int t_roomType=2;
	if(c_Util::m_RndBool(true)){
		t_roomType=1;
	}
	if(!m_CreateRoom3(t_room4->m_x,t_room4->m_y,t_room4->m_w,t_room4->m_h,false,t_roomType)){
		return m_CreateMapZone4(true);
	}
	m_rooms->p_RemoveFirst();
	t_roomsArray3=m_rooms->p_ToArray();
	t_exitRoom=t_roomsArray3[0];
	t_exitRoom->m_hasExit=true;
	t_limit=500;
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE4: Placing exit in room 1",39));
	for(t_limit=t_limit-1;t_limit>0;t_limit=t_limit+-1){
		int t_stairsXOff=c_Util::m_RndIntRangeFromZero(t_exitRoom->m_w-1,true);
		int t_stairsX=t_exitRoom->m_x+t_stairsXOff;
		int t_stairsYOff=c_Util::m_RndIntRangeFromZero(t_exitRoom->m_h-1,true);
		int t_stairsY=t_exitRoom->m_y+t_stairsYOff;
		if(!m_IsFloorAt(t_stairsX,t_stairsY)){
			continue;
		}
		c_Tile* t_tileBelow=m_GetTileAt(t_stairsX,t_stairsY+1);
		if(t_tileBelow==0){
			continue;
		}
		if(t_tileBelow->p_IsWall2()){
			continue;
		}
		m_GetTileAt(t_stairsX,t_stairsY)->p_Die();
		c_Tile* t_stairs=(new c_Tile)->m_new(t_stairsX,t_stairsY,9,false,-1);
		t_stairs->m_flyawayText=String(L"|198|DEFEAT THE MINIBOSS!|",26);
		c_Point* t_exitKey=(new c_Point)->m_new(t_stairsX,t_stairsY);
		c_Point* t_exitValue=(new c_Point)->m_new(-6,-6);
		m_exits->p_Set15(t_exitKey,t_exitValue);
		break;
	}
	if(t_limit<=0){
		return m__FailMap();
	}
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE4: Placing shop",29));
	for(t_limit=t_limit-1;t_limit>0;t_limit=t_limit+-1){
		c_RoomData* t_shop=m_PlaceRoomZone4(3);
		if(t_shop!=0){
			break;
		}
	}
	if(t_limit<=0){
		return m__FailMap();
	}
	m_ProcessSpecialRoom();
	if(!m_isLevelEditor){
		m_CreateIndestructibleBorder();
	}
	m_chestsStillToPlace=1;
	if(!m_isHardcoreMode){
		int t_extraChestRoll=c_Util::m_RndIntRangeFromZero(100,true);
		if(t_extraChestRoll<=9){
			m_chestsStillToPlace=2;
		}
	}
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE4: Placing secret rooms 2",39));
	m_PlaceSecretRooms(4);
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE4: Filling secret rooms",37));
	if(!m_FillSecretRooms()){
		return m__FailMap();
	}
	if(!m_isHardcoreMode){
		if(bb_controller_game_currentLevel<=2){
			m_chestsStillToPlace=bb_math_Max(m_chestsStillToPlace,1);
		}
	}
	m_AddStone();
	m_AddHarderStone();
	m_PlaceTraps();
	m_PlaceEnemies();
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE4: Placing one speedup or slowdown trap",53));
	for(int t_i3=500;t_i3>0;t_i3=t_i3+-1){
		c_Trap* t_trap=c_Trap::m_FindRandomTrap();
		if(t_trap!=0){
			if(t_trap->m_canBeReplacedByTempoTrap && t_trap->m_trapType==1){
				int t_trapX=t_trap->m_x;
				int t_trapY=t_trap->m_y;
				t_trap->p_Die();
				if(c_Util::m_RndBool(true)){
					(new c_SpeedUpTrap)->m_new(t_trapX,t_trapY);
					bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE4: Speedup trap placed at ",40)+String(t_trapX)+String(L"/",1)+String(t_trapY));
				}else{
					(new c_SlowDownTrap)->m_new(t_trapX,t_trapY);
					bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE4: Slowdown trap placed at ",41)+String(t_trapX)+String(L"/",1)+String(t_trapY));
				}
				break;
			}
		}
	}
	m_PlaceTorchesAnywhere();
	if(m_randSeed==1){
		int t_29=bb_controller_game_currentLevel;
		if(t_29==1){
			c_Util::m_SeedRnd(-514299444);
		}else{
			if(t_29==2){
				c_Util::m_SeedRnd(-291388292);
			}else{
				if(t_29==3){
					c_Util::m_SeedRnd(750752228);
				}
			}
		}
	}
	m_PlaceCrateOrBarrel();
	m_PlaceChests(false);
	m_PlaceResourceWall();
	m_PlaceLockedChests();
	m_PlaceShrine();
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE4: Cleaning up pending tiles",42));
	c_Tile::m_CleanUpPendingTiles();
	m_CheckMapConsistency();
	m_PlaceNocturnaArea();
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE4: Finished!",26));
	return true;
}
bool c_Level::m_CarveNewCorridor(int t_moveX,int t_moveY,bool t_horizontal,bool t_pending,bool t_secondaryCarve,int t_roomType,bool t_wideCorridor){
	int t_numCarves=2;
	if(m_IsSecretRoom(t_roomType)){
		t_numCarves=1;
	}
	bool t_carveAgain=true;
	for(int t_i=0;t_i<t_numCarves;t_i=t_i+1){
		if(!t_carveAgain){
			int t_x=m_carveX;
			int t_y=m_carveY;
			if(m_GetTileTypeAt(t_x,t_y)!=-1){
				bb_logger_Debug->p_WriteLine2(String(L"Failed to carve new corridor. Tile at ",38)+((new c_Point)->m_new(t_x,t_y))->p_ToString()+String(L" is not empty.",14));
				return false;
			}
			if(t_wideCorridor){
				if(t_horizontal){
					if(m_GetTileTypeAt(m_carveX,m_carveY+1)!=-1){
						bb_logger_Debug->p_WriteLine2(String(L"Failed to carve new corridor. Tile at ",38)+((new c_Point)->m_new(t_x,t_y+1))->p_ToString()+String(L" is not empty.",14));
						return false;
					}
				}else{
					if(m_GetTileTypeAt(m_carveX+1,m_carveY)!=-1){
						bb_logger_Debug->p_WriteLine2(String(L"Failed to carve new corridor. Tile at ",38)+((new c_Point)->m_new(t_x+1,t_y))->p_ToString()+String(L" is not empty.",14));
						return false;
					}
				}
			}
		}
		bool t_skipWalls=t_secondaryCarve;
		m_CarveCorridorTile(m_carveX,m_carveY,t_horizontal,t_pending,t_skipWalls,t_roomType,t_wideCorridor);
		m_carveX+=t_moveX;
		m_carveY+=t_moveY;
		if(!t_secondaryCarve){
			t_carveAgain=false;
		}
		t_secondaryCarve=false;
	}
	return true;
}
c_RoomData* c_Level::m_PlaceRoomZone3(int t_roomType,c_RoomData* t_roomToAttachTo){
	m_pendingTiles->p_Clear();
	c_Tile::m_CleanUpPendingTiles();
	bool t_wideCorridor=true;
	int t_137=t_roomType;
	if(t_137==3 || t_137==5 || t_137==7){
		t_wideCorridor=false;
	}
	int t_x=0;
	int t_y=0;
	if((t_roomToAttachTo)!=0){
		while(true){
			if(t_roomToAttachTo->m_x==t_x){
				break;
			}
			if(t_roomToAttachTo->m_x+t_roomToAttachTo->m_w==t_x){
				break;
			}
			if(t_roomToAttachTo->m_y==t_y){
				break;
			}
			if(t_roomToAttachTo->m_y+t_roomToAttachTo->m_h==t_y){
				break;
			}
			t_x=t_roomToAttachTo->m_x+c_Util::m_RndIntRangeFromZero(t_roomToAttachTo->m_w,true);
			t_y=t_roomToAttachTo->m_y+c_Util::m_RndIntRangeFromZero(t_roomToAttachTo->m_h,true);
		}
	}else{
		c_Point* t_tileLocation=m_FindTileOfType(98,true);
		t_x=t_tileLocation->m_x;
		t_y=t_tileLocation->m_y;
	}
	int t_numFloor=0;
	if(m_GetTileTypeAt(t_x+1,t_y)==0){
		t_numFloor+=1;
	}
	if(m_GetTileTypeAt(t_x,t_y+1)==0){
		t_numFloor+=1;
	}
	if(m_GetTileTypeAt(t_x-1,t_y)==0){
		t_numFloor+=1;
	}
	if(m_GetTileTypeAt(t_x,t_y-1)==0){
		t_numFloor+=1;
	}
	if(t_numFloor!=1){
		bb_logger_Debug->p_WriteLine2(String(L"Failed to place room for zone 3. Attachment point has ",54)+String(t_numFloor)+String(L" tiles adjacent that are Floor (expected 1).",44));
		return 0;
	}
	int t_moveX=0;
	int t_moveY=0;
	if(m_GetTileTypeAt(t_x+1,t_y)==0){
		t_moveX=-1;
	}
	if(m_GetTileTypeAt(t_x,t_y+1)==0){
		t_moveY=-1;
	}
	if(m_GetTileTypeAt(t_x-1,t_y)==0){
		t_moveX=1;
	}
	if(m_GetTileTypeAt(t_x,t_y-1)==0){
		t_moveY=1;
	}
	bool t_horizontal=true;
	if(t_moveX==0){
		t_horizontal=false;
	}
	m_carveX=t_x;
	m_carveY=t_y;
	if(!m_CarveNewCorridor(t_moveX,t_moveY,t_horizontal,true,false,t_roomType,t_wideCorridor)){
		return 0;
	}
	if(!m_IsSecretRoom(t_roomType)){
		for(int t_i=0;t_i<2;t_i=t_i+1){
			if(c_Util::m_RndBool(true)){
				if(!m_IsFloorAt(m_carveX,m_carveY)){
					(new c_Tile)->m_new(m_carveX,m_carveY,101,true,-1);
				}
				if(t_horizontal){
					if(!m_IsFloorAt(m_carveX,m_carveY-1)){
						(new c_Tile)->m_new(m_carveX,m_carveY-1,101,true,-1);
					}
					if(!m_IsFloorAt(m_carveX,m_carveY+1)){
						(new c_Tile)->m_new(m_carveX,m_carveY+1,101,true,-1);
					}
					m_carveX-=t_moveX;
					m_carveY-=t_moveY;
					t_moveX=0;
					t_moveY=-1;
					if(c_Util::m_RndBool(true)){
						t_moveY=1;
					}
				}else{
					if(!m_IsFloorAt(m_carveX-1,m_carveY)){
						(new c_Tile)->m_new(m_carveX-1,m_carveY,101,true,-1);
					}
					if(!m_IsFloorAt(m_carveX+1,m_carveY)){
						(new c_Tile)->m_new(m_carveX+1,m_carveY,101,true,-1);
					}
					m_carveX-=t_moveX;
					m_carveY-=t_moveY;
					t_moveX=-1;
					t_moveY=0;
					if(c_Util::m_RndBool(true)){
						t_moveX=1;
					}
				}
				t_horizontal=!t_horizontal;
				if(!m_CarveNewCorridor(t_moveX,t_moveY,t_horizontal,true,true,t_roomType,t_wideCorridor)){
					return 0;
				}
			}
		}
	}
	int t_wVal=c_Util::m_RndIntRange(5,6,true,-1);
	int t_hVal=c_Util::m_RndIntRange(5,7,true,-1);
	int t_138=t_roomType;
	if(t_138==3){
		t_wVal=6;
		t_hVal=8;
	}else{
		if(t_138==5){
			t_wVal=4;
			t_hVal=3;
		}else{
			if(t_138==7){
				t_wVal=4;
				t_hVal=3;
			}
		}
	}
	int t_xVal=0;
	int t_yVal=0;
	int t_xOff=0;
	int t_yOff=0;
	int t_originX=m_carveX;
	int t_originY=m_carveY;
	int t_139=t_moveX;
	if(t_139==-1){
		t_yOff=c_Util::m_RndIntRangeFromZero(t_hVal-2,true);
		if(t_wideCorridor){
			t_yOff=c_Util::m_RndIntRangeFromZero(t_hVal-3,true);
		}
		t_xVal=t_originX-t_wVal;
		t_yVal=t_originY-t_yOff-1;
	}else{
		if(t_139==1){
			t_yOff=c_Util::m_RndIntRangeFromZero(t_hVal-2,true);
			if(t_wideCorridor){
				t_yOff=c_Util::m_RndIntRangeFromZero(t_hVal-3,true);
			}
			t_xVal=t_originX;
			t_yVal=t_originY-t_yOff-1;
		}else{
			t_xOff=c_Util::m_RndIntRangeFromZero(t_wVal-2,true);
			if(t_wideCorridor){
				t_xOff=c_Util::m_RndIntRangeFromZero(t_wVal-3,true);
			}
			t_xVal=t_originX-t_xOff-1;
			t_yVal=t_originY;
			if(t_moveY==-1){
				t_yVal-=t_hVal;
			}
		}
	}
	int t_originX2=t_originX+1;
	int t_originY2=t_originY;
	if(t_horizontal){
		t_originX2=t_originX;
		t_originY2=t_originY+1;
	}
	if(!m_CreateRoom(t_xVal,t_yVal,t_wVal,t_hVal,true,t_roomType,t_originX,t_originY,t_originX2,t_originY2,t_wideCorridor,100,true,true)){
		return 0;
	}
	c_NodeEnumerator* t_=m_pendingTiles->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Node25* t_pendingTilesOnXNode=t_->p_NextObject();
		c_NodeEnumerator2* t_2=t_pendingTilesOnXNode->p_Value()->p_ObjectEnumerator();
		while(t_2->p_HasNext()){
			c_Node26* t_pendingTileNode=t_2->p_NextObject();
			int t_tileX=t_pendingTilesOnXNode->p_Key();
			int t_tileY=t_pendingTileNode->p_Key();
			c_Tile* t_tile=m_GetTileAt(t_tileX,t_tileY);
			int t_tileType=t_pendingTileNode->p_Value()->p_GetType();
			if(t_tile!=0){
				t_tile->p_Die();
			}
			(new c_Tile)->m_new(t_tileX,t_tileY,t_tileType,false,-1);
		}
	}
	int t_140=t_roomType;
	if(t_140==3){
		m_PlaceShopItemsAt(t_xVal,t_yVal,0);
	}else{
		if(t_140==5 || t_140==7){
		}else{
			(new c_Tile)->m_new(t_originX,t_originY,1,false,-1);
			if(t_wideCorridor){
				(new c_Tile)->m_new(t_originX2,t_originY2,1,false,-1);
			}
		}
	}
	c_RoomData* t_room=(new c_RoomData)->m_new(t_xVal,t_yVal,t_wVal,t_hVal,m_lastCreatedRoomType,false);
	m_rooms->p_AddLast14(t_room);
	return t_room;
}
c_RoomData* c_Level::m_PlaceRoomZone32(c_RoomData* t_roomToAttachTo){
	return m_PlaceRoomZone3(-1,t_roomToAttachTo);
}
bool c_Level::m_PlaceExit(c_RoomData* t_rdExit){
	if(true){
		bb_logger_Debug->p_Log(String(L"PLACEEXIT: Placing exit in room ",32)+t_rdExit->p_ToString());
	}
	int t_i=500;
	for(t_i=t_i-1;t_i>0;t_i=t_i+-1){
		int t_xOff=c_Util::m_RndIntRangeFromZero(t_rdExit->m_w-1,true);
		int t_x=t_rdExit->m_x+t_xOff;
		int t_yOff=c_Util::m_RndIntRangeFromZero(t_rdExit->m_h-1,true);
		int t_y=t_rdExit->m_y+t_yOff;
		if(m_GetTileTypeAt(t_x,t_y)==0 && !m_IsCorridorFloorOrDoorAdjacent(t_x,t_y) && !m_IsWallAt(t_x,t_y+1,false,false)){
			m_CreateExit(t_x,t_y);
			return true;
		}
	}
	bb_logger_Debug->p_Log(String(L"PLACEEXIT: Unable to place exit",31));
	return m__FailMap();
}
void c_Level::m_RemoveSomeWallsAwayFromCorridors(Float t_percentToRemove,bool t_includeCorridors,int t_maxHealth){
	c_IntPointList* t_removalCandidates=(new c_IntPointList)->m_new();
	c_NodeEnumerator* t_=m_tiles->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Node25* t_tilesOnXNode=t_->p_NextObject();
		c_NodeEnumerator2* t_2=t_tilesOnXNode->p_Value()->p_ObjectEnumerator();
		while(t_2->p_HasNext()){
			c_Node26* t_tileNode=t_2->p_NextObject();
			c_Tile* t_tile=t_tileNode->p_Value();
			if(t_tile->p_IsWall(!t_includeCorridors,true,false,false)){
				if(t_tile->m_health<=t_maxHealth){
					t_removalCandidates->p_AddLast26((new c_Point)->m_new(t_tile->m_x,t_tile->m_y));
				}
			}
		}
	}
	int t_i=500;
	int t_numWallsToRemove=int(Float(t_removalCandidates->p_Count())*t_percentToRemove);
	for(int t_i2=t_i-1;t_i2>0;t_i2=t_i2+-1){
		if(t_removalCandidates->p_IsEmpty()){
			break;
		}
		if(t_numWallsToRemove<=0){
			break;
		}
		int t_removalCandidatesIndex=c_Util::m_RndIntRangeFromZero(t_removalCandidates->p_Count()-1,true);
		Array<c_Point* > t_removalCandidatesArray=t_removalCandidates->p_ToArray();
		c_Point* t_wallToRemove=t_removalCandidatesArray[t_removalCandidatesIndex];
		if(m_IsFloorAdjacent(t_wallToRemove->m_x,t_wallToRemove->m_y)){
			if(!m_IsCorridorFloorOrDoorAdjacent(t_wallToRemove->m_x,t_wallToRemove->m_y)){
				m_PlaceTileRemovingExistingTiles(t_wallToRemove->m_x,t_wallToRemove->m_y,0,false,-1,false);
				t_numWallsToRemove-=1;
			}
		}
		t_removalCandidates->p_RemoveEach13(t_wallToRemove);
	}
	if(t_i<=0){
		bb_logger_Debug->p_Log(String(L"****************** RemoveSomeWallsAwayFromCorridors: Unable to remove the desired number of walls! ******************",117));
	}
}
void c_Level::m_WidenCorridors(){
	c_IntPointList* t_corridorWallLocations=(new c_IntPointList)->m_new();
	c_NodeEnumerator* t_=m_tiles->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Node25* t_tilesOnXNode=t_->p_NextObject();
		c_NodeEnumerator2* t_2=t_tilesOnXNode->p_Value()->p_ObjectEnumerator();
		while(t_2->p_HasNext()){
			c_Node26* t_tileNode=t_2->p_NextObject();
			c_Tile* t_tile=t_tileNode->p_Value();
			if(t_tile->p_GetType()==101){
				t_corridorWallLocations->p_AddLast26((new c_Point)->m_new(t_tile->m_x,t_tile->m_y));
			}
		}
	}
	c_Enumerator16* t_3=t_corridorWallLocations->p_ObjectEnumerator();
	while(t_3->p_HasNext()){
		c_Point* t_corridorWallLocation=t_3->p_NextObject();
		m_PlaceTileRemovingExistingTiles2(t_corridorWallLocation->m_x,t_corridorWallLocation->m_y,0);
	}
}
bool c_Level::m_IsTrapOrExitAbove(int t_xVal,int t_yVal){
	if(m_IsExitAt(t_xVal,t_yVal-1)){
		return true;
	}
	return c_Trap::m_GetTrapTypeAt(t_xVal,t_yVal)!=0;
}
void c_Level::m_AddSomePillarsInOpenSpace(){
	c_IntPointList* t_pillarCandidates=(new c_IntPointList)->m_new();
	c_NodeEnumerator* t_=m_tiles->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Node25* t_tilesOnXNode=t_->p_NextObject();
		c_NodeEnumerator2* t_2=t_tilesOnXNode->p_Value()->p_ObjectEnumerator();
		while(t_2->p_HasNext()){
			c_Node26* t_tileNode=t_2->p_NextObject();
			c_Tile* t_tile=t_tileNode->p_Value();
			if(t_tile->p_GetType()!=0){
				continue;
			}
			if(m_IsTrapOrExitAbove(t_tile->m_x,t_tile->m_y)){
				continue;
			}
			if(m_IsWallAdjacent8(t_tile->m_x,t_tile->m_y)){
				continue;
			}
			c_Point* t_player1Location=bb_controller_game_players[bb_controller_game_player1]->p_GetLocation();
			Float t_distFromPlayer=c_Util::m_GetDist(t_player1Location->m_x,t_player1Location->m_y,t_tile->m_x,t_tile->m_y);
			if(t_distFromPlayer<=FLOAT(6.0)){
				continue;
			}
			Float t_distFromClosestNPC=c_NPC::m_GetDistFromClosestNPC(t_tile->m_x,t_tile->m_y);
			if(t_distFromClosestNPC<=FLOAT(6.0)){
				continue;
			}
			t_pillarCandidates->p_AddLast26((new c_Point)->m_new(t_tile->m_x,t_tile->m_y));
		}
	}
	int t_i=500;
	int t_numPillars=6;
	for(t_i=t_i-1;t_i>0;t_i=t_i+-1){
		if(t_pillarCandidates->p_IsEmpty()){
			break;
		}
		if(t_numPillars<=0){
			break;
		}
		int t_pillarCandidatesIndex=c_Util::m_RndIntRangeFromZero(t_pillarCandidates->p_Count()-1,true);
		Array<c_Point* > t_pillarCandidatesArray=t_pillarCandidates->p_ToArray();
		c_Point* t_pillarCandidate=t_pillarCandidatesArray[t_pillarCandidatesIndex];
		if(m_IsFloorAdjacent(t_pillarCandidate->m_x,t_pillarCandidate->m_y)){
			if(!m_IsCorridorFloorOrDoorAdjacent(t_pillarCandidate->m_x,t_pillarCandidate->m_y)){
				m_PlaceTileRemovingExistingTiles2(t_pillarCandidate->m_x,t_pillarCandidate->m_y,100);
				t_numPillars-=1;
			}
		}
		t_pillarCandidates->p_RemoveEach13(t_pillarCandidate);
	}
	if(t_i<=0){
		bb_logger_Debug->p_Log(String(L"****************** AddSomePillarsInOpenSpace: Unable to add the desired number of pillars! ******************",109));
	}
}
c_Point* c_Level::m_GetRandomWallInRoom(int t_xVal,int t_yVal,int t_wVal,int t_hVal){
	c_Point* t_point=(new c_Point)->m_new(0,0);
	for(int t_i=500;t_i>0;t_i=t_i+-1){
		int t_54=c_Util::m_RndIntRangeFromZero(3,true);
		if(t_54==0){
			t_point->m_x=t_xVal;
			t_point->m_y=t_yVal+c_Util::m_RndIntRangeFromZero(t_hVal-1,true);
		}else{
			if(t_54==1){
				t_point->m_x=t_xVal+t_wVal;
				t_point->m_y=t_yVal+c_Util::m_RndIntRangeFromZero(t_hVal-1,true);
			}else{
				if(t_54==2){
					t_point->m_x=t_xVal+c_Util::m_RndIntRangeFromZero(t_wVal-1,true);
					t_point->m_y=t_yVal;
				}else{
					t_point->m_x=t_xVal+c_Util::m_RndIntRangeFromZero(t_wVal-1,true);
					t_point->m_y=t_yVal+t_hVal;
				}
			}
		}
		if(m_IsWallAt(t_point->m_x,t_point->m_y,false,false)){
			break;
		}
	}
	return t_point;
}
bool c_Level::m_CreateMapZone3(){
	c_RoomData* t_room1=0;
	c_RoomData* t_room2=0;
	c_RoomData* t_room3=0;
	c_RoomData* t_room4=0;
	c_RoomData* t_room5=0;
	c_RoomData* t_room6=0;
	c_RoomData* t_room7=0;
	m_InitNewMap(true);
	m_zone3DividingLineX=c_Util::m_RndFloatRange(FLOAT(-1.0),FLOAT(1.0),true);
	m_zone3DividingLineY=c_Util::m_RndFloatRange(FLOAT(-1.0),FLOAT(1.0),true);
	t_room1=m_PlaceFirstRoom();
	int t_limit=5000;
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE3: Trying to place room 2",39));
	for(t_limit=t_limit-1;t_limit>0;t_limit=t_limit+-1){
		t_room2=m_PlaceRoomZone32(t_room1);
		if((t_room2)!=0){
			break;
		}
	}
	if(t_limit<=0){
		return m__FailMap();
	}
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE3: Trying to place room 3",39));
	for(t_limit=t_limit-1;t_limit>0;t_limit=t_limit+-1){
		t_room3=m_PlaceRoomZone32(t_room2);
		if((t_room3)!=0){
			break;
		}
	}
	if(t_limit<=0){
		return m__FailMap();
	}
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE3: Trying to place room 4",39));
	for(t_limit=t_limit-1;t_limit>0;t_limit=t_limit+-1){
		t_room4=m_PlaceRoomZone32(t_room3);
		if((t_room4)!=0){
			break;
		}
	}
	if(t_limit<=0){
		return m__FailMap();
	}
	int t_lastRoomIndex=0;
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE3: Trying to place room 5",39));
	for(t_limit=t_limit-1;t_limit>0;t_limit=t_limit+-1){
		for(t_limit=t_limit;t_limit>0;t_limit=t_limit+-1){
			if(c_Util::m_RndIntRangeFromZero(50,true)==0){
				break;
			}
			t_room5=m_PlaceRoomZone32(t_room4);
			if(t_room5!=0){
				t_lastRoomIndex=4;
				break;
			}
		}
		if(t_room5!=0){
			break;
		}
		if(t_limit<=0){
			return m__FailMap();
		}
		if(c_Util::m_RndBool(true)){
			t_room5=m_PlaceRoomZone32(t_room3);
		}else{
			t_room5=m_PlaceRoomZone32(t_room1);
		}
		if(t_room5!=0){
			t_lastRoomIndex=3;
			break;
		}
	}
	if(t_limit<=0){
		return m__FailMap();
	}
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE3: Trying to place room 6",39));
	for(t_limit=t_limit-1;t_limit>0;t_limit=t_limit+-1){
		if(c_Util::m_RndIntRangeFromZero(50,true)!=0){
			t_room6=m_PlaceRoomZone32(t_room1);
		}else{
			if(c_Util::m_RndIntRangeFromZero(10,true)!=0){
				t_room6=m_PlaceRoomZone32(t_room4);
				if(t_room6!=0 && t_lastRoomIndex==3){
					t_lastRoomIndex=5;
				}
			}else{
				t_room6=m_PlaceRoomZone32(t_room5);
				if(t_room6!=0 && t_lastRoomIndex==4){
					t_lastRoomIndex=5;
				}
			}
		}
		if(t_room6!=0){
			break;
		}
	}
	if(t_limit<=0){
		return m__FailMap();
	}
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE3: Trying to place room 7",39));
	if(c_Shrine::m_spaceShrineActive){
		for(t_limit=t_limit-1;t_limit>0;t_limit=t_limit+-1){
			if(c_Util::m_RndBool(true)){
				if(c_Util::m_RndBool(true)){
					t_room7=m_PlaceRoomZone32(t_room1);
				}else{
					t_room7=m_PlaceRoomZone32(t_room3);
				}
			}else{
				if(c_Util::m_RndBool(true)){
					t_room7=m_PlaceRoomZone32(t_room2);
				}else{
					t_room7=m_PlaceRoomZone32(t_room4);
					if(((t_room7)!=0) && t_lastRoomIndex==3){
						t_lastRoomIndex=6;
					}
				}
			}
			if((t_room7)!=0){
				break;
			}
		}
	}
	if(t_limit<=0){
		return m__FailMap();
	}
	c_RoomData* t_lastRoom=t_room4;
	int t_24=t_lastRoomIndex;
	if(t_24==4){
		t_lastRoom=t_room5;
	}else{
		if(t_24==5){
			t_lastRoom=t_room6;
		}else{
			if(t_24==6){
				t_lastRoom=t_room7;
			}
		}
	}
	t_lastRoom->m_hasExit=true;
	if(!m_PlaceExit(t_lastRoom)){
		return false;
	}
	c_Point* t_exitCoords=m_GetStandardExitCoords();
	if(c_Camera::m_IsOnScreenStandardizedRelativeToPoint(t_exitCoords->m_x,t_exitCoords->m_y,0,0)){
		return m__FailMap();
	}
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE3: Placing shop",29));
	for(t_limit=t_limit-1;t_limit>0;t_limit=t_limit+-1){
		c_RoomData* t_shop=m_PlaceRoomZone3(3,0);
		if(t_shop!=0){
			break;
		}
	}
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE3: Removing some wall tiles",41));
	m_RemoveSomeWallsAwayFromCorridors(FLOAT(0.45),true,3);
	m_WidenCorridors();
	m_AddSomePillarsInOpenSpace();
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE3: Filling out walls surrounding all floor",56));
	c_NodeEnumerator* t_=m_tiles->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Node25* t_tilesOnXNode=t_->p_NextObject();
		c_NodeEnumerator2* t_2=t_tilesOnXNode->p_Value()->p_ObjectEnumerator();
		while(t_2->p_HasNext()){
			c_Node26* t_tileNode=t_2->p_NextObject();
			c_Tile* t_tile=t_tileNode->p_Value();
			if(t_tile->p_IsFloor()){
				for(int t_y=t_tile->m_y-1;t_y<=t_tile->m_y+1;t_y=t_y+1){
					for(int t_x=t_tile->m_x+1;t_x>=t_tile->m_x-1;t_x=t_x+-1){
						if(t_x==t_tile->m_x && t_y==t_tile->m_y){
							continue;
						}
						if(m_GetTileAt(t_x,t_y)==0){
							(new c_Tile)->m_new(t_x,t_y,101,false,-1);
						}
					}
				}
			}
		}
	}
	m_PadWalls();
	m_ProcessSpecialRoom();
	if(!m_isLevelEditor){
		m_CreateIndestructibleBorder();
	}
	if(m_isHardcoreMode){
		m_chestsStillToPlace=1;
	}else{
		int t_extraChestRoll=c_Util::m_RndIntRangeFromZero(100,true);
		if(t_extraChestRoll<=9){
			m_chestsStillToPlace=2;
		}
	}
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE3: Placing secret rooms",37));
	m_PlaceSecretRooms(4);
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE3: Filling secret rooms",37));
	if(!m_FillSecretRooms()){
		return m__FailMap();
	}
	if(!m_isHardcoreMode){
		if(bb_controller_game_currentLevel<=2){
			m_chestsStillToPlace=bb_math_Max(m_chestsStillToPlace,1);
		}
	}
	m_AddStone();
	m_AddHarderStone();
	m_PlaceTraps();
	m_PlaceEnemies();
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE3: Move swarm enemies further from start location",63));
	c_Enemy::m_MoveSwarmEnemiesAwayFromStartLocation();
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE3: Finished moving swarm enemies further from start location",74));
	c_Enemy::m_SetAllEnemiesMinimumMoveDistance(7);
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE3: Placing one speedup or slowdown trap",53));
	c_Trap* t_trap=0;
	for(int t_i=500;t_i>0;t_i=t_i+-1){
		t_trap=c_Trap::m_FindRandomTrap();
		if(t_trap!=0){
			if(t_trap->m_canBeReplacedByTempoTrap && t_trap->m_trapType==1){
				break;
			}
		}
	}
	if(t_trap!=0){
		int t_trapX=t_trap->m_x;
		int t_trapY=t_trap->m_y;
		t_trap->p_Die();
		if(c_Util::m_RndBool(true)){
			(new c_SpeedUpTrap)->m_new(t_trapX,t_trapY);
			bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE3: Speedup trap placed at ",40)+String(t_trapX)+String(L"/",1)+String(t_trap->m_y));
		}else{
			(new c_SlowDownTrap)->m_new(t_trapX,t_trapY);
			bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE3: Slowdown trap placed at ",41)+String(t_trapX)+String(L"/",1)+String(t_trap->m_y));
		}
	}
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE3: Placing torches",32));
	int t_minTorch=3;
	int t_maxTorch=4;
	int t_25=bb_controller_game_currentLevel;
	if(t_25==2){
		t_minTorch=2;
		t_maxTorch=3;
	}else{
		if(t_25==3){
			t_minTorch=1;
			t_maxTorch=2;
		}else{
			if(t_25==4){
				t_minTorch=1;
				t_maxTorch=1;
			}else{
				if(bb_controller_game_currentLevel>=5){
					t_minTorch=0;
					t_maxTorch=1;
				}
			}
		}
	}
	c_List14* t_anotherRooms=(new c_List14)->m_new();
	c_Enumerator26* t_3=m_rooms->p_ObjectEnumerator();
	while(t_3->p_HasNext()){
		c_RoomData* t_room=t_3->p_NextObject();
		t_anotherRooms->p_AddLast14(t_room);
	}
	t_anotherRooms->p_AddLast14(t_room1);
	c_Enumerator26* t_4=t_anotherRooms->p_ObjectEnumerator();
	while(t_4->p_HasNext()){
		c_RoomData* t_room8=t_4->p_NextObject();
		int t_numTorch=c_Util::m_RndIntRange(t_minTorch,t_maxTorch,true,-1);
		int t_i2=0;
		Float t_minTorchDistance=FLOAT(.0);
		if(t_room8->m_type!=3){
			if(t_numTorch<=0){
				continue;
			}
			t_i2=50;
			t_minTorchDistance=FLOAT(3.5);
		}else{
			t_numTorch=20;
			t_i2=200;
			t_minTorchDistance=FLOAT(2.0);
		}
		for(t_i2=t_i2-1;t_i2>0;t_i2=t_i2+-1){
			c_Point* t_wallLocation=m_GetRandomWallInRoom(t_room8->m_x,t_room8->m_y,t_room8->m_w,t_room8->m_h);
			c_Tile* t_wall=m_GetTileAt(t_wallLocation->m_x,t_wallLocation->m_y);
			if(t_wall!=0 && !t_wall->p_IsDoor() && m_GetDistanceToNearestTorch(t_wall)>=t_minTorchDistance){
				t_wall->p_AddTorch();
				t_numTorch-=1;
			}
			if(t_numTorch<=0){
				break;
			}
		}
	}
	m_PlaceCrateOrBarrel();
	m_PlaceChests(false);
	m_PlaceResourceWall();
	m_PlaceLockedChests();
	m_PlaceShrine();
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE3: Cleaning up pending tiles",42));
	c_Tile::m_CleanUpPendingTiles();
	m_PlaceNocturnaArea();
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE3: Finished!",26));
	return true;
}
c_RoomData* c_Level::m_PlaceRoomZone2(int t_roomType,c_RoomData* t_roomToAttachTo){
	m_pendingTiles->p_Clear();
	c_Tile::m_CleanUpPendingTiles();
	bool t_wideCorridor=true;
	int t_132=t_roomType;
	if(t_132==3 || t_132==5 || t_132==7){
		t_wideCorridor=false;
	}
	int t_x=0;
	int t_y=0;
	if((t_roomToAttachTo)!=0){
		while(true){
			if(t_roomToAttachTo->m_x==t_x){
				break;
			}
			if(t_roomToAttachTo->m_x+t_roomToAttachTo->m_w==t_x){
				break;
			}
			if(t_roomToAttachTo->m_y==t_y){
				break;
			}
			if(t_roomToAttachTo->m_y+t_roomToAttachTo->m_h==t_y){
				break;
			}
			t_x=t_roomToAttachTo->m_x+c_Util::m_RndIntRangeFromZero(t_roomToAttachTo->m_w,true);
			t_y=t_roomToAttachTo->m_y+c_Util::m_RndIntRangeFromZero(t_roomToAttachTo->m_h,true);
		}
	}else{
		c_Point* t_tileLocation=m_FindTileOfType(98,true);
		t_x=t_tileLocation->m_x;
		t_y=t_tileLocation->m_y;
	}
	int t_numFloor=0;
	if(m_GetTileTypeAt(t_x+1,t_y)==0){
		t_numFloor+=1;
	}
	if(m_GetTileTypeAt(t_x,t_y+1)==0){
		t_numFloor+=1;
	}
	if(m_GetTileTypeAt(t_x-1,t_y)==0){
		t_numFloor+=1;
	}
	if(m_GetTileTypeAt(t_x,t_y-1)==0){
		t_numFloor+=1;
	}
	if(t_numFloor!=1){
		bb_logger_Debug->p_WriteLine2(String(L"Failed to place room for zone 2. Attachment point has ",54)+String(t_numFloor)+String(L" tiles adjacent that are Floor (expected 1).",44));
		return 0;
	}
	int t_moveX=0;
	int t_moveY=0;
	if(m_GetTileTypeAt(t_x+1,t_y)==0){
		t_moveX=-1;
	}
	if(m_GetTileTypeAt(t_x,t_y+1)==0){
		t_moveY=-1;
	}
	if(m_GetTileTypeAt(t_x-1,t_y)==0){
		t_moveX=1;
	}
	if(m_GetTileTypeAt(t_x,t_y-1)==0){
		t_moveY=1;
	}
	bool t_horizontal=true;
	if(t_moveX==0){
		t_horizontal=false;
	}
	m_carveX=t_x;
	m_carveY=t_y;
	if(!m_CarveNewCorridor(t_moveX,t_moveY,t_horizontal,true,false,t_roomType,t_wideCorridor)){
		return 0;
	}
	int t_wVal=c_Util::m_RndIntRange(8,7,true,-1);
	int t_hVal=c_Util::m_RndIntRange(7,6,true,-1);
	int t_133=t_roomType;
	if(t_133==3){
		t_wVal=6;
		t_hVal=8;
	}else{
		if(t_133==5){
			t_wVal=4;
			t_hVal=3;
		}else{
			if(t_133==7){
				t_wVal=4;
				t_hVal=3;
			}
		}
	}
	int t_xVal=0;
	int t_yVal=0;
	int t_xOff=0;
	int t_yOff=0;
	int t_originX=m_carveX;
	int t_originY=m_carveY;
	int t_134=t_moveX;
	if(t_134==-1){
		t_yOff=c_Util::m_RndIntRangeFromZero(t_hVal-2,true);
		if(t_wideCorridor){
			t_yOff=c_Util::m_RndIntRangeFromZero(t_hVal-3,true);
		}
		t_xVal=t_originX-t_wVal;
		t_yVal=t_originY-t_yOff-1;
	}else{
		if(t_134==1){
			t_yOff=c_Util::m_RndIntRangeFromZero(t_hVal-2,true);
			if(t_wideCorridor){
				t_yOff=c_Util::m_RndIntRangeFromZero(t_hVal-3,true);
			}
			t_xVal=t_originX;
			t_yVal=t_originY-t_yOff-1;
		}else{
			t_xOff=c_Util::m_RndIntRangeFromZero(t_wVal-2,true);
			if(t_wideCorridor){
				t_xOff=c_Util::m_RndIntRangeFromZero(t_wVal-3,true);
			}
			t_xVal=t_originX-t_xOff-1;
			t_yVal=t_originY;
			if(t_moveY==-1){
				t_yVal-=t_hVal;
			}
		}
	}
	int t_originX2=t_originX+1;
	int t_originY2=t_originY;
	if(t_horizontal){
		t_originX2=t_originX;
		t_originY2=t_originY+1;
	}
	if(!m_CreateRoom(t_xVal,t_yVal,t_wVal,t_hVal,true,t_roomType,t_originX,t_originY,t_originX2,t_originY2,t_wideCorridor,100,false,true)){
		return 0;
	}
	c_NodeEnumerator* t_=m_pendingTiles->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Node25* t_pendingTilesOnXNode=t_->p_NextObject();
		c_NodeEnumerator2* t_2=t_pendingTilesOnXNode->p_Value()->p_ObjectEnumerator();
		while(t_2->p_HasNext()){
			c_Node26* t_pendingTileNode=t_2->p_NextObject();
			int t_tileX=t_pendingTilesOnXNode->p_Key();
			int t_tileY=t_pendingTileNode->p_Key();
			c_Tile* t_tile=m_GetTileAt(t_tileX,t_tileY);
			int t_tileType=t_pendingTileNode->p_Value()->p_GetType();
			if(t_tile!=0){
				t_tile->p_Die();
			}
			(new c_Tile)->m_new(t_tileX,t_tileY,t_tileType,false,-1);
		}
	}
	int t_135=t_roomType;
	if(t_135==3){
		m_PlaceShopItemsAt(t_xVal,t_yVal,0);
	}else{
		if(t_135==5 || t_135==7){
		}else{
			int t_addDoorRoll=c_Util::m_RndIntRangeFromZero(100,true);
			bool t_addDoor=false;
			int t_136=bb_controller_game_currentLevel;
			if(t_136==1){
				if(t_addDoorRoll<=20){
					t_addDoor=true;
				}
			}else{
				if(t_136==2){
					if(t_addDoorRoll<=15){
						t_addDoor=true;
					}
				}else{
					if(t_136==3){
						if(t_addDoorRoll<=10){
							t_addDoor=true;
						}
					}else{
						if(bb_controller_game_currentLevel>3){
							if(t_addDoorRoll<=5){
								t_addDoor=true;
							}
						}
					}
				}
			}
			if(t_addDoor){
				if(m_isHardcoreMode){
					if(t_wideCorridor){
						(new c_Tile)->m_new(t_originX,t_originY,103,false,-1);
						(new c_Tile)->m_new(t_originX2,t_originY2,103,false,-1);
					}else{
						int t_metalDoorRoll=c_Util::m_RndIntRangeFromZero(8,true);
						if(t_metalDoorRoll==0){
							(new c_Tile)->m_new(t_originX,t_originY,111,false,-1);
						}else{
							(new c_Tile)->m_new(t_originX,t_originY,103,false,-1);
						}
					}
				}else{
					(new c_Tile)->m_new(t_originX,t_originY,103,false,-1);
					if(t_wideCorridor){
						(new c_Tile)->m_new(t_originX2,t_originY2,103,false,-1);
					}
				}
			}else{
				(new c_Tile)->m_new(t_originX,t_originY,1,false,-1);
				if(t_wideCorridor){
					(new c_Tile)->m_new(t_originX2,t_originY2,1,false,-1);
				}
			}
		}
	}
	c_RoomData* t_room=(new c_RoomData)->m_new(t_xVal,t_yVal,t_wVal,t_hVal,m_lastCreatedRoomType,false);
	m_rooms->p_AddLast14(t_room);
	return t_room;
}
c_RoomData* c_Level::m_PlaceRoomZone22(c_RoomData* t_roomToAttachTo){
	return m_PlaceRoomZone2(-1,t_roomToAttachTo);
}
bool c_Level::m_CreateMapZone2(){
	c_RoomData* t_room1=0;
	c_RoomData* t_room2=0;
	c_RoomData* t_room3=0;
	c_RoomData* t_room4=0;
	c_RoomData* t_room5=0;
	c_RoomData* t_room6=0;
	c_RoomData* t_room7=0;
	m_InitNewMap(true);
	t_room1=m_PlaceFirstRoom();
	int t_limit=5000;
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE2: Trying to place room 2",39));
	for(t_limit=t_limit-1;t_limit>0;t_limit=t_limit+-1){
		t_room2=m_PlaceRoomZone22(t_room1);
		if((t_room2)!=0){
			break;
		}
	}
	if(t_limit<=0){
		return m__FailMap();
	}
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE2: Trying to place room 3",39));
	for(t_limit=t_limit-1;t_limit>0;t_limit=t_limit+-1){
		t_room3=m_PlaceRoomZone22(t_room2);
		if((t_room3)!=0){
			break;
		}
	}
	if(t_limit<=0){
		return m__FailMap();
	}
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE2: Trying to place room 4",39));
	for(t_limit=t_limit-1;t_limit>0;t_limit=t_limit+-1){
		t_room4=m_PlaceRoomZone22(t_room3);
		if((t_room4)!=0){
			break;
		}
	}
	if(t_limit<=0){
		return m__FailMap();
	}
	int t_lastRoomIndex=0;
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE2: Trying to place room 5",39));
	for(t_limit=t_limit-1;t_limit>0;t_limit=t_limit+-1){
		for(t_limit=t_limit;t_limit>0;t_limit=t_limit+-1){
			if(c_Util::m_RndIntRangeFromZero(50,true)==0){
				break;
			}
			t_room5=m_PlaceRoomZone22(t_room4);
			if(t_room5!=0){
				t_lastRoomIndex=4;
				break;
			}
		}
		if(t_room5!=0){
			break;
		}
		if(t_limit<=0){
			return m__FailMap();
		}
		if(c_Util::m_RndBool(true)){
			t_room5=m_PlaceRoomZone22(t_room3);
		}else{
			t_room5=m_PlaceRoomZone22(t_room1);
		}
		if(t_room5!=0){
			t_lastRoomIndex=3;
			break;
		}
	}
	if(t_limit<=0){
		return m__FailMap();
	}
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE2: Trying to place room 6",39));
	for(t_limit=t_limit-1;t_limit>0;t_limit=t_limit+-1){
		if(c_Util::m_RndIntRangeFromZero(50,true)!=0){
			t_room6=m_PlaceRoomZone22(t_room1);
		}else{
			if(c_Util::m_RndIntRangeFromZero(10,true)!=0){
				t_room6=m_PlaceRoomZone22(t_room4);
				if(t_room6!=0 && t_lastRoomIndex==3){
					t_lastRoomIndex=5;
				}
			}else{
				t_room6=m_PlaceRoomZone22(t_room5);
				if(t_room6!=0 && t_lastRoomIndex==4){
					t_lastRoomIndex=5;
				}
			}
		}
		if(t_room6!=0){
			break;
		}
	}
	if(t_limit<=0){
		return m__FailMap();
	}
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE2: Trying to place room 7",39));
	if(c_Shrine::m_spaceShrineActive){
		for(t_limit=t_limit-1;t_limit>0;t_limit=t_limit+-1){
			if(c_Util::m_RndBool(true)){
				if(c_Util::m_RndBool(true)){
					t_room7=m_PlaceRoomZone22(t_room1);
				}else{
					t_room7=m_PlaceRoomZone22(t_room3);
				}
			}else{
				if(c_Util::m_RndBool(true)){
					t_room7=m_PlaceRoomZone22(t_room2);
				}else{
					t_room7=m_PlaceRoomZone22(t_room4);
					if(((t_room7)!=0) && t_lastRoomIndex==3){
						t_lastRoomIndex=6;
					}
				}
			}
			if((t_room7)!=0){
				break;
			}
		}
	}
	if(t_limit<=0){
		return m__FailMap();
	}
	c_RoomData* t_lastRoom=t_room4;
	int t_20=t_lastRoomIndex;
	if(t_20==4){
		t_lastRoom=t_room5;
	}else{
		if(t_20==5){
			t_lastRoom=t_room6;
		}else{
			if(t_20==6){
				t_lastRoom=t_room7;
			}
		}
	}
	t_lastRoom->m_hasExit=true;
	if(!m_PlaceExit(t_lastRoom)){
		return false;
	}
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE2: Deploying NPCs if necessary",44));
	bool t_deployNPC=false;
	int t_21=bb_controller_game_currentLevel;
	if(t_21==2){
		if(!c_GameData::m_GetNPCUnlock(String(L"weaponmaster",12))){
			t_deployNPC=true;
		}
	}else{
		if(t_21==3){
			if(!c_GameData::m_GetNPCUnlock(String(L"diamonddealer",13))){
				t_deployNPC=true;
			}
		}
	}
	if(!m_isHardcoreMode && !m_isDDRMode && !m_isLevelEditor && t_deployNPC){
		int t_x=0;
		int t_y=0;
		for(t_limit=t_limit-1;t_limit>0;t_limit=t_limit+-1){
			t_x=t_room3->m_x+c_Util::m_RndIntRangeFromZero(t_room3->m_w-1,false);
			t_y=t_room3->m_y+c_Util::m_RndIntRangeFromZero(t_room3->m_h-1,false);
			c_Tile* t_tile=m_GetTileAt(t_x,t_y);
			if(t_tile!=0){
				if(t_tile->p_GetType()==0 && !m_IsCorridorFloorOrDoorAdjacent(t_x,t_y)){
					t_tile=m_GetTileAt(t_x,t_y+1);
					if(t_tile!=0 && !t_tile->p_IsWall2()){
						break;
					}
				}
			}
		}
		c_NPC* t_npc=0;
		int t_22=bb_controller_game_currentLevel;
		if(t_22==2){
			t_npc=((new c_Weaponmaster)->m_new(t_x,t_y,1,true));
		}else{
			if(t_22==3){
				t_npc=((new c_DiamondDealer)->m_new(t_x,t_y,1,true));
			}
		}
		if(t_npc!=0){
			bb_logger_Debug->p_Log(String(L"CREATEMAP: NPC placed at ",25)+String(t_npc->m_x)+String(L", ",2)+String(t_npc->m_y));
		}
	}
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE2: Placing shop",29));
	for(t_limit=t_limit-1;t_limit>0;t_limit=t_limit+-1){
		c_RoomData* t_shop=m_PlaceRoomZone2(3,0);
		if(t_shop!=0){
			break;
		}
	}
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE2: Removing some wall tiles",41));
	m_RemoveSomeWallsAwayFromCorridors(FLOAT(0.025),false,1);
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE2: Filling out walls surrounding all floor",56));
	c_NodeEnumerator* t_=m_tiles->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Node25* t_tilesOnXNode=t_->p_NextObject();
		c_NodeEnumerator2* t_2=t_tilesOnXNode->p_Value()->p_ObjectEnumerator();
		while(t_2->p_HasNext()){
			c_Node26* t_tileNode=t_2->p_NextObject();
			c_Tile* t_tile2=t_tileNode->p_Value();
			if(t_tile2->p_IsFloor()){
				for(int t_y2=t_tile2->m_y-1;t_y2<=t_tile2->m_y+1;t_y2=t_y2+1){
					for(int t_x2=t_tile2->m_x+1;t_x2>=t_tile2->m_x-1;t_x2=t_x2+-1){
						if(t_x2==t_tile2->m_x && t_y2==t_tile2->m_y){
							continue;
						}
						if(m_GetTileAt(t_x2,t_y2)==0){
							(new c_Tile)->m_new(t_x2,t_y2,101,false,-1);
						}
					}
				}
			}
		}
	}
	m_PadWalls();
	m_ProcessSpecialRoom();
	if(!m_isLevelEditor){
		m_CreateIndestructibleBorder();
	}
	if(m_isHardcoreMode){
		m_chestsStillToPlace=1;
	}else{
		m_chestsStillToPlace=2;
		int t_threeChestsRoll=c_Util::m_RndIntRangeFromZero(100,true);
		if(t_threeChestsRoll<=19){
			m_chestsStillToPlace=3;
		}
	}
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE2: Placing secret rooms",37));
	m_PlaceSecretRooms(4);
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE2: Filling secret rooms",37));
	if(!m_FillSecretRooms()){
		return m__FailMap();
	}
	if(!m_isHardcoreMode){
		m_chestsStillToPlace=bb_math_Max(m_chestsStillToPlace,1);
	}
	m_AddStone();
	m_PlaceTraps();
	m_PlaceEnemies();
	c_Enemy::m_SetAllEnemiesMinimumMoveDistance(5);
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE2: Placing one speedup or slowdown trap",53));
	c_Trap* t_trap=0;
	for(int t_i=500;t_i>0;t_i=t_i+-1){
		t_trap=c_Trap::m_FindRandomTrap();
		if(t_trap!=0){
			if(t_trap->m_canBeReplacedByTempoTrap && t_trap->m_trapType==1){
				break;
			}
		}
	}
	if(t_trap!=0){
		int t_trapX=t_trap->m_x;
		int t_trapY=t_trap->m_y;
		t_trap->p_Die();
		if(c_Util::m_RndBool(true)){
			(new c_SpeedUpTrap)->m_new(t_trapX,t_trapY);
			bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE2: Speedup trap placed at ",40)+String(t_trapX)+String(L"/",1)+String(t_trap->m_y));
		}else{
			(new c_SlowDownTrap)->m_new(t_trapX,t_trapY);
			bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE2: Slowdown trap placed at ",41)+String(t_trapX)+String(L"/",1)+String(t_trap->m_y));
		}
	}
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE2: Placing glowing mushrooms",42));
	c_List14* t_anotherRooms=(new c_List14)->m_new();
	c_Enumerator26* t_3=m_rooms->p_ObjectEnumerator();
	while(t_3->p_HasNext()){
		c_RoomData* t_room=t_3->p_NextObject();
		t_anotherRooms->p_AddLast14(t_room);
	}
	if(c_Util::m_RndBool(true)){
		(new c_MushroomLight)->m_new2(t_room1->m_x+2,t_room1->m_y+2,1,true);
		(new c_MushroomLight)->m_new2(t_room1->m_x+t_room1->m_w-2,t_room1->m_y+t_room1->m_h-2,1,true);
	}else{
		(new c_MushroomLight)->m_new2(t_room1->m_x+t_room1->m_w-2,t_room1->m_y+2,1,true);
		(new c_MushroomLight)->m_new2(t_room1->m_x+2,t_room1->m_y+t_room1->m_h-2,1,true);
	}
	c_Enumerator26* t_4=t_anotherRooms->p_ObjectEnumerator();
	while(t_4->p_HasNext()){
		c_RoomData* t_room8=t_4->p_NextObject();
		if(t_room8->m_type==3){
			if(!m_IsCorridorFloorOrDoorAdjacent(t_room8->m_x+1,t_room8->m_y+1)){
				(new c_MushroomLight)->m_new(t_room8->m_x+1,t_room8->m_y+1,1,false,false);
			}
			if(!m_IsCorridorFloorOrDoorAdjacent(t_room8->m_x+t_room8->m_w-1,t_room8->m_y+1)){
				(new c_MushroomLight)->m_new(t_room8->m_x+t_room8->m_w-1,t_room8->m_y+1,1,false,false);
			}
			if(!m_IsCorridorFloorOrDoorAdjacent(t_room8->m_x+t_room8->m_w-1,t_room8->m_y+t_room8->m_h-1)){
				(new c_MushroomLight)->m_new(t_room8->m_x+t_room8->m_w-1,t_room8->m_y+t_room8->m_h-1,1,false,false);
			}
			if(!m_IsCorridorFloorOrDoorAdjacent(t_room8->m_x+1,t_room8->m_y+t_room8->m_h-1)){
				(new c_MushroomLight)->m_new(t_room8->m_x+1,t_room8->m_y+t_room8->m_h-1,1,false,false);
			}
		}
	}
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE2: Placing torches",32));
	int t_minTorch=0;
	int t_maxTorch=0;
	int t_23=bb_controller_game_currentLevel;
	if(t_23==2){
		t_minTorch=1;
		t_maxTorch=2;
	}else{
		if(bb_controller_game_currentLevel<2){
			t_minTorch=1;
		}else{
			t_minTorch=0;
		}
		t_maxTorch=2*t_minTorch+1;
	}
	t_anotherRooms=(new c_List14)->m_new();
	c_Enumerator26* t_5=m_rooms->p_ObjectEnumerator();
	while(t_5->p_HasNext()){
		c_RoomData* t_room9=t_5->p_NextObject();
		t_anotherRooms->p_AddLast14(t_room9);
	}
	t_anotherRooms->p_AddLast14(t_room1);
	c_Enumerator26* t_6=t_anotherRooms->p_ObjectEnumerator();
	while(t_6->p_HasNext()){
		c_RoomData* t_room10=t_6->p_NextObject();
		int t_numTorch=c_Util::m_RndIntRange(t_minTorch,t_maxTorch,true,-1);
		int t_i2=0;
		Float t_minTorchDistance=FLOAT(.0);
		if(t_room10->m_type!=3){
			if(t_numTorch<=0){
				continue;
			}
			t_i2=50;
		}
		for(t_i2=t_i2-1;t_i2>0;t_i2=t_i2+-1){
			c_Point* t_wallLocation=m_GetRandomWallInRoom(t_room10->m_x,t_room10->m_y,t_room10->m_w,t_room10->m_h);
			c_Tile* t_wall=m_GetTileAt(t_wallLocation->m_x,t_wallLocation->m_y);
			if(t_wall!=0 && !t_wall->p_IsDoor() && m_GetDistanceToNearestTorch(t_wall)>=FLOAT(3.5)){
				t_wall->p_AddTorch();
				t_numTorch-=1;
			}
			if(t_numTorch<=0){
				break;
			}
		}
	}
	m_PlaceCrateOrBarrel();
	m_PlaceChests(false);
	m_PlaceResourceWall();
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE2: Adding fake walls (if any)",43));
	int t_i3=50;
	int t_numFakeWall=c_Util::m_RndIntRangeFromZero(3,true);
	for(int t_i4=t_i3-1;t_i4>0;t_i4=t_i4+-1){
		if(t_numFakeWall<=0){
			break;
		}
		c_Point* t_dirtWallLocation=m_FindTileOfType2(100);
		if(t_dirtWallLocation==0){
			continue;
		}
		c_Tile* t_dirtWall=m_GetTileAt(t_dirtWallLocation->m_x,t_dirtWallLocation->m_y);
		if(t_dirtWall==0){
			continue;
		}
		if(t_dirtWallLocation->m_x>3 || t_dirtWallLocation->m_y>3){
			m_PlaceTileRemovingExistingTiles(t_dirtWall->m_x,t_dirtWall->m_y,0,false,-1,false);
			(new c_FakeWall)->m_new(t_dirtWall->m_x,t_dirtWall->m_y,1);
			bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE2: Added fake wall at ",36)+String(t_dirtWall->m_x)+String(L", ",2)+String(t_dirtWall->m_y));
			t_numFakeWall-=1;
		}
	}
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE2: Adding tar monsters (if any)",45));
	if(m_isAnyTar){
		c_Point* t_tarLocation=m_FindTileOfType2(8);
		if(t_tarLocation!=0){
			if(m_GetTileAt(t_tarLocation->m_x,t_tarLocation->m_y)!=0 && !c_Util::m_IsGlobalCollisionAt(t_tarLocation->m_x,t_tarLocation->m_y,false,false,false,false,false)){
				if(c_Util::m_RndBool(true)){
					(new c_TarMonster)->m_new(t_tarLocation->m_x,t_tarLocation->m_y,1);
					bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE2: Added tar monster at ",38)+String(t_tarLocation->m_x)+String(L", ",2)+String(t_tarLocation->m_y));
				}
			}
		}
	}
	m_PlaceLockedChests();
	m_PlaceShrine();
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE2: Cleaning up pending tiles",42));
	c_Tile::m_CleanUpPendingTiles();
	m_PlaceNocturnaArea();
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE2: Finished!",26));
	return true;
}
c_RoomData* c_Level::m__PlaceRoom(int t_xVal,int t_yVal,int t_width,int t_height){
	c_RoomData* t_room=(new c_RoomData)->m_new(t_xVal,t_yVal,t_width,t_height,m_lastCreatedRoomType,false);
	m_rooms->p_AddLast14(t_room);
	return t_room;
}
c_RoomData* c_Level::m_PlaceRoomZone1(int t_roomType,c_RoomData* t_roomToAttachTo){
	m_pendingTiles->p_Clear();
	c_Tile::m_CleanUpPendingTiles();
	int t_wideCorridorRoll=c_Util::m_RndIntRangeFromZero(100,true);
	bool t_wideCorridor=false;
	if(bb_controller_game_currentLevel==2 && t_wideCorridorRoll<=30){
		t_wideCorridor=true;
	}
	if(bb_controller_game_currentLevel==3 && t_wideCorridorRoll<=60){
		t_wideCorridor=true;
	}
	if(bb_controller_game_currentLevel==4 && t_wideCorridorRoll<=80){
		t_wideCorridor=true;
	}
	if(bb_controller_game_currentLevel>4 && t_wideCorridorRoll<=90){
		t_wideCorridor=true;
	}
	int t_130=t_roomType;
	if(t_130==3 || t_130==5 || t_130==7){
		t_wideCorridor=false;
	}
	int t_x=0;
	int t_y=0;
	if((t_roomToAttachTo)!=0){
		while(true){
			if(t_roomToAttachTo->m_x==t_x){
				break;
			}
			if(t_roomToAttachTo->m_x+t_roomToAttachTo->m_w==t_x){
				break;
			}
			if(t_roomToAttachTo->m_y==t_y){
				break;
			}
			if(t_roomToAttachTo->m_y+t_roomToAttachTo->m_h==t_y){
				break;
			}
			t_x=1+t_roomToAttachTo->m_x+c_Util::m_RndIntRangeFromZero(t_roomToAttachTo->m_w-1,true);
			t_y=1+t_roomToAttachTo->m_y+c_Util::m_RndIntRangeFromZero(t_roomToAttachTo->m_h-1,true);
		}
	}else{
		c_Point* t_tileLocation=m_FindTileOfType(98,true);
		t_x=t_tileLocation->m_x;
		t_y=t_tileLocation->m_y;
	}
	int t_numFloor=0;
	if(m_GetTileTypeAt(t_x+1,t_y)==0){
		t_numFloor+=1;
	}
	if(m_GetTileTypeAt(t_x,t_y+1)==0){
		t_numFloor+=1;
	}
	if(m_GetTileTypeAt(t_x-1,t_y)==0){
		t_numFloor+=1;
	}
	if(m_GetTileTypeAt(t_x,t_y-1)==0){
		t_numFloor+=1;
	}
	if(t_numFloor!=1){
		bb_logger_Debug->p_WriteLine2(String(L"Failed to place room for zone 1. Attachment point has ",54)+String(t_numFloor)+String(L" tiles adjacent that are Floor (expected 1).",44));
		return 0;
	}
	int t_moveX=0;
	int t_moveY=0;
	if(m_GetTileTypeAt(t_x+1,t_y)==0){
		t_moveX=-1;
	}
	if(m_GetTileTypeAt(t_x,t_y+1)==0){
		t_moveY=-1;
	}
	if(m_GetTileTypeAt(t_x-1,t_y)==0){
		t_moveX=1;
	}
	if(m_GetTileTypeAt(t_x,t_y-1)==0){
		t_moveY=1;
	}
	bool t_horizontal=true;
	if(t_moveX==0){
		t_horizontal=false;
	}
	m_carveX=t_x;
	m_carveY=t_y;
	if(!m_CarveNewCorridor(t_moveX,t_moveY,t_horizontal,true,false,t_roomType,t_wideCorridor)){
		return 0;
	}
	for(int t_i=0;t_i<2;t_i=t_i+1){
		if(c_Util::m_RndBool(true)){
			if(!m_IsFloorAt(m_carveX,m_carveY)){
				(new c_Tile)->m_new(m_carveX,m_carveY,101,true,-1);
			}
			if(t_horizontal){
				if(!m_IsFloorAt(m_carveX,m_carveY-1)){
					(new c_Tile)->m_new(m_carveX,m_carveY-1,101,true,-1);
				}
				if(!m_IsFloorAt(m_carveX,m_carveY+1)){
					(new c_Tile)->m_new(m_carveX,m_carveY+1,101,true,-1);
				}
				m_carveX-=t_moveX;
				m_carveY-=t_moveY;
				t_moveX=0;
				t_moveY=-1;
				if(c_Util::m_RndBool(true)){
					t_moveY=1;
				}
			}else{
				if(!m_IsFloorAt(m_carveX-1,m_carveY)){
					(new c_Tile)->m_new(m_carveX-1,m_carveY,101,true,-1);
				}
				if(!m_IsFloorAt(m_carveX+1,m_carveY)){
					(new c_Tile)->m_new(m_carveX+1,m_carveY,101,true,-1);
				}
				m_carveX-=t_moveX;
				m_carveY-=t_moveY;
				t_moveX=-1;
				t_moveY=0;
				if(c_Util::m_RndBool(true)){
					t_moveX=1;
				}
			}
			t_horizontal=!t_horizontal;
			if(!m_CarveNewCorridor(t_moveX,t_moveY,t_horizontal,true,true,t_roomType,t_wideCorridor)){
				return 0;
			}
		}
	}
	int t_width=c_Util::m_RndIntRange(6,8,true,-1);
	int t_height=c_Util::m_RndIntRange(5,7,true,-1);
	if(t_roomType==3){
		t_width=6;
		t_height=8;
	}
	if(m_IsSecretRoom(t_roomType)){
		t_width=4;
		t_height=3;
	}
	int t_xVal=0;
	int t_yVal=0;
	int t_xOff=0;
	int t_yOff=0;
	int t_originX=m_carveX;
	int t_originY=m_carveY;
	int t_131=t_moveX;
	if(t_131==-1){
		t_yOff=c_Util::m_RndIntRangeFromZero(t_height-2,true);
		if(t_wideCorridor){
			t_yOff=c_Util::m_RndIntRangeFromZero(t_height-3,true);
		}
		t_xVal=t_originX-t_width;
		t_yVal=t_originY-t_yOff-1;
	}else{
		if(t_131==1){
			t_yOff=c_Util::m_RndIntRangeFromZero(t_height-2,true);
			if(t_wideCorridor){
				t_yOff=c_Util::m_RndIntRangeFromZero(t_height-3,true);
			}
			t_xVal=t_originX;
			t_yVal=t_originY-t_yOff-1;
		}else{
			t_xOff=c_Util::m_RndIntRangeFromZero(t_width-2,true);
			if(t_wideCorridor){
				t_xOff=c_Util::m_RndIntRangeFromZero(t_width-3,true);
			}
			t_xVal=t_originX-t_xOff-1;
			t_yVal=t_originY;
			if(t_moveY==-1){
				t_yVal-=t_height;
			}
		}
	}
	int t_originX2=t_originX+1;
	int t_originY2=t_originY;
	if(t_horizontal){
		t_originX2=t_originX;
		t_originY2=t_originY+1;
	}
	if(!m_CreateRoom(t_xVal,t_yVal,t_width,t_height,true,t_roomType,t_originX,t_originY,t_originX2,t_originY2,t_wideCorridor,100,false,true)){
		return 0;
	}
	c_NodeEnumerator* t_=m_pendingTiles->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Node25* t_pendingTilesOnXNode=t_->p_NextObject();
		c_NodeEnumerator2* t_2=t_pendingTilesOnXNode->p_Value()->p_ObjectEnumerator();
		while(t_2->p_HasNext()){
			c_Node26* t_pendingTileNode=t_2->p_NextObject();
			int t_tileX=t_pendingTilesOnXNode->p_Key();
			int t_tileY=t_pendingTileNode->p_Key();
			c_Tile* t_tile=m_GetTileAt(t_tileX,t_tileY);
			int t_tileType=t_pendingTileNode->p_Value()->p_GetType();
			if((t_tile)!=0){
				t_tile->p_Die();
			}
			(new c_Tile)->m_new(t_tileX,t_tileY,t_tileType,false,-1);
		}
	}
	if(t_roomType==3){
		m_PlaceShopItemsAt(t_xVal,t_yVal,0);
		return m__PlaceRoom(t_xVal,t_yVal,t_width,t_height);
	}
	if(m_IsSecretRoom(t_roomType)){
		return m__PlaceRoom(t_xVal,t_yVal,t_width,t_height);
	}
	int t_addDoorRoll=c_Util::m_RndIntRangeFromZero(100,true);
	bool t_addDoor=false;
	if(bb_controller_game_currentLevel==1 && t_addDoorRoll<=80){
		t_addDoor=true;
	}
	if(bb_controller_game_currentLevel==2 && t_addDoorRoll<=70){
		t_addDoor=true;
	}
	if(bb_controller_game_currentLevel==3 && t_addDoorRoll<=60){
		t_addDoor=true;
	}
	if(bb_controller_game_currentLevel>3 && t_addDoorRoll<=50){
		t_addDoor=true;
	}
	if(t_addDoor && m_isHardcoreMode && !t_wideCorridor){
		if((c_Util::m_RndIntRangeFromZero(8,true))!=0){
			(new c_Tile)->m_new(t_originX,t_originY,103,false,-1);
		}else{
			(new c_Tile)->m_new(t_originX,t_originY,111,false,-1);
		}
		return m__PlaceRoom(t_xVal,t_yVal,t_width,t_height);
	}
	int t_tileType2=0;
	if(t_addDoor){
		t_tileType2=103;
	}else{
		t_tileType2=1;
	}
	(new c_Tile)->m_new(t_originX,t_originY,t_tileType2,false,-1);
	if(t_wideCorridor){
		(new c_Tile)->m_new(t_originX2,t_originY2,t_tileType2,false,-1);
	}
	return m__PlaceRoom(t_xVal,t_yVal,t_width,t_height);
}
c_RoomData* c_Level::m_PlaceRoomZone12(c_RoomData* t_roomToAttachTo){
	return m_PlaceRoomZone1(-1,t_roomToAttachTo);
}
bool c_Level::m_CreateMapZone1(){
	c_RoomData* t_room1=0;
	c_RoomData* t_room2=0;
	c_RoomData* t_room3=0;
	c_RoomData* t_room4=0;
	c_RoomData* t_room5=0;
	c_RoomData* t_room6=0;
	c_RoomData* t_room7=0;
	m_InitNewMap(true);
	t_room1=m_PlaceFirstRoom();
	int t_limit=5000;
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE1: Trying to place room 2",39));
	for(t_limit=t_limit-1;t_limit>0;t_limit=t_limit+-1){
		t_room2=m_PlaceRoomZone12(t_room1);
		if((t_room2)!=0){
			break;
		}
	}
	if(t_limit<=0){
		return m__FailMap();
	}
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE1: Trying to place room 3",39));
	for(t_limit=t_limit-1;t_limit>0;t_limit=t_limit+-1){
		t_room3=m_PlaceRoomZone12(t_room2);
		if((t_room3)!=0){
			break;
		}
	}
	if(t_limit<=0){
		return m__FailMap();
	}
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE1: Trying to place room 4",39));
	for(t_limit=t_limit-1;t_limit>0;t_limit=t_limit+-1){
		t_room4=m_PlaceRoomZone12(t_room3);
		if((t_room4)!=0){
			break;
		}
	}
	if(t_limit<=0){
		return m__FailMap();
	}
	int t_lastRoomIndex=0;
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE1: Trying to place room 5",39));
	for(t_limit=t_limit-1;t_limit>0;t_limit=t_limit+-1){
		for(t_limit=t_limit;t_limit>0;t_limit=t_limit+-1){
			if(c_Util::m_RndIntRangeFromZero(50,true)==0){
				break;
			}
			t_room5=m_PlaceRoomZone12(t_room4);
			if(t_room5!=0){
				t_lastRoomIndex=4;
				break;
			}
		}
		if(t_room5!=0){
			break;
		}
		if(t_limit<=0){
			return m__FailMap();
		}
		if(c_Util::m_RndBool(true)){
			t_room5=m_PlaceRoomZone12(t_room3);
		}else{
			t_room5=m_PlaceRoomZone12(t_room1);
		}
		if(t_room5!=0){
			t_lastRoomIndex=3;
			break;
		}
	}
	if(t_limit<=0){
		return m__FailMap();
	}
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE1: Trying to place room 6",39));
	for(t_limit=t_limit-1;t_limit>0;t_limit=t_limit+-1){
		if(c_Util::m_RndIntRangeFromZero(50,true)!=0){
			t_room6=m_PlaceRoomZone12(t_room1);
		}else{
			if(c_Util::m_RndIntRangeFromZero(10,true)!=0){
				t_room6=m_PlaceRoomZone12(t_room4);
				if(t_room6!=0 && t_lastRoomIndex==3){
					t_lastRoomIndex=5;
				}
			}else{
				t_room6=m_PlaceRoomZone12(t_room5);
				if(t_room6!=0 && t_lastRoomIndex==4){
					t_lastRoomIndex=5;
				}
			}
		}
		if(t_room6!=0){
			break;
		}
	}
	if(t_limit<=0){
		return m__FailMap();
	}
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE1: Trying to place room 7",39));
	if(c_Shrine::m_spaceShrineActive){
		for(t_limit=t_limit-1;t_limit>0;t_limit=t_limit+-1){
			if(c_Util::m_RndBool(true)){
				if(c_Util::m_RndBool(true)){
					t_room7=m_PlaceRoomZone12(t_room1);
				}else{
					t_room7=m_PlaceRoomZone12(t_room3);
				}
			}else{
				if(c_Util::m_RndBool(true)){
					t_room7=m_PlaceRoomZone12(t_room2);
				}else{
					t_room7=m_PlaceRoomZone12(t_room4);
					if(((t_room7)!=0) && t_lastRoomIndex==3){
						t_lastRoomIndex=6;
					}
				}
			}
			if((t_room7)!=0){
				break;
			}
		}
	}
	if(t_limit<=0){
		return m__FailMap();
	}
	c_RoomData* t_lastRoom=t_room4;
	int t_16=t_lastRoomIndex;
	if(t_16==4){
		t_lastRoom=t_room5;
	}else{
		if(t_16==5){
			t_lastRoom=t_room6;
		}else{
			if(t_16==6){
				t_lastRoom=t_room7;
			}
		}
	}
	t_lastRoom->m_hasExit=true;
	if(!m_PlaceExit(t_lastRoom)){
		return false;
	}
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE1: Deploying NPCs if necessary",44));
	bool t_deployNPC=false;
	int t_17=bb_controller_game_currentLevel;
	if(t_17==1){
		if(!c_GameData::m_GetNPCUnlock(String(L"beastmaster",11))){
			t_deployNPC=true;
		}
	}else{
		if(t_17==2){
			if(!c_GameData::m_GetNPCUnlock(String(L"merlin",6))){
				t_deployNPC=true;
			}
		}else{
			if(t_17==3){
				if(!c_GameData::m_GetNPCUnlock(String(L"bossmaster",10))){
					t_deployNPC=true;
				}
			}
		}
	}
	if(!m_isHardcoreMode && !m_isDDRMode && !m_isLevelEditor && t_deployNPC){
		int t_x=0;
		int t_y=0;
		for(t_limit=t_limit-1;t_limit>0;t_limit=t_limit+-1){
			t_x=t_room3->m_x+c_Util::m_RndIntRangeFromZero(t_room3->m_w-1,false);
			t_y=t_room3->m_y+c_Util::m_RndIntRangeFromZero(t_room3->m_h-1,false);
			c_Tile* t_tile=m_GetTileAt(t_x,t_y);
			if((t_tile)!=0){
				if(t_tile->p_GetType()!=0 && !m_IsCorridorFloorOrDoorAdjacent(t_x,t_y)){
					t_tile=m_GetTileAt(t_x,t_y+1);
					if(((t_tile)!=0) && !t_tile->p_IsWall(false,false,false,false)){
						break;
					}
				}
			}
		}
		if(t_limit<=0){
			return m__FailMap();
		}
		c_NPC* t_npc=0;
		int t_18=bb_controller_game_currentLevel;
		if(t_18==1){
			t_npc=((new c_Beastmaster)->m_new(t_x,t_y,1,true));
		}else{
			if(t_18==2){
				t_npc=((new c_Merlin)->m_new(t_x,t_y,1,true));
			}else{
				if(t_18==3){
					t_npc=((new c_Bossmaster)->m_new(t_x,t_y,1,true));
				}
			}
		}
		if((t_npc)!=0){
			bb_logger_Debug->p_Log(String(L"CREATEMAP: NPC placed at ",25)+String(t_npc->m_x)+String(L", ",2)+String(t_npc->m_y));
		}
	}
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE1: Placing shop",29));
	for(t_limit=t_limit-1;t_limit>0;t_limit=t_limit+-1){
		c_RoomData* t_shop=m_PlaceRoomZone1(3,0);
		if(t_shop!=0){
			break;
		}
	}
	if(t_limit<=0){
		return m__FailMap();
	}
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE1: Filling out walls surrounding all floor",56));
	c_NodeEnumerator* t_=m_tiles->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Node25* t_tilesOnXNode=t_->p_NextObject();
		c_NodeEnumerator2* t_2=t_tilesOnXNode->p_Value()->p_ObjectEnumerator();
		while(t_2->p_HasNext()){
			c_Node26* t_tileNode=t_2->p_NextObject();
			c_Tile* t_tile2=t_tileNode->p_Value();
			if(t_tile2->p_IsFloor()){
				for(int t_y2=t_tile2->m_y-1;t_y2<=t_tile2->m_y+1;t_y2=t_y2+1){
					for(int t_x2=t_tile2->m_x-1;t_x2<=t_tile2->m_x+1;t_x2=t_x2+1){
						if(!((m_GetTileAt(t_x2,t_y2))!=0)){
							(new c_Tile)->m_new(t_x2,t_y2,101,false,-1);
						}
					}
				}
			}
		}
	}
	m_PadWalls();
	m_ProcessSpecialRoom();
	if(!m_isLevelEditor){
		m_CreateIndestructibleBorder();
	}
	if(m_isHardcoreMode){
		m_chestsStillToPlace=1;
	}else{
		m_chestsStillToPlace=c_Util::m_RndIntRange(1,2,true,-1);
	}
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE1: Placing secret rooms",37));
	m_PlaceSecretRooms(4);
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE1: Filling secret rooms.  Chests remaining: ",58)+String(m_chestsStillToPlace));
	if(!m_FillSecretRooms()){
		return m__FailMap();
	}
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE1: Finished filling secret rooms!  Chests remaining: ",67)+String(m_chestsStillToPlace));
	if(!m_isHardcoreMode){
		m_chestsStillToPlace=1;
		if(bb_controller_game_currentLevel<=2){
			m_chestsStillToPlace=2;
		}
	}
	m_AddStone();
	m_PlaceTraps();
	m_PlaceEnemies();
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE1: Placing one speedup or slowdown trap",53));
	c_Trap* t_trap=0;
	for(int t_i=500;t_i>0;t_i=t_i+-1){
		t_trap=c_Trap::m_FindRandomTrap();
		if(t_trap!=0){
			if(t_trap->m_canBeReplacedByTempoTrap && t_trap->m_trapType==1){
				break;
			}
		}
	}
	if(t_trap!=0){
		t_trap->p_Die();
		if(c_Util::m_RndBool(true)){
			(new c_SpeedUpTrap)->m_new(t_trap->m_x,t_trap->m_y);
			bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE1: Speedup trap placed at ",40)+String(t_trap->m_x)+String(L", ",2)+String(t_trap->m_y));
		}else{
			(new c_SlowDownTrap)->m_new(t_trap->m_x,t_trap->m_y);
			bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE1: Slowdown trap placed at ",41)+String(t_trap->m_x)+String(L", ",2)+String(t_trap->m_y));
		}
	}
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE1: Placing torches",32));
	int t_minTorch=4;
	int t_19=bb_controller_game_currentLevel;
	if(t_19==2){
		t_minTorch=3;
	}else{
		if(t_19==3){
			t_minTorch=2;
		}else{
			if(t_19==4){
				t_minTorch=1;
			}else{
				if(bb_controller_game_currentLevel>4){
					t_minTorch=0;
				}
			}
		}
	}
	int t_maxTorch=t_minTorch+1;
	c_List14* t_rooms=(new c_List14)->m_new();
	c_Enumerator26* t_3=m_rooms->p_ObjectEnumerator();
	while(t_3->p_HasNext()){
		c_RoomData* t_room=t_3->p_NextObject();
		t_rooms->p_AddLast14(t_room);
	}
	t_rooms->p_AddLast14(t_room1);
	c_Enumerator26* t_4=t_rooms->p_ObjectEnumerator();
	while(t_4->p_HasNext()){
		c_RoomData* t_room8=t_4->p_NextObject();
		int t_numTorch=c_Util::m_RndIntRange(t_minTorch,t_maxTorch,true,-1);
		int t_i2=0;
		Float t_minTorchDistance=FLOAT(.0);
		if(t_room8->m_type==3){
			t_numTorch=20;
			t_i2=200;
			t_minTorchDistance=FLOAT(2.0);
		}else{
			if(t_numTorch<=0){
				continue;
			}
			t_i2=50;
			t_minTorchDistance=FLOAT(3.5);
		}
		for(t_i2=t_i2-1;t_i2>0;t_i2=t_i2+-1){
			c_Point* t_wall=m_GetRandomWallInRoom(t_room8->m_x,t_room8->m_y,t_room8->m_w,t_room8->m_h);
			c_Tile* t_wallTile=m_GetTileAt(t_wall->m_x,t_wall->m_y);
			if(((t_wallTile)!=0) && !t_wallTile->p_IsDoor() && t_minTorchDistance<=m_GetDistanceToNearestTorch(t_wallTile)){
				t_wallTile->p_AddTorch();
				t_numTorch-=1;
			}
			if(t_numTorch<=0){
				break;
			}
		}
	}
	m_PlaceCrateOrBarrel();
	bool t_freeBroadsword=bb_controller_game_currentLevel==1;
	m_PlaceChests(t_freeBroadsword);
	m_PlaceResourceWall();
	m_PlaceLockedChests();
	m_PlaceShrine();
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE1: Cleaning up pending tiles",42));
	c_Tile::m_CleanUpPendingTiles();
	m_PlaceNocturnaArea();
	bb_logger_Debug->p_Log(String(L"CREATEMAP ZONE1: Finished!",26));
	return true;
}
bool c_Level::m_IsPassable(){
	c_IntPointList* t_points=(new c_IntPointList)->m_new();
	c_IntPointSet* t_visitedPoints=(new c_IntPointSet)->m_new();
	c_Point* t_startPoint=(new c_Point)->m_new(0,0);
	t_points->p_AddLast26(t_startPoint);
	t_visitedPoints->p_Insert9(t_startPoint);
	while(!t_points->p_IsEmpty()){
		c_Point* t_point=t_points->p_RemoveFirst();
		for(int t_dir=0;t_dir<=3;t_dir=t_dir+1){
			c_Point* t_offset=c_Util::m_GetPointFromDir(t_dir);
			c_Point* t_nextPoint=t_point->p_Add5(t_offset);
			int t_x=t_nextPoint->m_x;
			int t_y=t_nextPoint->m_y;
			if(!t_visitedPoints->p_Contains5(t_nextPoint)){
				if(m_IsExit(t_x,t_y)){
					return true;
				}
				c_Tile* t_tile=m_GetTileAt(t_x,t_y);
				if(t_tile!=0){
					if(t_tile->p_IsFloor() || t_tile->m_type==100 || t_tile->m_type==101 || t_tile->p_IsDoor()){
						if(c_Trap::m_GetTrapAt(t_x,t_y)!=0){
							continue;
						}
						if(c_Shrine::m_GetShrineAt(t_x,t_y)!=0){
							continue;
						}
						t_points->p_AddLast26(t_nextPoint);
						t_visitedPoints->p_Insert9(t_nextPoint);
					}
				}
			}
		}
	}
	return false;
}
bool c_Level::m_CreateMap(c_LevelObject* t_levelObj){
	if(bb_controller_game_currentLevel==1){
		m_previousLevelMinibosses->p_Clear();
		m_previousLevelUnkilledStairLockingMinibosses->p_Clear();
		m_skipNextPenaltyBox=false;
		if(bb_controller_game_currentDepth==1){
			c_SaleItem::m_lastSaleItemClass1=String();
			c_SaleItem::m_lastSaleItemClass2=String();
			c_Item::m_lastChestItemClass1=String();
			c_Item::m_lastChestItemClass2=String();
			c_Chest::m_lastChestColor=0;
			c_Chest::m_lastChestColor2=0;
			gc_assign(c_Crate::m_fallenCrates,(new c_List5)->m_new());
			gc_assign(c_Crate::m_fallenGargoyles,(new c_List6)->m_new());
			gc_assign(c_SaleItem::m_randomSaleItemList,(new c_List7)->m_new());
			gc_assign(c_Spells::m_spellCoolKills,(new c_StringMap3)->m_new());
		}
	}
	if(m_placeShrinerOnLevel==-1){
		int t_level=-1;
		int t_depth=-1;
		while(!m_IsFreeLevelForSpecialRoom(t_level,t_depth)){
			t_level=c_Util::m_RndIntRange(1,3,true,-1);
			t_depth=c_Util::m_RndIntRange(1,5,true,-1);
		}
		m_placeShrinerOnLevel=t_level;
		m_placeShrinerOnDepth=t_depth;
		bb_logger_Debug->p_WriteLine2(String(L"Placed Shriner on ",18)+String(t_depth)+String(L"-",1)+String(t_level));
	}
	if(m_placeBloodShopOnLevel==-1 && !c_Util::m_AreAriaOrCodaActive()){
		int t_level2=-1;
		int t_depth2=-1;
		while(!m_IsFreeLevelForSpecialRoom(t_level2,t_depth2)){
			if(m_isHardcoreMode){
				t_level2=c_Util::m_RndIntRange(1,2,true,-1);
				t_depth2=1;
			}else{
				t_level2=c_Util::m_RndIntRange(1,3,true,-1);
				t_depth2=c_Util::m_RndIntRange(1,5,true,-1);
			}
		}
		m_placeBloodShopOnLevel=t_level2;
		m_placeBloodShopOnDepth=t_depth2;
		bb_logger_Debug->p_WriteLine2(String(L"Placed Blood Shop on ",21)+String(t_depth2)+String(L"-",1)+String(t_level2));
	}
	if(m_placeGlassShopOnLevel==-1){
		int t_level3=-1;
		int t_depth3=-1;
		while(!m_IsFreeLevelForSpecialRoom(t_level3,t_depth3)){
			t_level3=c_Util::m_RndIntRange(1,3,true,-1);
			t_depth3=c_Util::m_RndIntRange(1,5,true,-1);
		}
		m_placeGlassShopOnLevel=t_level3;
		m_placeGlassShopOnDepth=t_depth3;
		bb_logger_Debug->p_WriteLine2(String(L"Placed Glass Shop on ",21)+String(t_depth3)+String(L"-",1)+String(t_level3));
	}
	if(m_placeFoodShopOnLevel==-1 && !c_Util::m_AreAriaOrCodaActive()){
		int t_level4=-1;
		int t_depth4=-1;
		while(!m_IsFreeLevelForSpecialRoom(t_level4,t_depth4)){
			t_level4=c_Util::m_RndIntRange(1,3,true,-1);
			t_depth4=c_Util::m_RndIntRange(1,5,true,-1);
		}
		m_placeFoodShopOnLevel=t_level4;
		m_placeFoodShopOnDepth=t_depth4;
		bb_logger_Debug->p_WriteLine2(String(L"Placed Food Shop on ",20)+String(t_depth4)+String(L"-",1)+String(t_level4));
	}
	if(m_placeArenaOnLevel==-1 && !c_Util::m_IsCharacterActive(6)){
		int t_level5=-1;
		int t_depth5=-1;
		while(!m_IsFreeLevelForSpecialRoom(t_level5,t_depth5)){
			t_level5=c_Util::m_RndIntRange(1,3,true,-1);
			t_depth5=c_Util::m_RndIntRange(1,5,true,-1);
		}
		m_placeArenaOnLevel=t_level5;
		m_placeArenaOnDepth=t_depth5;
		m_arenaNum=c_Util::m_RndIntRangeFromZero(2,true);
		bb_logger_Debug->p_WriteLine2(String(L"Placed Arena on ",16)+String(t_depth5)+String(L"-",1)+String(t_level5));
	}
	if(m_placeTransmogrifierOnLevel==-1 && m_isHardcoreMode){
		int t_level6=-1;
		int t_depth6=-1;
		while(!m_IsFreeLevelForSpecialRoom(t_level6,t_depth6)){
			t_level6=c_Util::m_RndIntRange(1,3,true,-1);
			t_depth6=c_Util::m_RndIntRange(1,5,true,-1);
		}
		m_placeTransmogrifierOnLevel=t_level6;
		m_placeTransmogrifierOnDepth=t_depth6;
		bb_logger_Debug->p_WriteLine2(String(L"Placed Transmogrifier on ",25)+String(t_depth6)+String(L"-",1)+String(t_level6));
	}
	if(m_placeConjurerOnLevel==-1){
		int t_level7=-1;
		int t_depth7=-1;
		while(!m_IsFreeLevelForSpecialRoom(t_level7,t_depth7)){
			t_level7=c_Util::m_RndIntRange(1,3,true,-1);
			t_depth7=c_Util::m_RndIntRange(1,5,true,-1);
		}
		m_placeConjurerOnLevel=t_level7;
		m_placeConjurerOnDepth=t_depth7;
		bb_logger_Debug->p_WriteLine2(String(L"Placed Conjurer on ",19)+String(t_depth7)+String(L"-",1)+String(t_level7));
	}
	if(m_placePawnbrokerOnLevel==-1 && !c_Util::m_IsCharacterActive(5)){
		int t_level8=-1;
		int t_depth8=-1;
		while(!m_IsFreeLevelForSpecialRoom(t_level8,t_depth8)){
			t_level8=c_Util::m_RndIntRange(1,3,true,-1);
			t_depth8=c_Util::m_RndIntRange(1,5,true,-1);
		}
		m_placePawnbrokerOnLevel=t_level8;
		m_placePawnbrokerOnDepth=t_depth8;
		bb_logger_Debug->p_WriteLine2(String(L"Placed Pawnbroker on ",21)+String(t_depth8)+String(L"-",1)+String(t_level8));
	}
	if((t_levelObj)!=0){
		m_InitNewMap(true);
		t_levelObj->p_CreateMap();
		m_CreateIndestructibleBorder();
		return true;
	}
	if(m_isSwarmMode){
		m_CreateSwarmMap();
		return true;
	}
	int t_15=bb_controller_game_currentZone;
	if(t_15==5){
		if(!m_CreateMapZone5(false)){
			return false;
		}
	}else{
		if(t_15==4){
			if(!m_CreateMapZone4(false)){
				return false;
			}
		}else{
			if(t_15==3){
				if(!m_CreateMapZone3()){
					return false;
				}
			}else{
				if(t_15==2){
					if(!m_CreateMapZone2()){
						return false;
					}
				}else{
					if(!m_CreateMapZone1()){
						return false;
					}
				}
			}
		}
	}
	if(bb_controller_game_currentZone==4){
		c_Enumerator7* t_=c_Trap::m_trapList->p_ObjectEnumerator();
		while(t_->p_HasNext()){
			c_Trap* t_trap=t_->p_NextObject();
			if(t_trap->m_trapType==3){
				(new c_SpikeTrap)->m_new(t_trap->m_x,t_trap->m_y);
				t_trap->p_Die();
			}
		}
	}
	if(!m_IsPassable()){
		bb_logger_Debug->p_Log(String(L"CREATEMAP: Rejected impassable layout",37));
		return m__FailMap();
	}
	if(m_pacifismModeOn || m_isHardMode && m_GetHardModeXML()->p_GetAttribute2(String(L"disableTrapdoors",16),false)){
		c_Enumerator7* t_2=c_Trap::m_trapList->p_ObjectEnumerator();
		while(t_2->p_HasNext()){
			c_Trap* t_trap2=t_2->p_NextObject();
			if(t_trap2->m_trapType==3){
				(new c_SpikeTrap)->m_new(t_trap2->m_x,t_trap2->m_y);
				t_trap2->p_Die();
			}
		}
	}
	if(m_previousLevelUnkilledStairLockingMinibosses->p_Length()>0 && !m_skipNextPenaltyBox){
		m_PlacePenaltyBoxEnemies();
		gc_assign(m_minibossFormerWall,(new c_List13)->m_new());
		int t_wallType=107;
		if(bb_controller_game_currentDepth>2){
			t_wallType=108;
		}
		m_AddMinibossWall(-3,-3,t_wallType);
		m_AddMinibossWall(-3,-2,t_wallType);
		m_AddMinibossWall(-3,-1,t_wallType);
		m_AddMinibossWall(-3,0,t_wallType);
		m_AddMinibossWall(-3,1,t_wallType);
		m_AddMinibossWall(-3,2,t_wallType);
		m_AddMinibossWall(-3,3,t_wallType);
		m_AddMinibossWall(3,-3,t_wallType);
		m_AddMinibossWall(3,-2,t_wallType);
		m_AddMinibossWall(3,-1,t_wallType);
		m_AddMinibossWall(3,0,t_wallType);
		m_AddMinibossWall(3,1,t_wallType);
		m_AddMinibossWall(3,2,t_wallType);
		m_AddMinibossWall(3,3,t_wallType);
		m_AddMinibossWall(-2,-3,t_wallType);
		m_AddMinibossWall(-1,-3,t_wallType);
		m_AddMinibossWall(0,-3,t_wallType);
		m_AddMinibossWall(1,-3,t_wallType);
		m_AddMinibossWall(2,-3,t_wallType);
		m_AddMinibossWall(-2,3,t_wallType);
		m_AddMinibossWall(-1,3,t_wallType);
		m_AddMinibossWall(0,3,t_wallType);
		m_AddMinibossWall(1,3,t_wallType);
		m_AddMinibossWall(2,3,t_wallType);
	}
	m_previousLevelMinibosses->p_Clear();
	c_Enumerator4* t_3=c_Enemy::m_enemyList->p_ObjectEnumerator();
	while(t_3->p_HasNext()){
		c_Enemy* t_enemy=t_3->p_NextObject();
		if(t_enemy->m_isMiniboss){
			m_previousLevelMinibosses->p_Push4(t_enemy->m_enemyType);
		}
	}
	return true;
}
void c_Level::m_ResetCustomLevel(bool t_inEditor,int t_randSeed){
	if(t_inEditor || c_ControllerLevelEditor::m_playingLevel==1 || m_mentorLevel!=-1){
		c_Shrine::m_ResetShrines();
		c_Item::m_CreateItemPools();
		c_Util::m_SeedRnd(t_randSeed);
		if(m_mentorLevel!=-1){
			c_Player* t_firstPlayer=bb_controller_game_players[0];
			t_firstPlayer->p_SetCharacter(9);
			t_firstPlayer->p_SetTotallyBlank();
			t_firstPlayer->m_health->p_Damage(t_firstPlayer->m_health->p_Get3()-1);
		}
	}
}
c_Stack2* c_Level::m_zoneOrder;
void c_Level::m_GenerateHardcoreZoneOrder(){
	c_StackEx* t_randomZones=(new c_StackEx)->m_new();
	t_randomZones->p_Push4(1);
	t_randomZones->p_Push4(2);
	t_randomZones->p_Push4(3);
	t_randomZones->p_Push4(4);
	t_randomZones->p_Push4(5);
	t_randomZones->p_Shuffle(true);
	while(t_randomZones->p_Length()>5){
		t_randomZones->p_Pop();
	}
	c_Stack2* t_zones=(new c_Stack2)->m_new();
	t_zones->p_Push4(1);
	t_zones->p_Push4(2);
	t_zones->p_Push4(3);
	t_zones->p_Push4(4);
	t_zones->p_Push4(5);
	gc_assign(m_zoneOrder,(new c_Stack2)->m_new());
	c_Enumerator6* t_=t_zones->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		int t_zone=t_->p_NextObject();
		if(t_randomZones->p_Contains(t_zone)){
			m_zoneOrder->p_Push4(t_zone);
		}
	}
	if(c_Util::m_IsCharacterActive(2)){
		c_Stack2* t_ariaZoneOrder=(new c_Stack2)->m_new();
		c_BackwardsEnumerator* t_2=m_zoneOrder->p_Backwards()->p_ObjectEnumerator();
		while(t_2->p_HasNext()){
			int t_zone2=t_2->p_NextObject();
			t_ariaZoneOrder->p_Push4(t_zone2);
		}
		gc_assign(m_zoneOrder,t_ariaZoneOrder);
	}
}
bool c_Level::m_quickRestart;
void c_Level::m_CreateFinalBossBattleConductor(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Level.CreateFinalBossBattleConductor()",38));
}
void c_Level::m_UnlockChar(int t_characterID){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Level.UnlockChar(Int)",21));
}
void c_Level::m_CreateFinalBossBattle(){
	bb_logger_Debug->p_Log(String(L"CREATEFINALBOSSBATTLE: Creating Necrodancer battle.",51));
	m_InitNewMap(true);
	m_outsideBossChamber=true;
	m_DisableLevelConstraints();
	m_CreateRoom3(-2,-3,6,7,false,6);
	if(m_isTrainingMode){
		m_AddExit(2,0,-2,1);
		m_PlaceTileRemovingExistingTiles2(2,0,2);
		if(bb_controller_game_numPlayers==1){
			m_MakeHelper();
		}
	}
	m_GetTileAt(-2,0)->p_AddTorch();
	m_GetTileAt(4,0)->p_AddTorch();
	m_GetTileAt(1,4)->p_AddTorch();
	for(int t_y=-3;t_y>=-5;t_y=t_y+-1){
		for(int t_x=0;t_x<=2;t_x=t_x+1){
			m_PlaceTileRemovingExistingTiles2(t_x,t_y,14);
		}
	}
	m_PlaceTileRemovingExistingTiles2(-1,-4,109);
	m_PlaceTileRemovingExistingTiles2(3,-4,109);
	m_PlaceTileRemovingExistingTiles2(-1,-5,109);
	m_PlaceTileRemovingExistingTiles2(3,-5,109);
	m_CreateRoom3(-7,-17,16,11,false,6);
	for(int t_x2=0;t_x2<=2;t_x2=t_x2+1){
		m_GetTileAt(t_x2,-6)->p_SetDoorTrigger(2);
	}
	m_GetTileAt(-5,-6)->p_AddTorch2();
	m_GetTileAt(-1,-6)->p_AddTorch2();
	m_GetTileAt(3,-6)->p_AddTorch2();
	m_GetTileAt(7,-6)->p_AddTorch2();
	m_GetTileAt(-5,-17)->p_AddTorch2();
	m_GetTileAt(-1,-17)->p_AddTorch2();
	m_GetTileAt(3,-17)->p_AddTorch2();
	m_GetTileAt(7,-17)->p_AddTorch2();
	m_GetTileAt(-7,-14)->p_AddTorch2();
	m_GetTileAt(-7,-10)->p_AddTorch2();
	m_GetTileAt(9,-14)->p_AddTorch2();
	m_GetTileAt(9,-10)->p_AddTorch2();
	m_PlaceTileRemovingExistingTiles2(-2,-17,115);
	m_PlaceTileRemovingExistingTiles2(-1,-17,116);
	m_PlaceTileRemovingExistingTiles2(0,-17,117);
	m_PlaceTileRemovingExistingTiles2(1,-17,116);
	m_PlaceTileRemovingExistingTiles2(2,-17,117);
	m_PlaceTileRemovingExistingTiles2(3,-17,116);
	m_PlaceTileRemovingExistingTiles2(4,-17,115);
	m_PlaceTileRemovingExistingTiles2(-2,-16,114);
	m_PlaceTileRemovingExistingTiles2(-1,-16,114);
	m_PlaceTileRemovingExistingTiles2(0,-16,114);
	m_PlaceTileRemovingExistingTiles2(1,-16,114);
	m_PlaceTileRemovingExistingTiles2(2,-16,114);
	m_PlaceTileRemovingExistingTiles2(3,-16,114);
	m_PlaceTileRemovingExistingTiles2(4,-16,114);
	m_PlaceTileRemovingExistingTiles2(-2,-15,114);
	m_PlaceTileRemovingExistingTiles2(-1,-15,114);
	m_PlaceTileRemovingExistingTiles2(0,-15,113);
	m_PlaceTileRemovingExistingTiles2(1,-15,113);
	m_PlaceTileRemovingExistingTiles2(2,-15,113);
	m_PlaceTileRemovingExistingTiles2(3,-15,114);
	m_PlaceTileRemovingExistingTiles2(4,-15,114);
	m_PlaceTileRemovingExistingTiles2(-2,-14,114);
	m_PlaceTileRemovingExistingTiles2(-1,-14,113);
	m_PlaceTileRemovingExistingTiles2(0,-14,113);
	m_PlaceTileRemovingExistingTiles2(1,-14,112);
	m_PlaceTileRemovingExistingTiles2(2,-14,113);
	m_PlaceTileRemovingExistingTiles2(3,-14,113);
	m_PlaceTileRemovingExistingTiles2(4,-14,114);
	m_PlaceTileRemovingExistingTiles2(-2,-13,114);
	m_PlaceTileRemovingExistingTiles2(-1,-13,113);
	m_PlaceTileRemovingExistingTiles2(0,-13,112);
	m_PlaceTileRemovingExistingTiles2(1,-13,112);
	m_PlaceTileRemovingExistingTiles2(2,-13,112);
	m_PlaceTileRemovingExistingTiles2(3,-13,113);
	m_PlaceTileRemovingExistingTiles2(4,-13,114);
	for(int t_x3=-3;t_x3<=5;t_x3=t_x3+1){
		m_PlaceTileRemovingExistingTiles2(t_x3,-18,109);
	}
	(new c_DecorativeFireTrap)->m_new(-1,-16);
	(new c_DecorativeFireTrap)->m_new(3,-16);
	m_SetMagicBarrier(true);
	m_PaintTriggerInterior(-7,-17,16,11,1);
	c_Necrodancer* t_necrodancer=(new c_Necrodancer)->m_new(0,-15,1);
	t_necrodancer->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
	(new c_Gargoyle)->m_new(-2,-13,5);
	(new c_Gargoyle)->m_new(4,-13,5);
	c_Mummy* t_leftMummy=(new c_Mummy)->m_new(0,-13,1);
	t_leftMummy->p_MakeDancer();
	c_Mummy* t_centerMummy=(new c_Mummy)->m_new(1,-13,1);
	t_centerMummy->p_MakeDancer();
	c_Mummy* t_rightMummy=(new c_Mummy)->m_new(2,-13,1);
	t_rightMummy->p_MakeDancer();
	c_Skeleton* t_leftBlackSkeleton=(new c_Skeleton)->m_new(-2,-16,3);
	t_leftBlackSkeleton->p_MakeDancer();
	c_Skeleton* t_rightBlackSkeleton=(new c_Skeleton)->m_new(4,-16,3);
	t_rightBlackSkeleton->p_MakeDancer();
	c_Skeleton* t_leftWhiteSkeleton=(new c_Skeleton)->m_new(-2,-15,1);
	t_leftWhiteSkeleton->p_MakeDancer();
	c_Skeleton* t_rightWhiteSkeleton=(new c_Skeleton)->m_new(4,-15,1);
	t_rightWhiteSkeleton->p_MakeDancer();
	m_PlaceTileRemovingExistingTiles2(1,-9,109);
	c_Tile* t_hintTile=m_PlaceTileRemovingExistingTiles2(1,2,109);
	t_hintTile->p_AddTextLabel(String(L"|49|USE ALL WALLS TO YOUR ADVANTAGE!|",37),0,-12,FLOAT(2.0),false,true);
	c_Switch* t_switch11=(new c_Switch)->m_new(2,-5,33,0);
	c_Switch* t_switch12=(new c_Switch)->m_new(0,-5,33,t_switch11);
	gc_assign(t_switch11->m_pairedSwitch,t_switch12);
	int t_switch21X=3;
	int t_switch22X=-1;
	int t_switchRoll=c_Util::m_RndIntRangeFromZero(1,true);
	if(t_switchRoll==0){
		t_switch21X=-1;
		t_switch22X=3;
	}
	c_Switch* t_switch21=(new c_Switch)->m_new(t_switch21X,-11,34,0);
	c_Switch* t_switch22=(new c_Switch)->m_new(t_switch22X,-12,34,t_switch21);
	gc_assign(t_switch21->m_pairedSwitch,t_switch22);
	gc_assign(c_Necrodancer::m_necrodancer->m_theLute,(new c_Item)->m_new(2,-15,String(L"weapon_golden_lute",18),false,-1,false));
	String t_weaponName=String();
	int t_14=c_Util::m_RndIntRangeFromZero(2,true);
	if(t_14==0){
		t_weaponName=String(L"weapon_broadsword",17);
	}else{
		if(t_14==1){
			t_weaponName=String(L"weapon_flail",12);
		}else{
			t_weaponName=String(L"weapon_longsword",16);
		}
	}
	(new c_Item)->m_new(3,-7,t_weaponName,false,-1,false);
	c_Enemy::m_enemiesPaused=true;
	m_UnlockChar(3);
	if(c_GameData::m_GetNPCUnlock(String(L"bossmaster",10)) && !c_GameData::m_HasFoughtNecrodancer() && !m_isReplaying){
		m_charactersJustUnlocked->p_AddLast17(506);
	}
	c_GameData::m_SetFoughtNecrodancer();
}
String c_Level::m_justUnlocked;
bool c_Level::m_AllCharsAllComplete(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Level.AllCharsAllComplete()",27));
	return false;
}
bool c_Level::m_AllCharsDLCAllComplete(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Level.AllCharsDLCAllComplete()",30));
	return false;
}
c_ControllerPopUp* c_Level::m_popUpController;
int c_Level::m_popUpType;
void c_Level::m_DoQuickRestart(bool t_continuedRun,bool t_showPopups,bool t_playIntroCutscene){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Level.DoQuickRestart(Bool, Bool, Bool)",38));
}
int c_Level::m_practiceEnemyNum;
void c_Level::m_CreateTrainingMap(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Level.CreateTrainingMap()",25));
}
String c_Level::m_todaysRandSeedString;
void c_Level::m_RecalcLevelBoundaries(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Level.RecalcLevelBoundaries()",29));
}
void c_Level::m_LoadLevelSong(c_LevelObject* t_levelObj){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Level.LoadLevelSong(LevelObject)",32));
}
void c_Level::m_NewLevel(int t_level,int t_zone,int t_playerID,bool t_inEditor,c_LevelObject* t_levelObj,bool t_continuedRun){
	bb_logger_Debug->p_Log(String(L"NEWLEVEL level: ",16)+String(t_level)+String(L" zone: ",7)+String(t_zone)+String(L" currentLevel: ",15)+String(bb_controller_game_currentLevel)+String(L" currentZone: ",14)+String(bb_controller_game_currentZone)+String(L" currentDepth: ",15)+String(bb_controller_game_currentDepth));
	int t_62=t_level;
	if(t_62==-2){
		c_Player::m_SetCoins(0,true);
	}else{
		if(t_62==-3){
			if(c_ControllerLevelEditor::m_playingLevel!=-1){
				if(c_ControllerLevelEditor::m_playingWholeDungeon && c_ControllerLevelEditor::m_playingLevel<c_ControllerLevelEditor::m_storedEditor->m_numLevels){
					c_ControllerLevelEditor::m_playingLevel+=1;
					c_LevelObject* t_levelObj2=c_ControllerLevelEditor::m_storedEditor->m_levels->p_Get2(c_ControllerLevelEditor::m_playingLevel);
					m_NewLevel(-3000,t_zone,t_playerID,false,t_levelObj2,false);
				}else{
					m_DoRestart();
				}
				return;
			}
			if(m_mentorLevel!=-1){
				c_GameData::m_SetMentorLevelClear(m_mentorLevel);
				t_level=-2;
			}
		}else{
			if(-1100<=t_level && t_level<=-1050){
				m_mentorLevel=t_level+bb_math_Abs(-1050);
				int t_mentorLevelId=m_mentorLevel+1;
				String t_mentorLevelData=bb_app_LoadString(String(L"mentor/mentor_",14)+String(t_mentorLevelId)+String(L".xml",4));
				c_XMLDoc* t_mentorLevelNode=bb_xml_ParseXML(t_mentorLevelData,0,1);
				bb_logger_Debug->p_TraceNotImplemented(String(L"Level.NewLevel(Int, Int, Int, Bool, LevelObject, Bool) (Mentor levels)",70));
			}
		}
	}
	if(t_levelObj!=0){
		int t_bossNum=t_levelObj->m_bossNum;
		if(t_bossNum!=-1){
			t_level=4;
			if(t_bossNum<=16){
				t_zone=t_bossNum-11;
				m_forceBoss=1;
			}else{
				if(t_bossNum<=21){
					t_zone=t_bossNum-16;
					m_forceBoss=2;
				}else{
					if(t_bossNum<=26){
						t_zone=t_bossNum-21;
						m_forceBoss=3;
					}else{
						if(t_bossNum<=31){
							t_zone=t_bossNum-26;
							m_forceBoss=4;
						}else{
							t_zone=t_bossNum-31;
							m_forceBoss=5;
						}
					}
				}
			}
		}
	}
	bool t_playVictoryCutscene=false;
	if(bb_controller_game_currentLevel==5 || bb_controller_game_currentLevel==4 && bb_controller_game_currentDepth==m_GetMaxDepth() && !m_HaveFinalBoss()){
		t_playVictoryCutscene=true;
	}
	if(m_isStoryMode && (c_Util::m_IsCharacterActive(10) || c_Util::m_IsCharacterActive(0) || c_Util::m_IsCharacterActive(1))){
		t_playVictoryCutscene=false;
	}
	if(c_GameData::m_GetEnableCutscenes() && !m_playedVictoryCutscene && t_playVictoryCutscene && t_level==-3){
		if(!m_isDeathlessMode && !m_isReplaying && !m_isAllCharactersMode && !m_isAllCharactersDLCMode && !m_isPhasingMode && !m_isRandomizerMode && !m_isMysteryMode && !m_isNoReturnMode){
			c_Stairs_callback::m_levelVal=-3;
			c_Stairs_callback::m_zoneVal=t_zone;
			c_Stairs_callback::m_playerVal=t_playerID;
			c_Stairs_callback::m_continuedRun=t_continuedRun;
			int t_creditsNum=1;
			if(c_Util::m_IsCharacterActive(7)){
				t_creditsNum=4;
			}else{
				if(c_Util::m_IsCharacterActive(2)){
					t_creditsNum=3;
				}else{
					if(c_Util::m_IsCharacterActive(10)){
						t_creditsNum=5;
					}else{
						if(c_Util::m_IsCharacterActive(1) || c_Util::m_IsCharacterActive(0) || c_Util::m_IsCharacterActive(8) || c_Util::m_IsCharacterActive(3)){
							t_creditsNum=2;
						}
					}
				}
			}
			(new c_ControllerCutscene)->m_new(-1,-1,t_creditsNum);
			m_playedVictoryCutscene=true;
			return;
		}
	}
	if(-1800<=t_level && t_level<=-1785){
		c_Player* t_firstPlayer=bb_controller_game_players[0];
		int t_characterID=t_level+bb_math_Abs(-1800);
		t_firstPlayer->p_SetCharacter(t_characterID);
		t_continuedRun=m_AllCharsAnyComplete();
		m_NewLevel(-7,1,0,false,0,t_continuedRun);
		return;
	}
	if(-1600<=t_level && t_level<=-1585){
		c_Player* t_firstPlayer2=bb_controller_game_players[0];
		int t_characterID2=t_level+bb_math_Abs(-1600);
		t_firstPlayer2->p_SetCharacter(t_characterID2);
		t_continuedRun=m_AllCharsDLCAnyComplete();
		m_NewLevel(-7,1,0,false,0,t_continuedRun);
		return;
	}
	if(t_level==-1902){
		m_isDeathlessMode=true;
		m_deathlessWinCount=0;
		m_NewLevel(-7,1,0,false,0,false);
		return;
	}
	m_isLevelEditor=t_inEditor;
	bb_controller_game_dailyChallengeSuccessScore=-1;
	bb_controller_game_speedrunSuccessScore=-1;
	bb_controller_game_hardcoreModeSuccessScore=-1;
	m_isLevelEnding=false;
	if(t_level==-2){
		m_DoRestart_Common(false,false);
	}
	for(int t_i=0;t_i<bb_controller_game_numPlayers;t_i=t_i+1){
		c_GameData::m_SetPlayerCoins(c_Player::m_numCoins);
		c_GameData::m_SetPlayerDiamonds(c_Player::m_numDiamonds);
	}
	c_Audio::m_songShopOpen=false;
	m_pacifismModeOn=false;
	if(c_Util::m_IsCharacterActive(6) && t_level!=-9 && t_level!=-50 && !t_inEditor && t_levelObj==0){
		m_pacifismModeOn=true;
	}
	if(t_level==-3){
		t_level=bb_controller_game_currentLevel+1;
	}
	if(m_pacifismModeOn){
		if(t_level==4){
			t_level=5;
		}
	}
	bool t_flag2=false;
	if(t_level>5){
		t_flag2=true;
	}
	if(t_level==5 && (!m_isHardcoreMode || bb_controller_game_currentDepth==m_GetMaxDepth()) && (bb_controller_game_currentZone!=m_GetSingleZoneModeFinalBossZone() || !m_HaveFinalBoss()) && (!m_isHardcoreMode || !m_HaveFinalBoss())){
		t_flag2=true;
	}
	if(t_zone==1){
		int t_63=t_level;
		if(t_63==1 || t_63==2){
			if(!c_GameData::m_GetTutorialComplete()){
				t_level=0;
			}
		}
	}
	bool t_allPlayersPerished=true;
	for(int t_i2=0;t_i2<bb_controller_game_numPlayers;t_i2=t_i2+1){
		c_Player* t_player=bb_controller_game_players[t_i2];
		if(t_player!=0 && !t_player->p_Perished()){
			t_allPlayersPerished=false;
			break;
		}
	}
	bool t_isTrainingLevel=-1000<=t_level && t_level<=-101;
	for(int t_i3=0;t_i3<bb_controller_game_numPlayers;t_i3=t_i3+1){
		c_Player* t_player2=bb_controller_game_players[t_i3];
		if(t_player2==0){
			t_player2=(new c_Player)->m_new(t_i3,-1);
			gc_assign(bb_controller_game_players[t_i3],t_player2);
		}
		t_player2->m_lordCrownActiveBeat=-1;
		t_player2->m_shieldActiveBeat=-1;
		if(t_player2->p_Perished()){
			if(t_allPlayersPerished){
				int t_characterID3=t_player2->m_characterID;
				c_Weapon* t_weapon=t_player2->m_weapon;
				t_player2->p_Die();
				String t_weaponType=String();
				if(t_isTrainingLevel){
					if(t_weapon!=0 && t_weapon->p_IsKeepable()){
						t_weaponType=t_weapon->m_type;
					}
				}
				t_player2=(new c_Player)->m_new(t_i3,-1);
				t_player2->p_SetCharacter(t_characterID3);
				gc_assign(bb_controller_game_players[t_i3],t_player2);
				if(t_isTrainingLevel){
					if(t_weaponType!=String() && t_weaponType!=String(L"no_item",7)){
						t_player2->p_AddItemOfType(t_weaponType,0,true,false);
					}
				}
			}else{
				t_player2->m_perished=false;
				if(t_player2->m_characterID==12){
					gc_assign(t_player2->m_lambFamiliar,(new c_Familiar)->m_new(t_player2));
				}
			}
			t_player2->m_health->p_Revive();
		}
		t_player2->m_x=t_i3 % 2;
		t_player2->m_y=t_i3/2;
		t_player2->p_WarpFamiliars();
		if(t_i3==3 && t_level==4){
			t_player2->m_x=-1;
			t_player2->m_y=0;
		}
		t_player2->m_lastX=t_player2->m_x;
		t_player2->m_lastY=t_player2->m_y;
	}
	if(bb_controller_game_numPlayers==1 && m_IsFinalBossZone() && t_level==5 && c_Util::m_IsCharacterActive(0)){
		m_MakeHelper();
	}
	m_previousLevelUnkilledStairLockingMinibosses->p_Clear();
	c_Enumerator4* t_=c_Enemy::m_enemyList->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Enemy* t_enemy=t_->p_NextObject();
		if(t_enemy->m_isStairLockingMiniboss){
			m_previousLevelUnkilledStairLockingMinibosses->p_Push4(t_enemy->m_enemyType);
		}
	}
	c_Enemy::m_SetEnemiesToDropNoCoins();
	c_RenderableObject::m_DeleteAll(true);
	m_placedArena=false;
	if(t_allPlayersPerished){
		bb_controller_game_player1=0;
		for(int t_i4=0;t_i4<bb_controller_game_numPlayers;t_i4=t_i4+1){
			c_Player* t_player3=bb_controller_game_players[t_i4];
			t_player3->m_health->p_Refill();
		}
	}
	bb_controller_game_currentLevel=t_level;
	bb_controller_game_currentZone=t_zone;
	bool t_setTodaysRandSeedString=false;
	int t_64=bb_controller_game_currentLevel;
	if(t_64==-9){
		if(m_randSeed==-1){
			t_setTodaysRandSeedString=true;
			bb_logger_Debug->p_TraceNotImplemented(String(L"Level.NewLevel(Int, Int, Int, Bool, LevelObject, Bool) (Daily seed)",67));
		}else{
			bb_logger_Debug->p_Log(String(L"Setting random seed to ",23)+String(m_randSeed));
		}
	}else{
		if(t_64==-53 || t_64==-10 || t_64==-63 || t_64==-56 || t_64==-64 || t_64==-62){
			m_isSeededMode=true;
			m_randSeed=c_Util::m_ParseTextSeed(m_randSeedString);
			if(m_randSeed==-1){
				m_randSeed=0;
			}
		}else{
			bool t_isNonDeterministic=false;
			int t_65=t_level;
			if(t_65==-2 || t_65==-3000 || t_65==-50 || t_65==-51 || t_65==-52 || t_65==-54 || t_65==-55 || t_65==-57 || t_65==-59 || t_65==-60 || t_65==-61 || t_65==-7 || t_65==-1901){
				t_isNonDeterministic=true;
			}
			if(m_isLevelEditor){
				t_isNonDeterministic=true;
			}
			if(!m_isHardcoreMode){
				int t_66=t_level;
				if(t_66==1 || t_66==-8){
					t_isNonDeterministic=true;
				}
			}
			if(t_isTrainingLevel){
				t_isNonDeterministic=true;
			}
			if(t_isNonDeterministic){
				m_randSeed=-1;
				if(m_nonDeterministicMSStart==-1 || t_isTrainingLevel){
					m_nonDeterministicMSStart=bb_app_Millisecs();
				}
				bb_logger_Debug->p_Log(String(L"NON-DETERMINISTIC MS START INIT: ",33)+String(m_nonDeterministicMSStart));
				int t_67=bb_controller_game_currentLevel;
				if(t_67==-7 || t_67==-50 || t_67==-51 || t_67==-52 || t_67==-54 || t_67==-55 || t_67==-57 || t_67==-59 || t_67==-60 || t_67==-61){
					m_randSeed=m_nonDeterministicMSStart;
				}
			}
		}
	}
	if(m_randSeed!=-1){
		if(m_wholeRunRNG==0){
			gc_assign(m_wholeRunRNG,c_RNG::m_Make(m_randSeed));
		}
	}
	int t_z=bb_math_Max(1,bb_controller_game_currentZone);
	int t_l=bb_math_Max(1,bb_controller_game_currentLevel);
	int t_randSeed=0;
	if(m_randSeed==-1){
		bb_logger_Debug->p_Log(String(L"NON-DETERMINISTIC MS START: ",28)+String(m_nonDeterministicMSStart)+String(L" z: ",4)+String(t_z)+String(L" l: ",4)+String(t_l));
		int t_x=t_l+5*t_z+23987*m_nonDeterministicMSStart;
		gc_assign(m_currentFloorRNG,c_RNG::m_Make(t_x));
	}else{
		gc_assign(m_currentFloorRNG,m_wholeRunRNG->p_Split());
		t_randSeed=m_currentFloorRNG->p_Rand();
		bb_logger_Debug->p_Log(String(L"DETERMINISTIC START: ",21)+String(m_randSeed)+String(L" z: ",4)+String(t_z)+String(L" l: ",4)+String(t_l));
	}
	if(m_isReplaying && !t_flag2){
		if(bb_controller_game_currentZone!=m_replay->m_startingZone || bb_controller_game_currentLevel!=m_replay->m_startingLevel){
			m_replay->p_NextLevel();
		}
		if(m_replay->m_curReplayData!=0){
			t_randSeed=m_replay->m_curReplayData->p_Value()->m_randSeed;
		}
		int t_68=bb_controller_game_currentLevel;
		if(t_68==-9 || t_68==-7 || t_68==-10){
			m_randSeed=t_randSeed;
		}
	}
	bb_logger_Debug->p_Log(String(L"NEWLEVEL: Using seed ",21)+String(t_randSeed));
	c_Util::m_SeedRnd(t_randSeed);
	m_creatingMap=true;
	if(!m_isReplaying && !m_isLevelEditor && t_levelObj==0){
		int t_69=bb_controller_game_currentLevel;
		if(t_69==1 || t_69==-8){
		}
	}
	int t_creatingMapStart=bb_app_Millisecs();
	int t_70=bb_controller_game_currentLevel;
	if(t_70==0){
		if(!m_isReplaying){
			c_Util::m_AddMetric(String(L"event",5),String(L"newRun",6),false,false,false);
			c_Util::m_AddMetric(String(L"runType",7),String(L"tutorial",8),true,false,false);
		}
		m_isSeededMode=false;
		m_isHardcoreMode=false;
		m_isDailyChallenge=false;
		m_isDDRMode=false;
		c_Player* t_firstPlayer3=bb_controller_game_players[0];
		t_firstPlayer3->p_SetCharacter(0);
		t_firstPlayer3->p_SetTotallyBlank();
		m_CreateTutorialMap();
	}else{
		if(t_70==-12){
			m_CreateCharSelect();
		}else{
			if(t_70==-13){
				m_CreateBeastmasterZone1();
			}else{
				if(t_70==-14){
					m_CreateBeastmasterZone2();
				}else{
					if(t_70==-15){
						m_CreateBeastmasterZone3();
					}else{
						if(t_70==-16){
							m_CreateBeastmasterZone4();
						}else{
							if(t_70==-21){
								m_CreateBeastmasterZone5();
							}else{
								if(t_70==-17){
									m_CreateBossmasterMinibosses();
								}else{
									if(t_70==-18){
										m_CreateBossmasterBosses();
									}else{
										if(t_70==-20){
											m_CreateExtraModesSelect();
										}else{
											if(t_70==-3001){
												(new c_ControllerLevelEditor)->m_new();
												return;
											}else{
												if(t_70==-3000){
													if(t_levelObj==0){
														m_CreateTestMap();
													}
												}else{
													if(t_70==-1901){
														int t_character=0;
														int t_numEnabledCharacter=c_Player::m_NumEnabledCharacters()-1;
														for(int t_i5=1000;t_i5>0;t_i5=t_i5+-1){
															int t_c=c_Util::m_RndIntRangeFromZero(t_numEnabledCharacter,false);
															if(t_c==7){
																continue;
															}
															if(t_c==-1){
																continue;
															}
															if(c_GameData::m_IsCharUnlocked(t_c)){
																t_character=t_c;
																break;
															}
														}
														c_Player* t_player4=bb_controller_game_players[t_playerID];
														t_player4->p_SetCharacter(t_character);
														m_isAllCharactersMode=false;
														m_isAllCharactersDLCMode=false;
														bb_controller_game_currentLevel=-2;
														m_CreateLobby();
														m_nonDeterministicMSStart=-1;
													}else{
														if(t_70==-1900 || t_70==-19){
															m_isAllCharactersMode=true;
															if(bb_controller_game_currentLevel==-1900){
																for(int t_i6=0;t_i6<m_allCharsCompletion.Length();t_i6=t_i6+1){
																	m_allCharsCompletion[t_i6]=false;
																}
																if(bb_controller_game_numPlayers>1){
																	bb_controller_game_players[bb_controller_game_numPlayers-1]->p_Die();
																	bb_controller_game_players[bb_controller_game_numPlayers-1]=0;
																	bb_controller_game_numPlayers-=1;
																}
																m_isAllCharsRunNoItemsNoShrines=true;
															}
															bb_controller_game_currentLevel=-19;
															m_CreateAllCharsSelect();
														}else{
															if(t_70==-1700 || t_70==-22){
																m_isAllCharactersDLCMode=true;
																if(bb_controller_game_currentLevel==-1700){
																	for(int t_i7=0;t_i7<m_allCharsCompletionDLC.Length();t_i7=t_i7+1){
																		m_allCharsCompletionDLC[t_i7]=false;
																	}
																	if(bb_controller_game_numPlayers>1){
																		bb_controller_game_players[bb_controller_game_numPlayers-1]->p_Die();
																		bb_controller_game_players[bb_controller_game_numPlayers-1]=0;
																		bb_controller_game_numPlayers-=1;
																	}
																	m_isAllCharsRunNoItemsNoShrines=true;
																}
																bb_controller_game_currentLevel=-22;
																m_CreateAllCharsDLCSelect();
															}else{
																if(t_70==4){
																	if(m_IsFinalBossZone() && c_Util::m_IsCharacterActive(2)){
																		bb_controller_game_currentLevel=5;
																		m_bossNumber=8;
																		m_CreateFinalBossBattle3();
																	}else{
																		if(m_IsFinalBossZone() && c_Util::m_IsCharacterActive(1)){
																			bb_controller_game_currentLevel=5;
																			m_bossNumber=7;
																			m_CreateFinalBossBattle2();
																		}else{
																			m_CreateBossBattle();
																		}
																	}
																}else{
																	if(t_70==-1){
																		m_isSeededMode=false;
																		m_isHardcoreMode=false;
																		m_isDailyChallenge=false;
																		m_isDDRMode=false;
																		m_CreateTestMap();
																	}else{
																		if(t_70==-8){
																			if(!m_isReplaying){
																				c_Util::m_AddMetric(String(L"event",5),String(L"newRun",6),false,false,false);
																				c_Util::m_AddMetric(String(L"runType",7),String(L"DDR",3),true,false,false);
																			}
																			bb_controller_game_currentZone=m_GetInitialZone();
																			bb_controller_game_currentDepth=1;
																			bb_controller_game_currentLevel=1;
																			m_isDDRMode=true;
																			c_Shrine::m_ResetShrines();
																			c_Item::m_CreateItemPools();
																			c_Util::m_SeedRnd(t_randSeed);
																			m_CreateMap(0);
																			m_GetTileAt(0,-1)->p_AddTextLabel(String(L"|125|Dance pad mode! Easier difficulty.|",40),0,18,FLOAT(3.0),false,true);
																			m_GetTileAt(0,0)->p_AddTextLabel(String(L"|126|Practice with this mode until|",35),0,32,FLOAT(3.0),false,true);
																			m_GetTileAt(0,1)->p_AddTextLabel(String(L"|127|you are ready for normal modes!|",37),0,15,FLOAT(3.0),false,true);
																		}else{
																			if(t_70==1){
																				bb_controller_game_currentDepth=bb_controller_game_currentZone;
																				if(c_Util::m_IsCharacterActive(2) && 1<=bb_controller_game_currentZone && bb_controller_game_currentZone<=4){
																					bb_controller_game_currentDepth=5-bb_controller_game_currentZone;
																				}
																				c_Shrine::m_ResetShrines();
																				c_Item::m_CreateItemPools();
																				c_Util::m_SeedRnd(t_randSeed);
																				if(!m_isReplaying){
																					c_Util::m_AddMetric(String(L"event",5),String(L"newRun",6),false,false,false);
																					int t_71=bb_controller_game_currentZone;
																					if(t_71==1){
																						c_Util::m_AddMetric(String(L"runType",7),String(L"zone1",5),true,false,false);
																					}else{
																						if(t_71==2){
																							c_Util::m_AddMetric(String(L"runType",7),String(L"zone2",5),true,false,false);
																						}else{
																							if(t_71==3){
																								c_Util::m_AddMetric(String(L"runType",7),String(L"zone3",5),true,false,false);
																							}else{
																								c_Util::m_AddMetric(String(L"runType",7),String(L"zone4",5),true,false,false);
																							}
																						}
																					}
																				}
																				m_ResetCustomLevel(t_inEditor,t_randSeed);
																				m_CreateMap(t_levelObj);
																			}else{
																				if(t_70==-7 || t_70==-9 || t_70==-10 || t_70==-50 || t_70==-51 || t_70==-52 || t_70==-53 || t_70==-54 || t_70==-55 || t_70==-56 || t_70==-57 || t_70==-59 || t_70==-62 || t_70==-60 || t_70==-63 || t_70==-61 || t_70==-64){
																					m_forceBoss=-1;
																					c_Shrine::m_ResetShrines();
																					if(!m_isReplaying){
																						c_Util::m_AddMetric(String(L"event",5),String(L"newRun",6),false,false,false);
																						if(bb_controller_game_currentLevel==-9){
																							c_Util::m_AddMetric(String(L"runType",7),String(L"hardcoreDaily",13),true,false,false);
																						}else{
																							c_Util::m_AddMetric(String(L"runType",7),String(L"hardcore",8),true,false,false);
																						}
																					}
																					if(!t_continuedRun){
																						bb_controller_game_runPlaytimeLastAdded=0;
																						bb_controller_game_runPlaytimeMilliseconds=0;
																					}
																					bb_controller_game_subRunPlaytimeMilliseconds=0;
																					int t_72=bb_controller_game_currentLevel;
																					if(t_72==-9){
																						m_isDailyChallenge=true;
																						m_isDeathlessMode=false;
																						m_isAllCharactersMode=false;
																						m_isAllCharactersDLCMode=false;
																						c_Player* t_firstPlayer4=bb_controller_game_players[0];
																						t_firstPlayer4->p_SetCharacter(0);
																					}else{
																						if(t_72==-50){
																							m_isStoryMode=true;
																							m_isDeathlessMode=false;
																							m_isAllCharactersMode=false;
																							m_isAllCharactersDLCMode=false;
																							if(!t_continuedRun){
																								c_Player* t_firstPlayer5=bb_controller_game_players[0];
																								t_firstPlayer5->p_SetCharacter(10);
																							}
																						}else{
																							if(t_72==-51){
																								m_isSwarmMode=true;
																							}else{
																								if(t_72==-52 || t_72==-53){
																									m_isNoReturnMode=true;
																								}else{
																									if(t_72==-55 || t_72==-56){
																										m_isHardMode=true;
																									}else{
																										if(t_72==-57){
																											m_isFloorIsLavaMode=true;
																											for(int t_i8=0;t_i8<bb_controller_game_numPlayers;t_i8=t_i8+1){
																												c_Player* t_player5=bb_controller_game_players[t_i8];
																												int t_73=t_player5->m_characterID;
																												if(t_73==0 || t_73==1 || t_73==5 || t_73==8 || t_73==9 || t_73==10){
																													continue;
																												}
																												t_player5->p_SetCharacter(0);
																											}
																										}else{
																											if(t_72==-59 || t_72==-62){
																												m_isPhasingMode=true;
																											}else{
																												if(t_72==-60 || t_72==-63){
																													m_isRandomizerMode=true;
																													c_Enemy::m_StartRandomizerRun();
																												}else{
																													if(t_72==-61 || t_72==-64){
																														m_isMysteryMode=true;
																													}else{
																														if(t_72==-7){
																															c_GameData::m_SetHavePlayedHardcore(true);
																														}else{
																															if(t_72==-54){
																																m_isSoulMode=true;
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																					m_GenerateHardcoreZoneOrder();
																					bb_controller_game_currentZone=m_zoneOrder->p_Get2(0);
																					bb_controller_game_currentLevel=1;
																					bb_controller_game_currentDepth=1;
																					m_isHardcoreMode=true;
																					c_Item::m_CreateItemPools();
																					c_Util::m_SeedRnd(t_randSeed);
																					for(int t_i9=0;t_i9<bb_controller_game_numPlayers;t_i9=t_i9+1){
																						int t_characterID4=0;
																						c_Player* t_player6=bb_controller_game_players[t_i9];
																						if(t_player6!=0){
																							t_characterID4=t_player6->m_characterID;
																							t_player6->p_Die();
																						}
																						t_player6=(new c_Player)->m_new(t_i9,t_characterID4);
																						t_player6->m_x=t_i9 % 2;
																						t_player6->m_y=t_i9/2;
																						gc_assign(bb_controller_game_players[t_i9],t_player6);
																					}
																					m_CreateMap(0);
																					if(m_isDeathlessMode){
																						m_GetTileAt(0,-1)->p_AddTextLabel(String(L"|128|Deathless mode! Compete for high|",38),0,18,FLOAT(3.0),false,true);
																						m_GetTileAt(0,0)->p_AddTextLabel(String(L"|129|Scores by beating the game|",32),0,32,FLOAT(3.0),false,true);
																						m_GetTileAt(0,1)->p_AddTextLabel(String(L"|130|repeatedly without dying!|",31),0,15,FLOAT(3.0),false,true);
																					}else{
																						if(m_isAllCharactersMode){
																							m_GetTileAt(0,-1)->p_AddTextLabel(String(L"|131|ALL CHARACTERS MODE!|",26),0,18,FLOAT(3.0),false,true);
																							m_GetTileAt(0,0)->p_AddTextLabel(String(L"|132|TRY TO BEAT THE GAME WITH ALL|",35),0,32,FLOAT(3.0),false,true);
																							m_GetTileAt(0,1)->p_AddTextLabel(String(L"|133|NINE CHARACTERS IN A ROW!|",31),0,15,FLOAT(3.0),false,true);
																						}else{
																							if(m_isAllCharactersDLCMode){
																								m_GetTileAt(0,-1)->p_AddTextLabel(String(L"|131|ALL CHARACTERS MODE!|",26),0,18,FLOAT(3.0),false,true);
																								m_GetTileAt(0,0)->p_AddTextLabel(String(L"|132|TRY TO BEAT THE GAME WITH ALL|",35),0,32,FLOAT(3.0),false,true);
																								m_GetTileAt(0,1)->p_AddTextLabel(String(L"|13510|THIRTEEN CHARACTERS IN A ROW!|",37),0,15,FLOAT(3.0),false,true);
																							}else{
																								if(m_isStoryMode){
																									m_GetTileAt(0,-1)->p_AddTextLabel(String(L"|134|STORY MODE!|",17),0,18,FLOAT(3.0),false,true);
																									m_GetTileAt(0,0)->p_AddTextLabel(String(L"|135|BEAT THE GAME WITH NOCTURNA,|",34),0,32,FLOAT(3.0),false,true);
																									m_GetTileAt(0,1)->p_AddTextLabel(String(L"|136|CADENCE, MELODY, AND ARIA!|",32),0,15,FLOAT(3.0),false,true);
																								}else{
																									if(m_isNoReturnMode){
																										m_GetTileAt(0,-1)->p_AddTextLabel(String(L"|13500|NO RETURN MODE!|",23),0,18,FLOAT(3.0),false,true);
																										m_GetTileAt(0,0)->p_AddTextLabel(String(L"|13501|Take damage when returning|",34),0,32,FLOAT(3.0),false,true);
																										m_GetTileAt(0,1)->p_AddTextLabel(String(L"|13502|to the previous tile|",28),0,15,FLOAT(3.0),false,true);
																									}else{
																										if(m_isHardMode){
																											m_GetTileAt(0,-1)->p_AddTextLabel(String(L"|13503|HARD MODE!|",18),0,18,FLOAT(3.0),false,true);
																											m_GetTileAt(0,0)->p_AddTextLabel(String(L"|13504|MORE ENEMIES, HARDER BOSSES|",35),0,32,FLOAT(3.0),false,true);
																										}else{
																											if(m_isPhasingMode){
																												m_GetTileAt(0,-1)->p_AddTextLabel(String(L"|13505|PHASING MODE!|",21),0,18,FLOAT(3.0),false,true);
																												m_GetTileAt(0,0)->p_AddTextLabel(String(L"|13506|PHASE THROUGH WALLS|",27),0,32,FLOAT(3.0),false,true);
																											}else{
																												if(m_isRandomizerMode){
																													m_GetTileAt(0,-1)->p_AddTextLabel(String(L"|13507|RANDOMIZER MODE!|",24),0,18,FLOAT(3.0),false,true);
																													m_GetTileAt(0,0)->p_AddTextLabel(String(L"|13508|Enemy attributes are randomized.|",40),0,32,FLOAT(3.0),false,true);
																												}else{
																													if(m_isMysteryMode){
																														m_GetTileAt(0,-1)->p_AddTextLabel(String(L"|13509|MYSTERY MODE!|",21),0,18,FLOAT(3.0),false,true);
																														m_GetTileAt(0,0)->p_AddTextLabel(String(L"??????????????",14),0,32,FLOAT(3.0),false,true);
																													}else{
																														if(m_isDailyChallenge){
																															m_GetTileAt(0,-1)->p_AddTextLabel(String(L"|140|Daily ALL ZONES challenge!|",32),0,18,FLOAT(3.0),false,true);
																															m_GetTileAt(0,0)->p_AddTextLabel(String(L"|141|EVERYONE GETS THE SAME DUNGEON!|",37),0,32,FLOAT(3.0),false,true);
																															m_GetTileAt(0,1)->p_AddTextLabel(String(L"|142|Score = coin total when run ends.|",39),0,15,FLOAT(3.0),false,true);
																														}else{
																															m_GetTileAt(0,-1)->p_AddTextLabel(String(L"|137|Complete all zones in one run!|",36),0,18,FLOAT(3.0),false,true);
																															m_GetTileAt(0,0)->p_AddTextLabel(String(L"|138|All lobby upgrades are unlocked,|",38),0,32,FLOAT(3.0),false,true);
																															m_GetTileAt(0,1)->p_AddTextLabel(String(L"|139|but you start with lower health.|",38),0,15,FLOAT(3.0),false,true);
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}else{
																					if(t_70==-2){
																						if(!m_quickRestart && c_ControllerLevelEditor::m_playingLevel==-1){
																							m_isSeededMode=false;
																							m_isHardcoreMode=false;
																							m_isDailyChallenge=false;
																							m_isDDRMode=false;
																							bb_controller_game_currentLevel=-2;
																							m_CreateLobby();
																						}else{
																							m_ResetCustomLevel(t_inEditor,t_randSeed);
																							m_CreateMap(t_levelObj);
																						}
																					}else{
																						if(t_70==-11){
																							if(!m_quickRestart && c_ControllerLevelEditor::m_playingLevel==-1){
																								if(bb_controller_game_numPlayers>1){
																									bb_controller_game_players[bb_controller_game_numPlayers-1]->p_Die();
																									bb_controller_game_players[bb_controller_game_numPlayers-1]=0;
																									bb_controller_game_numPlayers-=1;
																								}else{
																									int t_playerID2=bb_controller_game_numPlayers;
																									c_Player* t_player7=(new c_Player)->m_new(t_playerID2,-1);
																									t_player7->m_x=1;
																									gc_assign(bb_controller_game_players[bb_controller_game_numPlayers],t_player7);
																									bb_controller_game_numPlayers+=1;
																								}
																								m_isAllCharactersMode=false;
																								m_isAllCharactersDLCMode=false;
																								m_isSeededMode=false;
																								m_isHardcoreMode=false;
																								m_isDailyChallenge=false;
																								m_isDDRMode=false;
																								bb_controller_game_currentLevel=-2;
																								m_CreateLobby();
																							}else{
																								m_ResetCustomLevel(t_inEditor,t_randSeed);
																								m_CreateMap(t_levelObj);
																							}
																						}else{
																							if(bb_controller_game_currentLevel>=5){
																								if(bb_controller_game_currentLevel==5 && m_IsFinalBossZone() && m_HaveFinalBoss()){
																									if(c_Util::m_IsCharacterActive(10)){
																										m_bossNumber=11;
																										m_CreateFinalBossBattleConductor();
																									}else{
																										if(c_Util::m_IsCharacterActive(2)){
																											m_bossNumber=8;
																											m_CreateFinalBossBattle3();
																										}else{
																											if(c_Util::m_IsCharacterActive(1)){
																												m_bossNumber=7;
																												m_CreateFinalBossBattle2();
																											}else{
																												m_bossNumber=6;
																												m_CreateFinalBossBattle();
																											}
																										}
																									}
																								}else{
																									if(!m_isReplaying){
																										int t_74=bb_controller_game_currentZone;
																										if(t_74==1){
																											m_UnlockChar(4);
																										}else{
																											if(t_74==2){
																												m_UnlockChar(6);
																											}else{
																												if(t_74==3){
																													m_UnlockChar(5);
																												}else{
																													if(t_74==5){
																														m_UnlockChar(11);
																													}else{
																														if(c_Util::m_IsCharacterActive(5)){
																															m_UnlockChar(8);
																														}
																													}
																												}
																											}
																										}
																										if(bb_controller_game_currentLevel>5){
																											if(c_Util::m_IsCharacterActive(0)){
																												m_UnlockChar(1);
																											}
																											if(c_Util::m_IsCharacterActive(1)){
																												m_UnlockChar(2);
																											}
																										}
																									}
																									if(m_isHardcoreMode && bb_controller_game_currentDepth<=4){
																										bb_controller_game_currentDepth+=1;
																										bb_controller_game_currentZone=m_zoneOrder->p_Get2(bb_controller_game_currentDepth-1);
																										bb_controller_game_currentLevel=1;
																										bool t_isAlreadyUnlocked=false;
																										int t_75=bb_controller_game_currentZone;
																										if(t_75==2){
																											t_isAlreadyUnlocked=c_GameData::m_GetZone2UnlockedCurrentCharacters();
																											c_GameData::m_SetZone2UnlockedCurrentCharacters();
																										}else{
																											if(t_75==3){
																												t_isAlreadyUnlocked=c_GameData::m_GetZone3UnlockedCurrentCharacters();
																												c_GameData::m_SetZone3UnlockedCurrentCharacters();
																											}else{
																												if(t_75==4){
																													t_isAlreadyUnlocked=c_GameData::m_GetZone4UnlockedCurrentCharacters();
																													c_GameData::m_SetZone4UnlockedCurrentCharacters();
																												}
																											}
																										}
																										if(!t_isAlreadyUnlocked){
																											m_justUnlocked=String(L"zone",4)+String(bb_controller_game_currentZone);
																											if(c_Util::m_IsCharacterActive(2)){
																												m_justUnlocked=m_justUnlocked+String(L"aria",4);
																											}
																										}
																										m_CreateMap(0);
																									}else{
																										bb_logger_Debug->p_Log(String(L"NEWLEVEL: Completed run",23));
																										int t_runTime=-1;
																										int t_totalCoins=-1;
																										if(m_isReplaying){
																											if(m_isHardcoreMode){
																												t_totalCoins=c_Player::m_numCoins+m_continuedRunCoinScore;
																												t_runTime=m_replay->m_runTime;
																											}
																										}else{
																											int t_76=bb_controller_game_currentZone;
																											if(t_76==1){
																												if(!c_GameData::m_GetZone2UnlockedCurrentCharacters()){
																													m_justUnlocked=String(L"zone2",5);
																												}
																												c_GameData::m_SetZone2UnlockedCurrentCharacters();
																											}else{
																												if(t_76==2){
																													if(!c_Util::m_IsCharacterActive(2)){
																														if(!c_GameData::m_GetZone3UnlockedCurrentCharacters()){
																															m_justUnlocked=String(L"zone3",5);
																														}
																														c_GameData::m_SetZone3UnlockedCurrentCharacters();
																													}else{
																														if(!c_GameData::m_GetZone1UnlockedCurrentCharacters()){
																															m_justUnlocked=String(L"zone1aria",9);
																														}
																														c_GameData::m_SetZone1UnlockedCurrentCharacters();
																													}
																												}else{
																													if(t_76==3){
																														if(!c_Util::m_IsCharacterActive(2)){
																															if(!c_GameData::m_GetZone4UnlockedCurrentCharacters()){
																																m_justUnlocked=String(L"zone4",5);
																															}
																															c_GameData::m_SetZone4UnlockedCurrentCharacters();
																														}else{
																															if(!c_GameData::m_GetZone2UnlockedCurrentCharacters()){
																																m_justUnlocked=String(L"zone2aria",9);
																															}
																															c_GameData::m_SetZone2UnlockedCurrentCharacters();
																														}
																													}else{
																														if(c_Util::m_IsCharacterActive(2)){
																															if(!c_GameData::m_GetZone3UnlockedCurrentCharacters()){
																																m_justUnlocked=String(L"zone3Aria",9);
																															}
																															c_GameData::m_SetZone3UnlockedCurrentCharacters();
																														}
																													}
																												}
																											}
																											c_Util::m_AddMetric(String(L"event",5),String(L"gameWin",7),false,false,false);
																											if(m_isDailyChallenge){
																												c_Util::m_AddMetric(String(L"runType",7),String(L"hardcoreDaily",13),false,false,false);
																											}else{
																												if(m_isHardcoreMode){
																													c_Util::m_AddMetric(String(L"runType",7),String(L"hardcore",8),false,false,false);
																												}else{
																													int t_77=bb_controller_game_currentZone;
																													if(t_77==1){
																														c_Util::m_AddMetric(String(L"runType",7),String(L"zone1",5),false,false,false);
																													}else{
																														if(t_77==2){
																															c_Util::m_AddMetric(String(L"runType",7),String(L"zone2",5),false,false,false);
																														}else{
																															if(t_77==3){
																																c_Util::m_AddMetric(String(L"runType",7),String(L"zone3",5),false,false,false);
																															}else{
																																if(t_77==4){
																																	c_Util::m_AddMetric(String(L"runType",7),String(L"zone4",5),false,false,false);
																																}else{
																																	c_Util::m_AddMetric(String(L"runType",7),String(L"Unknown!",8),false,false,false);
																																}
																															}
																														}
																													}
																												}
																											}
																											if(m_isHardcoreMode){
																												String t_runPlaytimeStr=c_Util::m_GetTimeStringFromMilliseconds(bb_controller_game_runPlaytimeMilliseconds,false,true);
																												c_Util::m_AddMetric(String(L"speedrunWinTime",15),t_runPlaytimeStr,false,false,false);
																											}
																											int t_gameWinScore=c_Player::m_numCoins+m_continuedRunCoinScore;
																											c_Util::m_AddMetric(String(L"gameWinScore",12),String(t_gameWinScore),true,false,false);
																											if(m_isHardcoreMode){
																												if(m_isDailyChallenge){
																													bb_controller_game_dailyChallengeSuccessScore=t_gameWinScore;
																												}else{
																													bb_controller_game_hardcoreModeSuccessScore=t_gameWinScore;
																												}
																												bb_controller_game_speedrunSuccessScore=bb_controller_game_runPlaytimeMilliseconds;
																												if(m_replay!=0){
																													m_replay->m_runTime=bb_controller_game_runPlaytimeMilliseconds;
																												}
																											}
																										}
																										int t_allCharsCompletionCharIndex=bb_controller_game_players[0]->m_characterID;
																										if(bb_controller_game_players[0]->m_characterID>=7){
																											t_allCharsCompletionCharIndex-=1;
																										}
																										if(m_isAllCharactersMode){
																											m_allCharsCompletion[t_allCharsCompletionCharIndex]=true;
																										}
																										if(m_isAllCharactersDLCMode){
																											m_allCharsCompletionDLC[t_allCharsCompletionCharIndex]=true;
																										}
																										if(m_isAllCharactersMode && m_AllCharsAllComplete()){
																											c_Util::m_IncrementSteamStat(String(L"NumAllCharsCompletions",22),true,false,true,false);
																											if(m_isAllCharsRunNoItemsNoShrines){
																												c_Util::m_IncrementSteamStat(String(L"NumAllCharsLowPercentCompletions",32),true,false,true,false);
																											}
																											m_UnlockChar(7);
																										}
																										if(m_isAllCharactersDLCMode && m_AllCharsDLCAllComplete()){
																											c_Util::m_IncrementSteamStat(String(L"NumAllCharsDLCCompletions",25),true,false,true,false);
																										}
																										bb_controller_game_controllerGamePointer->m_specialScoreSubmit=false;
																										if(m_isAllCharactersMode && (!m_isDeathlessMode || !m_AllCharsAllComplete())){
																											gc_assign(m_popUpController,(new c_ControllerPopUp)->m_new((bb_controller_game_controllerGamePointer),String(L"|35|Submit score for this run?|",31),String(),String(),String(L"|1004|NO|",9),String(L"|1003|YES|",10),true,false,String()));
																											m_popUpType=4;
																											return;
																										}
																										if(m_isAllCharactersDLCMode && (m_isDeathlessMode || !m_AllCharsDLCAllComplete())){
																											gc_assign(m_popUpController,(new c_ControllerPopUp)->m_new((bb_controller_game_controllerGamePointer),String(L"|35|Submit score for this run?|",31),String(),String(),String(L"|1004|NO|",9),String(L"|1003|YES|",10),true,false,String()));
																											m_popUpType=4;
																											return;
																										}
																										if(m_isDeathlessMode){
																											m_deathlessWinCount+=1;
																											if(c_Util::m_IsCharacterActive(0)){
																												c_Util::m_SetSteamIntStat(String(L"MaxCadenceDeathlessStreak",25),m_deathlessWinCount,true,false,false);
																											}
																											m_DoQuickRestart(true,true,false);
																											return;
																										}
																										if(!m_isStoryMode || c_Util::m_IsCharacterActive(2)){
																											if(!m_isHardcoreMode || m_isReplaying){
																												if(m_isReplaying){
																													(new c_ControllerPostGame)->m_new(bb_controller_game_controllerGamePointer,m_isHardcoreMode,m_isDailyChallenge,m_isAllCharactersMode,false,false,t_totalCoins,t_runTime);
																												}else{
																													(new c_ControllerPostGame)->m_new(bb_controller_game_controllerGamePointer,m_isHardcoreMode,m_isDailyChallenge,m_isAllCharactersMode,false,false,-1,-1);
																												}
																											}else{
																												bb_controller_game_controllerGamePointer->m_coinVal=-1;
																												bb_controller_game_controllerGamePointer->m_timeVal=-1;
																												bb_controller_game_hasWon=true;
																											}
																										}else{
																											gc_assign(m_popUpController,(new c_ControllerPopUp)->m_new((bb_controller_game_controllerGamePointer),String(L"|35|Submit score for this run?|",31),String(),String(),String(L"|1004|NO|",9),String(L"|1003|YES|",10),true,false,String()));
																											m_popUpType=4;
																										}
																										return;
																									}
																								}
																							}else{
																								if(t_isTrainingLevel){
																									m_isTrainingMode=true;
																									m_practiceEnemyNum=bb_controller_game_currentLevel+bb_math_Abs(-1000);
																									int t_78=bb_controller_game_currentLevel;
																									if(t_78==-500){
																										m_forceBoss=1;
																										bb_controller_game_currentDepth=bb_controller_game_currentZone;
																										m_CreateBossBattle();
																									}else{
																										if(t_78==-499){
																											m_forceBoss=2;
																											bb_controller_game_currentDepth=bb_controller_game_currentZone;
																											m_CreateBossBattle();
																										}else{
																											if(t_78==-498){
																												m_forceBoss=3;
																												bb_controller_game_currentDepth=bb_controller_game_currentZone;
																												m_CreateBossBattle();
																											}else{
																												if(t_78==-497){
																													m_forceBoss=4;
																													bb_controller_game_currentDepth=bb_controller_game_currentZone;
																													m_CreateBossBattle();
																												}else{
																													if(t_78==-496){
																														m_forceBoss=5;
																														bb_controller_game_currentDepth=bb_controller_game_currentZone;
																														m_CreateBossBattle();
																													}else{
																														if(t_78==-495){
																															m_forceBoss=9;
																															bb_controller_game_currentZone=4;
																															bb_controller_game_currentDepth=4;
																															m_CreateBossBattle();
																														}else{
																															if(t_78==-494){
																																m_bossNumber=6;
																																bb_controller_game_currentZone=4;
																																bb_controller_game_currentDepth=4;
																																m_CreateFinalBossBattle();
																															}else{
																																if(t_78==-493){
																																	m_bossNumber=7;
																																	bb_controller_game_currentZone=4;
																																	bb_controller_game_currentDepth=4;
																																	m_CreateFinalBossBattle2();
																																}else{
																																	if(t_78==-492){
																																		m_bossNumber=8;
																																		bb_controller_game_currentZone=1;
																																		bb_controller_game_currentDepth=4;
																																		m_CreateFinalBossBattle3();
																																	}else{
																																		if(t_78==-491){
																																			m_forceBoss=10;
																																			bb_controller_game_currentZone=5;
																																			bb_controller_game_currentDepth=5;
																																			m_CreateBossBattle();
																																		}else{
																																			if(t_78==-490){
																																				m_bossNumber=11;
																																				bb_controller_game_currentZone=5;
																																				bb_controller_game_currentDepth=5;
																																				m_CreateFinalBossBattleConductor();
																																			}else{
																																				m_isBeastmaster=true;
																																				m_CreateTrainingMap();
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}else{
																									if(t_allPlayersPerished || -2000<=bb_controller_game_currentLevel && bb_controller_game_currentLevel<=-1985){
																										if(!m_quickRestart && c_ControllerLevelEditor::m_playingLevel==-1){
																											if(-2000<=bb_controller_game_currentLevel && bb_controller_game_currentLevel<=-1985){
																												int t_characterID5=bb_controller_game_currentLevel+bb_math_Abs(-2000);
																												c_Player* t_player8=bb_controller_game_players[t_playerID];
																												t_player8->p_SetCharacter(t_characterID5);
																												m_isAllCharactersMode=false;
																												m_isAllCharactersDLCMode=false;
																											}
																											m_isSeededMode=false;
																											m_isHardcoreMode=false;
																											m_isDailyChallenge=false;
																											m_isDDRMode=false;
																											bb_controller_game_currentLevel=-2;
																											m_CreateLobby();
																										}else{
																											m_ResetCustomLevel(t_inEditor,t_randSeed);
																											m_CreateMap(t_levelObj);
																										}
																									}else{
																										m_ResetCustomLevel(t_inEditor,t_randSeed);
																										m_CreateMap(t_levelObj);
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	if(m_isFloorIsLavaMode){
		c_NodeEnumerator* t_2=m_tiles->p_ObjectEnumerator();
		while(t_2->p_HasNext()){
			c_Node25* t_tilesOnXNode=t_2->p_NextObject();
			c_NodeEnumerator2* t_3=t_tilesOnXNode->p_Value()->p_ObjectEnumerator();
			while(t_3->p_HasNext()){
				c_Node26* t_tileNode=t_3->p_NextObject();
				c_Tile* t_tile=t_tileNode->p_Value();
				if(!((t_tile->m_trigger)!=0)){
					if(t_tile->p_IsNormalFloor()){
						if(!c_Util::m_IsAnyPlayerAt(t_tile->m_x,t_tile->m_y) && c_Shrine::m_GetShrineAt(t_tile->m_x,t_tile->m_y-1)==0){
							m_PlaceTileRemovingExistingTiles2(t_tile->m_x,t_tile->m_y,10);
						}
					}
					if(t_tile->p_IsDoor()){
						m_PlaceTileRemovingExistingTiles2(t_tile->m_x,t_tile->m_y,10);
					}
				}
			}
		}
		while(!c_Chest::m_chestList->p_IsEmpty()){
			c_Chest* t_chest=c_Chest::m_chestList->p_First();
			t_chest->p_Open(0);
		}
	}
	int t_creatingMapEnd=bb_app_Millisecs();
	int t_creatingMapDuration=t_creatingMapEnd-t_creatingMapStart;
	bb_logger_Debug->p_Log(String(L"Level generation completed in ",30)+String(t_creatingMapDuration)+String(L" ms",3));
	if(c_Shrine::m_paceShrineActive){
		c_Player* t_firstPlayer6=bb_controller_game_players[0];
		if(t_firstPlayer6->m_paceBeat==-1){
			String t_itemName=c_Item::m_GetRandomItemInClass(String(),bb_controller_game_currentLevel,String(L"chestChance",11),0,false,String(),true);
			(new c_Item)->m_new(0,1,t_itemName,false,-1,false);
		}
	}
	m_skipNextPenaltyBox=false;
	m_creatingMap=false;
	if(m_isHardMode){
		c_XMLDoc* t_hardModeXML=m_GetHardModeXML();
		if(t_hardModeXML->p_GetAttribute2(String(L"spawnHelperItems",16),false)){
			int t_x2=-2;
			if(!m_IsFloorAt(t_x2,0)){
				t_x2=-1;
			}
			int t_helperItemName=c_Item::m_RandomHardModeHelperItem();
			(new c_Item)->m_new(t_x2,0,String(t_helperItemName),false,-1,false);
		}
	}
	if(bb_controller_game_currentLevel<=0){
		c_Crate::m_fallenCrates->p_Clear();
		c_Crate::m_fallenGargoyles->p_Clear();
	}else{
		c_Crate::m_ProcessFallenCrates();
	}
	if(t_isTrainingLevel){
		for(int t_i10=0;t_i10<bb_controller_game_numPlayers;t_i10=t_i10+1){
			c_Player* t_player9=bb_controller_game_players[t_i10];
			t_player9->p_EmptyAllSlots(true);
			t_player9->p_GiveInitialEquipment(true);
			t_player9->p_AddItemOfType(String(L"bomb",4),0,true,true);
			if(m_isFloorIsLavaMode){
				if(!t_player9->p_IsSlotCursed(String(L"weapon",6))){
					t_player9->p_EmptySlot(String(L"weapon",6));
					t_player9->p_AddItemOfType(String(L"weapon_cat",10),0,true,true);
				}
			}
		}
	}else{
		if(m_isTrainingMode){
			for(int t_i11=0;t_i11<bb_controller_game_numPlayers;t_i11=t_i11+1){
				c_Player* t_player10=bb_controller_game_players[t_i11];
				if(t_player10->m_numBombs==0){
					t_player10->p_AddItemOfType(String(L"bomb",4),0,true,true);
				}
			}
		}
	}
	for(int t_i12=0;t_i12<bb_controller_game_numPlayers;t_i12=t_i12+1){
		c_Player* t_player11=bb_controller_game_players[t_i12];
		t_player11->m_temporaryMapSight=false;
	}
	if(t_isTrainingLevel){
		if(m_isDDRMode){
			for(int t_i13=0;t_i13<bb_controller_game_numPlayers;t_i13=t_i13+1){
				c_Player* t_player12=bb_controller_game_players[t_i13];
				if(t_player12!=0){
					int t_79=t_player12->m_characterID;
					if(t_79==2 || t_79==1 || t_79==7){
						t_player12->p_AddItemOfType(String(L"armor_glass",11),0,true,false);
						t_player12->p_AddItemOfType(String(L"spell_fireball",14),0,true,false);
						t_player12->p_AddItemOfType(String(L"spell_heal",10),0,true,false);
					}else{
						if(t_79==4 || t_79==10){
							t_player12->m_health->p_Reset2(10);
							t_player12->p_AddItemOfType(String(L"spell_fireball",14),0,true,false);
							t_player12->p_AddItemOfType(String(L"spell_heal",10),0,true,false);
						}else{
							if(t_79==6){
								t_player12->m_health->p_Reset2(10);
								t_player12->p_AddItemOfType(String(L"spell_heal",10),0,true,false);
							}else{
								if(t_79==11){
									t_player12->m_health->p_Reset2(10);
								}else{
									t_player12->m_ownedItems->p_Set8(String(L"weapon",6),String(L"no_item",7));
									t_player12->p_AddItemOfType(String(L"weapon_broadsword",17),0,true,false);
									t_player12->m_health->p_Reset2(10);
									t_player12->p_AddItemOfType(String(L"spell_fireball",14),0,true,false);
									t_player12->p_AddItemOfType(String(L"spell_heal",10),0,true,false);
								}
							}
						}
					}
				}
			}
		}
		c_Tile::m_anyPlayerHaveRingOfShadowsCachedFrame=-1;
		c_Tile::m_anyPlayerHaveCompassCachedFrame=-1;
		c_Tile::m_anyPlayerHaveZoneMapCachedFrame=-1;
		c_Tile::m_anyPlayerHaveMonocleCachedFrame=-1;
		c_Tile::m_anyPlayerHaveRingOfLuckCachedFrame=-1;
		c_Tile::m_anyPlayerHaveSunglassesCachedFrame=-1;
		c_Entity::m_anyPlayerHaveCircletCachedFrame=-1;
		c_Entity::m_anyPlayerHaveGlassTorchCachedFrame=-1;
		c_Entity::m_anyPlayerHaveForesightTorchCachedFrame=-1;
		c_Entity::m_anyPlayerHaveWallsTorchCachedFrame=-1;
		c_Entity::m_anyPlayerHaveNazarCharmCachedFrame=-1;
		if(!m_isReplaying && !m_isLevelEditor && t_levelObj==0){
			for(int t_i14=0;t_i14<bb_controller_game_numPlayers;t_i14=t_i14+1){
				c_Player* t_player13=bb_controller_game_players[t_i14];
				t_player13->m_health->p_Refill();
			}
			c_Chain::m_kills=0;
			if(!t_continuedRun){
				m_usedCustomMusic=false;
			}
			if(!t_setTodaysRandSeedString){
				m_todaysRandSeedString=String();
			}
			c_Replay* t_replay=(new c_Replay)->m_new();
			t_replay->m_startingLevel=bb_controller_game_currentLevel;
			t_replay->m_startingZone=bb_controller_game_currentZone;
			t_replay->m_saveData=String();
			t_replay->m_startingGold=c_Player::m_numCoins;
			c_Player* t_player1=bb_controller_game_players[bb_controller_game_player1];
			t_replay->m_hasBroadsword=t_player1->p_HasItemOfType(String(L"weapon_broadsword",17),false);
		}
	}
	if(m_replay!=0 && !m_isReplaying){
		m_replay->p_NewLevel(t_randSeed);
	}
	if(t_isTrainingLevel && !m_isLevelEditor && t_levelObj==0 && !m_isHardcoreMode && !m_isDailyChallenge){
		Array<String > t_diamondDealerItems=c_GameData::m_GetDiamondDealerItems().Split(String(L",",1));
		Array<String > t_4=t_diamondDealerItems;
		int t_5=0;
		while(t_5<t_4.Length()){
			String t_item=t_4[t_5];
			t_5=t_5+1;
			String t_80=t_item;
			if(t_80==String() || t_80==String(L"no_item",7)){
				continue;
			}
			(new c_Item)->m_new(0,0,t_item,false,-1,false);
		}
		c_GameData::m_EraseDiamondDealerItems();
	}
	m_RecalcLevelBoundaries();
	for(int t_i15=0;t_i15<c_Chain::m_waitingForFirstMovement.Length();t_i15=t_i15+1){
		c_Chain::m_waitingForFirstMovement[t_i15]=true;
	}
	for(int t_i16=0;t_i16<bb_controller_game_numPlayers;t_i16=t_i16+1){
		c_Player* t_player14=bb_controller_game_players[t_i16];
		t_player14->p_CancelTween();
		t_player14->m_falling=false;
	}
	c_Camera::m_fadeOutDuration=0;
	c_Camera::m_fadeOutCurrent=0;
	c_Camera::m_fadeOutCallback=0;
	c_Camera::m_fadeInDuration=0;
	c_Camera::m_fadeInCurrent=0;
	c_Camera::m_fadeInCallback=0;
	c_Enemy::m_ApplyMonkeyPawAll();
	for(int t_i17=0;t_i17<bb_controller_game_numPlayers;t_i17=t_i17+1){
		c_Player* t_player15=bb_controller_game_players[t_i17];
		if(t_player15->p_HasItemOfType(String(L"ring_regeneration",17),false) || t_player15->p_HasItemOfType(String(L"ring_wonder",11),false)){
			t_player15->p_Heal(2,false,true,false);
		}
	}
	if(bb_controller_game_currentLevel==1 && bb_controller_game_currentDepth==1){
		m_isRunNoItemsNoShrines=true;
	}
	m_LoadLevelSong(0);
	int t_81=bb_controller_game_currentLevel;
	if(t_81==4 || t_81==5){
		if(c_GameData::m_GetEnableBossIntros() && !m_isReplaying){
			(new c_ControllerBossIntro)->m_new((bb_controller_game_controllerGamePointer),m_bossNumber);
		}
	}
	if(m_mentorLevel!=-1){
		c_Player* t_firstPlayer7=bb_controller_game_players[0];
		t_firstPlayer7->p_SetCharacter(9);
		t_firstPlayer7->p_SetTotallyBlank();
		t_firstPlayer7->m_health->p_Damage(t_firstPlayer7->m_health->p_Get3()-1);
	}
	m_DumpMap();
}
int c_Level::m_lastTileCount;
c_IntPointList* c_Level::m_tileObstructionList;
c_List26* c_Level::m_GetTileObstructionList(bool t_includeOffscreen){
	m_tileObstructionList->p_Clear();
	c_NodeEnumerator* t_=m_tiles->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Node25* t_tilesOnXNode=t_->p_NextObject();
		c_NodeEnumerator2* t_2=t_tilesOnXNode->p_Value()->p_ObjectEnumerator();
		while(t_2->p_HasNext()){
			c_Node26* t_tileNode=t_2->p_NextObject();
			c_Tile* t_tile=t_tileNode->p_Value();
			if(t_tile->p_IsWall(false,false,true,false) && (t_includeOffscreen || t_tile->p_IsOnScreen())){
				m_tileObstructionList->p_AddLast26(t_tile->p_GetLocation());
			}
		}
	}
	return (m_tileObstructionList);
}
bool c_Level::m_CheckLOS(int t_x1,int t_y1,int t_x2,int t_y2,bool t_includeOffscreen){
	Float t_p1_x=Float(t_x1)+FLOAT(0.5);
	Float t_p1_y=Float(t_y1)+FLOAT(0.5);
	bool t_notLineSegmentTileIntersect0=true;
	bool t_notLineSegmentTileIntersect1=true;
	bool t_notLineSegmentTileIntersect2=true;
	bool t_notLineSegmentTileIntersect3=true;
	bool t_notLineSegmentTileIntersect4=true;
	c_Enumerator16* t_=m_GetTileObstructionList(false)->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Point* t_tileObstruction=t_->p_NextObject();
		if(t_tileObstruction->m_x==t_x2 && t_tileObstruction->m_y==t_y2){
			continue;
		}
		if(t_tileObstruction->m_x>t_x2 && Float(t_tileObstruction->m_x)>t_p1_x){
			continue;
		}
		if(t_tileObstruction->m_x<t_x2-1 && Float(t_tileObstruction->m_x)<t_p1_x-FLOAT(1.0)){
			continue;
		}
		if(t_tileObstruction->m_y>t_y2 && Float(t_tileObstruction->m_y)>t_p1_y){
			continue;
		}
		if(t_tileObstruction->m_y<t_y2-1 && Float(t_tileObstruction->m_y)<t_p1_y-FLOAT(1.0)){
			continue;
		}
		if(t_notLineSegmentTileIntersect0){
			t_notLineSegmentTileIntersect0=!c_Util::m_LineSegmentTileIntersect(Float(t_x2)-FLOAT(0.01),Float(t_y2)-FLOAT(0.01),t_p1_x,t_p1_y,Float(t_tileObstruction->m_x),Float(t_tileObstruction->m_y));
		}
		if(t_notLineSegmentTileIntersect1){
			t_notLineSegmentTileIntersect1=!c_Util::m_LineSegmentTileIntersect(Float(t_x2)-FLOAT(1.01),Float(t_y2)-FLOAT(0.01),t_p1_x,t_p1_y,Float(t_tileObstruction->m_x),Float(t_tileObstruction->m_y));
		}
		if(t_notLineSegmentTileIntersect2){
			t_notLineSegmentTileIntersect2=!c_Util::m_LineSegmentTileIntersect(Float(t_x2)-FLOAT(1.01),Float(t_y2)-FLOAT(1.01),t_p1_x,t_p1_y,Float(t_tileObstruction->m_x),Float(t_tileObstruction->m_y));
		}
		if(t_notLineSegmentTileIntersect3){
			t_notLineSegmentTileIntersect3=!c_Util::m_LineSegmentTileIntersect(Float(t_x2)-FLOAT(0.01),Float(t_y2)-FLOAT(1.01),t_p1_x,t_p1_y,Float(t_tileObstruction->m_x),Float(t_tileObstruction->m_y));
		}
		if(t_notLineSegmentTileIntersect4){
			t_notLineSegmentTileIntersect4=!c_Util::m_LineSegmentTileIntersect(Float(t_x2)-FLOAT(0.50),Float(t_y2)-FLOAT(0.50),t_p1_x,t_p1_y,Float(t_tileObstruction->m_x),Float(t_tileObstruction->m_y));
		}
	}
	return t_notLineSegmentTileIntersect0 || t_notLineSegmentTileIntersect1 || t_notLineSegmentTileIntersect2 || t_notLineSegmentTileIntersect3 || t_notLineSegmentTileIntersect4;
}
void c_Level::m_RefreshLineOfSightTiles(){
	bool t_refreshLOS=false;
	for(int t_i=0;t_i<bb_controller_game_numPlayers;t_i=t_i+1){
		c_Player* t_player=bb_controller_game_players[t_i];
		if(!t_player->p_Perished() && (m_lastTileCount!=c_Tile::m_totalTilesCreatedOrDestroyed || t_player->m_x!=t_player->m_lastLOSX || t_player->m_y!=t_player->m_lastLOSY)){
			t_refreshLOS=true;
			break;
		}
	}
	if(!t_refreshLOS){
		return;
	}
	c_NodeEnumerator* t_=m_tiles->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Node25* t_tilesOnXNode=t_->p_NextObject();
		c_NodeEnumerator2* t_2=t_tilesOnXNode->p_Value()->p_ObjectEnumerator();
		while(t_2->p_HasNext()){
			c_Node26* t_tileNode=t_2->p_NextObject();
			c_Tile* t_tile=t_tileNode->p_Value();
			t_tile->m_cachedTrueLOS=false;
			t_tile->m_cachedTrueLOSFrame=bb_necrodancergame_globalFrameCounter;
		}
	}
	m_lastTileCount=c_Tile::m_totalTilesCreatedOrDestroyed;
	for(int t_i2=0;t_i2<bb_controller_game_numPlayers;t_i2=t_i2+1){
		c_Player* t_player2=bb_controller_game_players[t_i2];
		if(!t_player2->p_Perished() || bb_controller_game_player1!=((t_player2->m_playerID==0)?1:0)){
			t_player2->m_lastLOSX=t_player2->m_x;
			t_player2->m_lastLOSY=t_player2->m_y;
			c_NodeEnumerator* t_3=m_tiles->p_ObjectEnumerator();
			while(t_3->p_HasNext()){
				c_Node25* t_tilesOnXNode2=t_3->p_NextObject();
				c_NodeEnumerator2* t_4=t_tilesOnXNode2->p_Value()->p_ObjectEnumerator();
				while(t_4->p_HasNext()){
					c_Node26* t_tileNode2=t_4->p_NextObject();
					c_Tile* t_tile2=t_tileNode2->p_Value();
					if(t_tile2->p_IsOnScreen()){
						if(m_CheckLOS(t_player2->m_x,t_player2->m_y,t_tile2->m_x,t_tile2->m_y,false)){
							t_tile2->m_cachedTrueLOS=true;
						}
					}
				}
			}
		}
	}
}
bool c_Level::m_IsLockedExit(int t_xVal,int t_yVal){
	return m_GetExitValue(t_xVal,t_yVal)->m_x==-5 || m_GetExitValue(t_xVal,t_yVal)->m_x==-6;
}
String c_Level::m_GetTileFlyawayAt(int t_xVal,int t_yVal){
	c_Tile* t_tile=m_GetTileAt(t_xVal,t_yVal);
	if(t_tile!=0){
		return t_tile->m_flyawayText;
	}
	return String();
}
bool c_Level::m_IsSeededMode2(int t_mode){
	int t_60=t_mode;
	if(t_60==-53 || t_60==-10 || t_60==-63 || t_60==-56 || t_60==-62 || t_60==-64){
		return true;
	}
	return false;
}
void c_Level::m_TakeActionAfterAllCharsScoreSubmit(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Level.TakeActionAfterAllCharsScoreSubmit()",42));
}
void c_Level::m_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Level.Update()",14));
}
c_Minimap* c_Level::m_minimap;
bool c_Level::m_IsVisibleTileAt(int t_xVal,int t_yVal){
	c_Tile* t_tile=m_GetTileAt(t_xVal,t_yVal);
	return t_tile!=0 && t_tile->p_IsVisible();
}
void c_Level::m_RemoveExit(int t_xVal,int t_yVal){
	m_exits->p_Remove4((new c_Point)->m_new(t_xVal,t_yVal));
}
int c_Level::m_maxLevelX;
int c_Level::m_minLevelX;
int c_Level::m_maxLevelY;
int c_Level::m_minLevelY;
Array<Float > c_Level::m_mapLightValues;
Array<Float > c_Level::m_constMapLightValues;
Float c_Level::m_ActuallyGetMapTileLightValue(int t_xVal,int t_yVal,bool t_forVision){
	if(t_xVal<m_minLevelX || t_xVal>m_maxLevelX){
		return FLOAT(0.0);
	}
	if(t_yVal<m_minLevelY || t_yVal>m_maxLevelY){
		return FLOAT(0.0);
	}
	int t_i=t_xVal+(t_yVal-m_minLevelY)*(m_maxLevelX-m_minLevelX)-m_minLevelX;
	if(t_forVision){
		return m_constMapLightValues[t_i];
	}
	return m_mapLightValues[t_i];
}
Float c_Level::m_GetMapTileLightValue(int t_xVal,int t_yVal,bool t_forVision){
	if(m_mapLightValuesCachedFrame!=bb_necrodancergame_globalFrameCounter){
		int t_xDiff=m_maxLevelX-m_minLevelX;
		int t_yDiff=m_maxLevelY-m_minLevelY;
		if(!m_mapLightValuesInitialized){
			int t_length=(t_xDiff+1)*(t_yDiff+1);
			gc_assign(m_mapLightValues,m_mapLightValues.Resize(t_length));
			gc_assign(m_constMapLightValues,m_constMapLightValues.Resize(t_length));
			m_mapLightValuesInitialized=true;
		}
		m_mapLightValuesCachedFrame=bb_necrodancergame_globalFrameCounter;
		int t_i=0;
		for(int t_x=m_minLevelX;t_x<=m_maxLevelX;t_x=t_x+1){
			for(int t_y=m_minLevelY;t_y<=m_maxLevelY;t_y=t_y+1){
				m_constMapLightValues[t_i]=FLOAT(0.0);
				m_mapLightValues[t_i]=FLOAT(0.0);
				t_i+=1;
			}
		}
		c_Enumerator5* t_=c_RenderableObject::m_lightSourceList->p_ObjectEnumerator();
		while(t_->p_HasNext()){
			c_RenderableObject* t_lightSource=t_->p_NextObject();
			if(c_Shrine::m_darknessShrineActive && !t_lightSource->m_isPlayer){
				continue;
			}
		}
		bb_logger_Debug->p_TraceNotImplemented(String(L"Level.GetMapTileLightValue(Int, Int, Bool)",42));
	}
	return m_ActuallyGetMapTileLightValue(t_xVal,t_yVal,t_forVision);
}
void c_Level::m_PlaceHotCoalTileAt(int t_xVal,int t_yVal){
	c_Point* t_exitValue=m_GetExitValue(t_xVal,t_yVal);
	if(t_exitValue->m_x!=-4){
		return;
	}
	if(!m_IsFloorAt(t_xVal,t_yVal)){
		return;
	}
	int t_107=m_GetTileTypeAt(t_xVal,t_yVal);
	if(t_107==11){
		m_PlaceTileRemovingExistingTiles2(t_xVal,t_yVal,4);
	}else{
		c_Trap* t_trap=c_Trap::m_GetTrapAt(t_xVal,t_yVal);
		if(t_trap!=0){
			t_trap->p_Die();
		}
		m_PlaceTileRemovingExistingTiles2(t_xVal,t_yVal,11);
	}
}
void c_Level::m_PlaceIceTileAt(int t_xVal,int t_yVal){
	c_Point* t_exitValue=m_GetExitValue(t_xVal,t_yVal);
	if(t_exitValue->m_x!=-4){
		return;
	}
	if(!m_IsFloorAt(t_xVal,t_yVal)){
		return;
	}
	int t_108=m_GetTileTypeAt(t_xVal,t_yVal);
	if(t_108==10){
		m_PlaceTileRemovingExistingTiles2(t_xVal,t_yVal,4);
	}else{
		if(t_108==4 || t_108==5){
			m_PlaceTileRemovingExistingTiles2(t_xVal,t_yVal,0);
		}else{
			c_Trap* t_trap=c_Trap::m_GetTrapAt(t_xVal,t_yVal);
			if(t_trap!=0){
				t_trap->p_Die();
			}
			m_PlaceTileRemovingExistingTiles2(t_xVal,t_yVal,10);
		}
	}
}
void c_Level::m_PlaceTileTypeAt(int t_xVal,int t_yVal,int t_tileType){
	c_Point* t_exitValue=m_GetExitValue(t_xVal,t_yVal);
	if(t_exitValue->m_x!=-4){
		return;
	}
	if(!m_IsFloorAt(t_xVal,t_yVal)){
		return;
	}
	m_PlaceTileRemovingExistingTiles2(t_xVal,t_yVal,t_tileType);
	c_Trap* t_trap=c_Trap::m_GetTrapAt(t_xVal,t_yVal);
	if(t_trap!=0 && !t_trap->m_indestructible){
		t_trap->p_Die();
	}
}
void c_Level::m_DryUpAllWater(int t_replacementFloor){
	c_NodeEnumerator* t_=m_tiles->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Node25* t_tilesOnXNode=t_->p_NextObject();
		c_NodeEnumerator2* t_2=t_tilesOnXNode->p_Value()->p_ObjectEnumerator();
		while(t_2->p_HasNext()){
			c_Node26* t_tileNode=t_2->p_NextObject();
			c_Tile* t_tile=t_tileNode->p_Value();
			int t_tileType=m_GetTileTypeAt(t_tile->m_x,t_tile->m_y);
			int t_42=t_tileType;
			if(t_42==4 || t_42==5){
				m_PlaceTileRemovingExistingTiles2(t_tile->m_x,t_tile->m_y,t_replacementFloor);
			}
		}
	}
}
void c_Level::mark(){
	Object::mark();
}
c_LevelObject::c_LevelObject(){
	m_bossNum=-1;
	m_tiles=(new c_List24)->m_new();
	m_traps=(new c_List25)->m_new();
	m_enemies=(new c_List29)->m_new();
	m_items=(new c_List30)->m_new();
	m_chests=(new c_List31)->m_new();
	m_crates=(new c_List34)->m_new();
	m_shrines=(new c_List35)->m_new();
}
void c_LevelObject::p_CreateMap(){
	c_Enumerator14* t_=m_tiles->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_TileObject* t_tileObj=t_->p_NextObject();
		c_Tile* t_tile=c_Level::m_PlaceTileRemovingExistingTiles(t_tileObj->m_x,t_tileObj->m_y,t_tileObj->m_type,false,t_tileObj->m_zone,false);
		if(t_tileObj->m_cracked){
			t_tile->p_BecomeCracked();
		}
		if(t_tileObj->m_torch){
			t_tile->p_AddTorch();
		}
		int t_2=t_tile->m_type;
		if(t_2==2){
			c_Point* t_exitKey=(new c_Point)->m_new(t_tile->m_x,t_tile->m_y);
			c_Point* t_exitValue=(new c_Point)->m_new(-3,bb_controller_game_currentZone);
			c_Level::m_exits->p_Set15(t_exitKey,t_exitValue);
		}else{
			if(t_2==9){
				c_Level::m_CreateExit(t_tile->m_x,t_tile->m_y);
			}
		}
	}
	c_Tile::m_GenerateWireConnections();
	c_Enumerator15* t_3=m_traps->p_ObjectEnumerator();
	while(t_3->p_HasNext()){
		c_TrapObject* t_trapObj=t_3->p_NextObject();
		int t_32=t_trapObj->m_type;
		if(t_32==1){
			(new c_BounceTrap)->m_new(t_trapObj->m_x,t_trapObj->m_y,t_trapObj->m_subtype);
		}else{
			if(t_32==2){
				(new c_SpikeTrap)->m_new(t_trapObj->m_x,t_trapObj->m_y);
			}else{
				if(t_32==3){
					(new c_TrapDoor)->m_new(t_trapObj->m_x,t_trapObj->m_y);
				}else{
					if(t_32==4){
						(new c_ConfuseTrap)->m_new(t_trapObj->m_x,t_trapObj->m_y);
					}else{
						if(t_32==5){
							(new c_TeleportTrap)->m_new(t_trapObj->m_x,t_trapObj->m_y);
						}else{
							if(t_32==6){
								(new c_SlowDownTrap)->m_new(t_trapObj->m_x,t_trapObj->m_y);
							}else{
								if(t_32==7){
									(new c_SpeedUpTrap)->m_new(t_trapObj->m_x,t_trapObj->m_y);
								}else{
									if(t_32==9){
										(new c_BombTrap)->m_new(t_trapObj->m_x,t_trapObj->m_y);
									}else{
										if(t_32==14){
											(new c_ScatterTrap)->m_new(t_trapObj->m_x,t_trapObj->m_y);
										}else{
											if(t_32==10){
												(new c_FireTrap)->m_new(t_trapObj->m_x,t_trapObj->m_y,t_trapObj->m_subtype,false);
											}else{
												if(t_32==8){
													if(!c_Level::m_isLevelEditor){
														c_Level::m_secretAtX=t_trapObj->m_x;
														c_Level::m_secretAtY=t_trapObj->m_y;
														c_Level::m_AddSpecialRoom(t_trapObj->m_subtype,false);
													}
													(new c_TravelRune)->m_new(t_trapObj->m_x,t_trapObj->m_y,c_Level::m_specialRoomEntranceX,c_Level::m_specialRoomEntranceY,t_trapObj->m_subtype);
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	c_Enumerator17* t_4=m_enemies->p_ObjectEnumerator();
	while(t_4->p_HasNext()){
		c_EnemyObject* t_enemyObj=t_4->p_NextObject();
		c_Enemy* t_enemy=c_Enemy::m_MakeEnemy(t_enemyObj->m_x,t_enemyObj->m_y,t_enemyObj->m_type);
		if(t_enemyObj->m_beatDelay!=-1){
			t_enemy->m_currentMoveDelay=t_enemyObj->m_beatDelay;
		}
		if(t_enemyObj->m_lord){
			t_enemy->p_MakeLord();
		}
		if(t_enemy->m_isMiniboss){
			t_enemy->m_isStairLockingMiniboss=true;
		}
	}
	c_Enumerator18* t_5=m_items->p_ObjectEnumerator();
	while(t_5->p_HasNext()){
		c_ItemObject* t_itemObj=t_5->p_NextObject();
		c_Item* t_item=0;
		if(t_itemObj->m_bloodCost<=FLOAT(0.0)){
			if(t_itemObj->m_saleCost<=0){
				t_item=(new c_Item)->m_new(t_itemObj->m_x,t_itemObj->m_y,t_itemObj->m_type,false,-1,false);
			}else{
				t_item=((new c_SaleItem)->m_new(t_itemObj->m_x,t_itemObj->m_y,t_itemObj->m_type,false,0,FLOAT(-1.0),0));
			}
		}else{
			t_item=((new c_SaleItem)->m_new(t_itemObj->m_x,t_itemObj->m_y,t_itemObj->m_type,true,0,FLOAT(-1.0),0));
		}
		t_item->m_singleChoiceItem=t_itemObj->m_singleChoice;
	}
	c_Enumerator19* t_6=m_chests->p_ObjectEnumerator();
	while(t_6->p_HasNext()){
		c_ChestObject* t_chestObj=t_6->p_NextObject();
		c_Chest* t_chest=0;
		if(t_chestObj->m_saleCost<=0){
			t_chest=(new c_Chest)->m_new(t_chestObj->m_x,t_chestObj->m_y,t_chestObj->m_contents,t_chestObj->m_hidden,false,t_chestObj->m_hidden,t_chestObj->m_color);
		}else{
			t_chest=((new c_SaleChest)->m_new(t_chestObj->m_x,t_chestObj->m_y,t_chestObj->m_contents,t_chestObj->m_hidden,false,t_chestObj->m_hidden,t_chestObj->m_color));
		}
		t_chest->m_singleChoiceChest=t_chestObj->m_singleChoice;
	}
	c_Enumerator20* t_7=m_crates->p_ObjectEnumerator();
	while(t_7->p_HasNext()){
		c_CrateObject* t_crateObj=t_7->p_NextObject();
		(new c_Crate)->m_new(t_crateObj->m_x,t_crateObj->m_y,t_crateObj->m_type,t_crateObj->m_contents);
	}
	c_Enumerator21* t_8=m_shrines->p_ObjectEnumerator();
	while(t_8->p_HasNext()){
		c_ShrineObject* t_shrineObj=t_8->p_NextObject();
		(new c_Shrine)->m_new(t_shrineObj->m_x,t_shrineObj->m_y,t_shrineObj->m_type,0,false,false);
	}
}
void c_LevelObject::mark(){
	Object::mark();
	gc_mark_q(m_tiles);
	gc_mark_q(m_traps);
	gc_mark_q(m_enemies);
	gc_mark_q(m_items);
	gc_mark_q(m_chests);
	gc_mark_q(m_crates);
	gc_mark_q(m_shrines);
}
int bb_controller_game_currentLevel;
int bb_controller_game_currentZone;
int bb_controller_game_currentDepth;
c_RenderableObject::c_RenderableObject(){
	m_perished=false;
	m_dead=false;
	m_x=0;
	m_y=0;
	m_lastFrameX=0;
	m_lastFrameY=0;
	m_isMobile=false;
	m_isFamiliar=false;
	m_isPlayer=false;
	m_constLightSourceMax=FLOAT(.0);
	m_lightSource=false;
	m_lightSourceMin=FLOAT(.0);
	m_lightSourceMax=FLOAT(.0);
	m_collides=false;
	m_isEnemy=false;
	m_lightSourceBrightness=FLOAT(1.0);
	m_isTrap=false;
	m_isItem=false;
	m_isCrate=false;
	m_isNPC=false;
	m_playerOverrideCollide=false;
	m_width=1;
	m_height=1;
	m_isChest=false;
	m_clampedOn=false;
}
c_List2* c_RenderableObject::m_renderableObjectList;
c_List2* c_RenderableObject::m_lightSourceList;
void c_RenderableObject::p_Die(){
	if(!this->m_dead){
		m_renderableObjectList->p_RemoveEach(this);
		m_lightSourceList->p_RemoveEach(this);
		this->m_dead=true;
	}
}
c_RenderableObject* c_RenderableObject::m_new(){
	m_renderableObjectList->p_AddLast2(this);
	this->m_lastFrameX=this->m_x;
	this->m_lastFrameY=this->m_y;
	return this;
}
void c_RenderableObject::p_ActivateLight(Float t_lMin,Float t_lMax){
	this->m_lightSource=true;
	this->m_lightSourceMin=t_lMin;
	this->m_lightSourceMax=t_lMax;
	this->m_constLightSourceMax=t_lMax;
	m_lightSourceList->p_AddLast2(this);
}
c_Point* c_RenderableObject::p_GetLocation(){
	return (new c_Point)->m_new(this->m_x,this->m_y);
}
bool c_RenderableObject::m_deletingAll;
void c_RenderableObject::m_DeleteAll(bool t_spareThePlayers){
	m_deletingAll=true;
	c_Enumerator5* t_=m_renderableObjectList->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_RenderableObject* t_renderableObj=t_->p_NextObject();
		if(!t_spareThePlayers || !t_renderableObj->m_isPlayer && !t_renderableObj->m_isFamiliar){
			t_renderableObj->p_Die();
		}
	}
	c_Entity::m_deadEntityList->p_Clear();
	m_deletingAll=false;
}
bool c_RenderableObject::p_IsOnTile(int t_px,int t_py){
	bb_logger_Debug->p_TraceNotImplemented(String(L"RenderableObject.IsOnTile(Int, Int)",35));
	return false;
}
void c_RenderableObject::p_Update(){
}
bool c_RenderableObject::p_IsFrozen(bool t_ignoreLastBeat){
	return false;
}
bool c_RenderableObject::p_IsOnScreen(){
	return c_Util::m_IsOnScreen(this->m_x,this->m_y,c_Camera::m_seekX,c_Camera::m_seekY);
}
void c_RenderableObject::m_UpdateAll(){
	for(int t_i=0;t_i<bb_controller_game_numPlayers;t_i=t_i+1){
		c_Player* t_player=bb_controller_game_players[t_i];
		if(t_player->m_helper!=0){
			t_player->m_helper->p_Update();
		}
		t_player->p_Update();
	}
	c_Enumerator5* t_=m_renderableObjectList->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_RenderableObject* t_renderableObj=t_->p_NextObject();
		if(t_renderableObj->m_isPlayer){
			continue;
		}
		t_renderableObj->p_Update();
	}
	c_Enumerator5* t_2=m_renderableObjectList->p_ObjectEnumerator();
	while(t_2->p_HasNext()){
		c_RenderableObject* t_renderableObj2=t_2->p_NextObject();
		t_renderableObj2->m_lastFrameX=t_renderableObj2->m_x;
		t_renderableObj2->m_lastFrameY=t_renderableObj2->m_y;
	}
}
bool c_RenderableObject::m_HitTile(String t_damageSource,int t_xVal,int t_yVal,int t_damage,int t_dir,c_Entity* t_hitter,bool t_allowSelfHits,bool t_phasing,bool t_piercing,bool t_confuse,bool t_frost){
	bb_logger_Debug->p_TraceNotImplemented(String(L"RenderableObject.HitTile(String, Int, Int, Int, Int, Entity, Bool, Bool, Bool, Bool, Bool)",90));
	return false;
}
void c_RenderableObject::mark(){
	Object::mark();
}
c_Entity::c_Entity(){
	m_confusedParticles=0;
	m_image=0;
	m_shadow=0;
	m_xOff=FLOAT(.0);
	m_yOff=FLOAT(.0);
	m_entityNum=-1;
	m_lastX=0;
	m_lastY=0;
	m_hasSilhouette=true;
	m_bounce=0;
	m_frozenImage=0;
	m_frozenStoneImage=0;
	m_coinsToDrop=1;
	m_falling=false;
	m_confusedUntil=-1;
	m_floating=false;
	m_level=0;
	m_xmlName=String();
	m_friendlyName=String();
	m_damagePerHit=1;
	m_ignoreWalls=false;
	m_frozenPermanently=false;
	m_hasBeenVisible=false;
	m_overrideAttackSound=String();
	m_isGentle=false;
	m_flaggedForDeath=false;
	m_isMysteried=false;
	m_shadowYOff=0;
	m_invisible=false;
	m_isWraithLike=false;
	m_canMoveOntoPlayer=false;
	m_flaggedForDeathCounter=0;
	m_frozenDuration=0;
	m_flickerTimer=0;
	m_flickerCurrentTimer=0;
	m_flickerHide=false;
	m_wasTeleported=false;
	m_waterOffset=0;
}
c_List3* c_Entity::m_entityList;
c_List3* c_Entity::m_deadEntityList;
void c_Entity::m_RemoveFromList(c_Entity* t_entity){
	m_entityList->p_RemoveEach2(t_entity);
	m_deadEntityList->p_AddLast3(t_entity);
}
void c_Entity::p_Die(){
	if(!this->m_dead){
		if((this->m_confusedParticles)!=0){
			this->m_confusedParticles->m_visible=false;
			this->m_confusedParticles->m_active=false;
		}
		m_RemoveFromList(this);
		c_RenderableObject::p_Die();
	}
}
void c_Entity::m_RemoveAnyPerishedEntities(){
	c_Enumerator2* t_=m_entityList->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Entity* t_entity=t_->p_NextObject();
		if(t_entity->m_perished){
			t_entity->p_Die();
			m_RemoveAnyPerishedEntities();
		}
	}
}
int c_Entity::m_entityCount;
c_Entity* c_Entity::m_new(){
	c_RenderableObject::m_new();
	m_entityCount+=1;
	this->m_entityNum=m_entityCount;
	m_entityList->p_AddLast3(this);
	this->m_lastX=this->m_x;
	this->m_lastY=this->m_y;
	return this;
}
void c_Entity::p_FlagForDeath(int t_numFrames){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Entity.FlagForDeath(Int)",24));
}
c_Entity* c_Entity::m_GetEntityAt(int t_x,int t_y,bool t_includePlayer){
	c_Enumerator2* t_=m_entityList->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Entity* t_entity=t_->p_NextObject();
		if((t_includePlayer || !t_entity->m_isPlayer) && t_entity->p_IsOnTile(t_x,t_y)){
			return t_entity;
		}
	}
	return 0;
}
int c_Entity::m_anyPlayerHaveCircletCachedFrame;
int c_Entity::m_anyPlayerHaveGlassTorchCachedFrame;
int c_Entity::m_anyPlayerHaveForesightTorchCachedFrame;
int c_Entity::m_anyPlayerHaveWallsTorchCachedFrame;
int c_Entity::m_anyPlayerHaveNazarCharmCachedFrame;
void c_Entity::p_CancelTween(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Entity.CancelTween()",20));
}
bool c_Entity::p_IsFrozen(bool t_ignoreLastBeat){
	if(this->m_frozenPermanently){
		return true;
	}
	if(t_ignoreLastBeat){
		return this->m_frozenDuration>1;
	}
	return this->m_frozenDuration>0;
}
bool c_Entity::p_IsInAnyPlayerLineOfSight(){
	if(this->m_invisible){
		return false;
	}
	c_Tile* t_tile=c_Level::m_GetTileAt(this->m_x,this->m_y);
	if(t_tile==0){
		return false;
	}
	return t_tile->p_IsInAnyPlayerLineOfSight();
}
void c_Entity::p_Update(){
	if(this->m_flaggedForDeath && this->m_flaggedForDeathCounter<=0){
		this->p_Die();
		return;
	}
	this->m_flaggedForDeathCounter-=1;
	if(this->m_bounce!=0 && !this->p_IsFrozen(false)){
		this->m_bounce->p_Update();
	}
	if(this->m_flickerTimer>0){
		this->m_flickerTimer-=1;
		this->m_flickerCurrentTimer-=1;
		if(this->m_flickerCurrentTimer<=0 || this->m_flickerHide){
			this->m_flickerHide=!this->m_flickerHide;
			this->m_flickerCurrentTimer=4;
		}
	}else{
		this->m_flickerHide=false;
	}
	if(c_Tile::m_IsNearNightmare(this->m_x,this->m_y) && this->p_IsInAnyPlayerLineOfSight()){
		this->m_hasBeenVisible=true;
	}
	this->m_wasTeleported=false;
}
void c_Entity::p_BounceToward(c_Point* t_p,bool t_bufferTween){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Entity.BounceToward(Point, Bool)",32));
}
void c_Entity::m_UpdateVisibility(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Entity.UpdateVisibility()",25));
}
bool c_Entity::p_IsVisible(){
	if(this->m_clampedOn){
		return true;
	}
	if(this->m_invisible){
		return false;
	}
	return c_Level::m_IsVisibleTileAt(this->m_x,this->m_y);
}
bool c_Entity::m_anyPlayerHaveWallsTorchCached;
bool c_Entity::m_AnyPlayerHaveWallsTorch(){
	if(m_anyPlayerHaveWallsTorchCachedFrame!=bb_necrodancergame_globalFrameCounter){
		m_anyPlayerHaveWallsTorchCachedFrame=bb_necrodancergame_globalFrameCounter;
		m_anyPlayerHaveWallsTorchCached=c_Player::m_DoesAnyPlayerHaveItemOfType(String(L"torch_walls",11),false);
	}
	return m_anyPlayerHaveWallsTorchCached;
}
void c_Entity::mark(){
	c_RenderableObject::mark();
	gc_mark_q(m_confusedParticles);
	gc_mark_q(m_image);
	gc_mark_q(m_shadow);
	gc_mark_q(m_bounce);
	gc_mark_q(m_frozenImage);
	gc_mark_q(m_frozenStoneImage);
}
c_MobileEntity::c_MobileEntity(){
	m_moveShadowTween=2;
	m_moveTween=1;
	m_isMassive=false;
	m_ignoreLiquids=false;
	m_gotOutOfTar=false;
	m_wasInWater=false;
	m_wasInDeepWater=false;
	m_wasInTar=false;
	m_slidingDir=-1;
	m_wasKnockedBack=false;
}
c_MobileEntity* c_MobileEntity::m_new(){
	c_Entity::m_new();
	this->m_isMobile=true;
	return this;
}
bool c_MobileEntity::p_IsStandingStill(){
	if(this->m_image->p_GetTweenDurationRemaining()>0){
		return false;
	}
	return int(FLOAT(1000.0)*this->m_image->m_renderX)==int(FLOAT(1000.0)*this->m_image->m_renderLastX) && int(FLOAT(1000.0)*this->m_image->m_renderY)==int(FLOAT(1000.0)*this->m_image->m_renderLastY) && this->m_x==this->m_lastFrameX && this->m_y==this->m_lastFrameY;
}
void c_MobileEntity::p_Update(){
	bool t_inWater=false;
	if(c_Level::m_GetTileTypeAt(this->m_x,this->m_y)==4){
		t_inWater=true;
	}
	bool t_inDeepWater=false;
	if(c_Level::m_GetTileTypeAt(this->m_x,this->m_y)==5 && !this->m_gotOutOfTar){
		t_inDeepWater=true;
	}
	bool t_inTar=false;
	if(c_Level::m_GetTileTypeAt(this->m_x,this->m_y)==8 && !this->m_gotOutOfTar){
		t_inTar=true;
	}
	if((t_inWater || t_inDeepWater || t_inTar) && this->p_IsStandingStill()){
		if(!this->m_floating){
			if(!this->m_falling){
				this->m_image->p_SetCutoffY(6);
			}
			this->m_waterOffset=6;
		}
	}else{
		if(!this->m_falling){
			this->m_image->p_UnsetCutoffY();
		}
		this->m_waterOffset=0;
	}
	if(!this->m_floating){
		if(!this->m_wasInWater && t_inWater){
			c_Audio::m_PlayGameSoundAt(String(L"waterIn",7),this->m_x,this->m_y,false,-1,false);
			Float t_particleSystemX=FLOAT(24.0)*(Float(this->m_x)+FLOAT(0.5));
			Float t_particleSystemY=FLOAT(24.0)*(Float(this->m_y)+FLOAT(1.5));
			(new c_ParticleSystem)->m_new(int(t_particleSystemX),int(t_particleSystemY),c_ParticleSystemData::m_WATER_SPLASH_IN,-1,String());
		}
		this->m_wasInWater=t_inWater;
		if(!this->m_wasInDeepWater && t_inDeepWater){
			c_Audio::m_PlayGameSoundAt(String(L"waterIn",7),this->m_x,this->m_y,false,-1,false);
			Float t_particleSystemX2=FLOAT(24.0)*(Float(this->m_x)+FLOAT(0.5));
			Float t_particleSystemY2=FLOAT(24.0)*(Float(this->m_y)+FLOAT(1.5));
			(new c_ParticleSystem)->m_new(int(t_particleSystemX2),int(t_particleSystemY2),c_ParticleSystemData::m_WATER_SPLASH_IN,-1,String());
		}
		this->m_wasInDeepWater=t_inDeepWater;
		if(!this->m_wasInTar && t_inTar){
			c_Audio::m_PlayGameSoundAt(String(L"tarIn",5),this->m_x,this->m_y,false,-1,false);
			Float t_particleSystemX3=FLOAT(24.0)*(Float(this->m_x)+FLOAT(0.5));
			Float t_particleSystemY3=FLOAT(24.0)*(Float(this->m_y)+FLOAT(1.5));
			(new c_ParticleSystem)->m_new(int(t_particleSystemX3),int(t_particleSystemY3),c_ParticleSystemData::m_TAR_SPLASH_IN,-1,String());
		}
		this->m_wasInTar=t_inTar;
	}
	c_Entity::p_Update();
}
bool c_MobileEntity::p_IsSlidingOnIce(){
	return this->m_slidingDir!=-1;
}
void c_MobileEntity::mark(){
	c_Entity::mark();
}
c_Player::c_Player(){
	m_isHelper=false;
	m_familiars=(new c_List4)->m_new();
	m_lambFamiliar=0;
	m_characterID=-1;
	m_UsingDorianAltSkin=false;
	m_UsingMelodyAltSkin=false;
	m_UsingDoveAltSkin=false;
	m_UsingCodaAltSkin=false;
	m_UsingEliAltSkin=false;
	m_UsingAltSkin=false;
	m_headImage=0;
	m_headImageForHUD=0;
	m_ownedItems=(new c_StringMap4)->m_new();
	m_cursedSlots=(new c_StringMap5)->m_new();
	m_mysterySlots=(new c_StringSet)->m_new();
	m_miscItems=(new c_ItemList)->m_new();
	m_itemQuantity=(new c_StringMap3)->m_new();
	m_weapon=0;
	m_armorAmount=0;
	m_armorType=String(L"no_item",7);
	m_torchType=String(L"no_item",7);
	m_hasPickedUpWonderThisRun=false;
	m_hasPickedUpBlastHelmThisRun=false;
	m_hasPickedUpGrenadeCharmThisRun=false;
	m_batFormActive=false;
	m_health=(new c_PlayerHealth)->m_new();
	m_playerID=-1;
	m_playerTempNum=-1;
	m_hudSlotInitialized=false;
	m_numHudSlots=8;
	m_hudSlot=Array<c_Sprite* >();
	m_numHudSlotsIncludingActionAndSpells=15;
	m_hudSlotOff=Array<c_Point2* >();
	m_hudSlotOffFlyFromPlayer=Array<bool >();
	m_shovelImages=(new c_StringMap7)->m_new();
	m_tempoHeartText=(new c_TextSprite)->m_new3(2,FLOAT(2.0));
	m_hudSlotAction1=0;
	m_hudSlotAction2=0;
	m_hudSlotAction2Empty=0;
	m_hudSlotWeapon2=0;
	m_hudSlotWeapon2Empty=0;
	m_hudSlotWeaponReload=0;
	m_hudSlotWeaponThrow=0;
	m_hudSlotWeaponThrow2=0;
	m_hudSlotBoots=0;
	m_hudSlotBoots2=0;
	m_hudSlotBoots3=0;
	m_hudSlotBomb=0;
	m_hudSlotSpell1=0;
	m_hudSlotSpell2=0;
	m_hudDiamondForFlying=0;
	m_mysteryWeaponImage=0;
	m_mysteryRingImage=0;
	m_wobbler=0;
	m_shieldImageBack=0;
	m_shieldImageFront=0;
	m_lordCrownActiveBeat=-1;
	m_shieldActiveBeat=-1;
	m_helper=0;
	m_numBombs=0;
	m_lastMoveOntoPlayerInCoopModeBeat=-1;
	m_immobilized=false;
	m_lastIceSlideBeat=-1;
	m_lambDeathBeat=-1;
	m_tempoBeatsLeft=16;
	m_queuedMoveBeat=-1;
	m_clampedEnemy=0;
	m_paceBeat=-1;
	m_temporaryMapSight=false;
	m_minVisibilityCachedFrame=-1;
	m_minVisibilityCached=FLOAT(.0);
	m_lastLOSX=-9999;
	m_lastLOSY=-9999;
	m_popUpController=0;
	m_warnState=0;
	m_hintsController=0;
	m_seedController=0;
	m_lastHitBeat=-1;
	m_lastKillBeat=-1;
	m_crownOfGreedBeat=-1;
	m_lastWarDrumBeat=-1;
	m_lastBloodDrumBeat=-1;
	m_coinPickupBeat=-2;
	m_courageRingBeat=-1;
	m_courageShovelBeat=-1;
	m_queuedMove=false;
	m_queuedMoveX=0;
	m_queuedMoveY=0;
	m_lastMove=-1;
	m_moveLastBeat=-1;
	m_lastBeatX=0;
	m_lastBeatY=0;
	m_wasShrunk=false;
	m_batWeapon=0;
	m_conductorWireActive=false;
	m_electricityCounter=0;
	m_playedExitErrorSound=false;
	m_lastClampedEnemy=0;
	m_warDrumBeats=0;
	m_bloodDrumBeats=0;
	m_heartTransplantTime=-1;
	m_readyToThrow=false;
	m_wasClamped=false;
}
int c_Player::m_numCoins;
int c_Player::m_coinXOR;
void c_Player::m_SetCoinXOR(){
	m_coinXOR=m_numCoins^7529;
}
int c_Player::m_sessionMaxCoins;
void c_Player::m_SetCoins(int t_tmpNum,bool t_allowAchievement){
	m_numCoins=t_tmpNum;
	m_SetCoinXOR();
	if(t_tmpNum>m_sessionMaxCoins){
		if(t_allowAchievement){
		}
		m_sessionMaxCoins=t_tmpNum;
	}
}
void c_Player::p_ClearAllFamiliars(bool t_includeLamb){
	c_Enumerator* t_=this->m_familiars->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_FamiliarFixed* t_familiar=t_->p_NextObject();
		t_familiar->p_Die();
	}
	this->m_familiars->p_Clear();
	if(t_includeLamb){
		if(this->m_lambFamiliar!=0){
			this->m_lambFamiliar->p_Die();
		}
	}
}
void c_Player::p_Die(){
	this->p_ClearAllFamiliars(true);
	c_Entity::p_Die();
}
c_Sprite* c_Player::m_MakeBodyImage(int t_characterID,String t_idSuffix,int t_altSkin){
	String t_path=String();
	int t_frameW=0;
	int t_frameH=0;
	int t_numFrames=0;
	int t_3=t_altSkin;
	if(t_3==0){
		int t_4=t_characterID;
		if(t_4==0){
			t_path=String(L"entities/player",15)+t_idSuffix+String(L"_armor_body.png",15);
			t_frameW=24;
			t_frameH=24;
			t_numFrames=224;
		}else{
			if(t_4==3){
				t_path=String(L"entities/char",13)+String(t_characterID)+String(L"_armor_body.png",15);
				t_frameW=33;
				t_frameH=32;
				t_numFrames=16;
			}else{
				if(t_4==4){
					t_path=String(L"entities/char",13)+String(t_characterID)+String(L"_armor_body.png",15);
					t_frameW=33;
					t_frameH=28;
					t_numFrames=224;
				}else{
					if(t_4==7){
						t_path=String(L"entities/char",13)+String(t_characterID)+String(L"_armor_body.png",15);
						t_frameW=33;
						t_frameH=30;
						t_numFrames=224;
					}else{
						if(t_4==10){
							t_path=String(L"entities/char",13)+String(t_characterID)+String(L"_armor_body.png",15);
							t_frameW=25;
							t_frameH=27;
							t_numFrames=240;
						}else{
							t_path=String(L"entities/char",13)+String(t_characterID)+String(L"_armor_body.png",15);
							t_frameW=24;
							t_frameH=24;
							t_numFrames=224;
						}
					}
				}
			}
		}
	}else{
		if(t_3==3){
			t_path=String(L"entities/jp",11)+String(t_altSkin)+String(L"_armor_body.png",15);
			t_frameW=33;
			t_frameH=32;
			t_numFrames=16;
		}else{
			t_path=String(L"entities/jp",11)+String(t_altSkin)+String(L"_armor_body.png",15);
			t_frameW=24;
			t_frameH=24;
			t_numFrames=224;
		}
	}
	return (new c_Sprite)->m_new(t_path,t_frameW,t_frameH,t_numFrames,1);
}
c_Sprite* c_Player::m_MakeHeadImage(int t_characterID,String t_idSuffix,int t_altSkin){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Player.MakeHeadImage(Int, String, Int)",38));
	return (new c_Sprite)->m_new4();
}
void c_Player::p_LoadImages(){
	String t_idSuffix=String();
	int t_alternateSkin=c_GameData::m_GetAlternateSkin(this->m_characterID);
	if(c_GameData::m_GetUseChoral()){
	}
	this->m_UsingDorianAltSkin=false;
	this->m_UsingMelodyAltSkin=false;
	this->m_UsingDoveAltSkin=false;
	this->m_UsingCodaAltSkin=false;
	this->m_UsingEliAltSkin=false;
	this->m_UsingAltSkin=t_alternateSkin!=0;
	if(t_alternateSkin==3){
		this->m_UsingDorianAltSkin=true;
	}else{
		if(t_alternateSkin!=0){
			int t_12=this->m_characterID;
			if(t_12==1){
				this->m_UsingMelodyAltSkin=true;
			}else{
				if(t_12==6){
					this->m_UsingDoveAltSkin=true;
				}else{
					if(t_12==7){
						this->m_UsingCodaAltSkin=true;
					}else{
						if(t_12==4){
							this->m_UsingEliAltSkin=true;
						}
					}
				}
			}
		}
	}
	gc_assign(this->m_image,m_MakeBodyImage(this->m_characterID,t_idSuffix,t_alternateSkin));
	gc_assign(this->m_headImage,m_MakeHeadImage(this->m_characterID,t_idSuffix,t_alternateSkin));
	gc_assign(this->m_headImageForHUD,m_MakeHeadImage(this->m_characterID,t_idSuffix,t_alternateSkin));
	this->m_headImageForHUD->p_InWorld(false);
	this->m_headImageForHUD->p_SetZ(FLOAT(10000.0));
	gc_assign(this->m_shadow,(new c_Sprite)->m_new2(String(L"entities/TEMP_shadow_standard.png",33),1,c_Image::m_DefaultFlags));
	this->m_xOff=FLOAT(0.0);
	this->m_yOff=FLOAT(3.0);
}
String c_Player::p_GetItemInSlot(String t_sl,bool t_overrideBatForm){
	if(this->m_batFormActive || !t_overrideBatForm){
		String t_5=t_sl;
		if(t_5==String(L"weapon",6)){
			return String(L"weapon_fangs",12);
		}else{
			if(t_5==String(L"head",4)){
				return String(L"head_sonar",10);
			}
		}
	}else{
		if(this->m_ownedItems->p_Contains2(t_sl)){
			return this->m_ownedItems->p_Get(t_sl);
		}
	}
	return String(L"no_item",7);
}
bool c_Player::p_HasItemOfType(String t_i,bool t_overrideBatForm){
	if(!this->m_batFormActive || t_overrideBatForm){
		if(this->m_characterID==13){
			if(t_i==String(L"head_sonar",10)){
				return true;
			}
		}
		String t_slot=c_Item::m_GetSlot2(t_i);
		String t_8=t_slot;
		if(t_8==String(L"misc",4)){
			return this->m_miscItems->p_Contains2(t_i);
		}else{
			if(t_8==String(L"action",6)){
				if(t_i==this->p_GetItemInSlot(String(L"action1",7),false)){
					return true;
				}
				if(t_i==this->p_GetItemInSlot(String(L"action2",7),false)){
					return true;
				}
			}else{
				if(t_8==String(L"spell",5)){
					if(t_i==this->p_GetItemInSlot(String(L"spell1",6),false)){
						return true;
					}
					if(t_i==this->p_GetItemInSlot(String(L"spell2",6),false)){
						return true;
					}
				}
			}
		}
		return t_i==this->m_ownedItems->p_Get(t_slot);
	}
	String t_9=t_i;
	if(t_9==String(L"weapon_fangs",12) || t_9==String(L"head_sonar",10)){
		return true;
	}
	return false;
}
void c_Player::p_UpdateBonusHeart(){
	if(this->p_HasItemOfType(String(L"ring_wonder",11),false) || this->p_HasItemOfType(String(L"ring_peace",10),false)){
		this->m_health->p_GainBonusHeart();
	}else{
		this->m_health->p_LoseBonusHeart();
	}
}
void c_Player::p_EmptyAllSlots(bool t_includeLamb){
	this->m_ownedItems->p_Clear();
	this->m_cursedSlots->p_Clear();
	this->m_mysterySlots->p_Clear();
	this->p_ClearAllFamiliars(t_includeLamb);
	this->m_miscItems->p_Clear();
	this->m_itemQuantity->p_Clear();
	gc_assign(this->m_weapon,(new c_Weapon)->m_new(String(L"no_item",7)));
	this->m_armorAmount=0;
	this->m_armorType=String(L"no_item",7);
	this->m_torchType=String(L"no_item",7);
	this->m_hasPickedUpWonderThisRun=false;
	this->m_hasPickedUpBlastHelmThisRun=false;
	this->m_hasPickedUpGrenadeCharmThisRun=false;
	this->p_UpdateBonusHeart();
}
void c_Player::p_AddItemOfType(String t_item,c_Item* t_itemObj,bool t_ignoreFlyTo,bool t_isInitialEquip){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Player.AddItemOfType(String, Item, Bool, Bool)",46));
}
void c_Player::p_SetSlotCursed(String t_sl,bool t_b){
	this->m_cursedSlots->p_Set9(t_sl,t_b);
}
void c_Player::p_GiveInitialEquipment(bool t_resetHealth){
	if(this->m_playerID==0){
		c_Spells::m_InitLearnedSpells();
	}
	c_XMLNode* t_characterNode=bb_necrodancergame_xmlData->p_GetChildAtPath2(String(L"characters/character",20),String(L"id=",3)+String(this->m_characterID));
	if(t_characterNode==bb_necrodancergame_xmlData->m_nullNode){
		bb_logger_Debug->p_Log(String(L"ERROR: No character found in XML with id ",41)+String(this->m_characterID));
	}else{
		c_XMLNode* t_initialEquipmentsNode=t_characterNode->p_GetChild2(String(L"initial_equipment",17),false);
		c_Enumerator3* t_=t_initialEquipmentsNode->p_GetChildren(0,false)->p_ObjectEnumerator();
		while(t_->p_HasNext()){
			c_XMLNode* t_initialEquipmentNode=t_->p_NextObject();
			String t_6=t_initialEquipmentNode->p_name();
			if(t_6==String(L"item",4)){
				String t_itemType=t_initialEquipmentNode->p_GetAttribute(String(L"type",4));
				if(c_Item::m_itemImages->p_Contains2(t_itemType)){
					this->p_AddItemOfType(t_itemType,0,true,true);
				}else{
					bb_logger_Debug->p_Log(String(L"ERROR: Unrecognized item type ",30)+t_itemType);
				}
			}else{
				if(t_6==String(L"cursed",6)){
					String t_cursedSlot=t_initialEquipmentNode->p_GetAttribute(String(L"slot",4));
					this->p_SetSlotCursed(t_cursedSlot,true);
				}else{
					bb_logger_Debug->p_Log(String(L"ERROR: Unrecognized initial equipment element ",46)+t_initialEquipmentNode->p_name());
				}
			}
		}
	}
	if(c_Level::m_isSoulMode){
		if(!this->p_HasItemOfType(String(L"charm_nazar",11),false)){
			this->p_AddItemOfType(String(L"charm_nazar",11),0,true,true);
		}
		(new c_SoulFamiliar)->m_new(this->m_x,this->m_y,(this));
	}
	if(this->m_characterID!=12){
		this->m_lambFamiliar=0;
	}else{
		gc_assign(this->m_lambFamiliar,(new c_Familiar)->m_new(this));
	}
	if(t_resetHealth){
		int t_7=this->m_characterID;
		if(t_7==1 || t_7==9 || t_7==5){
			this->m_health->p_Reset2(4);
		}else{
			if(t_7==8 || t_7==4){
				this->m_health->p_Reset2(6);
			}else{
				if(t_7==3){
					this->m_health->p_Reset2(8);
				}else{
					if(t_7==6){
						this->m_health->p_Reset2(4);
						this->p_UpdateBonusHeart();
						this->m_health->p_Heal2(2,false);
					}else{
						if(t_7==7 || t_7==2 || t_7==15){
							this->m_health->p_ResetFragile();
						}else{
							this->m_health->p_Reset2(6);
						}
					}
				}
			}
		}
	}
}
void c_Player::p_SetCharacter(int t_charNum){
	if(t_charNum>13){
		t_charNum=0;
	}
	this->m_characterID=t_charNum;
	this->p_LoadImages();
	this->p_EmptyAllSlots(true);
	this->p_GiveInitialEquipment(true);
}
int c_Player::m_numDiamonds;
bool c_Player::p_Perished(){
	return this->m_perished;
}
int c_Player::m_playerTempCount;
c_Sprite* c_Player::m_hudCoins;
c_Sprite* c_Player::m_hudDiamonds;
int c_Player::m_heartsLoaded;
c_Sprite* c_Player::m_heart;
c_Sprite* c_Player::m_heartEmpty;
c_Sprite* c_Player::m_heartHalf;
c_Sprite* c_Player::m_cursedHeart;
c_Sprite* c_Player::m_cursedHeartEmpty;
c_Sprite* c_Player::m_cursedHeartHalf;
c_Player* c_Player::m_new(int t_id,int t_characterID_){
	c_MobileEntity::m_new();
	m_coinXOR=m_numCoins^7529;
	this->m_playerTempNum=m_playerTempCount;
	m_playerTempCount+=1;
	if(!this->m_hudSlotInitialized){
		this->m_hudSlotInitialized=true;
		if(this->m_numHudSlots<=0){
			this->m_hudSlot=Array<c_Sprite* >();
		}else{
			int t_size=bb_math_Max(this->m_numHudSlots,this->m_hudSlot.Length());
			gc_assign(this->m_hudSlot,this->m_hudSlot.Resize(this->m_numHudSlots));
		}
		for(int t_i=0;t_i<this->m_numHudSlots;t_i=t_i+1){
			gc_assign(this->m_hudSlot[t_i],(new c_Sprite)->m_new2(String(L"gui/hud_slot_",13)+String(t_i+1)+String(L".png",4),1,c_Image::m_DefaultFlags));
			this->m_hudSlot[t_i]->p_InWorld(false);
			this->m_hudSlot[t_i]->p_SetZ(FLOAT(9999.0));
		}
		if(this->m_numHudSlotsIncludingActionAndSpells<=0){
			this->m_hudSlotOff=Array<c_Point2* >();
		}else{
			int t_size2=bb_math_Max(this->m_numHudSlotsIncludingActionAndSpells,this->m_hudSlotOff.Length());
			gc_assign(this->m_hudSlotOff,this->m_hudSlotOff.Resize(t_size2));
		}
		if(this->m_numHudSlotsIncludingActionAndSpells<=0){
			this->m_hudSlotOffFlyFromPlayer=Array<bool >();
		}else{
			int t_size3=bb_math_Max(this->m_numHudSlotsIncludingActionAndSpells,this->m_hudSlotOffFlyFromPlayer.Length());
			gc_assign(this->m_hudSlotOffFlyFromPlayer,this->m_hudSlotOffFlyFromPlayer.Resize(t_size3));
		}
		for(int t_i2=0;t_i2<this->m_numHudSlotsIncludingActionAndSpells;t_i2=t_i2+1){
			this->m_hudSlotOffFlyFromPlayer[t_i2]=false;
			gc_assign(this->m_hudSlotOff[t_i2],(new c_Point2)->m_new());
		}
	}
	this->m_x=0;
	this->m_y=0;
	this->m_playerID=t_id;
	this->m_isPlayer=true;
	if(t_characterID_==-1){
		t_characterID_=c_GameData::m_GetDefaultCharacter();
		if(!c_GameData::m_GetDLCPlayed()){
			if(c_GameData::m_GetZone2Unlocked(0)){
				t_characterID_=10;
			}
			c_GameData::m_SetDLCPlayed();
		}
	}
	this->p_SetCharacter(t_characterID_);
	c_Camera::m_x=24*this->m_x;
	c_Camera::m_y=24*this->m_y;
	c_Enumerator3* t_=c_Item::m_GetAllItemsInClass(String(L"isShovel",8))->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_XMLNode* t_shovel=t_->p_NextObject();
		c_ItemData* t_itemData=(new c_ItemData)->m_new(t_shovel);
		String t_name=t_shovel->p_name();
		String t_path=t_shovel->p_value();
		c_Sprite* t_image=(new c_Sprite)->m_new(String(L"items/",6)+t_path,t_itemData->m_imageW,t_itemData->m_imageH,t_itemData->m_imageFrames,c_Image::m_DefaultFlags);
		t_image->p_SetZ(FLOAT(10000.0));
		this->m_shovelImages->p_Set12(t_name,t_image);
	}
	this->m_tempoHeartText->m_zVal=10002;
	if(m_hudCoins==0){
		gc_assign(m_hudCoins,(new c_Sprite)->m_new2(String(L"gui/hud_coins.png",17),1,c_Image::m_DefaultFlags));
	}
	m_hudCoins->p_InWorld(false);
	m_hudCoins->p_SetZ(FLOAT(10000.0));
	if(m_hudDiamonds==0){
		gc_assign(m_hudDiamonds,(new c_Sprite)->m_new2(String(L"gui/diamond.png",15),1,c_Image::m_DefaultFlags));
	}
	m_hudDiamonds->p_InWorld(false);
	m_hudDiamonds->p_SetZ(FLOAT(10000.0));
	if(this->m_hudSlotAction1==0){
		gc_assign(this->m_hudSlotAction1,(new c_Sprite)->m_new2(String(L"gui/hud_slot_action1.png",24),1,c_Image::m_DefaultFlags));
	}
	this->m_hudSlotAction1->p_InWorld(false);
	this->m_hudSlotAction1->p_SetZ(FLOAT(10001.0));
	if(this->m_hudSlotAction2==0){
		gc_assign(this->m_hudSlotAction2,(new c_Sprite)->m_new2(String(L"gui/hud_slot_action2.png",24),1,c_Image::m_DefaultFlags));
	}
	this->m_hudSlotAction2->p_InWorld(false);
	this->m_hudSlotAction2->p_SetZ(FLOAT(10001.0));
	if(this->m_hudSlotAction2Empty==0){
		gc_assign(this->m_hudSlotAction2Empty,(new c_Sprite)->m_new2(String(L"gui/hud_slot_action2_empty.png",30),1,c_Image::m_DefaultFlags));
	}
	this->m_hudSlotAction2Empty->p_InWorld(false);
	this->m_hudSlotAction2Empty->p_SetZ(FLOAT(10001.0));
	if(this->m_hudSlotWeapon2==0){
		gc_assign(this->m_hudSlotWeapon2,(new c_Sprite)->m_new2(String(L"gui/hud_slot_weapon2.png",24),1,c_Image::m_DefaultFlags));
	}
	this->m_hudSlotWeapon2->p_InWorld(false);
	this->m_hudSlotWeapon2->p_SetZ(FLOAT(10001.0));
	if(this->m_hudSlotWeapon2Empty==0){
		gc_assign(this->m_hudSlotWeapon2Empty,(new c_Sprite)->m_new2(String(L"gui/hud_slot_weapon2_empty.png",30),1,c_Image::m_DefaultFlags));
	}
	this->m_hudSlotWeapon2Empty->p_InWorld(false);
	this->m_hudSlotWeapon2Empty->p_SetZ(FLOAT(10001.0));
	if(this->m_hudSlotWeaponReload==0){
		gc_assign(this->m_hudSlotWeaponReload,(new c_Sprite)->m_new2(String(L"gui/hud_slot_reload.png",23),1,c_Image::m_DefaultFlags));
	}
	this->m_hudSlotWeaponReload->p_InWorld(false);
	this->m_hudSlotWeaponReload->p_SetZ(FLOAT(10001.0));
	if(this->m_hudSlotWeaponThrow==0){
		gc_assign(this->m_hudSlotWeaponThrow,(new c_Sprite)->m_new2(String(L"gui/hud_slot_throw.png",22),1,c_Image::m_DefaultFlags));
	}
	this->m_hudSlotWeaponThrow->p_InWorld(false);
	this->m_hudSlotWeaponThrow->p_SetZ(FLOAT(10001.0));
	if(this->m_hudSlotWeaponThrow2==0){
		gc_assign(this->m_hudSlotWeaponThrow2,(new c_Sprite)->m_new2(String(L"gui/hud_slot_throw2.png",23),1,c_Image::m_DefaultFlags));
	}
	this->m_hudSlotWeaponThrow2->p_InWorld(false);
	this->m_hudSlotWeaponThrow2->p_SetZ(FLOAT(10001.0));
	if(this->m_hudSlotBoots==0){
		gc_assign(this->m_hudSlotBoots,(new c_Sprite)->m_new2(String(L"gui/hud_slot_boots.png",22),1,c_Image::m_DefaultFlags));
	}
	this->m_hudSlotBoots->p_InWorld(false);
	this->m_hudSlotBoots->p_SetZ(FLOAT(10001.0));
	if(this->m_hudSlotBoots2==0){
		gc_assign(this->m_hudSlotBoots2,(new c_Sprite)->m_new2(String(L"gui/hud_slot_boots2.png",23),1,c_Image::m_DefaultFlags));
	}
	this->m_hudSlotBoots2->p_InWorld(false);
	this->m_hudSlotBoots2->p_SetZ(FLOAT(10001.0));
	if(this->m_hudSlotBoots3==0){
		gc_assign(this->m_hudSlotBoots3,(new c_Sprite)->m_new2(String(L"gui/hud_slot_boots3.png",23),1,c_Image::m_DefaultFlags));
	}
	this->m_hudSlotBoots3->p_InWorld(false);
	this->m_hudSlotBoots3->p_SetZ(FLOAT(10001.0));
	if(this->m_hudSlotBomb==0){
		gc_assign(this->m_hudSlotBomb,(new c_Sprite)->m_new2(String(L"gui/hud_slot_bomb.png",21),1,c_Image::m_DefaultFlags));
	}
	this->m_hudSlotBomb->p_InWorld(false);
	this->m_hudSlotBomb->p_SetZ(FLOAT(10001.0));
	if(this->m_hudSlotSpell1==0){
		gc_assign(this->m_hudSlotSpell1,(new c_Sprite)->m_new2(String(L"gui/hud_slot_spell1.png",23),1,c_Image::m_DefaultFlags));
	}
	this->m_hudSlotSpell1->p_InWorld(false);
	this->m_hudSlotSpell1->p_SetZ(FLOAT(10001.0));
	if(this->m_hudSlotSpell2==0){
		gc_assign(this->m_hudSlotSpell2,(new c_Sprite)->m_new2(String(L"gui/hud_slot_spell2.png",23),1,c_Image::m_DefaultFlags));
	}
	this->m_hudSlotSpell2->p_InWorld(false);
	this->m_hudSlotSpell2->p_SetZ(FLOAT(10001.0));
	if(this->m_hudDiamondForFlying==0){
		gc_assign(this->m_hudDiamondForFlying,(new c_Sprite)->m_new2(String(L"gui/diamond.png",15),1,c_Image::m_DefaultFlags));
	}
	this->m_hudDiamondForFlying->p_InWorld(false);
	this->m_hudDiamondForFlying->p_SetZ(FLOAT(10001.0));
	if(this->m_mysteryWeaponImage==0){
		gc_assign(this->m_mysteryWeaponImage,(new c_Sprite)->m_new(String(L"items/weapon_uncertainty.png",28),24,25,2,c_Image::m_DefaultFlags));
	}
	if(this->m_mysteryRingImage==0){
		gc_assign(this->m_mysteryRingImage,(new c_Sprite)->m_new(String(L"items/ring_uncertainty.png",26),19,19,2,c_Image::m_DefaultFlags));
	}
	gc_assign(this->m_bounce,(new c_Bouncer)->m_new(FLOAT(-2.5),FLOAT(0.0),FLOAT(1.5),20));
	this->m_bounce->p_Disable();
	gc_assign(this->m_wobbler,(new c_Bouncer)->m_new(FLOAT(-2.5),FLOAT(0.0),FLOAT(1.5),13));
	gc_assign(this->m_frozenImage,(new c_Sprite)->m_new(String(L"entities/frozen_feet_medium.png",31),31,24,2,c_Image::m_DefaultFlags));
	gc_assign(this->m_frozenStoneImage,(new c_Sprite)->m_new(String(L"entities/stone_feet.png",23),17,9,1,c_Image::m_DefaultFlags));
	gc_assign(this->m_shieldImageBack,(new c_Sprite)->m_new(String(L"spells/shield_back.png",22),34,35,3,c_Image::m_DefaultFlags));
	gc_assign(this->m_shieldImageFront,(new c_Sprite)->m_new(String(L"spells/shield_front.png",23),34,35,3,c_Image::m_DefaultFlags));
	if(!c_Level::m_isReplaying){
		m_numDiamonds=c_GameData::m_GetPlayerDiamonds();
	}
	if(!((m_heartsLoaded)!=0)){
		gc_assign(m_heart,(new c_Sprite)->m_new2(String(L"gui/heart.png",13),1,c_Image::m_DefaultFlags));
		m_heart->p_InWorld(false);
		m_heart->p_SetZ(FLOAT(10000.0));
		gc_assign(m_heartEmpty,(new c_Sprite)->m_new2(String(L"gui/heart_empty.png",19),1,c_Image::m_DefaultFlags));
		m_heartEmpty->p_InWorld(false);
		m_heartEmpty->p_SetZ(FLOAT(10000.0));
		gc_assign(m_heartHalf,(new c_Sprite)->m_new2(String(L"gui/heart_half.png",18),1,c_Image::m_DefaultFlags));
		m_heartHalf->p_InWorld(false);
		m_heartHalf->p_SetZ(FLOAT(10000.0));
		gc_assign(m_cursedHeart,(new c_Sprite)->m_new2(String(L"gui/cursed_heart.png",20),1,c_Image::m_DefaultFlags));
		m_cursedHeart->p_InWorld(false);
		m_cursedHeart->p_SetZ(FLOAT(10000.0));
		gc_assign(m_cursedHeartEmpty,(new c_Sprite)->m_new2(String(L"gui/cursed_heart_empty.png",26),1,c_Image::m_DefaultFlags));
		m_cursedHeartEmpty->p_InWorld(false);
		m_cursedHeartEmpty->p_SetZ(FLOAT(10000.0));
		gc_assign(m_cursedHeartHalf,(new c_Sprite)->m_new2(String(L"gui/cursed_heart_half.png",25),1,c_Image::m_DefaultFlags));
		m_cursedHeartHalf->p_InWorld(false);
		m_cursedHeartHalf->p_SetZ(FLOAT(10000.0));
	}
	Float t_constLightSourceMax=this->m_constLightSourceMax;
	this->p_ActivateLight(FLOAT(1.25),FLOAT(1.75));
	this->m_constLightSourceMax=t_constLightSourceMax;
	return this;
}
c_Player* c_Player::m_new2(){
	c_MobileEntity::m_new();
	return this;
}
void c_Player::p_WarpFamiliars(){
	c_Point* t_location=this->p_GetLocation();
	c_Enumerator* t_=this->m_familiars->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_FamiliarFixed* t_familiar=t_->p_NextObject();
		t_familiar->p_WarpTo(t_location->m_x+t_familiar->m_offsetX,t_location->m_y+t_familiar->m_offsetY);
	}
	c_Familiar* t_marv=this->m_lambFamiliar;
	if(t_marv!=0){
		t_marv->p_Recall();
	}
}
void c_Player::p_SetTotallyBlank(){
	gc_assign(this->m_weapon,(new c_Weapon)->m_new(String(L"no_item",7)));
	this->m_numBombs=0;
	this->p_EmptyAllSlots(false);
}
int c_Player::m_NumEnabledCharacters(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Player.NumEnabledCharacters()",29));
	return 0;
}
void c_Player::p_StopFalling(){
	if(this->m_falling){
		this->m_falling=false;
		this->m_image->p_UnsetCutoffY();
		this->m_headImage->p_UnsetCutoffY();
		this->m_shadow->p_UnsetCutoffY();
		this->m_shieldImageFront->p_UnsetCutoffY();
		this->m_shieldImageBack->p_UnsetCutoffY();
	}
}
void c_Player::p_CheckConductorWire(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Player.CheckConductorWire()",27));
}
void c_Player::p_CheckFloating(){
	this->m_floating=this->p_HasItemOfType(String(L"feet_boots_winged",17),false) || this->m_batFormActive;
	if(this->m_floating){
		this->m_moveShadowTween=3;
		this->m_moveTween=3;
	}else{
		this->m_moveShadowTween=2;
		this->m_moveTween=1;
	}
	this->p_CheckConductorWire();
}
void c_Player::p_ResetStateAfterLevel(){
	this->m_lastMoveOntoPlayerInCoopModeBeat=-1;
	this->p_StopFalling();
	this->m_immobilized=false;
	this->m_lastIceSlideBeat=-1;
	this->m_lambDeathBeat=-1;
	this->m_tempoBeatsLeft=16;
	this->m_confusedUntil=-1;
	if(this->m_characterID==12 && this->m_lambFamiliar==0){
		gc_assign(this->m_lambFamiliar,(new c_Familiar)->m_new(this));
	}
	this->p_CheckFloating();
}
bool c_Player::m_DoesAnyPlayerHaveItemOfType(String t_it,bool t_overrideBatForm){
	for(int t_i=0;t_i<bb_controller_game_numPlayers;t_i=t_i+1){
		c_Player* t_player=bb_controller_game_players[t_i];
		if(t_player->p_HasItemOfType(t_it,t_overrideBatForm)){
			return true;
		}
	}
	return false;
}
void c_Player::m_PlayVOPlayer1(String t_voSound){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Player.PlayVOPlayer1(String)",28));
}
bool c_Player::p_IsWeaponlessCharacter(){
	int t_11=this->m_characterID;
	if(t_11==1 || t_11==2 || t_11==4 || t_11==6 || t_11==7){
		return true;
	}
	return false;
}
bool c_Player::p_IsBomblessCharacter(){
	int t_10=this->m_characterID;
	if(t_10==4){
		return true;
	}
	return false;
}
bool c_Player::m_DoesPlayer1HaveItemOfType(String t_i){
	c_Player* t_player1=bb_controller_game_players[bb_controller_game_player1];
	return t_player1->p_HasItemOfType(t_i,false);
}
bool c_Player::p_IsSlotCursed(String t_sl){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Player.IsSlotCursed(String)",27));
	return false;
}
void c_Player::p_EmptySlot(String t_sl){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Player.EmptySlot(String)",24));
}
void c_Player::p_CancelTween(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Player.CancelTween()",20));
}
void c_Player::p_Heal(int t_amt,bool t_fromFood,bool t_playVO,bool t_fromMagicFood){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Player.Heal(Int, Bool, Bool, Bool)",34));
}
int c_Player::p_GetTorchLevel(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Player.GetTorchLevel()",22));
	return 0;
}
int c_Player::p_CalcMinVisibility(){
	int t_minVisibility=1;
	if(!this->p_HasItemOfType(String(L"ring_shadows",12),false)){
		return t_minVisibility;
	}
	int t_torchLevel=this->p_GetTorchLevel();
	if(t_torchLevel>0){
		t_minVisibility=t_torchLevel+2;
	}
	if(this->p_HasItemOfType(String(L"head_miners_cap",15),false)){
		t_minVisibility=bb_math_Max(3,t_minVisibility);
	}
	return t_minVisibility;
}
Float c_Player::p_GetMinVisibility(){
	if(this->m_minVisibilityCachedFrame!=bb_necrodancergame_globalFrameCounter){
		this->m_minVisibilityCached=Float(this->p_CalcMinVisibility());
		this->m_minVisibilityCachedFrame=bb_necrodancergame_globalFrameCounter;
	}
	return this->m_minVisibilityCached;
}
void c_Player::p_ImmediatelyMoveTo(int t_xVal,int t_yVal,bool t_fromKeyboard,bool t_fromClampedEnemy,bool t_fromBounceTrap,bool t_fromCourage,bool t_overrideStairs){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Player.ImmediatelyMoveTo(Int, Int, Bool, Bool, Bool, Bool, Bool)",64));
}
bool c_Player::m_CheckCoinXOR(){
	return m_coinXOR==(m_numCoins^7529);
}
bool c_Player::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Player.Hit(String, Int, Int, Entity, Bool, Int)",47));
	return false;
}
void c_Player::p_ProcessMoveQueue(){
	if(!this->m_queuedMove){
		return;
	}
	if(this->m_queuedMoveBeat<c_Audio::m_GetClosestBeatNum(true)){
		this->m_queuedMove=false;
		return;
	}
	int t_newX=this->m_x+this->m_queuedMoveX;
	int t_newY=this->m_y+this->m_queuedMoveY;
	if(!c_Util::m_IsAnyPlayerAt(t_newX,t_newY) || this->m_clampedEnemy!=0 || c_Util::m_GetAnyPlayerAt(t_newX,t_newY)->m_clampedEnemy!=0){
		this->p_ImmediatelyMoveTo(this->m_queuedMoveX,this->m_queuedMoveY,true,false,false,false,false);
	}
	if(c_Util::m_IsAnyPlayerAt(t_newX,t_newY) && this->m_lastMoveOntoPlayerInCoopModeBeat<c_Audio::m_GetClosestBeatNum(true)){
		c_Point* t_bounceTo=(new c_Point)->m_new(this->m_queuedMoveX,this->m_queuedMoveY);
		this->p_BounceToward(t_bounceTo,false);
		this->m_lastMoveOntoPlayerInCoopModeBeat=c_Audio::m_GetClosestBeatNum(true);
	}
	bb_logger_Debug->p_TraceNotImplemented(String(L"Player.ProcessMoveQueue()",25));
}
int c_Player::p_GetMoveLastBeat(){
	int t_lastPlayerMoveBeat=bb_controller_game_lastPlayerMoveBeat[this->m_playerID];
	int t_lastBeatNumber=c_Audio::m_GetCurrentBeatNumberIncludingLoops(0,true)-1;
	if(t_lastPlayerMoveBeat>=t_lastBeatNumber){
		return this->m_lastMove;
	}
	return -1;
}
c_Point* c_Player::p_GetPositionLastBeat(){
	if(this->p_GetMoveLastBeat()==-1){
		return (new c_Point)->m_new(this->m_x,this->m_y);
	}
	return (new c_Point)->m_new(this->m_lastX,this->m_lastY);
}
Float c_Player::p_GetLightSourceMax(){
	if(this->p_HasItemOfType(String(L"ring_shadows",12),false)){
		return FLOAT(1.25);
	}
	if(this->m_torchType==String(L"no_item",7)){
		return FLOAT(1.75);
	}
	int t_torchValue=c_Item::m_GetValue(this->m_torchType);
	return Float(t_torchValue)*FLOAT(1.25)+FLOAT(1.75);
}
bool c_Player::p_IsLordCrownActive(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Player.IsLordCrownActive()",26));
	return false;
}
bool c_Player::p_FeetIgnoreOoze(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Player.FeetIgnoreOoze()",23));
	return false;
}
bool c_Player::p_IsShrunk(int t_xVal,int t_yVal){
	if(t_xVal==-9999){
		t_xVal=this->m_x;
	}
	if(t_yVal==-9999){
		t_yVal=this->m_y;
	}
	return c_Level::m_GetTileTypeAt(t_xVal,t_yVal)==17 && !this->p_IsLordCrownActive() && !this->m_floating && !this->p_FeetIgnoreOoze();
}
void c_Player::p_PlayVO(String t_voSound){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Player.PlayVO(String)",21));
}
c_Weapon* c_Player::p_GetWeapon(bool t_overrideBatForm){
	if(this->m_batFormActive && !t_overrideBatForm){
		return this->m_batWeapon;
	}
	return this->m_weapon;
}
int c_Player::p_GetElectricStrength(){
	int t_electricStrength=0;
	if(this->m_characterID==6){
		return t_electricStrength;
	}
	if(!this->m_floating && (c_Level::m_GetTileTypeAt(this->m_x,this->m_y)==20 || c_Level::m_GetTileTypeAt(this->m_x,this->m_y)==118)){
		t_electricStrength+=1;
	}
	c_Weapon* t_weapon=this->p_GetWeapon(false);
	if(t_weapon->m_type==String(L"weapon_dagger_electric",22)){
		t_electricStrength+=1;
	}
	if(this->m_conductorWireActive){
		t_electricStrength+=1;
	}
	return t_electricStrength;
}
void c_Player::m_OffsetCoins(int t_tmpNum){
	int t_coins=bb_math_Max(0,m_numCoins+t_tmpNum);
	m_SetCoins(t_coins,true);
}
void c_Player::p_Update22(int t_closestBeatNum){
	c_Item* t_pickup=c_Item::m_GetPickupAt(this->m_x,this->m_y,0);
	if(t_pickup!=0 && !this->p_Perished() && !c_Level::m_isLevelEditor){
		String t_pickupSlot=t_pickup->p_GetSlot();
		if(!this->p_IsSlotCursed(t_pickupSlot)){
			String t_pickupName=t_pickup->p_Pickup(this);
			if(t_pickupName!=String(L"no_item",7)){
				this->p_AddItemOfType(t_pickupSlot,t_pickup,false,false);
			}
		}
	}
	if(this->m_floating){
		this->m_bounce->p_Enable();
		this->m_yOff=FLOAT(-4.0);
	}else{
		this->m_bounce->p_Disable();
		this->m_yOff=FLOAT(3.0);
	}
	if(this->m_clampedEnemy!=0 && this->m_clampedEnemy!=this->m_lastClampedEnemy){
		this->p_PlayVO(String(L"Grabbed",7));
	}
	gc_assign(this->m_lastClampedEnemy,this->m_clampedEnemy);
	if(this->p_HasItemOfType(String(L"head_crown_of_greed",19),false) && this->m_crownOfGreedBeat<t_closestBeatNum){
		if(m_numCoins>0){
			m_OffsetCoins(-1);
		}
		this->m_crownOfGreedBeat=t_closestBeatNum;
	}
	if(this->m_lastWarDrumBeat+1<t_closestBeatNum){
		this->m_lastWarDrumBeat=-1;
		this->m_warDrumBeats=0;
	}
	if(this->m_lastBloodDrumBeat+1<t_closestBeatNum){
		this->m_lastBloodDrumBeat=-1;
		this->m_bloodDrumBeats=0;
	}
	if(this->m_heartTransplantTime!=-1 && c_Audio::m_fixedBeatNum!=-64 && this->m_heartTransplantTime+20000<bb_app_Millisecs()){
		if(!c_Level::m_isReplaying && c_Level::m_replay!=0){
			c_Level::m_replay->m_beatOffset+=c_Audio::m_fixedBeatNum-c_Audio::m_GetClosestBeatNum(false)-1;
		}
		this->m_heartTransplantTime=-1;
		c_Audio::m_fixedBeatNum=-64;
		bb_controller_game_lastEnemyMoveBeat=c_Audio::m_GetCurrentBeatNumberIncludingLoops(0,true);
		if(!this->p_IsSlidingOnIce()){
			this->m_lastIceSlideBeat=-1;
		}
		for(int t_i=0;t_i<bb_controller_game_numPlayers;t_i=t_i+1){
			bb_controller_game_lastPlayerMoveBeat[t_i]=t_closestBeatNum-1;
		}
		c_Chain::m_waitingForFirstMovement[0]=true;
		c_Chain::m_waitingForFirstMovement[1]=true;
	}
	if(this->m_readyToThrow){
		c_Weapon* t_weapon=this->p_GetWeapon(false);
		if(t_weapon==0 || !t_weapon->p_IsThrowable()){
			this->m_readyToThrow=false;
		}
	}
	this->m_wasClamped=this->m_clampedEnemy!=0;
	if(!m_CheckCoinXOR()){
		bb_controller_game_gamePaused=true;
		c_Audio::m_PauseSong(true);
		gc_assign(this->m_popUpController,(new c_ControllerPopUp)->m_new((bb_controller_game_controllerGamePointer),String(),String(),String(),String(),String(),true,true,String()));
		return;
	}
	c_MobileEntity::p_Update();
}
int c_Player::m_lobbySaleItemMinCost;
bool c_Player::m_IsSolo(){
	int t_2=bb_controller_game_numPlayers;
	if(t_2==1){
		return true;
	}else{
		if(t_2==2){
			return bb_controller_game_players[1]->m_isHelper;
		}
	}
	return false;
}
bool c_Player::m_IsLastLevel(){
	int t_1=bb_controller_game_currentLevel;
	if(t_1==5){
		return true;
	}else{
		if(t_1==4){
			return c_Util::m_IsCharacterActive(0) || c_Util::m_IsCharacterActive(1) || c_Util::m_IsCharacterActive(2) || c_Util::m_IsCharacterActive(10);
		}else{
			if(t_1==3){
				return c_Util::m_IsCharacterActive(6) && m_IsSolo();
			}
		}
	}
	return false;
}
void c_Player::m_CheckAllModeCompletion(){
	if(c_GameData::m_GetStoryModeComplete() && c_GameData::m_GetPhasingModeComplete() && c_GameData::m_GetMysteryModeComplete() && c_GameData::m_GetRandomizerModeComplete() && c_GameData::m_GetHardModeComplete() && c_GameData::m_GetNoReturnModeComplete()){
		c_Util::m_IncrementSteamStat(String(L"AllModeCompletion",17),true,true,false,false);
	}
}
bool c_Player::p_SubtractItemOfType(String t_i){
	String t_slot=c_Item::m_GetSlot2(t_i);
	if(t_slot==String(L"misc",4)){
		int t_numRemoved=this->m_miscItems->p_RemoveEach4(t_i);
		return t_numRemoved>0;
	}
	String t_ownedItem=this->m_ownedItems->p_Get(t_slot);
	if(t_i==t_ownedItem){
		this->m_ownedItems->p_Set8(t_slot,String(L"no_item",7));
		return true;
	}
	return false;
}
bool c_Player::p_SubtractKey(){
	if(this->p_HasItemOfType(String(L"misc_key",8),false)){
		this->p_SubtractItemOfType(String(L"misc_key",8));
		return true;
	}
	return false;
}
void c_Player::p_Update(){
	if(this->p_Perished()){
		return;
	}
	bool t_v3=false;
	if(this->m_popUpController!=0){
		int t_13=this->m_popUpController->m_retval;
		if(t_13==-1){
		}else{
			if(t_13==1){
				this->m_warnState=0;
				this->p_ImmediatelyMoveTo(this->m_lastX-this->m_x,this->m_lastY-this->m_y,true,false,false,false,true);
				this->m_popUpController=0;
			}else{
				t_v3=true;
				this->m_popUpController=0;
			}
		}
	}
	if(this->m_hintsController!=0){
		int t_14=this->m_hintsController->m_retval;
		if(t_14==-1){
			this->p_ImmediatelyMoveTo(this->m_lastX-this->m_x,this->m_lastY-this->m_y,false,false,false,false,false);
		}else{
			if(t_14==1){
				t_v3=true;
				c_GameData::m_SetShowHints(1);
			}else{
				t_v3=true;
				c_GameData::m_SetShowHints(0);
			}
		}
		this->m_hintsController=0;
	}
	bool t_hasEnteredSeed=false;
	if(this->m_seedController!=0){
		if(this->m_seedController->m_result!=String()){
			t_hasEnteredSeed=true;
			c_Level::m_randSeedString=this->m_seedController->m_result;
			this->m_seedController=0;
		}
	}
	if(!m_CheckCoinXOR()){
		bb_controller_game_gamePaused=true;
		c_Audio::m_PauseSong(true);
		gc_assign(this->m_popUpController,(new c_ControllerPopUp)->m_new((bb_controller_game_controllerGamePointer),String(L"|902|SCORE CHEATING DETECTED|",29),String(),String(),String(),String(),true,true,String()));
		return;
	}
	if(c_Audio::m_cheatingDetected){
		bb_controller_game_gamePaused=true;
		c_Audio::m_PauseSong(true);
		gc_assign(this->m_popUpController,(new c_ControllerPopUp)->m_new((bb_controller_game_controllerGamePointer),String(L"|903|AUDIO CHEATING DETECTED|",29),String(),String(),String(),String(),true,true,String()));
		return;
	}
	int t_closestBeatNum=c_Audio::m_GetClosestBeatNum(true);
	if(this->m_lastHitBeat>t_closestBeatNum){
		this->m_lastHitBeat=-1;
	}
	if(this->m_lastKillBeat>t_closestBeatNum){
		this->m_lastKillBeat=-1;
	}
	if(this->m_crownOfGreedBeat>t_closestBeatNum){
		this->m_crownOfGreedBeat=-1;
	}
	if(this->m_lastWarDrumBeat>t_closestBeatNum){
		this->m_lastWarDrumBeat=-1;
	}
	if(this->m_lastBloodDrumBeat>t_closestBeatNum){
		this->m_lastBloodDrumBeat=-1;
	}
	if(this->m_coinPickupBeat>t_closestBeatNum){
		this->m_coinPickupBeat=-2;
	}
	if(this->m_courageRingBeat>t_closestBeatNum){
		this->m_courageRingBeat=-1;
	}
	if(this->m_courageShovelBeat>t_closestBeatNum){
		this->m_courageShovelBeat=-1;
	}
	if(t_closestBeatNum==0){
		if(this->m_paceBeat>t_closestBeatNum){
			this->m_paceBeat=-1;
		}
	}
	if(c_Shrine::m_paceShrineActive && t_closestBeatNum>64 && this->m_paceBeat==-1 && !this->m_falling){
		this->p_Hit(String(L"SHRINE OF PACE",14),1,-1,0,false,0);
		c_Flyaway* t_slothFlyaway=(new c_Flyaway)->m_new(String(L"|255|SLOTH! (SHRINE OF PACE)|",29),this->m_x,this->m_y,0,-22,true,FLOAT(0.0),FLOAT(0.2),true,120);
		t_slothFlyaway->p_CenterX();
	}
	if(c_Chain::m_waitingForFirstMovement[this->m_playerID]){
		this->m_lastKillBeat=t_closestBeatNum;
	}
	this->p_ProcessMoveQueue();
	if(this->p_IsSlidingOnIce() && this->p_IsStandingStill() && c_Audio::m_GetNonAbsoluteDistanceFromNearestBeat()<=0 && this->m_lastIceSlideBeat!=c_Audio::m_GetClosestBeatNum(false)){
		c_Point* t_slidingDir=c_Util::m_GetPointFromDir(this->m_slidingDir);
		this->m_slidingDir=-1;
		this->p_ImmediatelyMoveTo(t_slidingDir->m_x,t_slidingDir->m_y,false,false,false,false,false);
		this->m_lastIceSlideBeat=c_Audio::m_GetClosestBeatNum(false);
		bb_controller_game_incrementFixedBeatNum=true;
	}
	this->m_moveLastBeat=this->p_GetMoveLastBeat();
	c_Point* t_lastBeatPosition=this->p_GetPositionLastBeat();
	this->m_lastBeatX=t_lastBeatPosition->m_x;
	this->m_lastBeatY=t_lastBeatPosition->m_y;
	if(!this->m_wasKnockedBack){
		if(this->m_lastX>this->m_x){
			this->m_image->p_FlipX(true,true);
			this->m_headImage->p_FlipX(true,true);
		}else{
			if(this->m_lastX<this->m_x){
				this->m_image->p_FlipX(false,true);
				this->m_headImage->p_FlipX(false,true);
			}
		}
	}
	if(!this->p_HasItemOfType(String(L"ring_shadows",12),false)){
		Float t_flicker=FLOAT(0.0);
		if(this->m_torchType!=String(L"no_item",7)){
			t_flicker=c_Util::m_RndFloatRange(FLOAT(-0.5),FLOAT(0.5),false);
		}
		this->m_lightSourceMax=this->p_GetLightSourceMax()+t_flicker;
		this->m_constLightSourceMax=this->p_GetLightSourceMax();
	}
	if(this->m_wasShrunk){
		if(!this->p_IsShrunk(-9999,-9999)){
			this->p_PlayVO(String(L"Hm2",3));
		}
	}else{
		if(this->p_IsShrunk(-9999,-9999)){
			this->p_PlayVO(String(L"IceSlide",8));
			c_Flyaway* t_shrunkFlyaway=(new c_Flyaway)->m_new(String(L"|256|SHRUNK!|",13),this->m_x,this->m_y,0,-8,true,FLOAT(0.0),FLOAT(0.2),true,120);
			t_shrunkFlyaway->p_CenterX();
		}
	}
	this->m_wasShrunk=this->p_IsShrunk(-9999,-9999);
	if(this->p_GetElectricStrength()>0){
		this->m_electricityCounter+=1;
	}else{
		this->m_electricityCounter=0;
	}
	c_Point* t_exitValue=c_Level::m_GetExitValue(this->m_x,this->m_y);
	int t_exitValueX=t_exitValue->m_x;
	if(t_exitValueX==-4 || c_Level::m_isLevelEnding){
		this->m_playedExitErrorSound=false;
		this->p_Update22(t_closestBeatNum);
		return;
	}
	if(!this->p_IsStandingStill()){
		this->p_Update22(t_closestBeatNum);
		return;
	}
	if(c_Level::m_IsLockedExit(this->m_x,this->m_y)){
		if(!this->m_playedExitErrorSound){
			c_Audio::m_PlayGameSound(String(L"error",5),2,FLOAT(1.0));
			String t_exitFlyawayText=c_Level::m_GetTileFlyawayAt(this->m_x,this->m_y);
			if(t_exitFlyawayText==String()){
				t_exitFlyawayText=String(L"|257|EXIT LOCKED!|",18);
			}
			c_Flyaway* t_exitFlyaway=(new c_Flyaway)->m_new(t_exitFlyawayText,this->m_x,this->m_y,0,-12,true,FLOAT(0.0),FLOAT(0.2),true,120);
			t_exitFlyaway->p_CenterX();
			this->m_playedExitErrorSound=true;
		}
		this->p_Update22(t_closestBeatNum);
		return;
	}
	if(bb_controller_game_currentLevel!=-2 && (c_Util::m_IsCharacterActive(5) || c_Util::m_IsCharacterActive(7)) && !t_v3){
		int t_numCoinsRemaining=c_Item::m_ConsumeCoinsRemainingOnLevel();
		m_OffsetCoins(t_numCoinsRemaining);
	}
	if(c_GameData::m_GetShowHints()<0){
		bb_controller_game_gamePaused=true;
		c_Audio::m_PauseSong(true);
		gc_assign(this->m_hintsController,(new c_ControllerPopUp)->m_new((bb_controller_game_controllerGamePointer),String(L"|904|This game contains many mysterious items!|",47),String(L"|905|Would you like item hints, or would|",41),String(L"|906|you prefer to figure things out as you go?|",48),String(L"|907|YES, GIVE HINTS|",21),String(L"|908|NO THANKS|",15),true,false,String()));
		return;
	}
	if(bb_controller_game_currentLevel==-2){
		m_lobbySaleItemMinCost=c_SaleItem::m_GetMinCost();
	}
	bool t_clearNumDiamonds=false;
	if(bb_controller_game_currentLevel==-2 && t_exitValueX>=-10 || t_exitValueX==-1900 || t_exitValueX==-1700 || t_exitValueX==-50 || t_exitValueX==-1902 && !c_Level::m_isDeathlessMode){
		if(m_numDiamonds>=m_lobbySaleItemMinCost && c_GameData::m_GetShowDiamondReminder() && this->m_warnState<=0){
			bb_controller_game_gamePaused=true;
			c_Audio::m_PauseSong(true);
			gc_assign(this->m_hintsController,(new c_ControllerPopUp)->m_new((bb_controller_game_controllerGamePointer),String(L"|909|You'll lose your unspent diamonds|",39),String(L"|910|when you leaVe the lobby.|",31),String(L"|911|Would you like To stay And spend them?|",44),String(L"|912|Stay, spend diamonds|",26),String(L"|913|LeaVe, lose diamonds|",26),true,false,String()));
			this->m_warnState=1;
			return;
		}
		t_clearNumDiamonds=true;
	}
	if(bb_controller_game_currentLevel==-12 && !t_v3){
		bool t_popUp=true;
		String t_pText1=String();
		String t_pText2=String();
		String t_pText3=String();
		String t_bestiaryImagePath=String();
		int t_15=t_exitValueX;
		if(t_15==-2000){
			t_pText1=String(L"|914|CADENCE MODE!|",19);
			t_pText2=String(L"|915|NORMAL GAMEPLAY.|",22);
			t_bestiaryImagePath=String(L"bestiary/bestiary_cadence.png",29);
		}else{
			if(t_15==-1998){
				t_pText1=String(L"|917|ARIA MODE: DAGGER ONLY.|",29);
				t_pText2=String(L"|918|DIE IN A SINGLE HIT.|",26);
				t_pText3=String(L"|919|DIE ON MISSED BEAT!|",25);
				t_bestiaryImagePath=String(L"bestiary/bestiary_aria.png",26);
			}else{
				if(t_15==-1992){
					t_pText1=String(L"|920|BOLT MODE!|",16);
					t_pText2=String(L"|921|DOUBLE SPEED GAMEPLAY.|",28);
					t_bestiaryImagePath=String(L"bestiary/bestiary_bolt.png",26);
				}else{
					if(t_15==-1991){
						t_pText1=String(L"|922|BARD MODE: NO BEATS!|",26);
						t_pText2=String(L"|923|MOVE AT ANY TIME.|",23);
						t_pText3=String(L"|924|ENEMIES MOVE AFTER YOU.|",29);
						t_bestiaryImagePath=String(L"bestiary/bestiary_bard.png",26);
					}else{
						if(t_15==-1995){
							t_pText1=String(L"|925|MONK MODE: GOLD KILLS.|",28);
							t_pText2=String(L"|926|(VOW OF POVERTY!)|",23);
							t_pText3=String(L"|927|SHOPS GIVE FREE ITEMS.|",28);
							t_bestiaryImagePath=String(L"bestiary/bestiary_monk.png",26);
						}else{
							if(t_15==-1994){
								t_pText1=String(L"|928|DOVE MODE: PACIFISM!|",26);
								t_pText2=String(L"|929|YOU DO NO DAMAGE BUT|",26);
								t_pText3=String(L"|930|EXITS ARE UNLOCKED.|",25);
								t_bestiaryImagePath=String(L"bestiary/bestiary_dove.png",26);
							}else{
								if(t_15==-1996){
									t_pText1=String(L"|931|ELI MODE!|",15);
									t_pText2=String(L"|932|INFINITE BOMBS.|",21);
									t_pText3=String(L"|933|KICK BOMBS AT ENEMIES!|",28);
									t_bestiaryImagePath=String(L"bestiary/bestiary_eli.png",25);
								}else{
									if(t_15==-1997){
										t_pText1=String(L"|934|DORIAN MODE!|",18);
										t_pText2=String(L"|935|CURSED BOOTS OF LEAPING.|",30);
										t_pText3=String(L"|936|MOVE SLOW: TAKE DAMAGE.|",29);
										t_bestiaryImagePath=String(L"bestiary/bestiary_dorian.png",28);
									}else{
										if(t_15==-1999){
											t_pText1=String(L"|937|MELODY MODE!|",18);
											t_pText2=String(L"|938|MOVE NEXT TO ENEMIES|",26);
											t_pText3=String(L"|939|TO USE THE GOLDEN LUTE!|",29);
											t_bestiaryImagePath=String(L"bestiary/bestiary_melody.png",28);
										}else{
											if(t_15==-1993){
												t_pText1=String(L"|940|CODA MODE!|",16);
												t_pText2=String(L"|941|ARIA + BOLT + MONK.|",25);
												t_pText3=String(L"|942|PROBABLY IMPOSSIBLE.|",26);
												t_bestiaryImagePath=String(L"bestiary/bestiary_coda.png",26);
											}else{
												if(t_15==-1990){
													t_pText1=String(L"|15500|NOCTURNA MODE!|",22);
													t_pText2=String(L"|15501|BECOME A BAT.|",21);
													t_pText3=String(L"|15502|ZONE 5 INVADES OTHER ZONES.|",35);
													t_bestiaryImagePath=String(L"bestiary/bestiary_nocturna.png",30);
												}else{
													if(t_15==-1989){
														t_pText1=String(L"|15503|DIAMOND MODE!|",21);
														t_pText2=String(L"|15504|USE KEY COMBOS|",22);
														t_pText3=String(L"|15505|TO MOVE DIAGONALLY.|",27);
														t_bestiaryImagePath=String(L"bestiary/bestiary_diamond.png",29);
													}else{
														if(t_15==-1986){
															t_pText1=String(L"|15506|REAPER MODE!|",20);
															t_pText2=String(L"|15507|ACCUMULATE SOULS|",24);
															t_pText3=String(L"|15508|BY DEFEATING ENEMIES.|",29);
															t_bestiaryImagePath=String(L"bestiary/bestiary_reaper.png",28);
														}else{
															if(t_15==-1987){
																t_pText1=String(L"|15509|TEMPO MODE!|",19);
																t_pText2=String(L"|15510|1 HIT KILLS!|",20);
																t_pText3=String(L"|15511|DEFEAT ENEMIES TO SURVIVE.|",34);
																t_bestiaryImagePath=String(L"bestiary/bestiary_tempo.png",27);
															}else{
																if(t_15==-1988){
																	t_pText1=String(L"|15512|MARY MODE!|",18);
																	t_pText2=String(L"|15513|PROTECT YOUR LAMB|",25);
																	t_pText3=String(L"|15514|AT ALL COSTS!|",21);
																	t_bestiaryImagePath=String(L"bestiary/bestiary_mary.png",26);
																}else{
																	t_popUp=false;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		if(t_popUp){
			bb_controller_game_gamePaused=true;
			c_Audio::m_PauseSong(true);
			gc_assign(this->m_popUpController,(new c_ControllerPopUp)->m_new((bb_controller_game_controllerGamePointer),t_pText1,t_pText2,t_pText3,String(L"|1004|No|",9),String(L"|1003|Yes|",10),true,false,String(L"|916|CONTINUE?|",15)));
			gc_assign(this->m_popUpController->m_bestiaryImage,(new c_Sprite)->m_new2(t_bestiaryImagePath,1,c_Image::m_DefaultFlags));
			return;
		}
	}
	if(this->m_warnState<=1){
		bool t_popUp2=true;
		String t_pText12=String();
		String t_pText22=String();
		String t_pText32=String();
		if(t_exitValueX==-1900 || t_exitValueX==-1700){
			t_pText12=String(L"|943|ALL CHARACTERS MODE:|",26);
			t_pText22=String(L"|944|PLAY ALL CHARACTERS IN A ROW,|",35);
			t_pText32=String(L"|945|IN ALL ZONES MODE.|",24);
		}else{
			if(t_exitValueX==-50){
				t_pText12=String(L"|946|STORY MODE!|",17);
				t_pText22=String(L"|947|PLAY AS NOCTURNA, CADENCE, MELODY, THEN ARIA.|",51);
				t_pText32=String(L"|948|COMPLETE THE WHOLE STORY IN ONE GO!|",41);
			}else{
				if(t_exitValueX==-1902 && !c_Level::m_isDeathlessMode){
					t_pText12=String(L"|949|DEATHLESS MODE:|",21);
					t_pText22=String(L"|950|BEAT ALL ZONES REPEATEDLY WITHOUT DYING.|",46);
				}else{
					if(t_exitValueX==-7 && !c_GameData::m_GetHavePlayedHardcore()){
						t_pText12=String(L"|951|ALL ZONES MODE: COMPLETE ALL ZONES IN ONE RUN!|",52);
						t_pText22=String(L"|952|ALL LOBBY UPGRADES ARE UNLOCKED AND AVAILABLE,|",52);
						t_pText32=String(L"|953|BUT YOU START WITH LOWER HEALTH.|",38);
					}else{
						if(t_exitValueX==-9){
							t_pText12=String(L"|954|DAILY CHALLENGE: COMPLETE ALL ZONES IN ONE RUN!|",53);
							t_pText22=String(L"|955|ALL PLAYERS GET THE SAME DUNGEON.|",39);
							t_pText32=String(L"|956|RESETS DAILY AT MIDNIGHT GMT.|",35);
						}else{
							t_popUp2=false;
						}
					}
				}
			}
		}
		if(t_popUp2){
			bb_controller_game_gamePaused=true;
			c_Audio::m_PauseSong(true);
			gc_assign(this->m_popUpController,(new c_ControllerPopUp)->m_new((bb_controller_game_controllerGamePointer),t_pText12,t_pText22,t_pText32,String(L"|1004|No|",9),String(L"|1003|Yes|",10),true,false,String(L"|916|CONTINUE?|",15)));
			this->m_warnState=2;
			return;
		}
	}
	if(c_Level::m_IsSeededMode2(t_exitValueX) && !t_hasEnteredSeed){
		bb_controller_game_gamePaused=true;
		c_Audio::m_PauseSong(true);
		gc_assign(this->m_seedController,(new c_ControllerInputPopup)->m_new((bb_controller_game_controllerGamePointer),String(L"|900|ENTER A TEXT SEED!|",24),String(L"|901|YOU CAN USE NUMBERS, LETTERS AND SPACES:|",46),false));
		return;
	}
	if(-600<=t_exitValueX && t_exitValueX<=-101 && !t_v3){
		int t_16=c_Level::m_GetTileTypeAt(this->m_x,this->m_y);
		if(t_16==6 || t_16==15 || t_16==16){
			bb_controller_game_gamePaused=true;
			c_Audio::m_PauseSong(true);
			String t_pText13=String();
			int t_enemyID=t_exitValueX+1000;
			String t_enemyName=c_Enemy::m_GetEnemyName(t_enemyID);
			if(t_exitValueX<=-501){
				t_pText13=String(L"|960|MINIBOSS TRAINING!|",24);
			}else{
				t_pText13=String(L"|957|BOSS TRAINING!|",20);
			}
			gc_assign(this->m_popUpController,(new c_ControllerPopUp)->m_new((bb_controller_game_controllerGamePointer),t_pText13,String(L"|961|Spend 3 diamonds to|",25),String(L"|962|unlock |",13)+t_enemyName+String(L"|969|?|",7),String(L"|1004|No|",9),String(L"|1003|Yes|",10),true,false,String()));
			gc_assign(this->m_popUpController->m_bestiaryImage,c_Enemy::m_LoadBestiarySprite(t_enemyID));
			return;
		}
	}
	if(!c_Level::m_isTrainingMode && (-1000<=t_exitValueX && t_exitValueX<=-101) && !t_v3){
		String t_pText14=String();
		String t_pText23=String();
		if(-500<=t_exitValueX && t_exitValueX<=-490){
			t_pText14=String(L"|963|BOSS TRAINING!|",20);
			t_pText23=String(L"|964|Practice against|",22);
		}else{
			if(-600<=t_exitValueX && t_exitValueX<=-585){
				t_pText14=String(L"|965|MINIBOSS TRAINING!|",24);
				t_pText23=String(L"|966|Practice against|",22);
			}else{
				t_pText14=String(L"|967|TRAINING!|",15);
				t_pText23=String(L"|968|Practice against|",22);
			}
		}
		int t_enemyID2=t_exitValueX+1000;
		String t_enemyName2=c_Enemy::m_GetEnemyName(t_enemyID2);
		bb_controller_game_gamePaused=true;
		c_Audio::m_PauseSong(true);
		gc_assign(this->m_popUpController,(new c_ControllerPopUp)->m_new((bb_controller_game_controllerGamePointer),t_pText14,t_pText23,t_enemyName2+String(L"|969|?|",7),String(L"|1004|No|",9),String(L"|1003|Yes|",10),true,false,String()));
		gc_assign(this->m_popUpController->m_bestiaryImage,c_Enemy::m_LoadBestiarySprite(t_enemyID2));
		return;
	}
	int t_17=bb_controller_game_currentLevel;
	if(t_17==1){
		if(bb_controller_game_currentDepth==1 && c_Level::m_isHardcoreMode && m_numCoins>=9000 && !c_Util::m_IsCharacterActive(2)){
			bb_controller_game_gamePaused=true;
			c_Audio::m_PauseSong(true);
			gc_assign(this->m_popUpController,(new c_ControllerPopUp)->m_new((bb_controller_game_controllerGamePointer),String(L"|902|SCORE CHEATING DETECTED|",29),String(),String(),String(),String(),true,true,String()));
			return;
		}
	}else{
		if(t_17==4){
			int t_18=bb_controller_game_currentZone;
			if(t_18==1){
				if(c_Util::m_IsCharacterActive(0)){
					c_Util::m_IncrementSteamStat(String(L"NumZone1Completions",19),true,false,false,false);
				}
			}else{
				if(t_18==2){
					if(c_Util::m_IsCharacterActive(0)){
						c_Util::m_IncrementSteamStat(String(L"NumZone2Completions",19),true,false,false,false);
					}
				}else{
					if(t_18==3){
						if(c_Util::m_IsCharacterActive(0)){
							c_Util::m_IncrementSteamStat(String(L"NumZone3Completions",19),true,false,false,false);
						}
					}else{
						if(t_18==4){
							if(c_Util::m_IsCharacterActive(0)){
								c_Util::m_IncrementSteamStat(String(L"NumZone4Completions",19),true,false,false,false);
							}
						}else{
							if(t_18==5){
								c_Util::m_IncrementSteamStat(String(L"NumZone5Completions",19),true,false,false,false);
							}
						}
					}
				}
			}
		}
	}
	if(c_Level::m_isHardcoreMode && bb_controller_game_currentDepth==5){
		if(m_IsSolo()){
			int t_19=bb_controller_game_currentLevel;
			if(t_19==3){
				if(c_Util::m_IsCharacterActive(6)){
					c_Util::m_IncrementSteamStat(String(L"NumHardcoreCompletionsDove",26),true,false,false,false);
				}
			}else{
				if(t_19==4){
					if(c_Util::m_IsCharacterActive(9)){
						c_Util::m_IncrementSteamStat(String(L"NumHardcoreCompletionsBard",26),true,false,false,false);
					}else{
						if(c_Util::m_IsCharacterActive(8)){
							c_Util::m_IncrementSteamStat(String(L"NumHardcoreCompletionBolt",25),true,false,false,false);
						}else{
							if(c_Util::m_IsCharacterActive(5)){
								c_Util::m_IncrementSteamStat(String(L"NumHardcoreCompletionMonk",25),true,false,false,false);
							}else{
								if(c_Util::m_IsCharacterActive(4)){
									c_Util::m_IncrementSteamStat(String(L"NumHardcoreCompletionEli",24),true,false,false,false);
								}else{
									if(c_Util::m_IsCharacterActive(3)){
										c_Util::m_IncrementSteamStat(String(L"NumHardcoreCompletionDorian",27),true,false,false,false);
									}else{
										if(c_Util::m_IsCharacterActive(11)){
											c_Util::m_IncrementSteamStat(String(L"NumHardcoreCompletionCoda",25),true,false,false,false);
										}else{
											if(c_Util::m_IsCharacterActive(7)){
												c_Util::m_IncrementSteamStat(String(L"NumHardcoreCompletionsDiagonal",30),true,false,false,false);
											}else{
												if(c_Util::m_IsCharacterActive(12)){
													c_Util::m_IncrementSteamStat(String(L"NumHardcoreCompletionsReaper",28),true,false,false,false);
												}else{
													if(c_Util::m_IsCharacterActive(13)){
														c_Util::m_IncrementSteamStat(String(L"NumHardcoreCompletionTempo",26),true,false,false,false);
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}else{
					if(t_19==5){
						if(c_Util::m_IsCharacterActive(0)){
							c_Util::m_IncrementSteamStat(String(L"NumHardcoreCompletionsCadence",29),true,false,false,false);
						}else{
							if(c_Util::m_IsCharacterActive(2)){
								c_Util::m_IncrementSteamStat(String(L"NumHardcoreCompletionsAria",26),true,false,false,false);
							}else{
								if(c_Util::m_IsCharacterActive(1)){
									c_Util::m_IncrementSteamStat(String(L"NumHardcoreCompletionsMelody",28),true,false,false,false);
								}else{
									if(c_Util::m_IsCharacterActive(10)){
										c_Util::m_IncrementSteamStat(String(L"NumHardcoreCompletionsNocturna",30),true,false,false,false);
									}
								}
							}
						}
					}
				}
			}
		}
	}
	if(bb_controller_game_numPlayers>1 && !bb_controller_game_players[1]->m_isHelper && c_Level::m_isHardcoreMode && bb_controller_game_currentDepth==5){
		if(c_Util::m_IsCharacterActive(2) || c_Util::m_IsCharacterActive(1) || c_Util::m_IsCharacterActive(0)){
			if(bb_controller_game_currentLevel==5){
				c_Util::m_IncrementSteamStat(String(L"NumHardcoreCompletionsCoop",26),true,true,false,false);
			}
		}else{
			if(bb_controller_game_currentLevel==4){
				c_Util::m_IncrementSteamStat(String(L"NumHardcoreCompletionsCoop",26),true,true,false,false);
			}
		}
	}
	if(bb_controller_game_currentLevel==5 && bb_controller_game_currentDepth==5 && c_Level::m_isHardcoreMode){
		if(c_Level::m_isDailyChallenge){
			c_Util::m_IncrementSteamStat(String(L"NumDailyChallengeCompletions",28),true,true,true,false);
		}else{
			if(m_IsSolo() && !c_Level::m_isPhasingMode){
				if(c_Util::m_IsCharacterActive(0)){
					if(bb_app_Millisecs()+bb_controller_game_runPlaytimeMilliseconds-bb_controller_game_runPlaytimeLastAdded<=900000){
						c_Util::m_IncrementSteamStat(String(L"NumSub8CadenceSpeedruns",23),true,false,false,false);
					}
				}else{
					if(c_Util::m_IsCharacterActive(10)){
						if(bb_app_Millisecs()+bb_controller_game_runPlaytimeMilliseconds-bb_controller_game_runPlaytimeLastAdded<=900000){
							c_Util::m_IncrementSteamStat(String(L"NumSub10NocturnaSpeedruns",25),true,false,false,false);
						}
					}else{
						if(c_Util::m_IsCharacterActive(2)){
							if(c_Level::m_isRunNoItemsNoShrines){
								c_Util::m_IncrementSteamStat(String(L"NumAriaLowPercentCompletions",28),true,false,false,false);
							}
						}
					}
				}
			}
		}
	}
	if(m_IsLastLevel() && bb_controller_game_currentDepth==5 && m_IsSolo()){
		if(c_Level::m_isHardMode){
			if(c_Util::m_IsCharacterActive(10)){
				c_Util::m_IncrementSteamStat(String(L"NumHardModeCompletionsNocturna",30),true,true,true,false);
			}
			c_GameData::m_SetHardModeComplete();
			m_CheckAllModeCompletion();
		}else{
			if(c_Level::m_isNoReturnMode){
				if(c_Util::m_IsCharacterActive(0)){
					c_Util::m_IncrementSteamStat(String(L"NumNoReturnCompletionsCadence",29),true,true,true,false);
				}
				c_GameData::m_SetNoReturnModeComplete();
				m_CheckAllModeCompletion();
			}else{
				if(c_Level::m_isPhasingMode){
					c_Util::m_IncrementSteamStat(String(L"NumPhasingModeCompletions",25),true,true,true,false);
					c_GameData::m_SetPhasingModeComplete();
					m_CheckAllModeCompletion();
				}else{
					if(c_Level::m_isRandomizerMode){
						c_Util::m_IncrementSteamStat(String(L"NumRandomizerModeCompletions",28),true,true,true,false);
						c_GameData::m_SetRandomizerModeComplete();
						m_CheckAllModeCompletion();
					}else{
						if(c_Level::m_isMysteryMode){
							c_Util::m_IncrementSteamStat(String(L"NumMysteryModeCompletions",25),true,true,true,false);
							c_GameData::m_SetMysteryModeComplete();
							m_CheckAllModeCompletion();
						}else{
							if(c_Level::m_isStoryMode){
								if(c_Util::m_IsCharacterActive(2) && m_IsSolo()){
									c_Util::m_IncrementSteamStat(String(L"NumStoryModeCompletions",23),true,true,true,false);
									c_GameData::m_SetStoryModeComplete();
									m_CheckAllModeCompletion();
								}
							}
						}
					}
				}
			}
		}
	}
	this->m_warnState=0;
	if(t_clearNumDiamonds){
		m_numDiamonds=0;
	}
	if(bb_controller_game_currentLevel==0){
		c_GameData::m_SetTutorialComplete();
		this->p_SubtractKey();
	}
	if(t_exitValueX==-2 || -22<=t_exitValueX && t_exitValueX<=-12 || t_exitValueX<=-1900 && t_exitValueX!=-1902 || t_exitValueX==-1700){
		c_Level::m_NewLevel(t_exitValueX,t_exitValue->m_y,this->m_playerID,false,0,false);
		this->p_Update22(t_closestBeatNum);
		return;
	}
	c_Stairs_callback::m_levelVal=t_exitValue->m_x;
	c_Stairs_callback::m_zoneVal=t_exitValue->m_y;
	c_Stairs_callback::m_playerVal=this->m_playerID;
	c_Stairs_callback::m_continuedRun=false;
	int t_fadeFrames=bb_necrodancergame_FRAMES_PER_SEC/4;
	c_Stairs_callback* t_stairsCallback=(new c_Stairs_callback)->m_new();
	c_Camera::m_FadeOutThenExecute(t_fadeFrames,(t_stairsCallback));
	c_Level::m_isLevelEnding=true;
	c_Audio::m_fadeFrames=t_fadeFrames;
	c_Audio::m_startFadeFrames=t_fadeFrames;
}
bool c_Player::m_AllPlayersPerished(){
	for(int t_i=0;t_i<bb_controller_game_numPlayers;t_i=t_i+1){
		c_Player* t_player=bb_controller_game_players[t_i];
		if(!t_player->m_perished && !t_player->m_isHelper){
			if(t_player->m_helper==0 || !t_player->m_helper->m_perished){
				return false;
			}
		}
	}
	return true;
}
bool c_Player::m_PlayersHaveMovedThisBeat(){
	if(c_Audio::m_fixedBeatNum==-64){
		for(int t_i=0;t_i<bb_controller_game_numPlayers;t_i=t_i+1){
			c_Player* t_player=bb_controller_game_players[t_i];
			if(!t_player->p_Perished() && bb_controller_game_lastPlayerMoveBeat[t_i]<c_Audio::m_GetClosestBeatNum(true) && t_player->m_lastIceSlideBeat<c_Audio::m_GetClosestBeatNum(true) && t_player->m_queuedMoveBeat<c_Audio::m_GetClosestBeatNum(true) && !t_player->m_queuedMove){
				int t_percentDist=c_Audio::m_GetDistanceFromNearestBeat()/c_Audio::m_GetNextBeatDuration();
				return Float(t_percentDist)>FLOAT(1.0);
			}
		}
		bb_logger_Debug->p_TraceNotImplemented(String(L"Player.PlayersHaveMovedThisBeat()",33));
		return true;
	}
	return bb_controller_game_incrementFixedBeatNum;
}
void c_Player::p_HandleIceAndCoals(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Player.HandleIceAndCoals()",26));
}
void c_Player::p_AfterEnemyMovement(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Player.AfterEnemyMovement()",27));
}
bool c_Player::m_AnyPlayerTemporaryMapSight(){
	for(int t_i=0;t_i<bb_controller_game_numPlayers;t_i=t_i+1){
		c_Player* t_player=bb_controller_game_players[t_i];
		if(!t_player->p_Perished() && t_player->m_temporaryMapSight){
			return true;
		}
	}
	return false;
}
bool c_Player::p_IsVisible(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Player.IsVisible()",18));
	return false;
}
void c_Player::mark(){
	c_MobileEntity::mark();
	gc_mark_q(m_familiars);
	gc_mark_q(m_lambFamiliar);
	gc_mark_q(m_headImage);
	gc_mark_q(m_headImageForHUD);
	gc_mark_q(m_ownedItems);
	gc_mark_q(m_cursedSlots);
	gc_mark_q(m_mysterySlots);
	gc_mark_q(m_miscItems);
	gc_mark_q(m_itemQuantity);
	gc_mark_q(m_weapon);
	gc_mark_q(m_health);
	gc_mark_q(m_hudSlot);
	gc_mark_q(m_hudSlotOff);
	gc_mark_q(m_hudSlotOffFlyFromPlayer);
	gc_mark_q(m_shovelImages);
	gc_mark_q(m_tempoHeartText);
	gc_mark_q(m_hudSlotAction1);
	gc_mark_q(m_hudSlotAction2);
	gc_mark_q(m_hudSlotAction2Empty);
	gc_mark_q(m_hudSlotWeapon2);
	gc_mark_q(m_hudSlotWeapon2Empty);
	gc_mark_q(m_hudSlotWeaponReload);
	gc_mark_q(m_hudSlotWeaponThrow);
	gc_mark_q(m_hudSlotWeaponThrow2);
	gc_mark_q(m_hudSlotBoots);
	gc_mark_q(m_hudSlotBoots2);
	gc_mark_q(m_hudSlotBoots3);
	gc_mark_q(m_hudSlotBomb);
	gc_mark_q(m_hudSlotSpell1);
	gc_mark_q(m_hudSlotSpell2);
	gc_mark_q(m_hudDiamondForFlying);
	gc_mark_q(m_mysteryWeaponImage);
	gc_mark_q(m_mysteryRingImage);
	gc_mark_q(m_wobbler);
	gc_mark_q(m_shieldImageBack);
	gc_mark_q(m_shieldImageFront);
	gc_mark_q(m_helper);
	gc_mark_q(m_clampedEnemy);
	gc_mark_q(m_popUpController);
	gc_mark_q(m_hintsController);
	gc_mark_q(m_seedController);
	gc_mark_q(m_batWeapon);
	gc_mark_q(m_lastClampedEnemy);
}
c_ControllerLevelEditor::c_ControllerLevelEditor(){
	m_numLevels=0;
	m_levels=0;
}
int c_ControllerLevelEditor::m_playingLevel;
bool c_ControllerLevelEditor::m_playingWholeDungeon;
c_ControllerLevelEditor* c_ControllerLevelEditor::m_storedEditor;
c_ControllerLevelEditor* c_ControllerLevelEditor::m_new(){
	c_Controller::m_new();
	return this;
}
void c_ControllerLevelEditor::p_RegainFocus(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ControllerLevelEditor.RegainFocus()",35));
}
void c_ControllerLevelEditor::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ControllerLevelEditor.Update()",30));
}
void c_ControllerLevelEditor::mark(){
	c_Controller::mark();
	gc_mark_q(m_levels);
}
c_Map5::c_Map5(){
	m_root=0;
}
c_Node5* c_Map5::p_FindNode(int t_key){
	c_Node5* t_node=m_root;
	while((t_node)!=0){
		int t_cmp=p_Compare(t_key,t_node->m_key);
		if(t_cmp>0){
			t_node=t_node->m_right;
		}else{
			if(t_cmp<0){
				t_node=t_node->m_left;
			}else{
				return t_node;
			}
		}
	}
	return t_node;
}
c_LevelObject* c_Map5::p_Get2(int t_key){
	c_Node5* t_node=p_FindNode(t_key);
	if((t_node)!=0){
		return t_node->m_value;
	}
	return 0;
}
void c_Map5::mark(){
	Object::mark();
	gc_mark_q(m_root);
}
c_IntMap2::c_IntMap2(){
}
int c_IntMap2::p_Compare(int t_lhs,int t_rhs){
	return t_lhs-t_rhs;
}
void c_IntMap2::mark(){
	c_Map5::mark();
}
c_Node5::c_Node5(){
	m_key=0;
	m_right=0;
	m_left=0;
	m_value=0;
}
void c_Node5::mark(){
	Object::mark();
	gc_mark_q(m_right);
	gc_mark_q(m_left);
	gc_mark_q(m_value);
}
bool bb_controller_game_hasWon;
bool bb_controller_game_showScoreMessage;
c_Map6::c_Map6(){
	m_root=0;
}
c_Map6* c_Map6::m_new(){
	return this;
}
int c_Map6::p_Clear(){
	m_root=0;
	return 0;
}
c_Node6* c_Map6::p_FindNode(int t_key){
	c_Node6* t_node=m_root;
	while((t_node)!=0){
		int t_cmp=p_Compare(t_key,t_node->m_key);
		if(t_cmp>0){
			t_node=t_node->m_right;
		}else{
			if(t_cmp<0){
				t_node=t_node->m_left;
			}else{
				return t_node;
			}
		}
	}
	return t_node;
}
bool c_Map6::p_Contains(int t_key){
	return p_FindNode(t_key)!=0;
}
int c_Map6::p_RotateLeft5(c_Node6* t_node){
	c_Node6* t_child=t_node->m_right;
	gc_assign(t_node->m_right,t_child->m_left);
	if((t_child->m_left)!=0){
		gc_assign(t_child->m_left->m_parent,t_node);
	}
	gc_assign(t_child->m_parent,t_node->m_parent);
	if((t_node->m_parent)!=0){
		if(t_node==t_node->m_parent->m_left){
			gc_assign(t_node->m_parent->m_left,t_child);
		}else{
			gc_assign(t_node->m_parent->m_right,t_child);
		}
	}else{
		gc_assign(m_root,t_child);
	}
	gc_assign(t_child->m_left,t_node);
	gc_assign(t_node->m_parent,t_child);
	return 0;
}
int c_Map6::p_RotateRight5(c_Node6* t_node){
	c_Node6* t_child=t_node->m_left;
	gc_assign(t_node->m_left,t_child->m_right);
	if((t_child->m_right)!=0){
		gc_assign(t_child->m_right->m_parent,t_node);
	}
	gc_assign(t_child->m_parent,t_node->m_parent);
	if((t_node->m_parent)!=0){
		if(t_node==t_node->m_parent->m_right){
			gc_assign(t_node->m_parent->m_right,t_child);
		}else{
			gc_assign(t_node->m_parent->m_left,t_child);
		}
	}else{
		gc_assign(m_root,t_child);
	}
	gc_assign(t_child->m_right,t_node);
	gc_assign(t_node->m_parent,t_child);
	return 0;
}
int c_Map6::p_InsertFixup5(c_Node6* t_node){
	while(((t_node->m_parent)!=0) && t_node->m_parent->m_color==-1 && ((t_node->m_parent->m_parent)!=0)){
		if(t_node->m_parent==t_node->m_parent->m_parent->m_left){
			c_Node6* t_uncle=t_node->m_parent->m_parent->m_right;
			if(((t_uncle)!=0) && t_uncle->m_color==-1){
				t_node->m_parent->m_color=1;
				t_uncle->m_color=1;
				t_uncle->m_parent->m_color=-1;
				t_node=t_uncle->m_parent;
			}else{
				if(t_node==t_node->m_parent->m_right){
					t_node=t_node->m_parent;
					p_RotateLeft5(t_node);
				}
				t_node->m_parent->m_color=1;
				t_node->m_parent->m_parent->m_color=-1;
				p_RotateRight5(t_node->m_parent->m_parent);
			}
		}else{
			c_Node6* t_uncle2=t_node->m_parent->m_parent->m_left;
			if(((t_uncle2)!=0) && t_uncle2->m_color==-1){
				t_node->m_parent->m_color=1;
				t_uncle2->m_color=1;
				t_uncle2->m_parent->m_color=-1;
				t_node=t_uncle2->m_parent;
			}else{
				if(t_node==t_node->m_parent->m_left){
					t_node=t_node->m_parent;
					p_RotateRight5(t_node);
				}
				t_node->m_parent->m_color=1;
				t_node->m_parent->m_parent->m_color=-1;
				p_RotateLeft5(t_node->m_parent->m_parent);
			}
		}
	}
	m_root->m_color=1;
	return 0;
}
bool c_Map6::p_Add4(int t_key,int t_value){
	c_Node6* t_node=m_root;
	c_Node6* t_parent=0;
	int t_cmp=0;
	while((t_node)!=0){
		t_parent=t_node;
		t_cmp=p_Compare(t_key,t_node->m_key);
		if(t_cmp>0){
			t_node=t_node->m_right;
		}else{
			if(t_cmp<0){
				t_node=t_node->m_left;
			}else{
				return false;
			}
		}
	}
	t_node=(new c_Node6)->m_new(t_key,t_value,-1,t_parent);
	if((t_parent)!=0){
		if(t_cmp>0){
			gc_assign(t_parent->m_right,t_node);
		}else{
			gc_assign(t_parent->m_left,t_node);
		}
		p_InsertFixup5(t_node);
	}else{
		gc_assign(m_root,t_node);
	}
	return true;
}
bool c_Map6::p_Set6(int t_key,int t_value){
	c_Node6* t_node=m_root;
	c_Node6* t_parent=0;
	int t_cmp=0;
	while((t_node)!=0){
		t_parent=t_node;
		t_cmp=p_Compare(t_key,t_node->m_key);
		if(t_cmp>0){
			t_node=t_node->m_right;
		}else{
			if(t_cmp<0){
				t_node=t_node->m_left;
			}else{
				t_node->m_value=t_value;
				return false;
			}
		}
	}
	t_node=(new c_Node6)->m_new(t_key,t_value,-1,t_parent);
	if((t_parent)!=0){
		if(t_cmp>0){
			gc_assign(t_parent->m_right,t_node);
		}else{
			gc_assign(t_parent->m_left,t_node);
		}
		p_InsertFixup5(t_node);
	}else{
		gc_assign(m_root,t_node);
	}
	return true;
}
int c_Map6::p_Get2(int t_key){
	c_Node6* t_node=p_FindNode(t_key);
	if((t_node)!=0){
		return t_node->m_value;
	}
	return 0;
}
void c_Map6::mark(){
	Object::mark();
	gc_mark_q(m_root);
}
c_IntMap3::c_IntMap3(){
}
c_IntMap3* c_IntMap3::m_new(){
	c_Map6::m_new();
	return this;
}
int c_IntMap3::p_Compare(int t_lhs,int t_rhs){
	return t_lhs-t_rhs;
}
void c_IntMap3::mark(){
	c_Map6::mark();
}
c_Node6::c_Node6(){
	m_key=0;
	m_right=0;
	m_left=0;
	m_value=0;
	m_color=0;
	m_parent=0;
}
c_Node6* c_Node6::m_new(int t_key,int t_value,int t_color,c_Node6* t_parent){
	this->m_key=t_key;
	this->m_value=t_value;
	this->m_color=t_color;
	gc_assign(this->m_parent,t_parent);
	return this;
}
c_Node6* c_Node6::m_new2(){
	return this;
}
void c_Node6::mark(){
	Object::mark();
	gc_mark_q(m_right);
	gc_mark_q(m_left);
	gc_mark_q(m_parent);
}
c_Shrine::c_Shrine(){
	m_type=-1;
	m_isForSale=false;
	m_rng=0;
	m_contents1=String();
	m_contents2=String();
	m_contents3=String();
	m_contents4=String();
	m_contents5=String();
	m_contents6=String();
	m_cost=0;
	m_hintText=0;
}
bool c_Shrine::m_darknessShrineActive;
bool c_Shrine::m_rhythmShrineActive;
bool c_Shrine::m_riskShrineActive;
c_Player* c_Shrine::m_riskShrinePlayer;
bool c_Shrine::m_spaceShrineActive;
bool c_Shrine::m_warShrineActive;
bool c_Shrine::m_noReturnShrineActive;
c_Player* c_Shrine::m_noReturnShrinePlayer;
bool c_Shrine::m_paceShrineActive;
bool c_Shrine::m_bossShrineActive;
c_IntSet* c_Shrine::m_usedShrines;
int c_Shrine::m_usedShrinerInZone;
void c_Shrine::m_ResetShrines(){
	m_darknessShrineActive=false;
	m_rhythmShrineActive=false;
	m_riskShrineActive=false;
	m_riskShrinePlayer=0;
	m_spaceShrineActive=false;
	m_warShrineActive=false;
	m_noReturnShrineActive=false;
	m_noReturnShrinePlayer=0;
	m_paceShrineActive=false;
	m_bossShrineActive=false;
	m_usedShrines->p_Clear();
	m_usedShrinerInZone=-1;
}
bool c_Shrine::m_IsValidShrine(int t_shrineType){
	if(t_shrineType==-1){
		return false;
	}
	if(m_usedShrines->p_Contains(t_shrineType)){
		return false;
	}
	int t_3=t_shrineType;
	if(t_3==0){
		return !c_Util::m_IsWeaponlessCharacterActive();
	}else{
		if(t_3==3){
			return !c_Util::m_IsWeaponlessCharacterActive();
		}else{
			if(t_3==15){
				return !c_Util::m_IsWeaponlessCharacterActive() || !c_Util::m_IsCharacterActive(13);
			}else{
				if(t_3==4){
					return !c_Util::m_IsCharacterActive(9);
				}else{
					if(t_3==5){
						return !c_Util::m_AreAriaOrCodaActive() || !c_Util::m_IsCharacterActive(11);
					}else{
						if(t_3==14){
							return !c_Util::m_AreAriaOrCodaActive();
						}else{
							if(t_3==6){
								return !c_Util::m_IsCharacterActive(6);
							}else{
								if(t_3==9){
									return false;
								}else{
									if(t_3==10){
										return false;
									}else{
										if(t_3==11){
											return false;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return true;
}
int c_Shrine::m_GetRandomShrineInt(bool t_isShriner,int t_banType1,int t_banType2){
	c_WeightedPicker* t_picker=(new c_WeightedPicker)->m_new();
	if(c_Level::m_isHardcoreMode){
		t_picker->p_Push4(10);
		t_picker->p_Push4(9);
		t_picker->p_Push4(11);
		t_picker->p_Push4(9);
		t_picker->p_Push4(9);
		t_picker->p_Push4(7);
		t_picker->p_Push4(8);
		t_picker->p_Push4(9);
		t_picker->p_Push4(6);
		t_picker->p_Push4(5);
		t_picker->p_Push4(5);
		t_picker->p_Push4(5);
		t_picker->p_Push4(8);
		t_picker->p_Push4(9);
		t_picker->p_Push4(9);
		t_picker->p_Push4(9);
	}else{
		t_picker->p_Push4(12);
		t_picker->p_Push4(9);
		t_picker->p_Push4(13);
		t_picker->p_Push4(11);
		t_picker->p_Push4(0);
		t_picker->p_Push4(9);
		t_picker->p_Push4(13);
		t_picker->p_Push4(11);
		t_picker->p_Push4(9);
		t_picker->p_Push4(0);
		t_picker->p_Push4(0);
		t_picker->p_Push4(0);
		t_picker->p_Push4(14);
		t_picker->p_Push4(11);
		t_picker->p_Push4(11);
		t_picker->p_Push4(11);
	}
	int t_shrineInt=-1;
	for(int t_i=200;t_i>0;t_i=t_i+-1){
		t_shrineInt=t_picker->p_PickRandom(true);
		if(!m_IsValidShrine(t_shrineInt)){
			continue;
		}
		if(t_isShriner){
			int t_1=t_shrineInt;
			if(t_1==14 || t_1==6 || t_1==12){
				continue;
			}
		}
		int t_2=t_shrineInt;
		if(t_2==t_banType1 || t_2==t_banType2){
			continue;
		}
		return t_shrineInt;
	}
	return 2;
}
String c_Shrine::m_GetHintText(int t_shrineType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Shrine.GetHintText(Int)",23));
	return String();
}
String c_Shrine::p_RandomGlassWeapon(){
	int t_requestedLevel=bb_controller_game_currentLevel+2;
	if(!c_Util::m_IsWeaponlessCharacterActive()){
		return c_Item::m_GetRandomItemInClass(String(L"isGlass",7),t_requestedLevel,String(L"chestChance",11),2,true,String(L"weapon",6),false);
	}
	return c_Item::m_GetRandomItemInClass(String(),t_requestedLevel,String(L"chestChance",11),0,true,String(),false);
}
void c_Shrine::p_GenUncertaintyContents(){
	c_UncertaintyWeaponPredicate* t_weaponPredicate=(new c_UncertaintyWeaponPredicate)->m_new();
	this->m_contents1=c_Item::m_GetRandomItemInClassByPredicate((t_weaponPredicate),-1,String(L"chestChance",11),true);
	c_UncertaintyRingPredicate* t_ringPredicate=(new c_UncertaintyRingPredicate)->m_new();
	this->m_contents2=c_Item::m_GetRandomItemInClassByPredicate((t_ringPredicate),-1,String(L"chestChance",11),true);
}
void c_Shrine::p_GenBossContents(){
	int t_requestedLevel=bb_controller_game_currentLevel+2;
	this->m_contents1=c_Item::m_GetRandomItemInClass(String(),t_requestedLevel,String(L"chestChance",11),1,true,String(),false);
	this->m_contents2=c_Item::m_GetRandomItemInClass(String(),t_requestedLevel,String(L"chestChance",11),3,true,String(),false);
	this->m_contents3=c_Item::m_GetRandomItemInClass(String(),t_requestedLevel,String(L"chestChance",11),2,true,String(),false);
}
void c_Shrine::p_GenPainContents(){
	this->m_contents1=this->p_RandomGlassWeapon();
	this->m_contents2=this->p_RandomGlassWeapon();
	this->m_contents3=this->p_RandomGlassWeapon();
}
c_List28* c_Shrine::m_shrineList;
c_Shrine* c_Shrine::m_new(int t_xVal,int t_yVal,int t_cType,c_RNG* t_rng_,bool t_saleShrine,bool t_pending){
	c_Entity::m_new();
	this->m_x=t_xVal;
	this->m_y=t_yVal;
	this->m_type=t_cType;
	this->m_isForSale=t_saleShrine;
	gc_assign(this->m_rng,t_rng_);
	this->m_isWraithLike=true;
	String t_hintText=m_GetHintText(this->m_type);
	if(t_hintText!=String()){
		bb_logger_Debug->p_TraceNotImplemented(String(L"Shrine.New(Int, Int, Int, RNG, Bool, Bool) (hint text)",54));
	}
	if(c_Level::m_randSeed!=-1){
		int t_4=this->m_type;
		if(t_4==0){
			this->m_contents1=c_Item::m_GetRandomItemInClass(String(L"isBlood",7),-1,String(L"chestChance",11),0,true,String(),false);
		}else{
			if(t_4==5){
				int t_requestedLevel=bb_controller_game_currentLevel+2;
				this->m_contents1=c_Item::m_GetRandomItemInClass(String(),t_requestedLevel,String(L"chestChance",11),0,true,String(),false);
				this->m_contents2=c_Item::m_GetRandomItemInClass(String(),t_requestedLevel,String(L"chestChance",11),0,true,String(),false);
				this->m_contents3=c_Item::m_GetRandomItemInClass(String(),t_requestedLevel,String(L"chestChance",11),0,true,String(),false);
			}else{
				if(t_4==6){
					int t_requestedLevel2=bb_controller_game_currentLevel+2;
					this->m_contents1=c_Item::m_GetRandomItemInClass(String(),t_requestedLevel2,String(L"chestChance",11),0,true,String(),false);
					this->m_contents2=c_Item::m_GetRandomItemInClass(String(),t_requestedLevel2,String(L"chestChance",11),0,true,String(),false);
					this->m_contents3=c_Item::m_GetRandomItemInClass(String(),t_requestedLevel2,String(L"chestChance",11),0,true,String(),false);
					this->m_contents4=this->p_RandomGlassWeapon();
					this->m_contents5=this->p_RandomGlassWeapon();
					this->m_contents6=this->p_RandomGlassWeapon();
				}else{
					if(t_4==12){
						int t_requestedLevel3=bb_controller_game_currentLevel;
						this->m_contents1=c_Item::m_GetRandomItemInClass(String(),t_requestedLevel3,String(L"chestChance",11),0,false,String(),false);
						this->m_contents2=c_Item::m_GetRandomItemInClass(String(),t_requestedLevel3,String(L"chestChance",11),0,false,String(),false);
						this->m_contents3=c_Item::m_GetRandomItemInClass(String(),t_requestedLevel3,String(L"chestChance",11),0,false,String(),false);
						this->m_contents4=c_Item::m_GetRandomItemInClass(String(),t_requestedLevel3,String(L"chestChance",11),0,false,String(),false);
						this->m_contents5=c_Item::m_GetRandomItemInClass(String(),t_requestedLevel3,String(L"chestChance",11),0,false,String(),false);
						this->m_contents6=c_Item::m_GetRandomItemInClass(String(),t_requestedLevel3,String(L"chestChance",11),0,false,String(),false);
					}else{
						if(t_4==15){
							this->p_GenUncertaintyContents();
						}else{
							if(t_4==13){
								this->p_GenBossContents();
							}else{
								if(t_4==14){
									this->p_GenPainContents();
								}else{
									if(t_4==8){
										int t_randomValue=c_Util::m_RndIntRangeFromZero(1,true);
										this->m_contents1=String(t_randomValue)+String();
									}
								}
							}
						}
					}
				}
			}
		}
	}
	this->m_xOff=FLOAT(-6.0);
	this->m_yOff=FLOAT(-19.0);
	int t_5=this->m_type;
	if(t_5==0){
		gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/shrine_blood.png",22),35,52,4,c_Image::m_DefaultFlags));
	}else{
		if(t_5==1){
			gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/shrine_darkness.png",25),35,52,4,c_Image::m_DefaultFlags));
		}else{
			if(t_5==2){
				gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/shrine_glass.png",22),35,52,4,c_Image::m_DefaultFlags));
			}else{
				if(t_5==3){
					gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/shrine_peace.png",22),35,52,4,c_Image::m_DefaultFlags));
				}else{
					if(t_5==4){
						gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/shrine_rhythm.png",23),35,52,4,c_Image::m_DefaultFlags));
					}else{
						if(t_5==5){
							gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/shrine_risk.png",21),35,52,4,c_Image::m_DefaultFlags));
						}else{
							if(t_5==6){
								gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/shrine_sacrifice.png",26),35,52,4,c_Image::m_DefaultFlags));
							}else{
								if(t_5==7){
									gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/shrine_space.png",22),35,52,4,c_Image::m_DefaultFlags));
								}else{
									if(t_5==8){
										gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/shrine_war.png",20),35,52,4,c_Image::m_DefaultFlags));
									}else{
										if(t_5==9){
											gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/shrine_no_return.png",26),35,52,4,c_Image::m_DefaultFlags));
										}else{
											if(t_5==10){
												gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/shrine_phasing.png",24),35,52,4,c_Image::m_DefaultFlags));
											}else{
												if(t_5==11){
													gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/shrine_pace.png",21),35,52,4,c_Image::m_DefaultFlags));
													this->m_xOff=FLOAT(-5.0);
													this->m_yOff=FLOAT(-21.0);
												}else{
													if(t_5==12){
														gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/shrine_chance.png",23),35,52,4,c_Image::m_DefaultFlags));
														this->m_cost=int(c_SaleItem::m_GetCostMultiplier()*FLOAT(10.0));
													}else{
														if(t_5==15){
															gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/shrine_uncertainty.png",28),24,48,4,c_Image::m_DefaultFlags));
															this->m_xOff=FLOAT(-2.0);
															this->m_yOff=FLOAT(-16.0);
														}else{
															if(t_5==13){
																gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/shrine_boss.png",21),30,46,4,c_Image::m_DefaultFlags));
																this->m_xOff=FLOAT(-3.0);
																this->m_yOff=FLOAT(-13.0);
															}else{
																if(t_5==14){
																	gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/shrine_pain.png",21),22,50,4,c_Image::m_DefaultFlags));
																	this->m_xOff=FLOAT(0.0);
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	if(this->m_type==12 || this->m_isForSale){
		bb_logger_Debug->p_TraceNotImplemented(String(L"Shrine.New(Int, Int, Int, RNG, Bool, Bool) (digit sprites)",58));
	}
	this->m_image->p_SetZOff(FLOAT(20.0));
	this->m_collides=true;
	m_shrineList->p_AddLast28(this);
	if(!t_pending){
		m_usedShrines->p_Insert5(this->m_type);
	}
	return this;
}
c_Shrine* c_Shrine::m_new2(){
	c_Entity::m_new();
	return this;
}
void c_Shrine::m_AddPendingShrinesToUsedList(){
	c_Enumerator28* t_=m_shrineList->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Shrine* t_shrine=t_->p_NextObject();
		m_usedShrines->p_Insert5(t_shrine->m_type);
	}
}
c_Shrine* c_Shrine::m_GetShrineAt(int t_xVal,int t_yVal){
	c_Enumerator28* t_=m_shrineList->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Shrine* t_shrine=t_->p_NextObject();
		if(t_shrine->m_x==t_xVal && t_shrine->m_y==t_yVal){
			return t_shrine;
		}
	}
	return 0;
}
void c_Shrine::p_Die(){
	if(!this->m_dead){
		m_shrineList->p_RemoveEach15(this);
		if(this->m_hintText!=0){
			this->m_hintText->p_Discard();
		}
		c_Entity::p_Die();
	}
}
bool c_Shrine::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Shrine.Hit(String, Int, Int, Entity, Bool, Int)",47));
	return false;
}
void c_Shrine::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Shrine.Update()",15));
}
void c_Shrine::p_SetCost(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Shrine.SetCost()",16));
}
void c_Shrine::mark(){
	c_Entity::mark();
	gc_mark_q(m_rng);
	gc_mark_q(m_hintText);
}
c_Set::c_Set(){
	m_map=0;
}
c_Set* c_Set::m_new(c_Map7* t_map){
	gc_assign(this->m_map,t_map);
	return this;
}
c_Set* c_Set::m_new2(){
	return this;
}
int c_Set::p_Clear(){
	m_map->p_Clear();
	return 0;
}
bool c_Set::p_Contains(int t_value){
	return m_map->p_Contains(t_value);
}
int c_Set::p_Insert5(int t_value){
	m_map->p_Insert6(t_value,0);
	return 0;
}
void c_Set::mark(){
	Object::mark();
	gc_mark_q(m_map);
}
c_IntSet::c_IntSet(){
}
c_IntSet* c_IntSet::m_new(){
	c_Set::m_new((new c_IntMap4)->m_new());
	return this;
}
void c_IntSet::mark(){
	c_Set::mark();
}
c_Map7::c_Map7(){
	m_root=0;
}
c_Map7* c_Map7::m_new(){
	return this;
}
int c_Map7::p_Clear(){
	m_root=0;
	return 0;
}
c_Node7* c_Map7::p_FindNode(int t_key){
	c_Node7* t_node=m_root;
	while((t_node)!=0){
		int t_cmp=p_Compare(t_key,t_node->m_key);
		if(t_cmp>0){
			t_node=t_node->m_right;
		}else{
			if(t_cmp<0){
				t_node=t_node->m_left;
			}else{
				return t_node;
			}
		}
	}
	return t_node;
}
bool c_Map7::p_Contains(int t_key){
	return p_FindNode(t_key)!=0;
}
int c_Map7::p_RotateLeft6(c_Node7* t_node){
	c_Node7* t_child=t_node->m_right;
	gc_assign(t_node->m_right,t_child->m_left);
	if((t_child->m_left)!=0){
		gc_assign(t_child->m_left->m_parent,t_node);
	}
	gc_assign(t_child->m_parent,t_node->m_parent);
	if((t_node->m_parent)!=0){
		if(t_node==t_node->m_parent->m_left){
			gc_assign(t_node->m_parent->m_left,t_child);
		}else{
			gc_assign(t_node->m_parent->m_right,t_child);
		}
	}else{
		gc_assign(m_root,t_child);
	}
	gc_assign(t_child->m_left,t_node);
	gc_assign(t_node->m_parent,t_child);
	return 0;
}
int c_Map7::p_RotateRight6(c_Node7* t_node){
	c_Node7* t_child=t_node->m_left;
	gc_assign(t_node->m_left,t_child->m_right);
	if((t_child->m_right)!=0){
		gc_assign(t_child->m_right->m_parent,t_node);
	}
	gc_assign(t_child->m_parent,t_node->m_parent);
	if((t_node->m_parent)!=0){
		if(t_node==t_node->m_parent->m_right){
			gc_assign(t_node->m_parent->m_right,t_child);
		}else{
			gc_assign(t_node->m_parent->m_left,t_child);
		}
	}else{
		gc_assign(m_root,t_child);
	}
	gc_assign(t_child->m_right,t_node);
	gc_assign(t_node->m_parent,t_child);
	return 0;
}
int c_Map7::p_InsertFixup6(c_Node7* t_node){
	while(((t_node->m_parent)!=0) && t_node->m_parent->m_color==-1 && ((t_node->m_parent->m_parent)!=0)){
		if(t_node->m_parent==t_node->m_parent->m_parent->m_left){
			c_Node7* t_uncle=t_node->m_parent->m_parent->m_right;
			if(((t_uncle)!=0) && t_uncle->m_color==-1){
				t_node->m_parent->m_color=1;
				t_uncle->m_color=1;
				t_uncle->m_parent->m_color=-1;
				t_node=t_uncle->m_parent;
			}else{
				if(t_node==t_node->m_parent->m_right){
					t_node=t_node->m_parent;
					p_RotateLeft6(t_node);
				}
				t_node->m_parent->m_color=1;
				t_node->m_parent->m_parent->m_color=-1;
				p_RotateRight6(t_node->m_parent->m_parent);
			}
		}else{
			c_Node7* t_uncle2=t_node->m_parent->m_parent->m_left;
			if(((t_uncle2)!=0) && t_uncle2->m_color==-1){
				t_node->m_parent->m_color=1;
				t_uncle2->m_color=1;
				t_uncle2->m_parent->m_color=-1;
				t_node=t_uncle2->m_parent;
			}else{
				if(t_node==t_node->m_parent->m_left){
					t_node=t_node->m_parent;
					p_RotateRight6(t_node);
				}
				t_node->m_parent->m_color=1;
				t_node->m_parent->m_parent->m_color=-1;
				p_RotateLeft6(t_node->m_parent->m_parent);
			}
		}
	}
	m_root->m_color=1;
	return 0;
}
bool c_Map7::p_Set7(int t_key,Object* t_value){
	c_Node7* t_node=m_root;
	c_Node7* t_parent=0;
	int t_cmp=0;
	while((t_node)!=0){
		t_parent=t_node;
		t_cmp=p_Compare(t_key,t_node->m_key);
		if(t_cmp>0){
			t_node=t_node->m_right;
		}else{
			if(t_cmp<0){
				t_node=t_node->m_left;
			}else{
				gc_assign(t_node->m_value,t_value);
				return false;
			}
		}
	}
	t_node=(new c_Node7)->m_new(t_key,t_value,-1,t_parent);
	if((t_parent)!=0){
		if(t_cmp>0){
			gc_assign(t_parent->m_right,t_node);
		}else{
			gc_assign(t_parent->m_left,t_node);
		}
		p_InsertFixup6(t_node);
	}else{
		gc_assign(m_root,t_node);
	}
	return true;
}
bool c_Map7::p_Insert6(int t_key,Object* t_value){
	return p_Set7(t_key,t_value);
}
void c_Map7::mark(){
	Object::mark();
	gc_mark_q(m_root);
}
c_IntMap4::c_IntMap4(){
}
c_IntMap4* c_IntMap4::m_new(){
	c_Map7::m_new();
	return this;
}
int c_IntMap4::p_Compare(int t_lhs,int t_rhs){
	return t_lhs-t_rhs;
}
void c_IntMap4::mark(){
	c_Map7::mark();
}
c_Node7::c_Node7(){
	m_key=0;
	m_right=0;
	m_left=0;
	m_value=0;
	m_color=0;
	m_parent=0;
}
c_Node7* c_Node7::m_new(int t_key,Object* t_value,int t_color,c_Node7* t_parent){
	this->m_key=t_key;
	gc_assign(this->m_value,t_value);
	this->m_color=t_color;
	gc_assign(this->m_parent,t_parent);
	return this;
}
c_Node7* c_Node7::m_new2(){
	return this;
}
void c_Node7::mark(){
	Object::mark();
	gc_mark_q(m_right);
	gc_mark_q(m_left);
	gc_mark_q(m_value);
	gc_mark_q(m_parent);
}
c_RNG::c_RNG(){
	m_seed=1;
}
c_RNG* c_RNG::m_new(){
	return this;
}
void c_RNG::p_SetSeed(int t_seed_){
	bb_logger_Debug->p_Assert(1<=this->m_seed && this->m_seed<2147483647,String(L"1<=m_seed && m_seed<2147483647",30));
	this->m_seed=t_seed_;
}
c_RNG* c_RNG::m_Make(int t_x){
	if(t_x<1){
		t_x=147483646*(-t_x/2147483646)+t_x+2147483646;
	}
	if(t_x>=2147483647){
		t_x+=-2147483646*((t_x-1)/2147483646);
	}
	c_RNG* t_rng=(new c_RNG)->m_new();
	t_rng->p_SetSeed(t_x);
	return t_rng;
}
int c_RNG::p_Rand(){
	int t_seed=48271*(this->m_seed % 44488)-3399*(this->m_seed/44488);
	if(t_seed<=0){
		t_seed+=2147483647;
	}
	this->m_seed=t_seed;
	return t_seed;
}
c_RNG* c_RNG::p_Split(){
	int t_rnd=p_Rand();
	if(t_rnd>=1073741824){
		t_rnd-=2147483646;
	}
	t_rnd+=1073741823;
	c_RNG* t_rng=(new c_RNG)->m_new();
	t_rng->p_SetSeed(t_rnd);
	return t_rng;
}
void c_RNG::mark(){
	Object::mark();
}
int bb_controller_game_numPlayers;
Array<c_Player* > bb_controller_game_players;
int bb_controller_game_player1;
c_List2::c_List2(){
	m__head=((new c_HeadNode2)->m_new());
}
c_List2* c_List2::m_new(){
	return this;
}
c_Node8* c_List2::p_AddLast2(c_RenderableObject* t_data){
	return (new c_Node8)->m_new(m__head,m__head->m__pred,t_data);
}
c_List2* c_List2::m_new2(Array<c_RenderableObject* > t_data){
	Array<c_RenderableObject* > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		c_RenderableObject* t_t=t_[t_2];
		t_2=t_2+1;
		p_AddLast2(t_t);
	}
	return this;
}
bool c_List2::p_Equals3(c_RenderableObject* t_lhs,c_RenderableObject* t_rhs){
	return t_lhs==t_rhs;
}
int c_List2::p_RemoveEach(c_RenderableObject* t_value){
	c_Node8* t_node=m__head->m__succ;
	while(t_node!=m__head){
		c_Node8* t_succ=t_node->m__succ;
		if(p_Equals3(t_node->m__data,t_value)){
			t_node->p_Remove();
		}
		t_node=t_succ;
	}
	return 0;
}
c_Enumerator5* c_List2::p_ObjectEnumerator(){
	return (new c_Enumerator5)->m_new(this);
}
void c_List2::mark(){
	Object::mark();
	gc_mark_q(m__head);
}
c_Node8::c_Node8(){
	m__succ=0;
	m__pred=0;
	m__data=0;
}
c_Node8* c_Node8::m_new(c_Node8* t_succ,c_Node8* t_pred,c_RenderableObject* t_data){
	gc_assign(m__succ,t_succ);
	gc_assign(m__pred,t_pred);
	gc_assign(m__succ->m__pred,this);
	gc_assign(m__pred->m__succ,this);
	gc_assign(m__data,t_data);
	return this;
}
c_Node8* c_Node8::m_new2(){
	return this;
}
int c_Node8::p_Remove(){
	gc_assign(m__succ->m__pred,m__pred);
	gc_assign(m__pred->m__succ,m__succ);
	return 0;
}
void c_Node8::mark(){
	Object::mark();
	gc_mark_q(m__succ);
	gc_mark_q(m__pred);
	gc_mark_q(m__data);
}
c_HeadNode2::c_HeadNode2(){
}
c_HeadNode2* c_HeadNode2::m_new(){
	c_Node8::m_new2();
	gc_assign(m__succ,(this));
	gc_assign(m__pred,(this));
	return this;
}
void c_HeadNode2::mark(){
	c_Node8::mark();
}
c_ParticleSystem::c_ParticleSystem(){
	m_visible=true;
	m_active=true;
}
c_List16* c_ParticleSystem::m_systems;
c_ParticleSystem* c_ParticleSystem::m_new(int t_xVal,int t_yVal,c_ParticleSystemData* t_data,int t_dir,String t_imagePath){
	c_Tweenable::m_new();
	bb_logger_Debug->p_TraceNotImplemented(String(L"ParticleSystem.New(Int, Int, ParticleSystemData, Int, String)",61));
	return this;
}
c_ParticleSystem* c_ParticleSystem::m_new2(){
	c_Tweenable::m_new();
	return this;
}
void c_ParticleSystem::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ParticleSystem.Update()",23));
}
void c_ParticleSystem::m_UpdateAll(){
	c_Enumerator33* t_=m_systems->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_ParticleSystem* t_system=t_->p_NextObject();
		if(t_system->m_visible){
			t_system->p_Update();
		}
	}
	c_Enumerator33* t_2=m_systems->p_ObjectEnumerator();
	while(t_2->p_HasNext()){
		c_ParticleSystem* t_system2=t_2->p_NextObject();
		if(t_system2->m_visible && !t_system2->m_active){
			m_systems->p_Remove3(t_system2);
		}
	}
}
void c_ParticleSystem::mark(){
	c_Tweenable::mark();
}
c_List3::c_List3(){
	m__head=((new c_HeadNode3)->m_new());
}
c_List3* c_List3::m_new(){
	return this;
}
c_Node9* c_List3::p_AddLast3(c_Entity* t_data){
	return (new c_Node9)->m_new(m__head,m__head->m__pred,t_data);
}
c_List3* c_List3::m_new2(Array<c_Entity* > t_data){
	Array<c_Entity* > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		c_Entity* t_t=t_[t_2];
		t_2=t_2+1;
		p_AddLast3(t_t);
	}
	return this;
}
bool c_List3::p_Equals4(c_Entity* t_lhs,c_Entity* t_rhs){
	return t_lhs==t_rhs;
}
int c_List3::p_RemoveEach2(c_Entity* t_value){
	c_Node9* t_node=m__head->m__succ;
	while(t_node!=m__head){
		c_Node9* t_succ=t_node->m__succ;
		if(p_Equals4(t_node->m__data,t_value)){
			t_node->p_Remove();
		}
		t_node=t_succ;
	}
	return 0;
}
c_Enumerator2* c_List3::p_ObjectEnumerator(){
	return (new c_Enumerator2)->m_new(this);
}
int c_List3::p_Clear(){
	gc_assign(m__head->m__succ,m__head);
	gc_assign(m__head->m__pred,m__head);
	return 0;
}
void c_List3::mark(){
	Object::mark();
	gc_mark_q(m__head);
}
c_Node9::c_Node9(){
	m__succ=0;
	m__pred=0;
	m__data=0;
}
c_Node9* c_Node9::m_new(c_Node9* t_succ,c_Node9* t_pred,c_Entity* t_data){
	gc_assign(m__succ,t_succ);
	gc_assign(m__pred,t_pred);
	gc_assign(m__succ->m__pred,this);
	gc_assign(m__pred->m__succ,this);
	gc_assign(m__data,t_data);
	return this;
}
c_Node9* c_Node9::m_new2(){
	return this;
}
int c_Node9::p_Remove(){
	gc_assign(m__succ->m__pred,m__pred);
	gc_assign(m__pred->m__succ,m__succ);
	return 0;
}
void c_Node9::mark(){
	Object::mark();
	gc_mark_q(m__succ);
	gc_mark_q(m__pred);
	gc_mark_q(m__data);
}
c_HeadNode3::c_HeadNode3(){
}
c_HeadNode3* c_HeadNode3::m_new(){
	c_Node9::m_new2();
	gc_assign(m__succ,(this));
	gc_assign(m__pred,(this));
	return this;
}
void c_HeadNode3::mark(){
	c_Node9::mark();
}
c_FamiliarFixed::c_FamiliarFixed(){
	m_offsetX=0;
	m_offsetY=0;
}
void c_FamiliarFixed::p_Die(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"FamiliarFixed.Die()",19));
}
c_FamiliarFixed* c_FamiliarFixed::m_new(){
	c_Entity::m_new();
	return this;
}
void c_FamiliarFixed::p_WarpTo(int t_x_,int t_y_){
	bb_logger_Debug->p_TraceNotImplemented(String(L"FamiliarFixed.WarpTo(Int, Int)",30));
}
c_List4* c_FamiliarFixed::m_familiarList;
c_FamiliarFixed* c_FamiliarFixed::m_GetFamiliarAt(int t_x,int t_y){
	c_Enumerator* t_=m_familiarList->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_FamiliarFixed* t_familiar=t_->p_NextObject();
		if(t_x==t_familiar->m_x && t_y==t_familiar->m_y){
			return t_familiar;
		}
	}
	return 0;
}
void c_FamiliarFixed::p_TryPickup(){
}
void c_FamiliarFixed::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"FamiliarFixed.Update()",22));
}
void c_FamiliarFixed::mark(){
	c_Entity::mark();
}
c_List4::c_List4(){
	m__head=((new c_HeadNode4)->m_new());
}
c_List4* c_List4::m_new(){
	return this;
}
c_Node10* c_List4::p_AddLast4(c_FamiliarFixed* t_data){
	return (new c_Node10)->m_new(m__head,m__head->m__pred,t_data);
}
c_List4* c_List4::m_new2(Array<c_FamiliarFixed* > t_data){
	Array<c_FamiliarFixed* > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		c_FamiliarFixed* t_t=t_[t_2];
		t_2=t_2+1;
		p_AddLast4(t_t);
	}
	return this;
}
c_Enumerator* c_List4::p_ObjectEnumerator(){
	return (new c_Enumerator)->m_new(this);
}
int c_List4::p_Clear(){
	gc_assign(m__head->m__succ,m__head);
	gc_assign(m__head->m__pred,m__head);
	return 0;
}
void c_List4::mark(){
	Object::mark();
	gc_mark_q(m__head);
}
c_Node10::c_Node10(){
	m__succ=0;
	m__pred=0;
	m__data=0;
}
c_Node10* c_Node10::m_new(c_Node10* t_succ,c_Node10* t_pred,c_FamiliarFixed* t_data){
	gc_assign(m__succ,t_succ);
	gc_assign(m__pred,t_pred);
	gc_assign(m__succ->m__pred,this);
	gc_assign(m__pred->m__succ,this);
	gc_assign(m__data,t_data);
	return this;
}
c_Node10* c_Node10::m_new2(){
	return this;
}
void c_Node10::mark(){
	Object::mark();
	gc_mark_q(m__succ);
	gc_mark_q(m__pred);
	gc_mark_q(m__data);
}
c_HeadNode4::c_HeadNode4(){
}
c_HeadNode4* c_HeadNode4::m_new(){
	c_Node10::m_new2();
	gc_assign(m__succ,(this));
	gc_assign(m__pred,(this));
	return this;
}
void c_HeadNode4::mark(){
	c_Node10::mark();
}
c_Enumerator::c_Enumerator(){
	m__list=0;
	m__curr=0;
}
c_Enumerator* c_Enumerator::m_new(c_List4* t_list){
	gc_assign(m__list,t_list);
	gc_assign(m__curr,t_list->m__head->m__succ);
	return this;
}
c_Enumerator* c_Enumerator::m_new2(){
	return this;
}
bool c_Enumerator::p_HasNext(){
	while(m__curr->m__succ->m__pred!=m__curr){
		gc_assign(m__curr,m__curr->m__succ);
	}
	return m__curr!=m__list->m__head;
}
c_FamiliarFixed* c_Enumerator::p_NextObject(){
	c_FamiliarFixed* t_data=m__curr->m__data;
	gc_assign(m__curr,m__curr->m__succ);
	return t_data;
}
void c_Enumerator::mark(){
	Object::mark();
	gc_mark_q(m__list);
	gc_mark_q(m__curr);
}
c_Familiar::c_Familiar(){
	m_owner=0;
}
void c_Familiar::p_Die(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Familiar.Die()",14));
}
c_List10* c_Familiar::m_familiarList;
c_Familiar* c_Familiar::m_new(c_Player* t_owner_){
	c_MobileEntity::m_new();
	gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"entities/familiar_lamb.png",26),19,16,4,c_Image::m_DefaultFlags));
	gc_assign(this->m_shadow,(new c_Sprite)->m_new2(String(L"entities/TEMP_shadow_standard.png",33),1,c_Image::m_DefaultFlags));
	this->m_hasSilhouette=false;
	m_familiarList->p_AddLast10(this);
	this->m_isFamiliar=true;
	gc_assign(this->m_owner,t_owner_);
	this->m_x=t_owner_->m_x;
	this->m_y=t_owner_->m_y;
	this->m_lastX=t_owner_->m_x;
	this->m_lastY=t_owner_->m_y;
	this->m_xOff=Float((24-this->m_image->p_Width())/2);
	this->m_yOff=Float((24-this->m_image->p_Height())/2+7);
	this->m_image->p_SetZOff(FLOAT(-5.0));
	return this;
}
c_Familiar* c_Familiar::m_new2(){
	c_MobileEntity::m_new();
	return this;
}
void c_Familiar::p_Recall(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Familiar.Recall()",17));
}
bool c_Familiar::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Familiar.Hit(String, Int, Int, Entity, Bool, Int)",49));
	return false;
}
void c_Familiar::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Familiar.Update()",17));
}
bool c_Familiar::m_IsAnyAt(int t_x,int t_y){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Familiar.IsAnyAt(Int, Int)",26));
	return false;
}
void c_Familiar::mark(){
	c_MobileEntity::mark();
	gc_mark_q(m_owner);
}
c_Item::c_Item(){
	m_utility=-1;
	m_stackQuantity=1;
	m_hideQuantity=false;
	m_diamondCost=0;
	m_diamondDealerPrice=0;
	m_coinCost=0;
	m_quantityYOff=0;
	m_trainingWeapon=false;
	m_itemType=String(L"no_item",7);
	m_dropX=-100000;
	m_dropY=-100000;
	m_droppedByPlayer=false;
	m_imageFrames=1;
	m_pickupable=true;
	m_hintText=0;
	m_nameText=0;
	m_quantityText=0;
	m_isSaleItem=false;
	m_hasBloodCost=false;
	m_saleItem=false;
	m_singleChoiceItem=false;
	m_janitorItem=false;
	m_diamondDealerItem=false;
}
String c_Item::m_lastChestItemClass1;
String c_Item::m_lastChestItemClass2;
c_XMLNode* c_Item::m_GetItemXML(String t_i){
	return bb_necrodancergame_xmlData->p_GetChildAtPath(String(L"items/",6)+t_i);
}
String c_Item::m_GetSlot(c_XMLNode* t_n){
	return t_n->p_GetAttribute5(String(L"slot",4),String(L"no_item",7));
}
String c_Item::p_GetSlot(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Item.GetSlot()",14));
	return String();
}
String c_Item::m_GetSlot2(String t_i){
	c_XMLNode* t_itemNode=bb_necrodancergame_xmlData->p_GetChildAtPath(String(L"items/",6)+t_i);
	return m_GetSlot(t_itemNode);
}
c_StringMap7* c_Item::m_itemImages;
c_List* c_Item::m_GetAllItemsInClass(String t_itemClass){
	c_XMLNode* t_itemsNode=bb_necrodancergame_xmlData->p_GetChild2(String(L"items",5),false);
	return t_itemsNode->p_GetChildrenWithAttributes(t_itemClass+String(L"=True",5),0,false);
}
bool c_Item::m_IsItemOfType(String t_i,String t_query){
	c_XMLNode* t_itemNode=m_GetItemXML(t_i);
	return t_itemNode->p_GetAttribute2(t_query,false);
}
bool c_Item::p_IsItemOfType(String t_query){
	return m_IsItemOfType(this->m_itemType,t_query);
}
c_List20* c_Item::m_pickupList;
c_List20* c_Item::m_GetPickupsAt(int t_xVal,int t_yVal,c_Item* t_slf){
	c_List20* t_pickups=(new c_List20)->m_new();
	c_Enumerator10* t_=m_pickupList->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Item* t_pickup=t_->p_NextObject();
		if(t_pickup!=t_slf && !t_pickup->m_flaggedForDeath && !t_pickup->m_dead && t_pickup->m_pickupable && (t_pickup->m_x==t_xVal && t_pickup->m_y==t_yVal) && (t_pickup->m_dropX!=t_xVal || t_pickup->m_dropY!=t_yVal)){
			t_pickups->p_AddLast20(t_pickup);
		}
	}
	return t_pickups;
}
int c_Item::m_GetValue(String t_t){
	c_XMLNode* t_itemNode=m_GetItemXML(t_t);
	return t_itemNode->p_GetAttribute3(String(L"data",4),0);
}
int c_Item::p_GetValue(){
	return this->m_utility;
}
int c_Item::m_GetFlyawayText(int t_i){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Item.GetFlyawayText(Int)",24));
	return 0;
}
int c_Item::p_GetFlyawayText(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Item.GetFlyawayText()",21));
	return 0;
}
c_StringMap3* c_Item::m_seenItems;
void c_Item::m_AddToSeenItems(String t_itemName){
	if(m_seenItems->p_Contains2(t_itemName)){
		int t_seen=m_seenItems->p_Get(t_itemName);
		m_seenItems->p_Update2(t_itemName,t_seen+1);
	}else{
		m_seenItems->p_Insert4(t_itemName,1);
	}
}
c_Item* c_Item::m_new(int t_xVal,int t_yVal,String t_type,bool t_drop,int t_utl,bool t_isTrainingWeapon){
	c_Entity::m_new();
	if(true){
		bb_logger_Debug->p_Log(String(L"ITEM NEW: ",10)+String(t_xVal)+String(L", ",2)+String(t_yVal)+String(L" itemType: ",11)+t_type+String(L" entityNum: ",12)+String(this->m_entityNum));
	}
	c_XMLNode* t_itemNode=m_GetItemXML(t_type);
	if(!t_itemNode->m_valid){
		bb_logger_Debug->p_Log(String(L"ERROR: Unrecognized item type ",30)+t_type);
		t_type=String(L"food_1",6);
		t_itemNode=m_GetItemXML(t_type);
	}
	if(t_utl!=-1){
		this->m_utility=t_utl;
	}else{
		this->m_utility=t_itemNode->p_GetAttribute3(String(L"data",4),0);
	}
	this->m_stackQuantity=t_itemNode->p_GetAttribute3(String(L"quantity",8),1);
	this->m_hideQuantity=t_itemNode->p_GetAttribute2(String(L"hideQuantity",12),false);
	this->m_diamondCost=t_itemNode->p_GetAttribute3(String(L"diamondCost",11),0);
	this->m_diamondDealerPrice=t_itemNode->p_GetAttribute3(String(L"diamondDealable",15),1);
	this->m_coinCost=t_itemNode->p_GetAttribute3(String(L"coinCost",8),0);
	this->m_quantityYOff=t_itemNode->p_GetAttribute3(String(L"quantityYOff",12),0);
	this->m_isItem=true;
	this->m_x=t_xVal;
	this->m_y=t_yVal;
	this->m_trainingWeapon=t_isTrainingWeapon;
	this->m_itemType=t_type;
	if(t_drop){
		this->m_dropX=t_xVal;
		this->m_dropY=t_yVal;
		this->m_droppedByPlayer=true;
	}
	c_ItemData* t_itemData=(new c_ItemData)->m_new(t_itemNode);
	this->m_xOff=Float(t_itemData->m_xOff);
	this->m_yOff=Float(t_itemData->m_yOff);
	this->m_imageFrames=t_itemData->m_imageFrames;
	if(this->p_IsItemOfType(String(L"isCoin",6))){
		int t_frameWidth=t_itemData->m_imageW;
		int t_frameHeight=t_itemData->m_imageH;
		int t_frameCount=t_itemData->m_imageFrames;
		String t_resourceCoinType=bb_item_GetResourceCoinType(this->m_utility);
		c_XMLNode* t_resourceCoinNode=m_GetItemXML(t_resourceCoinType);
		String t_resourceCoinPath=String(L"items/",6)+t_resourceCoinNode->p_value();
		gc_assign(this->m_image,(new c_Sprite)->m_new(t_resourceCoinPath,t_frameWidth,t_frameHeight,t_frameCount,c_Image::m_DefaultFlags));
		this->m_yOff+=FLOAT(5.0);
		if(!c_Level::m_IsWallAt(this->m_x,this->m_y+1,false,false)){
			this->m_yOff+=FLOAT(5.0);
		}
		c_Enumerator10* t_=m_GetPickupsAt(this->m_x,this->m_y,this)->p_ObjectEnumerator();
		while(t_->p_HasNext()){
			c_Item* t_pickup=t_->p_NextObject();
			if(!t_pickup->p_IsItemOfType(String(L"isCoin",6))){
				continue;
			}
			this->m_utility+=t_pickup->p_GetValue();
			t_pickup->p_FlagForDeath(0);
			t_resourceCoinType=bb_item_GetResourceCoinType(this->m_utility);
			t_resourceCoinNode=m_GetItemXML(t_resourceCoinType);
			t_resourceCoinPath=String(L"items/",6)+t_resourceCoinNode->p_value();
			gc_assign(this->m_image,(new c_Sprite)->m_new(t_resourceCoinPath,t_frameWidth,t_frameHeight,t_frameCount,c_Image::m_DefaultFlags));
			this->m_itemType=t_resourceCoinType;
		}
		if(this->m_utility>=50){
			t_resourceCoinNode=m_GetItemXML(String(L"resource_hoard_gold",19));
			t_resourceCoinPath=String(L"items/",6)+t_resourceCoinNode->p_value();
			gc_assign(this->m_image,(new c_Sprite)->m_new(t_resourceCoinPath,24,24,2,c_Image::m_DefaultFlags));
		}else{
			if(this->m_utility>=25){
				t_resourceCoinNode=m_GetItemXML(String(L"resource_hoard_gold_small",25));
				t_resourceCoinPath=String(L"items/",6)+t_resourceCoinNode->p_value();
				gc_assign(this->m_image,(new c_Sprite)->m_new(t_resourceCoinPath,24,24,2,c_Image::m_DefaultFlags));
			}
		}
		this->m_image->p_SetZOff(FLOAT(-18.0));
	}else{
		c_Bomb* t_bomb=dynamic_cast<c_Bomb*>(this);
		if(c_Level::m_isMysteryMode && !((t_bomb)!=0)){
			gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"entities/mystery_item.png",25),18,21,2,c_Image::m_DefaultFlags));
			this->m_isMysteried=true;
			this->m_xOff=FLOAT(3.0);
			this->m_yOff=FLOAT(1.0);
		}else{
			String t_path=String(L"items/",6)+t_itemNode->p_value();
			gc_assign(this->m_image,(new c_Sprite)->m_new(t_path,18,21,2,c_Image::m_DefaultFlags));
		}
		gc_assign(this->m_shadow,(new c_Sprite)->m_new2(String(L"entities/TEMP_shadow_standard.png",33),1,c_Image::m_DefaultFlags));
		if(this->m_itemType==String(L"weapon_golden_lute",18)){
			gc_assign(this->m_bounce,(new c_Bouncer)->m_new(FLOAT(-2.5),FLOAT(0.0),FLOAT(1.5),40));
			this->m_yOff-=FLOAT(18.0);
			this->m_shadowYOff=-8;
			this->m_shadow->p_UnSetZ();
			this->m_shadow->p_SetZOff(this->m_image->m_zOff+FLOAT(24.0));
			this->m_image->p_SetZOff(this->m_image->m_zOff+FLOAT(124.0));
		}else{
			if(t_itemData->m_bouncer){
				gc_assign(this->m_bounce,(new c_Bouncer)->m_new(FLOAT(-2.5),FLOAT(0.0),FLOAT(1.5),40));
				this->m_image->p_SetZOff(this->m_yOff);
				this->m_yOff-=FLOAT(2.0);
			}else{
				this->m_shadowYOff=4;
				this->m_yOff+=FLOAT(11.0);
				this->m_image->p_SetZOff(FLOAT(-13.0));
			}
		}
	}
	String t_hint=t_itemNode->p_GetAttribute5(String(L"hint",4),String());
	if(t_hint!=String()){
		if(c_Level::m_isMysteryMode){
			if(this->m_itemType!=String(L"bomb",4) && !this->p_IsItemOfType(String(L"isCoin",6))){
				t_hint=String(L"?",1);
			}
		}
		gc_assign(this->m_hintText,(new c_TextSprite)->m_new4(2));
		this->m_hintText->p_SetText(t_hint,false);
		this->m_hintText->p_InWorld(true);
	}
	int t_flyaway=this->p_GetFlyawayText();
	if(String(t_flyaway)!=String()){
		gc_assign(this->m_nameText,(new c_TextSprite)->m_new4(2));
		this->m_nameText->p_SetText(String(t_flyaway),false);
		this->m_nameText->p_InWorld(true);
	}
	if(this->p_IsItemOfType(String(L"isStackable",11)) && !this->m_hideQuantity){
		gc_assign(this->m_quantityText,(new c_TextSprite)->m_new4(1));
	}
	if(this->m_itemType==String(L"weapon_golden_lute",18)){
		gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"items/golden_lute_magic.png",27),32,33,8,c_Image::m_DefaultFlags));
		this->m_image->p_SetZOff(FLOAT(124.0));
	}
	if(this->p_IsItemOfType(String(L"isTorch",7)) || this->m_itemType==String(L"weapon_golden_lute",18)){
		Float t_lMax=Float(this->p_GetValue())+FLOAT(0.5);
		this->p_ActivateLight(FLOAT(1.0),t_lMax);
	}
	m_AddToSeenItems(this->m_itemType);
	m_pickupList->p_AddLast20(this);
	c_FamiliarFixed* t_familiar=c_FamiliarFixed::m_GetFamiliarAt(this->m_x,this->m_y);
	if(t_familiar!=0){
		t_familiar->p_TryPickup();
	}
	String t_displayName=t_itemNode->p_GetAttribute5(String(L"displayName",11),this->m_itemType);
	bb_logger_Debug->p_WriteLine2(String(L"Placed ",7)+t_displayName+String(L" at ",4)+((new c_Point)->m_new(this->m_x,this->m_y))->p_ToString());
	return this;
}
c_Item* c_Item::m_new2(){
	c_Entity::m_new();
	return this;
}
void c_Item::m_CreateAmountOfCoins(int t_xVal,int t_yVal,int t_amt){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Item.CreateAmountOfCoins(Int, Int, Int)",39));
}
c_List* c_Item::m_itemPoolRandom;
c_List* c_Item::m_itemPoolRandom2;
Array<c_List* > c_Item::m_itemPoolChest;
Array<c_List* > c_Item::m_itemPoolChest2;
Array<c_List* > c_Item::m_itemPoolLockedChest;
Array<c_List* > c_Item::m_itemPoolLockedChest2;
Array<c_List* > c_Item::m_itemPoolAnyChest;
Array<c_List* > c_Item::m_itemPoolAnyChest2;
Array<c_List* > c_Item::m_itemPoolShop;
Array<c_List* > c_Item::m_itemPoolShop2;
Array<c_List* > c_Item::m_itemPoolLockedShop;
Array<c_List* > c_Item::m_itemPoolLockedShop2;
Array<c_List* > c_Item::m_itemPoolUrn;
Array<c_List* > c_Item::m_itemPoolUrn2;
bool c_Item::m_HasSeenItemXTimes(String t_itemName,int t_x){
	if(m_seenItems->p_Contains2(t_itemName)){
		return m_seenItems->p_Get(t_itemName)>=t_x;
	}
	return false;
}
String c_Item::m_GetRandomItemInClassByPredicate(c_IItemPredicate* t_predicate,int t_requestedLevel,String t_randomType,bool t_nonDeterministic){
	c_List* t_itemPool=0;
	if(t_requestedLevel<=0){
		t_itemPool=m_itemPoolRandom;
		if(t_nonDeterministic){
			t_itemPool=m_itemPoolRandom2;
		}
	}else{
		int t_i=t_requestedLevel-1;
		if(bb_controller_game_currentDepth>1){
			t_i+=1;
		}
		t_i=bb_math_Min(t_i,6);
		String t_3=t_randomType;
		if(t_3==String(L"chestChance",11)){
			t_itemPool=m_itemPoolChest[t_i];
			if(t_nonDeterministic){
				t_itemPool=m_itemPoolChest2[t_i];
			}
		}else{
			if(t_3==String(L"lockedChestChance",17)){
				t_itemPool=m_itemPoolLockedChest[t_i];
				if(t_nonDeterministic){
					t_itemPool=m_itemPoolLockedChest2[t_i];
				}
			}else{
				if(t_3==String(L"anyChest",8)){
					t_itemPool=m_itemPoolAnyChest[t_i];
					if(t_nonDeterministic){
						t_itemPool=m_itemPoolAnyChest2[t_i];
					}
				}else{
					if(t_3==String(L"shopChance",10)){
						t_itemPool=m_itemPoolShop[t_i];
						if(t_nonDeterministic){
							t_itemPool=m_itemPoolShop2[t_i];
						}
					}else{
						if(t_3==String(L"lockedShopChance",16)){
							t_itemPool=m_itemPoolLockedShop[t_i];
							if(t_nonDeterministic){
								t_itemPool=m_itemPoolLockedShop2[t_i];
							}
						}else{
							t_itemPool=m_itemPoolUrn[t_i];
							if(t_nonDeterministic){
								t_itemPool=m_itemPoolUrn2[t_i];
							}
						}
					}
				}
			}
		}
	}
	for(int t_j=1;t_j<10;t_j=t_j+1){
		c_Enumerator3* t_=t_itemPool->p_ObjectEnumerator();
		while(t_->p_HasNext()){
			c_XMLNode* t_itemNode=t_->p_NextObject();
			if(t_predicate->p_Call(t_itemNode)){
				String t_name=t_itemNode->p_name();
				if(!m_HasSeenItemXTimes(t_name,t_j)){
					m_AddToSeenItems(t_name);
					return t_name;
				}
			}
		}
	}
	bb_logger_Debug->p_Log(String(L"GetRandomItemInClassByPredicate: NO VALID ITEM!  Spawning coins",63));
	return String(L"resource_hoard_gold",19);
}
String c_Item::m_GetRandomItemInClass(String t_itemClass,int t_requestedLevel,String t_randomType,int t_chestColor,bool t_ignorePendingMetaGameItems,String t_itemSlot,bool t_nonDeterministic){
	if(!t_ignorePendingMetaGameItems && !c_Level::m_isHardcoreMode){
		for(int t_i=0;t_i<c_GameData::m_GetNumPendingSpawnItems();t_i=t_i+1){
		}
	}
	c_StandardItemPredicate* t_predicate=(new c_StandardItemPredicate)->m_new(t_itemClass,t_chestColor,t_itemSlot);
	return m_GetRandomItemInClassByPredicate((t_predicate),t_requestedLevel,t_randomType,t_nonDeterministic);
}
bool c_Item::m_IsUnlocked(String t_t){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Item.IsUnlocked(String)",23));
	return false;
}
bool c_Item::m_debugTrailerMode;
bool c_Item::m_IsDamageReductionItem(c_XMLNode* t_n){
	String t_name=t_n->p_name();
	String t_6=t_name;
	if(t_6==String(L"armor_chainmail",15) || t_6==String(L"armor_heavyplate",16) || t_6==String(L"armor_leather",13) || t_6==String(L"armor_obsidian",14) || t_6==String(L"armor_platemail",15) || t_6==String(L"armor_quartz",12) || t_6==String(L"charm_protection",16) || t_6==String(L"feet_greaves",12) || t_6==String(L"head_helm",9) || t_6==String(L"ring_protection",15)){
		return true;
	}
	return false;
}
bool c_Item::m_IsItemOfClass(c_XMLNode* t_n,String t_itemClass){
	String t_isItemOfClass=t_n->p_GetAttribute5(t_itemClass,String(L"false",5));
	return t_isItemOfClass.ToUpper()==String(L"TRUE",4);
}
bool c_Item::p_IsItemOfClass(String t_itemClass){
	c_XMLNode* t_itemNode=m_GetItemXML(this->m_itemType);
	return m_IsItemOfClass(t_itemNode,t_itemClass);
}
bool c_Item::m_IsHealthBonusItem(c_XMLNode* t_n){
	if(m_IsItemOfClass(t_n,String(L"isFood",6))){
		return true;
	}
	String t_name=t_n->p_name();
	String t_10=t_name;
	if(t_10==String(L"charm_gluttony",14) || t_10==String(L"cursed_potion",13) || t_10==String(L"head_crown_of_thorns",20) || t_10==String(L"misc_heart_container",20) || t_10==String(L"misc_heart_container2",21) || t_10==String(L"misc_heart_container_cursed",27) || t_10==String(L"misc_heart_container_cursed2",28) || t_10==String(L"misc_heart_container_empty",26) || t_10==String(L"misc_heart_container_empty2",27) || t_10==String(L"ring_regeneration",17) || t_10==String(L"spell_heal",10)){
		return true;
	}
	return false;
}
bool c_Item::m_IsPainItem(c_XMLNode* t_n){
	String t_name=t_n->p_name();
	String t_11=t_name;
	if(t_11==String(L"feet_boots_pain",15) || t_11==String(L"ring_pain",9)){
		return true;
	}
	return false;
}
bool c_Item::m_IsDamageBonusItem(c_XMLNode* t_n){
	String t_name=t_n->p_name();
	String t_5=t_name;
	if(t_5==String(L"blood_drum",10) || t_5==String(L"charm_risk",10) || t_5==String(L"charm_strength",14) || t_5==String(L"feet_boots_strength",19) || t_5==String(L"head_glass_jaw",14) || t_5==String(L"head_spiked_ears",16) || t_5==String(L"head_sunglasses",15) || t_5==String(L"ring_courage",12) || t_5==String(L"ring_frost",10) || t_5==String(L"ring_might",10) || t_5==String(L"ring_piercing",13) || t_5==String(L"ring_war",8) || t_5==String(L"shovel_battle",13) || t_5==String(L"torch_strength",14) || t_5==String(L"war_drum",8)){
		return true;
	}
	return false;
}
bool c_Item::m_IsGoldGeneratingItem(c_XMLNode* t_n){
	String t_name=t_n->p_name();
	String t_9=t_name;
	if(t_9==String(L"familiar_shopkeeper",19) || t_9==String(L"ring_gold",9) || t_9==String(L"scroll_riches",13)){
		return true;
	}
	return false;
}
bool c_Item::m_IsCourageItem(c_XMLNode* t_n){
	String t_name=t_n->p_name();
	String t_4=t_name;
	if(t_4==String(L"ring_courage",12) || t_4==String(L"shovel_courage",14)){
		return true;
	}
	return false;
}
bool c_Item::m_IsDiscountItem(c_XMLNode* t_n){
	String t_name=t_n->p_name();
	String t_8=t_name;
	if(t_8==String(L"misc_coupon",11) || t_8==String(L"ring_charisma",13)){
		return true;
	}
	return false;
}
bool c_Item::m_IsValidItemForCurrentChars(c_XMLNode* t_n){
	String t_slot=m_GetSlot(t_n);
	String t_name=t_n->p_name();
	if(c_Util::m_IsWeaponlessCharacterActive()){
		if(t_slot==String(L"weapon",6)){
			return false;
		}
	}
	if(c_Util::m_IsCharacterActive(2)){
		if(m_IsDamageReductionItem(t_n)){
			return false;
		}
		if(m_IsHealthBonusItem(t_n)){
			return false;
		}
		if(m_IsPainItem(t_n)){
			return false;
		}
		String t_12=t_name;
		if(t_12==String(L"blood_drum",10) || t_12==String(L"charm_nazar",11) || t_12==String(L"charm_risk",10) || t_12==String(L"feet_ballet_shoes",17) || t_12==String(L"holster",7) || t_12==String(L"scroll_enchant_weapon",21) || t_12==String(L"shovel_blood",12) || t_12==String(L"war_drum",8)){
			return false;
		}
	}
	if(c_Util::m_IsCharacterActive(1)){
		if(m_IsPainItem(t_n)){
			return false;
		}
		if(m_IsDamageBonusItem(t_n)){
			return false;
		}
		if(m_IsItemOfClass(t_n,String(L"isFamiliar",10))){
			return false;
		}
		String t_13=t_name;
		if(t_13==String(L"feet_boots_leaping",18) || t_13==String(L"feet_boots_lunging",18) || t_13==String(L"holster",7) || t_13==String(L"scroll_enchant_weapon",21)){
			return false;
		}
	}
	if(c_Util::m_IsCharacterActive(7)){
		if(m_IsDamageReductionItem(t_n)){
			return false;
		}
		if(m_IsHealthBonusItem(t_n)){
			return false;
		}
		if(m_IsPainItem(t_n)){
			return false;
		}
		if(m_IsGoldGeneratingItem(t_n)){
			return false;
		}
		if(m_IsCourageItem(t_n)){
			return false;
		}
		if(m_IsDiscountItem(t_n)){
			return false;
		}
		String t_14=t_name;
		if(t_14==String(L"blood_drum",10) || t_14==String(L"charm_nazar",11) || t_14==String(L"feet_ballet_shoes",17) || t_14==String(L"holster",7) || t_14==String(L"ring_shadows",12) || t_14==String(L"scroll_enchant_weapon",21) || t_14==String(L"shovel_blood",12)){
			return false;
		}
	}
	if(c_Util::m_IsCharacterActive(6)){
		if(m_IsPainItem(t_n)){
			return false;
		}
		if(m_IsDamageBonusItem(t_n)){
			return false;
		}
		if(m_IsItemOfClass(t_n,String(L"isShovel",8))){
			return false;
		}
		String t_15=t_name;
		if(t_15==String(L"charm_grenade",13) || t_15==String(L"familiar_dove",13) || t_15==String(L"familiar_rat",12) || t_15==String(L"feet_boots_lunging",18) || t_15==String(L"head_crown_of_thorns",20) || t_15==String(L"holster",7) || t_15==String(L"holy_water",10) || t_15==String(L"misc_coupon",11) || t_15==String(L"ring_gold",9) || t_15==String(L"ring_phasing",12) || t_15==String(L"ring_shadows",12) || t_15==String(L"scroll_earthquake",17) || t_15==String(L"scroll_enchant_weapon",21) || t_15==String(L"scroll_fireball",15) || t_15==String(L"scroll_pulse",12) || t_15==String(L"scroll_riches",13) || t_15==String(L"spell_earth",11) || t_15==String(L"spell_fireball",14) || t_15==String(L"spell_pulse",11) || t_15==String(L"throwing_stars",14) || t_15==String(L"tome_earth",10) || t_15==String(L"tome_fireball",13) || t_15==String(L"tome_pulse",10) || t_15==String(L"torch_infernal",14)){
			return false;
		}
	}
	if(c_Util::m_IsCharacterActive(4)){
		if(t_slot==String(L"shovel",6)){
			return false;
		}
		if(m_IsPainItem(t_n)){
			return false;
		}
		if(m_IsDamageBonusItem(t_n)){
			return false;
		}
		String t_16=t_name;
		if(t_16==String(L"bomb",4) || t_16==String(L"bomb_3",6) || t_16==String(L"charm_bomb",10) || t_16==String(L"charm_grenade",13) || t_16==String(L"charm_nazar",11) || t_16==String(L"head_blast_helm",15) || t_16==String(L"head_crown_of_thorns",20) || t_16==String(L"holster",7) || t_16==String(L"ring_gold",9) || t_16==String(L"scroll_enchant_weapon",21) || t_16==String(L"spell_bomb",10)){
			return false;
		}
	}
	if(c_Util::m_IsCharacterActive(9)){
		String t_17=t_name;
		if(t_17==String(L"double_heart_transplant",23) || t_17==String(L"feet_boots_speed",16) || t_17==String(L"heart_transplant",16)){
			return false;
		}
	}
	if(c_Util::m_IsCharacterActive(8)){
		String t_18=t_name;
		if(t_18==String(L"charm_nazar",11) || t_18==String(L"feet_ballet_shoes",17) || t_18==String(L"weapon_spear",12)){
			return false;
		}
	}
	if(c_Util::m_IsCharacterActive(3)){
		if(t_slot==String(L"feet",4)){
			return false;
		}
		if(t_slot==String(L"body",4)){
			return false;
		}
		String t_19=t_name;
		if(t_19==String(L"misc_compass",12) || t_19==String(L"pickaxe",7) || t_19==String(L"ring_gold",9) || t_19==String(L"ring_might",10) || t_19==String(L"weapon_blunderbuss",18) || t_19==String(L"weapon_rifle",12)){
			return false;
		}
	}
	if(c_Util::m_IsCharacterActive(5)){
		if(m_IsGoldGeneratingItem(t_n)){
			return false;
		}
		if(m_IsCourageItem(t_n)){
			return false;
		}
		if(m_IsDiscountItem(t_n)){
			return false;
		}
		String t_20=t_name;
		if(t_20==String(L"ring_shadows",12) || t_20==String(L"shovel_blood",12)){
			return false;
		}
	}
	if(c_Util::m_IsCharacterActive(11)){
		if(t_slot==String(L"weapon",6)){
			if(m_IsItemOfClass(t_n,String(L"isBow",5))){
				return true;
			}
			if(m_IsItemOfClass(t_n,String(L"isCutlass",9))){
				return true;
			}
			if(m_IsItemOfClass(t_n,String(L"isDagger",8))){
				return true;
			}
			if(m_IsItemOfClass(t_n,String(L"isHarp",6))){
				return true;
			}
			if(m_IsItemOfClass(t_n,String(L"isLongsword",11))){
				return true;
			}
			if(m_IsItemOfClass(t_n,String(L"isRapier",8))){
				return true;
			}
			if(m_IsItemOfClass(t_n,String(L"isSpear",7))){
				return true;
			}
			if(m_IsItemOfClass(t_n,String(L"isStaff",7))){
				return true;
			}
			return false;
		}
		if(t_slot==String(L"spell",5)){
			return false;
		}
		String t_21=t_name;
		if(t_21==String(L"charm_grenade",13) || t_21==String(L"feet_boots_leaping",18) || t_21==String(L"feet_boots_lunging",18) || t_21==String(L"holster",7) || t_21==String(L"hud_backpack",12) || t_21==String(L"ring_mana",9) || t_21==String(L"throwing_stars",14) || t_21==String(L"weapon_blunderbuss",18) || t_21==String(L"weapon_rifle",12)){
			return false;
		}
	}
	if(c_Util::m_IsCharacterActive(14)){
		if(m_IsItemOfClass(t_n,String(L"isFamiliar",10))){
			return false;
		}
		if(t_name.Contains(String(L"familiar",8))){
			return false;
		}
		String t_22=t_name;
		if(t_22==String(L"feet_boots_leaping",18) || t_22==String(L"feet_boots_lunging",18)){
			return false;
		}
	}
	if(c_Util::m_IsCharacterActive(13)){
		if(t_slot==String(L"weapon",6)){
			if(t_name.Contains(String(L"titanium",8))){
				return false;
			}
			if(t_name.Contains(String(L"obsidian",8))){
				return false;
			}
			if(t_name.Contains(String(L"glass",5))){
				return false;
			}
		}
		if(m_IsDamageBonusItem(t_n)){
			return false;
		}
		String t_23=t_name;
		if(t_23==String(L"head_circlet_telepathy",22) || t_23==String(L"scroll_enchant_weapon",21) || t_23==String(L"weapon_dagger_jeweled",21)){
			return false;
		}
	}
	if(c_Util::m_IsCharacterActive(12)){
		if(t_name.Contains(String(L"familiar",8))){
			return false;
		}
		String t_24=t_name;
		if(t_24==String(L"head_blast_helm",15) || t_24==String(L"weapon_spear",12)){
			return false;
		}
	}
	if(m_debugTrailerMode && m_IsItemOfClass(t_n,String(L"isTemp",6))){
		return false;
	}
	if(c_Level::m_isFloorIsLavaMode){
		if(t_slot==String(L"weapon",6)){
			if(!m_IsItemOfClass(t_n,String(L"isCat",5))){
				return false;
			}
		}
		String t_25=t_name;
		if(t_25==String(L"feet_boots_explorers",20) || t_25==String(L"feet_boots_winged",17) || t_25==String(L"feet_glass_slippers",19) || t_25==String(L"scroll_freeze_enemies",21) || t_25==String(L"spell_freeze_enemies",20) || t_25==String(L"tome_freeze",11)){
			return false;
		}
	}
	if(c_Level::m_isPhasingMode){
		String t_26=t_name;
		if(t_26==String(L"ring_phasing",12)){
			return false;
		}
	}
	return true;
}
bool c_Item::m_IsValidItemForCurrentChars2(String t_name){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Item.IsValidItemForCurrentChars(String)",39));
	return false;
}
bool c_Item::m_IsDisabled(String t_item){
	if(false || !bb_controller_game_debugEnablePrototypes){
		String t_7=t_item;
		if(t_7==String(L"familiar_shield",15)){
			return true;
		}
	}
	return false;
}
void c_Item::m_CreateItemPools(){
	int t_startTime=bb_app_Millisecs();
	c_XMLNode* t_itemsNode=bb_necrodancergame_xmlData->p_GetChild2(String(L"items",5),false);
	c_List* t_itemNodes=t_itemsNode->p_GetChildren(0,false);
	c_StringStack* t_attributeNames=(new c_StringStack)->m_new2();
	c_Stack5* t_unlockedItems=(new c_Stack5)->m_new();
	c_IntStack* t_unlockedItemsChances=(new c_IntStack)->m_new2();
	c_Stack5* t_itemPoolCandidates=(new c_Stack5)->m_new();
	for(int t_i=0;t_i<2;t_i=t_i+1){
		for(int t_j=0;t_j<=7;t_j=t_j+1){
			int t_kMax=1;
			if(t_j!=7){
				t_kMax=6;
			}
			for(int t_k=0;t_k<t_kMax;t_k=t_k+1){
				t_attributeNames->p_Clear();
				c_List* t_itemPool=0;
				if(t_j!=7){
					int t_1=t_k;
					if(t_1==0){
						t_itemPool=m_itemPoolChest[t_j];
						if(t_i==1){
							t_itemPool=m_itemPoolChest2[t_j];
						}
						t_attributeNames->p_Push7(String(L"chestChance",11));
					}else{
						if(t_1==1){
							t_itemPool=m_itemPoolLockedChest[t_j];
							if(t_i==1){
								t_itemPool=m_itemPoolLockedChest2[t_j];
							}
							t_attributeNames->p_Push7(String(L"lockedChestChance",17));
						}else{
							if(t_1==2){
								t_itemPool=m_itemPoolAnyChest[t_j];
								if(t_i==1){
									t_itemPool=m_itemPoolAnyChest2[t_j];
								}
								t_attributeNames->p_Push7(String(L"chestChance",11));
								t_attributeNames->p_Push7(String(L"lockedChestChance",17));
							}else{
								if(t_1==3){
									t_itemPool=m_itemPoolShop[t_j];
									if(t_i==1){
										t_itemPool=m_itemPoolShop2[t_j];
									}
									t_attributeNames->p_Push7(String(L"shopChance",10));
								}else{
									if(t_1==4){
										t_itemPool=m_itemPoolLockedShop[t_j];
										if(t_i==1){
											t_itemPool=m_itemPoolLockedShop2[t_j];
										}
										t_attributeNames->p_Push7(String(L"lockedShopChance",16));
									}else{
										t_itemPool=m_itemPoolUrn[t_j];
										if(t_i==1){
											t_itemPool=m_itemPoolUrn2[t_j];
										}
										t_attributeNames->p_Push7(String(L"urnChance",9));
									}
								}
							}
						}
					}
				}else{
					t_itemPool=m_itemPoolRandom;
					if(t_i==1){
						t_itemPool=m_itemPoolRandom2;
					}
					t_attributeNames->p_Push7(String(L"chestChance",11));
					t_attributeNames->p_Push7(String(L"lockedChestChance",17));
					t_attributeNames->p_Push7(String(L"shopChance",10));
					t_attributeNames->p_Push7(String(L"lockedShopChance",16));
				}
				t_itemPool->p_Clear();
				t_unlockedItems->p_Clear();
				t_unlockedItemsChances->p_Clear();
				c_Enumerator3* t_=t_itemNodes->p_ObjectEnumerator();
				while(t_->p_HasNext()){
					c_XMLNode* t_itemNode=t_->p_NextObject();
					int t_m=0;
					c_Enumerator12* t_2=t_attributeNames->p_ObjectEnumerator();
					while(t_2->p_HasNext()){
						String t_attributeName=t_2->p_NextObject();
						String t_chancesStr=t_itemNode->p_GetAttribute5(t_attributeName,String(L"0",1));
						Array<String > t_chancesStrs=t_chancesStr.Split(String(L"|",1));
						int t_chanceIndexMax=bb_math_Min(t_j,t_chancesStrs.Length()-1);
						int t_chance=(t_chancesStrs[t_chanceIndexMax]).ToInt();
						if(t_chance==0){
							if(t_j==7){
								t_chance=(t_chancesStrs[0]).ToInt();
							}
						}
						if(t_chance>0){
							if(c_Level::m_isHardcoreMode || m_IsUnlocked(t_itemNode->p_GetAttribute5(String(L"name",4),String()))){
								t_unlockedItems->p_Push13(t_itemNode);
								if(t_j==7){
									t_unlockedItemsChances->p_Push4(1);
								}else{
									if(t_m>0){
										t_chance=int((Float)ceil(Float(t_chance)/FLOAT(10.0)));
									}
									if(m_debugTrailerMode){
										String t_itemSet=t_itemNode->p_GetAttribute5(String(L"set",3),String(L"base",4));
										if(t_itemSet==String(L"dlc",3)){
											t_chance*=50;
										}
									}
									t_unlockedItemsChances->p_Push4(t_chance);
								}
								break;
							}
						}
						t_m+=1;
					}
				}
				t_itemPoolCandidates->p_Clear();
				while(!t_unlockedItems->p_IsEmpty()){
					int t_high=0;
					c_Enumerator6* t_3=t_unlockedItemsChances->p_ObjectEnumerator();
					while(t_3->p_HasNext()){
						int t_chance2=t_3->p_NextObject();
						t_high+=t_chance2;
					}
					int t_randomValue=c_Util::m_RndIntRangeFromZero(t_high-1,true);
					int t_n=0;
					for(t_n=t_n;t_n<t_unlockedItemsChances->p_Length();t_n=t_n+1){
						int t_chance3=t_unlockedItemsChances->p_Get2(t_n);
						if(t_randomValue<t_chance3){
							break;
						}
						t_randomValue-=t_chance3;
					}
					if(t_n>=t_unlockedItemsChances->p_Length()){
						t_n=0;
					}
					c_XMLNode* t_itemPoolCandidate=t_unlockedItems->p_Get2(t_n);
					t_itemPoolCandidates->p_Push13(t_itemPoolCandidate);
					t_unlockedItems->p_Remove2(t_n);
					t_unlockedItemsChances->p_Remove2(t_n);
				}
				c_Enumerator13* t_4=t_itemPoolCandidates->p_ObjectEnumerator();
				while(t_4->p_HasNext()){
					c_XMLNode* t_itemPoolCandidate2=t_4->p_NextObject();
					if(!m_IsValidItemForCurrentChars(t_itemPoolCandidate2)){
						continue;
					}
					String t_name=t_itemPoolCandidate2->p_name();
					if(m_IsDisabled(t_name)){
						continue;
					}
					t_itemPool->p_AddLast(t_itemPoolCandidate2);
				}
			}
		}
	}
	int t_endTime=bb_app_Millisecs();
	int t_totalTime=t_endTime-t_startTime;
	bb_logger_Debug->p_Log(String(L"Item pool generation took ",26)+String(t_totalTime)+String(L" ms.",4));
}
int c_Item::m_GetCost(String t_i){
	c_XMLNode* t_itemNode=m_GetItemXML(t_i);
	return t_itemNode->p_GetAttribute3(String(L"coinCost",8),0);
}
bool c_Item::m_IsValidRandomItem(String t_t){
	String t_27=t_t;
	if(t_27==String(L"no_item",7) || t_27==String(L"resource_hoard_gold",19)){
		return false;
	}
	return true;
}
String c_Item::m_GetDisplayName(String t_itemName){
	c_XMLNode* t_itemNode=m_GetItemXML(t_itemName);
	if(t_itemNode!=0){
		t_itemName=t_itemNode->p_GetAttribute5(String(L"displayName",11),t_itemName);
	}
	return t_itemName;
}
int c_Item::m_GetIntAttribute(String t_i,String t_attr,int t_dflt){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Item.GetIntAttribute(String, String, Int)",41));
	return 0;
}
int c_Item::p_GetIntAttribute(int t_attr,int t_dflt){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Item.GetIntAttribute(Int, Int)",30));
	return 0;
}
void c_Item::p_Die(){
	m_pickupList->p_RemoveEach10(this);
	if(this->m_hintText!=0){
		this->m_hintText->p_Discard();
	}
	if(this->m_nameText!=0){
		this->m_nameText->p_Discard();
	}
	if(this->m_quantityText!=0){
		this->m_quantityText->p_Discard();
	}
	c_Entity::p_Die();
}
c_Item* c_Item::m_GetPickupAt(int t_xVal,int t_yVal,c_Item* t_slf){
	c_Enumerator10* t_=m_pickupList->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Item* t_pickup=t_->p_NextObject();
		if(t_pickup->m_x==t_xVal && t_pickup->m_y==t_yVal){
			if(t_pickup->p_IsItemOfType(String(L"isCoin",6))){
				return t_pickup;
			}
		}
	}
	c_Enumerator10* t_2=m_pickupList->p_ObjectEnumerator();
	while(t_2->p_HasNext()){
		c_Item* t_pickup2=t_2->p_NextObject();
		if(t_pickup2==t_slf){
			continue;
		}
		if(t_pickup2->m_x==t_xVal && t_pickup2->m_y==t_yVal){
			if(t_pickup2->m_pickupable){
				if(t_pickup2->m_dropX!=t_xVal || t_pickup2->m_dropY!=t_yVal){
					return t_pickup2;
				}
			}
		}
	}
	return 0;
}
int c_Item::m_RandomHardModeHelperItem(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Item.RandomHardModeHelperItem()",31));
	return 0;
}
String c_Item::p_PickupFail(c_Player* t_player){
	c_Audio::m_PlayGameSound(String(L"error",5),2,FLOAT(1.0));
	t_player->p_ImmediatelyMoveTo(t_player->m_lastX-t_player->m_x,t_player->m_lastY-t_player->m_y,false,false,false,false,false);
	return String(L"no_item",7);
}
void c_Item::m_ClearAllSingleChoiceItems(c_Item* t_takenItem){
	if(t_takenItem->m_x>=150 || t_takenItem->m_y>=150 || !c_Player::m_DoesAnyPlayerHaveItemOfType(String(L"ring_shadows",12),false)){
		bool t_loop=false;
		do{
			t_loop=false;
			c_Enumerator10* t_=m_pickupList->p_ObjectEnumerator();
			while(t_->p_HasNext()){
				c_Item* t_pickup=t_->p_NextObject();
				if(t_pickup->m_singleChoiceItem && t_pickup!=t_takenItem && c_Util::m_GetDist(t_pickup->m_x,t_pickup->m_y,t_takenItem->m_x,t_takenItem->m_y)<FLOAT(5.0)){
					t_pickup->p_Die();
					t_loop=true;
					break;
				}
			}
		}while(!(!t_loop));
	}
}
String c_Item::p_Pickup(c_Player* t_player){
	if(this->m_dead){
		return String(L"no_item",7);
	}
	String t_28=this->m_itemType;
	if(t_28==String(L"misc_key",8) || t_28==String(L"misc_golden_key",15) || t_28==String(L"misc_golden_key2",16) || t_28==String(L"misc_golden_key3",16) || t_28==String(L"misc_glass_key",14)){
		if(t_player->p_HasItemOfType(this->m_itemType,false)){
			return this->p_PickupFail(t_player);
		}
	}
	if(this->m_trainingWeapon){
		int t_29=t_player->m_characterID;
		if(t_29==2 || t_29==1 || t_29==7 || t_29==6 || t_29==4){
			return this->p_PickupFail(t_player);
		}
	}
	if(t_player->m_characterID==11){
		String t_30=this->m_itemType;
		if(t_30==String(L"feet_boots_leaping",18) || t_30==String(L"feet_boots_lunging",18)){
			return this->p_PickupFail(t_player);
		}
		String t_31=this->p_GetSlot();
		if(t_31==String(L"weapon",6)){
			if(this->p_IsItemOfClass(String(L"isDagger",8)) || this->p_IsItemOfClass(String(L"isLongsword",11)) || this->p_IsItemOfClass(String(L"isSpear",7)) || this->p_IsItemOfClass(String(L"isRapier",8)) || this->p_IsItemOfClass(String(L"isBow",5)) || this->p_IsItemOfClass(String(L"isHarp",6)) || this->p_IsItemOfClass(String(L"isStaff",7)) || this->p_IsItemOfClass(String(L"isCutlass",9))){
				return this->p_PickupFail(t_player);
			}
		}else{
			if(t_31==String(L"spell",5)){
				return this->p_PickupFail(t_player);
			}
		}
	}
	if(this->m_itemType==String(L"weapon_golden_lute",18)){
		if(t_player->m_isHelper){
			return this->p_PickupFail(t_player);
		}
		if(c_Necrodancer::m_necrodancer!=0 && c_Necrodancer::m_necrodancer->m_level==1 && !c_Necrodancer::m_necrodancer->m_saidLutePhrase){
			c_Audio::m_PlayGameSound(String(L"necrodancerGiveMeThatLute",25),-1,FLOAT(1.0));
			c_Necrodancer::m_necrodancer->m_saidLutePhrase=true;
		}
	}
	if(this->m_singleChoiceItem){
		m_ClearAllSingleChoiceItems(this);
	}
	if(!this->m_droppedByPlayer){
		if(!this->p_IsItemOfType(String(L"isCoin",6)) && !this->p_IsItemOfType(String(L"isDiamond",9))){
			t_player->m_lastKillBeat=c_Audio::m_GetClosestBeatNum(true);
		}
	}
	String t_pickupSound=String(L"pickupGeneral",13);
	if(this->m_itemType==String(L"resource_diamond",16)){
		t_pickupSound=String(L"pickupDiamond",13);
	}else{
		if(this->p_IsItemOfType(String(L"isCoin",6))){
			t_pickupSound=String(L"pickupGold",10);
		}else{
			if(this->p_IsItemOfType(String(L"isWeapon",8))){
				t_pickupSound=String(L"pickupWeapon",12);
			}else{
				if(this->p_IsItemOfType(String(L"isArmor",7))){
					t_pickupSound=String(L"pickupArmor",11);
				}
			}
		}
	}
	c_Audio::m_PlayGameSound(t_pickupSound,2,FLOAT(1.0));
	if(this->m_trainingWeapon){
		this->m_dropX=this->m_x;
		this->m_dropY=this->m_y;
	}else{
		this->p_Die();
	}
	return this->m_itemType;
}
int c_Item::m_ConsumeCoinsRemainingOnLevel(){
	int t_numCoins=0;
	c_Enumerator10* t_=m_pickupList->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Item* t_pickup=t_->p_NextObject();
		if(!t_pickup->m_flaggedForDeath && !t_pickup->m_dead && t_pickup->m_pickupable && t_pickup->p_IsItemOfType(String(L"isCoin",6))){
			t_numCoins+=t_pickup->p_GetValue();
			t_pickup->m_flaggedForDeath=true;
		}
	}
	return t_numCoins;
}
void c_Item::m_MoveAll(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Item.MoveAll()",14));
}
bool c_Item::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	return false;
}
void c_Item::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Item.Update()",13));
}
bool c_Item::p_IsVisible(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Item.IsVisible()",16));
	return false;
}
void c_Item::mark(){
	c_Entity::mark();
	gc_mark_q(m_hintText);
	gc_mark_q(m_nameText);
	gc_mark_q(m_quantityText);
}
c_SaleItem::c_SaleItem(){
	m_forceCost=FLOAT(-1.0);
	m_cost=FLOAT(999.0);
	m_bloodCost=FLOAT(.0);
	m_discount=FLOAT(1.0);
	m_miniDiamond=0;
	m_miniHeart=0;
	m_shopkeeper=0;
	m_medic=0;
}
String c_SaleItem::m_lastSaleItemClass1;
String c_SaleItem::m_lastSaleItemClass2;
c_List7* c_SaleItem::m_randomSaleItemList;
c_List27* c_SaleItem::m_currentSaleItems;
bool c_SaleItem::p_CostsBlood(){
	return this->m_bloodCost>FLOAT(0.0);
}
bool c_SaleItem::p_CostsDiamonds(){
	return this->m_diamondCost>0 && bb_controller_game_currentLevel==-2;
}
Float c_SaleItem::m_GetCostMultiplier(){
	Float t_costMultiplier=FLOAT(1.0);
	if(c_Player::m_DoesAnyPlayerHaveItemOfType(String(L"ring_charisma",13),false) || c_Player::m_DoesAnyPlayerHaveItemOfType(String(L"ring_wonder",11),false)){
		t_costMultiplier=FLOAT(0.5);
	}
	if(c_Level::m_isHardcoreMode){
		t_costMultiplier*=Float(bb_controller_game_currentDepth)*FLOAT(0.5)+FLOAT(2.0);
	}
	return t_costMultiplier;
}
void c_SaleItem::p_SetCostHelper(){
	this->m_cost=Float(this->m_coinCost);
	if(c_Util::m_IsCharacterActive(5) || c_Util::m_IsCharacterActive(6) || c_Util::m_IsCharacterActive(7)){
		this->m_cost=FLOAT(0.0);
	}
	Float t_baseCost=FLOAT(.0);
	if(this->p_CostsBlood()){
		t_baseCost=this->m_bloodCost;
	}else{
		if(this->p_CostsDiamonds()){
			t_baseCost=Float(this->m_diamondCost);
		}else{
			t_baseCost=m_GetCostMultiplier()*this->m_cost;
		}
	}
	this->m_cost=t_baseCost*this->m_discount;
	if(this->m_forceCost>FLOAT(0.0)){
		this->m_cost=this->m_forceCost;
	}
	this->m_saleItem=true;
	gc_assign(this->m_miniDiamond,(new c_Sprite)->m_new2(String(L"gui/TEMP_mini_diamond.png",25),1,c_Image::m_DefaultFlags));
	this->m_miniDiamond->p_SetZ(FLOAT(-980.0));
	gc_assign(this->m_miniHeart,(new c_Sprite)->m_new2(String(L"gui/TEMP_mini_heart.png",23),1,c_Image::m_DefaultFlags));
	this->m_miniHeart->p_SetZ(FLOAT(-980.0));
	bb_logger_Debug->p_TraceNotImplemented(String(L"SaleItem.SetCostHelper()",24));
}
void c_SaleItem::p_SetBloodCost(){
	this->m_bloodCost=FLOAT(0.0);
	if(this->m_hasBloodCost){
		this->m_bloodCost=FLOAT(0.5);
		if(this->m_coinCost>=25){
			this->m_bloodCost=FLOAT(1.0);
		}
		if(this->m_coinCost>=120){
			this->m_bloodCost=FLOAT(1.5);
		}
		if(this->m_coinCost>400){
			this->m_bloodCost=FLOAT(2.0);
		}
		if(c_Player::m_DoesAnyPlayerHaveItemOfType(String(L"ring_charisma",13),false) || c_Player::m_DoesAnyPlayerHaveItemOfType(String(L"ring_wonder",11),false)){
			this->m_bloodCost-=FLOAT(1.0);
		}
		if(!c_Level::m_isHardcoreMode && !c_Level::m_isLevelEditor){
			this->m_bloodCost=this->m_bloodCost*FLOAT(2.0);
		}
		if(this->m_bloodCost<=FLOAT(0.0)){
			this->m_bloodCost=FLOAT(0.5);
		}
		if((this->m_forceCost)!=0){
			this->m_bloodCost=this->m_forceCost;
		}
	}
}
void c_SaleItem::p_SetCost(){
	this->p_SetCostHelper();
	this->p_SetBloodCost();
	this->p_SetCostHelper();
}
c_SaleItem* c_SaleItem::m_new(int t_xVal,int t_yVal,String t_type,bool t_bldCost,c_Shopkeeper* t_sk,Float t_fCost,c_Medic* t_m){
	c_Item::m_new(t_xVal,t_yVal,t_type,false,-1,false);
	this->m_isSaleItem=true;
	m_currentSaleItems->p_AddLast27(this);
	this->m_hasBloodCost=t_bldCost;
	this->m_forceCost=t_fCost;
	this->p_SetCost();
	gc_assign(this->m_shopkeeper,t_sk);
	gc_assign(this->m_medic,t_m);
	return this;
}
c_SaleItem* c_SaleItem::m_new2(){
	c_Item::m_new2();
	return this;
}
void c_SaleItem::p_ApplyDiscount(Float t_val){
	this->m_discount=t_val;
	this->p_SetCost();
}
String c_SaleItem::m_GetRandomItem(int t_level,String t_randType){
	String t_itemName=String();
	String t_itemClass=String();
	int t_i=0;
	for(t_i=t_i;t_i<500;t_i=t_i+1){
		t_itemName=c_Item::m_GetRandomItemInClass(String(),t_level,t_randType,0,true,String(),false);
		t_itemClass=c_Item::m_GetSlot2(t_itemName);
		bool t_isValid=true;
		for(int t_j=0;t_j<bb_controller_game_numPlayers;t_j=t_j+1){
			c_Player* t_player=bb_controller_game_players[t_j];
			if(c_Level::m_randSeed==-1){
				if(t_player->p_HasItemOfType(t_itemClass,false)){
					t_isValid=false;
					break;
				}
				String t_itemInSlot=t_player->p_GetItemInSlot(t_itemClass,false);
				if(t_itemInSlot!=String(L"no_item",7)){
					if(c_Item::m_GetIntAttribute(t_itemInSlot,String(L"slotPriority",12),-1)>c_Item::m_GetIntAttribute(t_itemName,String(L"slotPriority",12),-1)){
						t_isValid=false;
						break;
					}
				}
			}
			if(t_itemClass==String(L"weapon",6) && t_player->p_IsWeaponlessCharacter()){
				t_isValid=false;
				break;
			}
			if(t_itemClass==String(L"shovel",6) && t_player->m_characterID==4){
				t_isValid=false;
				break;
			}
		}
		if(t_isValid){
			if(t_itemClass!=m_lastSaleItemClass1 && t_itemClass!=m_lastSaleItemClass2){
				if(!m_randomSaleItemList->p_Contains2(t_itemName)){
					break;
				}
			}
		}
	}
	if(t_i==500){
		t_itemName=String(L"armor_heavyplate",16);
	}
	m_randomSaleItemList->p_AddLast7(t_itemName);
	m_lastSaleItemClass2=m_lastSaleItemClass1;
	m_lastSaleItemClass1=t_itemClass;
	return t_itemName;
}
void c_SaleItem::p_Die(){
	m_currentSaleItems->p_RemoveEach14(this);
	c_Item::p_Die();
}
Float c_SaleItem::p_GetCost(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"SaleItem.GetCost()",18));
	return 0;
}
int c_SaleItem::m_GetMinCost(){
	int t_minCost=999999;
	c_Enumerator30* t_=m_currentSaleItems->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_SaleItem* t_currentSaleItem=t_->p_NextObject();
		Float t_cost=t_currentSaleItem->p_GetCost();
		if(t_cost<Float(t_minCost) && !t_currentSaleItem->m_janitorItem && !t_currentSaleItem->m_diamondDealerItem){
			t_minCost=int(t_cost);
		}
	}
	return t_minCost;
}
String c_SaleItem::p_Pickup(c_Player* t_player){
	bb_logger_Debug->p_TraceNotImplemented(String(L"SaleItem.Pickup(Player)",23));
	return String();
}
void c_SaleItem::mark(){
	c_Item::mark();
	gc_mark_q(m_miniDiamond);
	gc_mark_q(m_miniHeart);
	gc_mark_q(m_shopkeeper);
	gc_mark_q(m_medic);
}
c_Chest::c_Chest(){
	m_contents=String(L"no_item",7);
	m_lockChest=false;
	m_chestColor=0;
	m_locked=false;
	m_secretChest=false;
	m_saleChest=false;
	m_singleChoiceChest=false;
}
int c_Chest::m_lastChestColor;
int c_Chest::m_lastChestColor2;
bool c_Chest::m_IsItemAppropriateForChestColor(String t_cont,int t_tmpColor){
	String t_1=c_Item::m_GetSlot2(t_cont);
	if(t_1==String(L"body",4) || t_1==String(L"weapon",6) || t_1==String(L"feet",4)){
		return t_tmpColor==2;
	}else{
		if(t_1==String(L"spell",5) || t_1==String(L"ring",4)){
			return t_tmpColor==3;
		}
	}
	if(c_Item::m_IsItemOfType(t_cont,String(L"isScroll",8))){
		return t_tmpColor==3;
	}
	return t_tmpColor==1;
}
c_List32* c_Chest::m_chestList;
c_Chest* c_Chest::m_new(int t_xVal,int t_yVal,String t_cont,bool t_invis,bool t_isLocked,bool t_isSecret,int t_tmpColor){
	c_Entity::m_new();
	this->m_isChest=true;
	this->m_x=t_xVal;
	this->m_y=t_yVal;
	this->m_invisible=t_invis;
	this->m_contents=t_cont;
	if(this->m_contents==String(L"no_item",7) && c_Level::m_randSeed!=-1){
		if(!this->m_lockChest){
			this->m_contents=c_Item::m_GetRandomItemInClass(String(),bb_controller_game_currentLevel,String(L"chestChance",11),t_tmpColor,false,String(),false);
		}else{
			this->m_contents=c_Item::m_GetRandomItemInClass(String(),bb_controller_game_currentLevel,String(L"lockedChestChance",17),0,false,String(),false);
		}
	}
	if(t_tmpColor!=0){
		this->m_chestColor=t_tmpColor;
	}else{
		if(t_isLocked){
			this->m_chestColor=4;
		}else{
			if(this->m_contents!=String(L"no_item",7)){
				if(m_IsItemAppropriateForChestColor(this->m_contents,2)){
					this->m_chestColor=2;
				}else{
					if(m_IsItemAppropriateForChestColor(this->m_contents,3)){
						this->m_chestColor=3;
					}else{
						this->m_chestColor=1;
					}
				}
			}else{
				int t_chestColor=0;
				do{
					t_chestColor=c_Util::m_RndIntRange(1,3,true,-1);
				}while(!(t_chestColor==m_lastChestColor || t_chestColor==m_lastChestColor2));
			}
		}
	}
	m_lastChestColor2=m_lastChestColor;
	m_lastChestColor=this->m_chestColor;
	int t_2=this->m_chestColor;
	if(t_2==4){
		gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"entities/chest_locked.png",25),24,24,2,c_Image::m_DefaultFlags));
	}else{
		if(t_2==2){
			gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"entities/chest_black.png",24),24,24,2,c_Image::m_DefaultFlags));
		}else{
			if(t_2==3){
				gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"entities/chest_white.png",24),24,24,2,c_Image::m_DefaultFlags));
			}else{
				gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"entities/chest.png",18),24,24,2,c_Image::m_DefaultFlags));
			}
		}
	}
	this->m_locked=t_isLocked;
	this->m_lockChest=t_isLocked;
	this->m_yOff=FLOAT(6.0);
	this->m_collides=true;
	this->m_secretChest=t_isSecret;
	m_chestList->p_AddLast32(this);
	bb_logger_Debug->p_WriteLine2(String(L"Placed ",7)+c_ChestColor::m_ToString(this->m_chestColor)+String(L" Chest at ",10)+((new c_Point)->m_new(this->m_x,this->m_y))->p_ToString());
	bb_logger_Debug->p_WriteLine2(String(L"    with ",9)+c_Item::m_GetDisplayName(this->m_contents));
	return this;
}
c_Chest* c_Chest::m_new2(){
	c_Entity::m_new();
	return this;
}
int c_Chest::m_GetNumEmptySecretChests(){
	int t_numEmptySecretChests=0;
	c_Enumerator27* t_=m_chestList->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Chest* t_chest=t_->p_NextObject();
		if(!t_chest->m_saleChest && t_chest->m_secretChest && t_chest->m_contents==String(L"no_item",7) && !t_chest->m_invisible){
			t_numEmptySecretChests+=1;
		}
	}
	return t_numEmptySecretChests;
}
int c_Chest::m_GetNumEmptyNonSecretChests(){
	int t_numEmptyNonSecretChests=0;
	c_Enumerator27* t_=m_chestList->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Chest* t_chest=t_->p_NextObject();
		if(!t_chest->m_saleChest && !t_chest->m_secretChest && t_chest->m_contents==String(L"no_item",7) && !t_chest->m_invisible){
			t_numEmptyNonSecretChests+=1;
		}
	}
	return t_numEmptyNonSecretChests;
}
c_Chest* c_Chest::m_GetEmptySecretChest(){
	c_Enumerator27* t_=m_chestList->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Chest* t_chest=t_->p_NextObject();
		if(!t_chest->m_saleChest && t_chest->m_secretChest && t_chest->m_contents==String(L"no_item",7) && !t_chest->m_invisible){
			return t_chest;
		}
	}
	return 0;
}
void c_Chest::p_Die(){
	if(!this->m_dead){
		m_chestList->p_RemoveEach16(this);
		c_Entity::p_Die();
	}
}
void c_Chest::p_AddKeyToContents(){
	(new c_Item)->m_new(this->m_x,this->m_y,String(L"misc_key",8),false,-1,false);
	this->p_Die();
}
c_Chest* c_Chest::m_GetEmptyNonSecretChest(){
	c_Enumerator27* t_=m_chestList->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Chest* t_chest=t_->p_NextObject();
		if(!t_chest->m_saleChest && !t_chest->m_secretChest && t_chest->m_contents==String(L"no_item",7) && !t_chest->m_invisible){
			return t_chest;
		}
	}
	return 0;
}
void c_Chest::p_BecomeLocked(){
	gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"entities/chest_locked.png",25),24,24,2,c_Image::m_DefaultFlags));
	this->m_locked=true;
	this->m_lockChest=true;
}
bool c_Chest::p_Open(Object* t_player){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Chest.Open(Object)",18));
	return false;
}
bool c_Chest::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	return false;
}
void c_Chest::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Chest.Update()",14));
}
void c_Chest::mark(){
	c_Entity::mark();
}
c_Enemy::c_Enemy(){
	m_isStairLockingMiniboss=false;
	m_enemyType=0;
	m_lastPlayerHitFrame=Array<int >(4);
	m_lastPlayerHitSource=Array<String >(4);
	m_beatsPerMove=1;
	m_movePriority=0;
	m_health=1;
	m_isMiniboss=false;
	m_isBoss=false;
	m_isMonkeyLike=false;
	m_hitParticle=String();
	m_animNormal=(new c_IntMap8)->m_new();
	m_animNormal2=(new c_IntMap8)->m_new();
	m_animNormal3=(new c_IntMap8)->m_new();
	m_animBlink=(new c_IntMap8)->m_new();
	m_animTell=(new c_IntMap8)->m_new();
	m_animTellBlink=(new c_IntMap8)->m_new();
	m_hitTween=5;
	m_hitShadowTween=6;
	m_movementType=0;
	m_attackSwipeImage=0;
	m_jumpDirt=0;
	m_jumpDirtTimer=-1;
	m_overrideHitSound=String();
	m_overrideDeathSound=String();
	m_exemptFromPause=false;
	m_healthMax=0;
	m_movesRegardlessOfDistance=false;
	m_wasSeekingX=true;
	m_swarmCulprit=false;
	m_allowDiagonalFlip=false;
	m_animOverride=-1;
	m_isFormationDancer=false;
	m_currentMoveDelay=1;
	m_inPenaltyBox=false;
	m_isLord=false;
	m_dropLordScroll=false;
	m_killCoinMultiplier=0;
	m_bonusCoinsToDrop=0;
	m_ringOfGoldCoinsToDrop=0;
	m_dropNoCoinsOverride=false;
	m_deathTrigger=0;
	m_blink_MIN=50;
	m_blink_MAX=120;
	m_blink_DUR=20;
	m_stealth=false;
	m_containsItem=false;
	m_overrideMoveSound=String();
	m_enableTell=true;
	m_overrideCrySound=String();
	m_overrideAttackSwipe=false;
	m_isMosh=false;
	m_dontMove=false;
	m_inSecretRoom=false;
	m_isSarcophagus=false;
	m_minEnemyMoveDistance=3;
	m_isNecroDancer=false;
	m_storedZOff=0;
	m_isDancer=false;
	m_executedCry=false;
	m_animOverrideState=-1;
	m_wasFrozen=false;
	m_blinkDelay=0;
	m_blinkDuration=0;
	m_animOffset=0;
	m_justSpawned=true;
	m_enableDeathEffects=true;
}
c_EnemyList* c_Enemy::m_enemyList;
void c_Enemy::m_SetEnemiesToDropNoCoins(){
	c_Enumerator4* t_=m_enemyList->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Enemy* t_enemy=t_->p_NextObject();
		t_enemy->m_coinsToDrop=0;
	}
}
int c_Enemy::m_movesBehind;
int c_Enemy::m_lastWraithSpawnBeat;
bool c_Enemy::m_enemiesPaused;
int c_Enemy::m_enemiesFearfulDuration;
c_Enemy* c_Enemy::m_new(){
	c_MobileEntity::m_new();
	m_enemyList->p_AddLast11(this);
	this->m_collides=true;
	this->m_isEnemy=true;
	return this;
}
c_XMLDoc* c_Enemy::m_randomizerXML;
c_XMLNode* c_Enemy::m_GetEnemyXML(String t_name,int t_level){
	c_XMLNode* t_enemyNode=0;
	if(c_Level::m_isRandomizerMode && m_randomizerXML!=0){
		t_enemyNode=m_randomizerXML->p_GetChildAtPath2(t_name,String(L"type=",5)+String(t_level));
	}else{
		t_enemyNode=bb_necrodancergame_xmlData->p_GetChildAtPath2(String(L"enemies/",8)+t_name,String(L"type=",5)+String(t_level));
	}
	return t_enemyNode;
}
void c_Enemy::p_InitImage(c_XMLNode* t_enemyXML,String t_overrideSpriteName,int t_overrideFrameW,int t_overrideFrameH){
	gc_assign(this->m_image,(new c_Sprite)->m_new4());
	gc_assign(this->m_shadow,(new c_Sprite)->m_new4());
	bb_logger_Debug->p_TraceNotImplemented(String(L"Enemy.InitImage(XMLNode, String, Int, Int)",42));
}
c_Sprite* c_Enemy::m_heartSmall;
c_Sprite* c_Enemy::m_heartEmptySmall;
void c_Enemy::p_ApplyMonkeyPaw(){
	if(this->m_isMonkeyLike){
		if(c_Player::m_DoesAnyPlayerHaveItemOfType(String(L"misc_monkey_paw",15),false)){
			this->m_frozenPermanently=true;
		}
	}
}
void c_Enemy::p_Init3(int t_xVal,int t_yVal,int t_l,String t_name,String t_overrideSpriteName,int t_overrideFrameW,int t_overrideFrameH){
	this->m_x=t_xVal;
	this->m_y=t_yVal;
	this->m_lastX=t_xVal;
	this->m_lastY=t_yVal;
	this->m_level=t_l;
	this->m_xmlName=t_name;
	for(int t_i=0;t_i<this->m_lastPlayerHitFrame.Length();t_i=t_i+1){
		this->m_lastPlayerHitFrame[t_i]=-1;
	}
	for(int t_i2=0;t_i2<this->m_lastPlayerHitSource.Length();t_i2=t_i2+1){
		this->m_lastPlayerHitSource[t_i2]=String();
	}
	c_XMLNode* t_enemyNode=m_GetEnemyXML(t_name,t_l);
	if(t_enemyNode==bb_necrodancergame_xmlData->m_doc->m_nullNode){
		bb_logger_Debug->p_Log(String(L"ERROR: No enemy with name '",27)+t_name+String(L"'",1));
	}
	this->m_enemyType=t_enemyNode->p_GetAttribute3(String(L"id",2),0);
	this->m_friendlyName=t_enemyNode->p_GetAttribute5(String(L"friendlyName",12),this->m_xmlName);
	this->p_InitImage(t_enemyNode,t_name,t_overrideFrameW,t_overrideFrameH);
	c_XMLNode* t_statsNode=t_enemyNode->p_GetChild2(String(L"stats",5),false);
	this->m_beatsPerMove=t_statsNode->p_GetAttribute3(String(L"beatsPerMove",12),1);
	this->m_coinsToDrop=t_statsNode->p_GetAttribute3(String(L"coinsToDrop",11),1);
	this->m_damagePerHit=t_statsNode->p_GetAttribute3(String(L"damagePerHit",12),1);
	this->m_movePriority=t_statsNode->p_GetAttribute3(String(L"priority",8),0);
	this->m_health=t_statsNode->p_GetAttribute3(String(L"health",6),1);
	c_XMLNode* t_optionalStatsNode=t_enemyNode->p_GetChild2(String(L"optionalStats",13),false);
	this->m_floating=t_optionalStatsNode->p_GetAttribute2(String(L"floating",8),false);
	this->m_isMassive=t_optionalStatsNode->p_GetAttribute2(String(L"massive",7),false);
	this->m_ignoreLiquids=t_optionalStatsNode->p_GetAttribute2(String(L"ignoreLiquids",13),false);
	this->m_isMiniboss=t_optionalStatsNode->p_GetAttribute2(String(L"miniboss",8),false);
	this->m_isBoss=t_optionalStatsNode->p_GetAttribute2(String(L"boss",4),false);
	this->m_ignoreWalls=t_optionalStatsNode->p_GetAttribute2(String(L"ignoreWalls",11),false);
	this->m_isMonkeyLike=t_optionalStatsNode->p_GetAttribute2(String(L"isMonkeyLike",12),false);
	if(this->m_isMassive){
		gc_assign(this->m_frozenImage,(new c_Sprite)->m_new(String(L"entities/frozen_feet_large.png",30),31,24,2,c_Image::m_DefaultFlags));
	}else{
		gc_assign(this->m_frozenImage,(new c_Sprite)->m_new(String(L"entities/frozen_feet_medium.png",31),31,24,2,c_Image::m_DefaultFlags));
	}
	c_XMLNode* t_particleNode=t_enemyNode->p_GetChild2(String(L"particle",8),false);
	this->m_hitParticle=t_particleNode->p_GetAttribute5(String(L"hit",3),String());
	this->m_animNormal->p_Clear();
	this->m_animNormal2->p_Clear();
	this->m_animNormal3->p_Clear();
	this->m_animBlink->p_Clear();
	this->m_animTell->p_Clear();
	this->m_animTellBlink->p_Clear();
	c_Enumerator3* t_=t_enemyNode->p_GetChildren2(String(L"frame",5),0,false)->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_XMLNode* t_frameNode=t_->p_NextObject();
		int t_inSheet=t_frameNode->p_GetAttribute3(String(L"inSheet",7),1);
		Float t_onFraction=t_frameNode->p_GetAttribute4(String(L"onFraction",10),FLOAT(1.0));
		Float t_offFraction=t_frameNode->p_GetAttribute4(String(L"offFraction",11),FLOAT(1.0));
		bool t_singleFrame=t_frameNode->p_GetAttribute2(String(L"singleFrame",11),false);
		c_BeatAnimationData* t_beatAnimationData=(new c_BeatAnimationData)->m_new(t_inSheet-1,t_onFraction,t_offFraction,t_singleFrame);
		String t_animType=t_frameNode->p_GetAttribute5(String(L"animType",8),String(L"normal",6));
		int t_inAnim=t_frameNode->p_GetAttribute3(String(L"inAnim",6),1);
		String t_16=t_animType;
		if(t_16==String(L"normal",6)){
			this->m_animNormal->p_Set16(t_inAnim-1,t_beatAnimationData);
		}else{
			if(t_16==String(L"normal2",7)){
				this->m_animNormal2->p_Set16(t_inAnim-1,t_beatAnimationData);
			}else{
				if(t_16==String(L"normal3",7)){
					this->m_animNormal3->p_Set16(t_inAnim-1,t_beatAnimationData);
				}else{
					if(t_16==String(L"blink",5)){
						this->m_animBlink->p_Set16(t_inAnim-1,t_beatAnimationData);
					}else{
						if(t_16==String(L"tell",4)){
							this->m_animTell->p_Set16(t_inAnim-1,t_beatAnimationData);
						}else{
							if(t_16==String(L"tellBlink",9)){
								this->m_animTellBlink->p_Set16(t_inAnim-1,t_beatAnimationData);
							}
						}
					}
				}
			}
		}
	}
	c_List* t_bouncerNodes=t_enemyNode->p_GetChildren2(String(L"bouncer",7),0,false);
	if(t_bouncerNodes->p_Count()>0){
		c_XMLNode* t_bouncerNode=t_enemyNode->p_GetChild2(String(L"bouncer",7),false);
		Float t_min=t_bouncerNode->p_GetAttribute4(String(L"min",3),FLOAT(1.0));
		Float t_max=t_bouncerNode->p_GetAttribute4(String(L"max",3),FLOAT(1.0));
		Float t_power=t_bouncerNode->p_GetAttribute4(String(L"power",5),FLOAT(1.0));
		int t_steps=t_bouncerNode->p_GetAttribute3(String(L"steps",5),10);
		gc_assign(this->m_bounce,(new c_Bouncer)->m_new(t_min,t_max,t_power,t_steps));
	}
	c_List* t_tweensNodes=t_enemyNode->p_GetChildren2(String(L"tweens",6),0,false);
	if(t_tweensNodes->p_Count()>0){
		c_XMLNode* t_tweensNode=t_enemyNode->p_GetChild2(String(L"tweens",6),false);
		String t_move=t_tweensNode->p_GetAttribute5(String(L"move",4),String(L"slide",5));
		if(t_move==String(L"slide",5)){
			this->m_moveTween=3;
		}
		String t_moveShadow=t_tweensNode->p_GetAttribute5(String(L"moveShadow",10),String(L"slide",5));
		if(t_moveShadow==String(L"slide",5)){
			this->m_moveShadowTween=3;
		}
		String t_hit=t_tweensNode->p_GetAttribute5(String(L"hit",3),String(L"slide",5));
		if(t_hit==String(L"slide",5)){
			this->m_hitTween=3;
		}
		String t_hitShadow=t_tweensNode->p_GetAttribute5(String(L"hitShadow",9),String(L"slide",5));
		if(t_hitShadow==String(L"slide",5)){
			this->m_hitShadowTween=3;
		}
	}
	String t_movement=t_statsNode->p_GetAttribute5(String(L"movement",8),String(L"custom",6));
	String t_17=t_movement;
	if(t_17==String(L"random",6)){
		this->m_movementType=1;
	}else{
		if(t_17==String(L"basicSeek",9)){
			this->m_movementType=2;
		}else{
			if(t_17==String(L"basicSeekNoTraps",16)){
				this->m_movementType=3;
			}else{
				if(t_17==String(L"seekWithDiagonals",17)){
					this->m_movementType=4;
				}else{
					if(t_17==String(L"randomWithDiagonals",19)){
						this->m_movementType=5;
					}else{
						this->m_movementType=0;
					}
				}
			}
		}
	}
	gc_assign(this->m_attackSwipeImage,(new c_Sprite)->m_new2(String(L"swipes/swipe_enemy.png",22),5,1));
	this->m_attackSwipeImage->p_SetZOff(FLOAT(1000.0));
	gc_assign(this->m_jumpDirt,(new c_Sprite)->m_new2(String(L"particles/jump_dirt.png",23),5,1));
	this->m_jumpDirt->p_SetZOff(FLOAT(-940.0));
	this->m_jumpDirtTimer=-1;
	if(m_heartSmall==0){
		gc_assign(m_heartSmall,(new c_Sprite)->m_new2(String(L"gui/TEMP_heart_small.png",24),1,1));
		m_heartSmall->p_SetZ(FLOAT(900.0));
	}
	if(m_heartEmptySmall==0){
		gc_assign(m_heartEmptySmall,(new c_Sprite)->m_new2(String(L"gui/TEMP_heart_empty_small.png",30),1,1));
		m_heartEmptySmall->p_SetZ(FLOAT(900.0));
	}
	if(this->m_isMiniboss){
		this->p_ActivateLight(FLOAT(0.01),FLOAT(0.02));
	}
	this->p_ApplyMonkeyPaw();
	String t_displayName=t_enemyNode->p_GetAttribute5(String(L"displayName",11),this->m_friendlyName);
	bb_logger_Debug->p_WriteLine2(String(L"Placed ",7)+t_displayName+String(L" at ",4)+((new c_Point)->m_new(t_xVal,t_yVal))->p_ToString());
}
void c_Enemy::p_Init4(int t_xVal,int t_yVal,int t_l,String t_name,String t_overrideSpriteName){
	this->p_Init3(t_xVal,t_yVal,t_l,t_name,t_overrideSpriteName,-1,-1);
}
void c_Enemy::p_Init5(int t_xVal,int t_yVal,int t_l,String t_name){
	this->p_Init4(t_xVal,t_yVal,t_l,t_name,String());
}
int c_Enemy::m_GetNumStairLockingMinibosses(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Enemy.GetNumStairLockingMinibosses()",36));
	return 0;
}
bool c_Enemy::m_killingAllEnemies;
int c_Enemy::m_GetNumPenaltyBoxMinibosses(){
	int t_numPenaltyBoxMinibosses=0;
	c_Enumerator4* t_=m_enemyList->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Enemy* t_enemy=t_->p_NextObject();
		if(t_enemy->m_inPenaltyBox && t_enemy->m_isMiniboss){
			t_numPenaltyBoxMinibosses+=1;
		}
	}
	return t_numPenaltyBoxMinibosses;
}
void c_Enemy::p_Delete(){
	if(!this->m_dead){
		m_enemyList->p_RemoveEach5(this);
		c_Entity::p_Die();
	}
}
void c_Enemy::p_Die(){
	if(this->m_isStairLockingMiniboss && this->m_health<=0){
		if(m_GetNumStairLockingMinibosses()==1){
			c_Player::m_PlayVOPlayer1(String(L"Yeah",4));
		}
	}else{
		if(c_Util::m_IsCharacterActive(6)){
			if(!m_killingAllEnemies && this->m_health<=0){
				if(c_Audio::m_GetClosestBeatNum(true)>5){
					Float t_dist=c_Util::m_GetDistFromClosestPlayer(this->m_x,this->m_y,false);
					if(t_dist<=FLOAT(8.0)){
					}
				}
			}
		}
	}
	if(this->m_inPenaltyBox && this->m_isMiniboss && m_GetNumPenaltyBoxMinibosses()==1){
		c_Level::m_ClearMinibossWall();
	}
	c_Point* t_location=this->p_GetLocation();
	if(this->m_isLord && this->m_coinsToDrop>0){
		if(this->m_dropLordScroll){
			(new c_Item)->m_new(t_location->m_x,t_location->m_y,String(L"scroll_gigantism",16),false,-1,false);
		}else{
			Float t_numCoins=Float(this->m_killCoinMultiplier)*FLOAT(24.0);
			(new c_Item)->m_new(t_location->m_x,t_location->m_y,String(L"resource_coin0",14),false,int(t_numCoins),false);
		}
	}else{
		if((this->m_coinsToDrop)!=0){
			int t_numCoins2=this->m_coinsToDrop;
			t_numCoins2+=this->m_bonusCoinsToDrop;
			t_numCoins2*=bb_controller_game_numPlayers;
			t_numCoins2*=this->m_killCoinMultiplier;
			t_numCoins2+=this->m_ringOfGoldCoinsToDrop;
			if(c_Level::m_enemiesDropSingleCoinForThisLevel){
				t_numCoins2=1;
			}
			if(t_numCoins2>0 && (!this->m_dropNoCoinsOverride || c_Util::m_IsCharacterActive(5) || c_Util::m_IsCharacterActive(7))){
				c_Item::m_CreateAmountOfCoins(t_location->m_x,t_location->m_y,t_numCoins2);
			}
		}
	}
	if(this->m_deathTrigger!=0){
		c_Level::m_ActivateTrigger(this->m_deathTrigger,0,0);
	}
	this->p_Delete();
}
c_Enemy* c_Enemy::m_MakeEnemy1(int t_xVal,int t_yVal,int t_type){
	c_Enemy* t_enemy=0;
	int t_12=t_type;
	if(t_12==0){
		t_enemy=((new c_Slime)->m_new(t_xVal,t_yVal,1));
	}else{
		if(t_12==1){
			t_enemy=((new c_Slime)->m_new(t_xVal,t_yVal,2));
		}else{
			if(t_12==2){
				t_enemy=((new c_Slime)->m_new(t_xVal,t_yVal,3));
			}else{
				if(t_12==3){
					t_enemy=((new c_Skeleton)->m_new(t_xVal,t_yVal,1));
				}else{
					if(t_12==4){
						t_enemy=((new c_Skeleton)->m_new(t_xVal,t_yVal,2));
					}else{
						if(t_12==5){
							t_enemy=((new c_Skeleton)->m_new(t_xVal,t_yVal,3));
						}else{
							if(t_12==6){
								t_enemy=((new c_Bat)->m_new(t_xVal,t_yVal,1));
							}else{
								if(t_12==7){
									t_enemy=((new c_Bat)->m_new(t_xVal,t_yVal,2));
								}else{
									if(t_12==8){
										t_enemy=((new c_Bat)->m_new(t_xVal,t_yVal,3));
									}else{
										if(t_12==9){
											t_enemy=((new c_Monkey)->m_new(t_xVal,t_yVal,1));
										}else{
											if(t_12==10){
												t_enemy=((new c_Monkey)->m_new(t_xVal,t_yVal,2));
											}else{
												if(t_12==11){
													t_enemy=((new c_Ghost)->m_new(t_xVal,t_yVal,1));
												}else{
													if(t_12==12){
														t_enemy=((new c_Zombie)->m_new(t_xVal,t_yVal,1));
													}else{
														if(t_12==13){
															t_enemy=((new c_Wraith)->m_new(t_xVal,t_yVal,1));
														}else{
															if(t_12==14){
																t_enemy=((new c_TrapChest)->m_new(t_xVal,t_yVal,1));
															}else{
																if(t_12==15){
																	t_enemy=((new c_TrapChest)->m_new(t_xVal,t_yVal,2));
																}else{
																	if(t_12==16){
																		t_enemy=((new c_TrapChest)->m_new(t_xVal,t_yVal,3));
																	}else{
																		if(t_12==100){
																			t_enemy=((new c_ArmoredSkeleton)->m_new(t_xVal,t_yVal,1));
																		}else{
																			if(t_12==101){
																				t_enemy=((new c_ArmoredSkeleton)->m_new(t_xVal,t_yVal,2));
																			}else{
																				if(t_12==102){
																					t_enemy=((new c_ArmoredSkeleton)->m_new(t_xVal,t_yVal,3));
																				}else{
																					if(t_12==103){
																						t_enemy=((new c_SkeletonMage)->m_new(t_xVal,t_yVal,1));
																					}else{
																						if(t_12==104){
																							t_enemy=((new c_SkeletonMage)->m_new(t_xVal,t_yVal,2));
																						}else{
																							if(t_12==105){
																								t_enemy=((new c_SkeletonMage)->m_new(t_xVal,t_yVal,3));
																							}else{
																								if(t_12==106){
																									t_enemy=((new c_Mushroom)->m_new(t_xVal,t_yVal,1));
																								}else{
																									if(t_12==107){
																										t_enemy=((new c_Mushroom)->m_new(t_xVal,t_yVal,2));
																									}else{
																										if(t_12==108){
																											t_enemy=((new c_Golem)->m_new(t_xVal,t_yVal,1));
																										}else{
																											if(t_12==109){
																												t_enemy=((new c_Golem)->m_new(t_xVal,t_yVal,2));
																											}else{
																												if(t_12==110){
																													t_enemy=((new c_Armadillo)->m_new(t_xVal,t_yVal,1));
																												}else{
																													if(t_12==111){
																														t_enemy=((new c_Armadillo)->m_new(t_xVal,t_yVal,2));
																													}else{
																														if(t_12==112){
																															t_enemy=((new c_Clone)->m_new(t_xVal,t_yVal,1));
																														}else{
																															if(t_12==113){
																																t_enemy=((new c_TarMonster)->m_new(t_xVal,t_yVal,1));
																															}else{
																																if(t_12==114){
																																	t_enemy=((new c_Mole)->m_new(t_xVal,t_yVal,1));
																																}else{
																																	if(t_12==115){
																																		t_enemy=((new c_Wight)->m_new(t_xVal,t_yVal,1));
																																	}else{
																																		if(t_12==116){
																																			t_enemy=((new c_FakeWall)->m_new(t_xVal,t_yVal,1));
																																		}else{
																																			if(t_12==117){
																																				t_enemy=((new c_MushroomLight)->m_new(t_xVal,t_yVal,1,true,false));
																																			}else{
																																				if(t_12==118){
																																					t_enemy=((new c_MushroomLight)->m_new(t_xVal,t_yVal,1,false,true));
																																				}else{
																																					if(t_12==200){
																																						t_enemy=((new c_Slime)->m_new(t_xVal,t_yVal,5));
																																					}else{
																																						if(t_12==201){
																																							t_enemy=((new c_Slime)->m_new(t_xVal,t_yVal,4));
																																						}else{
																																							if(t_12==202){
																																								t_enemy=((new c_SkeletonKnight)->m_new(t_xVal,t_yVal,1));
																																							}else{
																																								if(t_12==203){
																																									t_enemy=((new c_SkeletonKnight)->m_new(t_xVal,t_yVal,2));
																																								}else{
																																									if(t_12==204){
																																										t_enemy=((new c_SkeletonKnight)->m_new(t_xVal,t_yVal,3));
																																									}else{
																																										if(t_12==205){
																																											t_enemy=((new c_FireElemental)->m_new(t_xVal,t_yVal,1));
																																										}else{
																																											if(t_12==206){
																																												t_enemy=((new c_IceElemental)->m_new(t_xVal,t_yVal,1));
																																											}else{
																																												if(t_12==207){
																																													t_enemy=((new c_Goblin)->m_new(t_xVal,t_yVal,1));
																																												}else{
																																													if(t_12==208){
																																														t_enemy=((new c_Goblin)->m_new(t_xVal,t_yVal,2));
																																													}else{
																																														if(t_12==209){
																																															t_enemy=((new c_Beetle)->m_new(t_xVal,t_yVal,1));
																																														}else{
																																															if(t_12==210){
																																																t_enemy=((new c_Beetle)->m_new(t_xVal,t_yVal,2));
																																															}else{
																																																if(t_12==211){
																																																	t_enemy=((new c_Hellhound)->m_new(t_xVal,t_yVal,1));
																																																}else{
																																																	if(t_12==212){
																																																		t_enemy=((new c_ShoveMonster)->m_new(t_xVal,t_yVal,1));
																																																	}else{
																																																		if(t_12==219){
																																																			t_enemy=((new c_ShoveMonster)->m_new(t_xVal,t_yVal,2));
																																																		}else{
																																																			if(t_12==213){
																																																				t_enemy=((new c_Yeti)->m_new(t_xVal,t_yVal,1));
																																																			}else{
																																																				if(t_12==214){
																																																					t_enemy=((new c_Ghast)->m_new(t_xVal,t_yVal,1));
																																																				}else{
																																																					if(t_12==215){
																																																						t_enemy=((new c_TrapCauldron)->m_new(t_xVal,t_yVal,1));
																																																					}else{
																																																						if(t_12==216){
																																																							t_enemy=((new c_TrapCauldron)->m_new(t_xVal,t_yVal,2));
																																																						}else{
																																																							if(t_12==217){
																																																								t_enemy=((new c_Cauldron)->m_new(t_xVal,t_yVal,1));
																																																							}else{
																																																								if(t_12==218){
																																																									t_enemy=((new c_Cauldron)->m_new(t_xVal,t_yVal,2));
																																																								}else{
																																																									if(t_12==300){
																																																										t_enemy=((new c_GoblinBomber)->m_new(t_xVal,t_yVal,1));
																																																									}else{
																																																										if(t_12==301){
																																																											t_enemy=((new c_SleepingGoblin)->m_new(t_xVal,t_yVal,1));
																																																										}else{
																																																											if(t_12==302){
																																																												t_enemy=((new c_Bat)->m_new(t_xVal,t_yVal,4));
																																																											}else{
																																																												if(t_12==303){
																																																													t_enemy=((new c_Armadillo)->m_new(t_xVal,t_yVal,3));
																																																												}else{
																																																													if(t_12==304){
																																																														t_enemy=((new c_Blademaster)->m_new(t_xVal,t_yVal,1));
																																																													}else{
																																																														if(t_12==305){
																																																															t_enemy=((new c_Blademaster)->m_new(t_xVal,t_yVal,2));
																																																														}else{
																																																															if(t_12==306){
																																																																t_enemy=((new c_Ghoul)->m_new(t_xVal,t_yVal,1));
																																																															}else{
																																																																if(t_12==307){
																																																																	t_enemy=((new c_Golem)->m_new(t_xVal,t_yVal,3));
																																																																}else{
																																																																	if(t_12==308){
																																																																		t_enemy=((new c_Harpy)->m_new(t_xVal,t_yVal,1));
																																																																	}else{
																																																																		if(t_12==309){
																																																																			t_enemy=((new c_Lich)->m_new(t_xVal,t_yVal,1));
																																																																		}else{
																																																																			if(t_12==310){
																																																																				t_enemy=((new c_Lich)->m_new(t_xVal,t_yVal,2));
																																																																			}else{
																																																																				if(t_12==311){
																																																																					t_enemy=((new c_Lich)->m_new(t_xVal,t_yVal,3));
																																																																				}else{
																																																																					if(t_12==312){
																																																																						t_enemy=((new c_Monkey)->m_new(t_xVal,t_yVal,3));
																																																																					}else{
																																																																						if(t_12==313){
																																																																							t_enemy=((new c_Monkey)->m_new(t_xVal,t_yVal,4));
																																																																						}else{
																																																																							if(t_12==314){
																																																																								t_enemy=((new c_Pixie)->m_new(t_xVal,t_yVal,1));
																																																																							}else{
																																																																								if(t_12==315){
																																																																									t_enemy=((new c_Sarcophagus)->m_new(t_xVal,t_yVal,1));
																																																																								}else{
																																																																									if(t_12==316){
																																																																										t_enemy=((new c_Sarcophagus)->m_new(t_xVal,t_yVal,2));
																																																																									}else{
																																																																										if(t_12==317){
																																																																											t_enemy=((new c_Sarcophagus)->m_new(t_xVal,t_yVal,3));
																																																																										}else{
																																																																											if(t_12==318){
																																																																												t_enemy=((new c_Spider)->m_new(t_xVal,t_yVal,1));
																																																																											}else{
																																																																												if(t_12==319){
																																																																													t_enemy=((new c_Warlock)->m_new(t_xVal,t_yVal,1));
																																																																												}else{
																																																																													if(t_12==320){
																																																																														t_enemy=((new c_Warlock)->m_new(t_xVal,t_yVal,2));
																																																																													}else{
																																																																														if(t_12==321){
																																																																															t_enemy=((new c_Mummy)->m_new(t_xVal,t_yVal,1));
																																																																														}else{
																																																																															if(t_12==322){
																																																																																t_enemy=((new c_Gargoyle)->m_new(t_xVal,t_yVal,1));
																																																																															}else{
																																																																																if(t_12==323){
																																																																																	t_enemy=((new c_Gargoyle)->m_new(t_xVal,t_yVal,2));
																																																																																}else{
																																																																																	if(t_12==324){
																																																																																		t_enemy=((new c_Gargoyle)->m_new(t_xVal,t_yVal,3));
																																																																																	}else{
																																																																																		if(t_12==325){
																																																																																			t_enemy=((new c_Gargoyle)->m_new(t_xVal,t_yVal,4));
																																																																																		}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return t_enemy;
}
c_Enemy* c_Enemy::m_MakeEnemy2(int t_xVal,int t_yVal,int t_type){
	c_Enemy* t_enemy=0;
	int t_13=t_type;
	if(t_13==326){
		t_enemy=((new c_Gargoyle)->m_new(t_xVal,t_yVal,5));
	}else{
		if(t_13==327){
			t_enemy=((new c_Gargoyle)->m_new(t_xVal,t_yVal,6));
		}else{
			if(t_13==400){
				t_enemy=((new c_BatMiniboss)->m_new(t_xVal,t_yVal,1));
			}else{
				if(t_13==401){
					t_enemy=((new c_BatMiniboss)->m_new(t_xVal,t_yVal,2));
				}else{
					if(t_13==402){
						t_enemy=((new c_Dragon)->m_new(t_xVal,t_yVal,1));
					}else{
						if(t_13==403){
							t_enemy=((new c_Dragon)->m_new(t_xVal,t_yVal,2));
						}else{
							if(t_13==404){
								t_enemy=((new c_Dragon)->m_new(t_xVal,t_yVal,3));
							}else{
								if(t_13==405){
									t_enemy=((new c_Banshee)->m_new(t_xVal,t_yVal,1));
								}else{
									if(t_13==406){
										t_enemy=((new c_Banshee)->m_new(t_xVal,t_yVal,2));
									}else{
										if(t_13==407){
											t_enemy=((new c_Minotaur)->m_new(t_xVal,t_yVal,1));
										}else{
											if(t_13==408){
												t_enemy=((new c_Minotaur)->m_new(t_xVal,t_yVal,2));
											}else{
												if(t_13==409){
													t_enemy=((new c_Nightmare)->m_new(t_xVal,t_yVal,1));
												}else{
													if(t_13==410){
														t_enemy=((new c_Nightmare)->m_new(t_xVal,t_yVal,2));
													}else{
														if(t_13==411){
															t_enemy=((new c_Mommy)->m_new(t_xVal,t_yVal,1));
														}else{
															if(t_13==412){
																t_enemy=((new c_Ogre)->m_new(t_xVal,t_yVal,1));
															}else{
																if(t_13==413){
																	t_enemy=((new c_MetroGnome)->m_new(t_xVal,t_yVal,1));
																}else{
																	if(t_13==414){
																		t_enemy=((new c_MetroGnome)->m_new(t_xVal,t_yVal,2));
																	}else{
																		if(t_13==415){
																			t_enemy=((new c_Dragon)->m_new(t_xVal,t_yVal,4));
																		}else{
																			if(t_13==600){
																				t_enemy=((new c_Shopkeeper)->m_new(t_xVal,t_yVal,1,false));
																			}else{
																				if(t_13==601){
																					t_enemy=((new c_Shopkeeper)->m_new(t_xVal,t_yVal,2,false));
																				}else{
																					if(t_13==602){
																						t_enemy=((new c_Shopkeeper)->m_new(t_xVal,t_yVal,3,false));
																					}else{
																						if(t_13==603){
																							t_enemy=((new c_Shopkeeper)->m_new(t_xVal,t_yVal,4,false));
																						}else{
																							if(t_13==604){
																								t_enemy=((new c_ShopkeeperGhost)->m_new(t_xVal,t_yVal,1));
																							}else{
																								if(t_13==605){
																									t_enemy=((new c_Shopkeeper)->m_new(t_xVal,t_yVal,5,false));
																								}else{
																									if(t_13==700){
																										t_enemy=((new c_Skeleton)->m_new(t_xVal,t_yVal,4));
																									}else{
																										if(t_13==701){
																											t_enemy=((new c_Skull)->m_new(t_xVal,t_yVal,1));
																										}else{
																											if(t_13==712){
																												t_enemy=((new c_Skull)->m_new(t_xVal,t_yVal,2));
																											}else{
																												if(t_13==713){
																													t_enemy=((new c_Skull)->m_new(t_xVal,t_yVal,3));
																												}else{
																													if(t_13==714){
																														t_enemy=((new c_Skull)->m_new(t_xVal,t_yVal,4));
																													}else{
																														if(t_13==504){
																															t_enemy=((new c_Fortissimole)->m_new(t_xVal,t_yVal,1));
																														}else{
																															if(t_13==800){
																																t_enemy=((new c_Pawn)->m_new(t_xVal,t_yVal,1));
																															}else{
																																if(t_13==801){
																																	t_enemy=((new c_Pawn)->m_new(t_xVal,t_yVal,2));
																																}else{
																																	if(t_13==802){
																																		t_enemy=((new c_Knight)->m_new(t_xVal,t_yVal,1));
																																	}else{
																																		if(t_13==803){
																																			t_enemy=((new c_Knight)->m_new(t_xVal,t_yVal,2));
																																		}else{
																																			if(t_13==804){
																																				t_enemy=((new c_Bishop)->m_new(t_xVal,t_yVal,1));
																																			}else{
																																				if(t_13==805){
																																					t_enemy=((new c_Bishop)->m_new(t_xVal,t_yVal,2));
																																				}else{
																																					if(t_13==806){
																																						t_enemy=((new c_Rook)->m_new(t_xVal,t_yVal,1));
																																					}else{
																																						if(t_13==807){
																																							t_enemy=((new c_Rook)->m_new(t_xVal,t_yVal,2));
																																						}else{
																																							if(t_13==808){
																																								t_enemy=((new c_Queen)->m_new(t_xVal,t_yVal,1));
																																							}else{
																																								if(t_13==809){
																																									t_enemy=((new c_Queen)->m_new(t_xVal,t_yVal,2));
																																								}else{
																																									if(t_13==702){
																																										t_enemy=((new c_WaterBall)->m_new(t_xVal,t_yVal,1));
																																									}else{
																																										if(t_13==704){
																																											t_enemy=((new c_ElectricMage)->m_new(t_xVal,t_yVal,1));
																																										}else{
																																											if(t_13==705){
																																												t_enemy=((new c_ElectricMage)->m_new(t_xVal,t_yVal,2));
																																											}else{
																																												if(t_13==706){
																																													t_enemy=((new c_ElectricMage)->m_new(t_xVal,t_yVal,3));
																																												}else{
																																													if(t_13==710){
																																														t_enemy=((new c_Gorgon)->m_new(t_xVal,t_yVal,1));
																																													}else{
																																														if(t_13==711){
																																															t_enemy=((new c_ZombieElectric)->m_new(t_xVal,t_yVal,1));
																																														}else{
																																															if(t_13==715){
																																																t_enemy=((new c_ArmoredSkeleton)->m_new(t_xVal,t_yVal,4));
																																															}else{
																																																if(t_13==716){
																																																	t_enemy=((new c_SkeletonKnight)->m_new(t_xVal,t_yVal,4));
																																																}else{
																																																	if(t_13==717){
																																																		t_enemy=((new c_EvilEye)->m_new(t_xVal,t_yVal,1));
																																																	}else{
																																																		if(t_13==718){
																																																			t_enemy=((new c_Gorgon)->m_new(t_xVal,t_yVal,2));
																																																		}else{
																																																			if(t_13==719){
																																																				t_enemy=((new c_EvilEye)->m_new(t_xVal,t_yVal,2));
																																																			}else{
																																																				if(t_13==720){
																																																					t_enemy=((new c_Orc)->m_new(t_xVal,t_yVal,1));
																																																				}else{
																																																					if(t_13==721){
																																																						t_enemy=((new c_Orc)->m_new(t_xVal,t_yVal,2));
																																																					}else{
																																																						if(t_13==722){
																																																							t_enemy=((new c_Orc)->m_new(t_xVal,t_yVal,3));
																																																						}else{
																																																							if(t_13==723){
																																																								t_enemy=((new c_Devil)->m_new(t_xVal,t_yVal,1));
																																																							}else{
																																																								if(t_13==724){
																																																									t_enemy=((new c_Devil)->m_new(t_xVal,t_yVal,2));
																																																								}else{
																																																									if(t_13==725){
																																																										t_enemy=((new c_Slime)->m_new(t_xVal,t_yVal,6));
																																																									}else{
																																																										if(t_13==726){
																																																											t_enemy=((new c_Wraith)->m_new(t_xVal,t_yVal,2));
																																																										}else{
																																																											if(t_13==727){
																																																												t_enemy=((new c_TrapChest)->m_new(t_xVal,t_yVal,4));
																																																											}else{
																																																												if(t_13==728){
																																																													t_enemy=((new c_FakeWall)->m_new(t_xVal,t_yVal,2));
																																																												}else{
																																																													if(t_13==729){
																																																														t_enemy=((new c_Slime)->m_new(t_xVal,t_yVal,7));
																																																													}else{
																																																														if(t_13==730){
																																																															t_enemy=((new c_Slime)->m_new(t_xVal,t_yVal,8));
																																																														}else{
																																																															if(t_13==731){
																																																																t_enemy=((new c_TrapChest)->m_new(t_xVal,t_yVal,5));
																																																															}else{
																																																																if(t_13==732){
																																																																	t_enemy=((new c_TrapChest)->m_new(t_xVal,t_yVal,6));
																																																																}else{
																																																																	if(t_13==733){
																																																																		t_enemy=((new c_WaterBall)->m_new(t_xVal,t_yVal,2));
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return t_enemy;
}
c_Enemy* c_Enemy::m_MakeEnemy(int t_xVal,int t_yVal,int t_type){
	c_Enemy* t_enemy=0;
	t_enemy=m_MakeEnemy1(t_xVal,t_yVal,t_type);
	if(t_enemy!=0){
		return t_enemy;
	}
	t_enemy=m_MakeEnemy2(t_xVal,t_yVal,t_type);
	if(t_enemy!=0){
		return t_enemy;
	}
	return ((new c_Slime)->m_new(t_xVal,t_yVal,1));
}
void c_Enemy::p_AdjustLordImage(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Enemy.AdjustLordImage()",23));
}
void c_Enemy::p_MakeLord(){
	this->m_healthMax*=2;
	this->m_health*=2;
	this->m_damagePerHit*=2;
	this->m_isLord=true;
	this->m_isMassive=true;
	int t_dropLordScrollRoll=c_Util::m_RndIntRangeFromZero(2,true);
	this->m_dropLordScroll=t_dropLordScrollRoll==0;
	this->p_AdjustLordImage();
}
c_Enemy* c_Enemy::m_GetEnemyAt(int t_xVal,int t_yVal,bool t_includeFalling){
	c_Enumerator4* t_=m_enemyList->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Enemy* t_enemy=t_->p_NextObject();
		if(t_enemy->m_x<=t_xVal && t_xVal<t_enemy->m_x+t_enemy->m_width && (t_enemy->m_y<=t_yVal && t_yVal<t_enemy->m_y+t_enemy->m_height)){
			if(t_includeFalling || !t_enemy->m_falling){
				return t_enemy;
			}
		}
	}
	return 0;
}
int c_Enemy::m_GetBaseType(int t_fullType){
	c_XMLNode* t_enemiesNode=bb_necrodancergame_xmlData->p_GetChildAtPath(String(L"enemies",7));
	String t_enemyName=String();
	c_Enumerator3* t_=t_enemiesNode->p_GetChildrenWithAttributes(String(L"id=",3)+String(t_fullType),0,false)->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_XMLNode* t_enemyNode=t_->p_NextObject();
		t_enemyName=t_enemyNode->p_name();
	}
	bb_logger_Debug->p_Assert(t_enemyName!=String(),String());
	int t_baseType=-1;
	c_Enumerator3* t_2=t_enemiesNode->p_GetChildren3(t_enemyName,String(L"type=1",6),0,false)->p_ObjectEnumerator();
	while(t_2->p_HasNext()){
		c_XMLNode* t_enemyNode2=t_2->p_NextObject();
		bb_logger_Debug->p_Assert(t_enemyNode2->p_HasAttribute(String(L"id",2)),String());
		t_baseType=t_enemyNode2->p_GetAttribute3(String(L"id",2),-1);
	}
	bb_logger_Debug->p_Assert(t_baseType!=-1,String());
	return t_baseType;
}
void c_Enemy::m_CullEnemiesDownTo(int t_cullNum){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Enemy.CullEnemiesDownTo(Int)",28));
}
bool c_Enemy::p_CanBeLord(){
	return !this->m_isMiniboss && !this->m_isLord && this->m_beatsPerMove>1;
}
void c_Enemy::m_CreateLord(){
	for(int t_limit=501;t_limit>0;t_limit=t_limit+-1){
		int t_enemyIndex=c_Util::m_RndIntRangeFromZero(m_enemyList->p_Count()-1,true);
		Array<c_Enemy* > t_enemyArray=m_enemyList->p_ToArray();
		c_Enemy* t_enemy=t_enemyArray[t_enemyIndex];
		if(t_enemy->p_CanBeLord()){
			t_enemy->p_MakeLord();
			return;
		}
	}
}
void c_Enemy::p_Cull(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Enemy.Cull()",12));
}
void c_Enemy::m_MoveSwarmEnemiesAwayFromStartLocation(){
	c_Enumerator4* t_=m_enemyList->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Enemy* t_enemy=t_->p_NextObject();
		if(!t_enemy->m_swarmCulprit){
			continue;
		}
		int t_xOff=0;
		int t_yOff=0;
		if(bb_math_Abs(t_enemy->m_x)>bb_math_Abs(t_enemy->m_y)){
			if(t_enemy->m_x<0){
				t_xOff=-1;
			}else{
				t_xOff=1;
			}
		}else{
			if(t_enemy->m_y<0){
				t_yOff=-1;
			}else{
				t_yOff=1;
			}
		}
		int t_x=t_enemy->m_x;
		int t_y=t_enemy->m_y;
		int t_originalX=t_x;
		int t_originalY=t_y;
		do{
			t_enemy->m_x=t_x;
			t_enemy->m_y=t_y;
			t_x+=t_xOff;
			t_y+=t_yOff;
		}while(!(c_Util::m_IsGlobalCollisionAt2(t_x,t_y,false,false,false,false) || c_Trap::m_IsLiveTrapAt(t_x,t_y)));
		if(t_enemy->m_x!=t_originalX || t_enemy->m_y!=t_originalY){
			c_XMLNode* t_enemyNode=m_GetEnemyXML(t_enemy->m_xmlName,t_enemy->m_level);
			String t_displayName=t_enemyNode->p_GetAttribute5(String(L"displayName",11),t_enemy->m_friendlyName);
			bb_logger_Debug->p_WriteLine2(String(L"Moved ",6)+t_displayName+String(L" from ",6)+((new c_Point)->m_new(t_originalX,t_originalY))->p_ToString()+String(L" to ",4)+((new c_Point)->m_new(t_enemy->m_x,t_enemy->m_y))->p_ToString());
		}
	}
}
void c_Enemy::m_SetAllEnemiesMinimumMoveDistance(int t_dist){
	c_Enumerator4* t_=m_enemyList->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Enemy* t_enemy=t_->p_NextObject();
		t_enemy->m_minEnemyMoveDistance=5;
	}
}
void c_Enemy::m_StartRandomizerRun(){
	c_XMLNode* t_enemiesNode=bb_necrodancergame_xmlData->p_GetChildAtPath(String(L"enemies",7));
	String t_enemiesXMLStr=t_enemiesNode->p_Export(1);
	gc_assign(m_randomizerXML,bb_xml_ParseXML(t_enemiesXMLStr,0,1));
	c_Enumerator3* t_=m_randomizerXML->p_GetChildren(0,false)->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_XMLNode* t_enemyNode=t_->p_NextObject();
		String t_14=t_enemyNode->p_name();
		if(t_14==String(L"crate",5) || t_14==String(L"bell",4) || t_14==String(L"conductor",9) || t_14==String(L"conductor_battery",17) || t_14==String(L"conductor_prop",14) || t_14==String(L"frankensteinway",15) || t_14==String(L"frankensteinway_prop",20) || t_14==String(L"dead_ringer",11) || t_14==String(L"lute_dragon",11) || t_14==String(L"lute_head",9) || t_14==String(L"necrodancer",11) || t_14==String(L"fortissimole",12) || t_14==String(L"medic",5)){
			continue;
		}
		c_XMLNode* t_statsNode=t_enemyNode->p_GetChild2(String(L"stats",5),false);
		c_XMLNode* t_optionalStatsNode=t_enemyNode->p_GetChild2(String(L"optionalStats",13),false);
		if(t_optionalStatsNode==t_enemyNode->m_doc->m_nullNode){
			t_optionalStatsNode=t_enemyNode->p_AddChild(String(L"optionalStats",13),String(),String());
		}
		int t_beatsPerMoveRoll=c_Util::m_RndIntRangeFromZero(99,true);
		if(t_enemyNode->p_name()==String(L"pawn",4)){
			t_beatsPerMoveRoll+=30;
		}
		int t_beatsPerMove=0;
		if(t_beatsPerMoveRoll<30 && t_enemyNode->p_name()!=String(L"yeti",4) && t_enemyNode->p_name()!=String(L"mushroom",8)){
			t_beatsPerMove=1;
		}else{
			if(t_beatsPerMoveRoll<70){
				t_beatsPerMove=2;
			}else{
				if(t_beatsPerMoveRoll<90){
					t_beatsPerMove=3;
				}else{
					t_beatsPerMove=4;
				}
			}
		}
		t_statsNode->p_SetAttribute3(String(L"beatsPerMove",12),t_beatsPerMove);
		int t_coinsToDrop=0;
		String t_15=t_enemyNode->p_name();
		if(t_15==String(L"mummy",5) || t_15==String(L"electric_orb",12)){
			t_coinsToDrop=0;
		}else{
			t_coinsToDrop=c_Util::m_RndIntRange(1,9,true,-1);
		}
		t_statsNode->p_SetAttribute3(String(L"coinsToDrop",11),t_coinsToDrop);
		int t_damagePerHitRoll=c_Util::m_RndIntRangeFromZero(99,true);
		String t_isMiniboss=t_optionalStatsNode->p_GetAttribute(String(L"miniboss",8));
		String t_isBoss=t_optionalStatsNode->p_GetAttribute(String(L"boss",4));
		if(((t_isMiniboss).Length()!=0) || ((t_isBoss).Length()!=0)){
			t_damagePerHitRoll+=20;
		}
		int t_damagePerHit=0;
		if(t_damagePerHitRoll<30){
			t_damagePerHit=1;
		}else{
			if(t_damagePerHitRoll<50){
				t_damagePerHit=2;
			}else{
				if(t_damagePerHitRoll<70){
					t_damagePerHit=3;
				}else{
					if(t_damagePerHitRoll<80){
						t_damagePerHit=4;
					}else{
						if(t_damagePerHitRoll<90){
							t_damagePerHit=5;
						}else{
							t_damagePerHit=6;
						}
					}
				}
			}
		}
		t_statsNode->p_SetAttribute3(String(L"damagePerHit",12),t_damagePerHit);
		int t_enemyType=t_enemyNode->p_GetAttribute3(String(L"type",4),1);
		int t_health=0;
		if(t_beatsPerMove==1 || t_enemyNode->p_name()==String(L"shopkeeper",10) && (t_enemyType==4 || t_enemyType==9)){
			t_health=1;
		}else{
			int t_healthRoll=c_Util::m_RndIntRangeFromZero(99,true);
			if(t_enemyNode->p_name()==String(L"pawn",4)){
				t_healthRoll-=30;
			}else{
				if(((t_isMiniboss).Length()!=0) || ((t_isBoss).Length()!=0)){
					t_healthRoll+=15;
				}
			}
			if(t_healthRoll<50){
				t_health=1;
			}else{
				if(t_healthRoll<70){
					t_health=2;
				}else{
					if(t_healthRoll<80){
						t_health=3;
					}else{
						if(t_healthRoll<85){
							t_health=4;
						}else{
							if(t_healthRoll<90){
								t_health=5;
							}else{
								if(t_healthRoll<100){
									t_health=t_healthRoll-89;
								}else{
									t_health=t_healthRoll-99;
								}
							}
						}
					}
				}
			}
		}
		t_statsNode->p_SetAttribute3(String(L"health",6),t_health);
		int t_ignoreWallsRoll=c_Util::m_RndIntRangeFromZero(19,true);
		if(t_ignoreWallsRoll==0){
			t_optionalStatsNode->p_SetAttribute2(String(L"ignoreWalls",11),true);
		}
		int t_movementRoll=c_Util::m_RndIntRangeFromZero(99,true);
		String t_movement=String();
		if(t_movementRoll<50){
			t_movement=String(L"basicSeek",9);
		}else{
			if(t_movementRoll<65){
				t_movement=String(L"random",6);
			}else{
				if(t_movementRoll<85){
					t_movement=String(L"seekWithDiagonals",17);
				}else{
					t_movement=String(L"randomWithDiagonals",19);
				}
			}
		}
		t_statsNode->p_SetAttribute5(String(L"movement",8),t_movement);
		int t_miscellaneousAttributesRoll=c_Util::m_RndIntRangeFromZero(9,true);
		if(t_miscellaneousAttributesRoll==0){
			t_optionalStatsNode->p_SetAttribute2(String(L"floating",8),true);
			t_optionalStatsNode->p_SetAttribute2(String(L"bounceOnMovementFail",20),false);
			c_XMLNode* t_tweensNode=t_enemyNode->p_GetChild2(String(L"tweens",6),false);
			if(t_tweensNode==t_enemyNode->m_doc->m_nullNode){
				t_tweensNode=t_enemyNode->p_AddChild(String(L"tweens",6),String(),String());
			}
			t_tweensNode->p_SetAttribute5(String(L"move",4),String(L"slide",5));
			t_tweensNode->p_SetAttribute5(String(L"moveShadow",10),String(L"slide",5));
			t_tweensNode->p_SetAttribute5(String(L"hit",3),String(L"slide",5));
			t_tweensNode->p_SetAttribute5(String(L"hitShadow",9),String(L"slide",5));
			c_XMLNode* t_bouncerNode=t_enemyNode->p_GetChild2(String(L"bouncer",7),false);
			if(t_bouncerNode==t_enemyNode->m_doc->m_nullNode){
				t_bouncerNode=t_enemyNode->p_AddChild(String(L"bouncer",7),String(),String());
			}
			t_bouncerNode->p_SetAttribute4(String(L"min",3),FLOAT(-2.5));
			t_bouncerNode->p_SetAttribute3(String(L"max",3),0);
			t_bouncerNode->p_SetAttribute4(String(L"power",5),FLOAT(1.5));
			t_bouncerNode->p_SetAttribute3(String(L"steps",5),15);
		}else{
			t_optionalStatsNode->p_SetAttribute2(String(L"floating",8),false);
			t_optionalStatsNode->p_SetAttribute2(String(L"bounceOnMovementFail",20),true);
			c_XMLNode* t_tweensNode2=t_enemyNode->p_GetChild2(String(L"tweens",6),false);
			if(t_tweensNode2!=t_enemyNode->m_doc->m_nullNode){
				t_enemyNode->p_RemoveChild(t_tweensNode2);
			}
			c_XMLNode* t_bouncerNode2=t_enemyNode->p_GetChild2(String(L"bouncer",7),false);
			if(t_bouncerNode2!=t_enemyNode->m_doc->m_nullNode){
				t_enemyNode->p_RemoveChild(t_bouncerNode2);
			}
		}
	}
}
void c_Enemy::p_MakeDancer(){
	this->m_isDancer=true;
	this->m_shadowYOff-=8;
	this->m_yOff-=FLOAT(8.0);
	this->m_shadow->p_UnSetZ();
	this->m_shadow->p_SetZOff(this->m_image->m_zOff+FLOAT(24.0));
	this->m_image->p_SetZOff(this->m_image->m_zOff+FLOAT(124.0));
}
void c_Enemy::m_ApplyMonkeyPawAll(){
	c_Enumerator4* t_=m_enemyList->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Enemy* t_enemy=t_->p_NextObject();
		t_enemy->p_ApplyMonkeyPaw();
	}
}
String c_Enemy::m_GetEnemyNameHelper1(int t_type){
	String t_enemyName=String();
	int t_8=t_type;
	if(t_8==0){
		t_enemyName=String(L"Green Slime",11);
	}else{
		if(t_8==2){
			t_enemyName=String(L"Orange Slime",12);
		}else{
			if(t_8==3){
				t_enemyName=String(L"White Skeleton",14);
			}else{
				if(t_8==4){
					t_enemyName=String(L"Yellow Skeleton",15);
				}else{
					if(t_8==5){
						t_enemyName=String(L"Black Skeleton",14);
					}else{
						if(t_8==6){
							t_enemyName=String(L"Blue Bat",8);
						}else{
							if(t_8==7){
								t_enemyName=String(L"Red Bat",7);
							}else{
								if(t_8==8){
									t_enemyName=String(L"Green Bat",9);
								}else{
									if(t_8==9){
										t_enemyName=String(L"Purple Monkey",13);
									}else{
										if(t_8==10){
											t_enemyName=String(L"White Monkey",12);
										}else{
											if(t_8==11){
												t_enemyName=String(L"Ghost",5);
											}else{
												if(t_8==12){
													t_enemyName=String(L"Zombie",6);
												}else{
													if(t_8==13){
														t_enemyName=String(L"Wraith",6);
													}else{
														if(t_8==14){
															t_enemyName=String(L"Chest Mimic",11);
														}else{
															if(t_8==15){
																t_enemyName=String(L"Locked Chest Mimic",18);
															}else{
																if(t_8==16){
																	t_enemyName=String(L"White Chest Mimic",17);
																}else{
																	if(t_8==100){
																		t_enemyName=String(L"White Armored Skeleton",22);
																	}else{
																		if(t_8==101){
																			t_enemyName=String(L"Yellow Armored Skeleton",23);
																		}else{
																			if(t_8==102){
																				t_enemyName=String(L"Black Armored Skeleton",22);
																			}else{
																				if(t_8==103){
																					t_enemyName=String(L"White Skeleton Mage",19);
																				}else{
																					if(t_8==104){
																						t_enemyName=String(L"Yellow Skeleton Mage",20);
																					}else{
																						if(t_8==105){
																							t_enemyName=String(L"Black Skeleton Mage",19);
																						}else{
																							if(t_8==106){
																								t_enemyName=String(L"Blue Mushroom",13);
																							}else{
																								if(t_8==107){
																									t_enemyName=String(L"Purple Mushroom",15);
																								}else{
																									if(t_8==108){
																										t_enemyName=String(L"Light Golem",11);
																									}else{
																										if(t_8==109){
																											t_enemyName=String(L"Dark Golem",10);
																										}else{
																											if(t_8==110){
																												t_enemyName=String(L"White Armadillo",15);
																											}else{
																												if(t_8==111){
																													t_enemyName=String(L"Yellow Armadillo",16);
																												}else{
																													if(t_8==112){
																														t_enemyName=String(L"Clone",5);
																													}else{
																														if(t_8==113){
																															t_enemyName=String(L"Tarmonster",10);
																														}else{
																															if(t_8==114){
																																t_enemyName=String(L"Mole",4);
																															}else{
																																if(t_8==115){
																																	t_enemyName=String(L"Wight",5);
																																}else{
																																	if(t_8==116){
																																		t_enemyName=String(L"Wall Mimic",10);
																																	}else{
																																		if(t_8==117 || t_8==118){
																																			t_enemyName=String(L"Mushroom Light",14);
																																		}else{
																																			if(t_8==200){
																																				t_enemyName=String(L"Fire Slime",10);
																																			}else{
																																				if(t_8==201){
																																					t_enemyName=String(L"Ice Slime",9);
																																				}else{
																																					if(t_8==202){
																																						t_enemyName=String(L"White Skeleton Knight",21);
																																					}else{
																																						if(t_8==203){
																																							t_enemyName=String(L"Yellow Skeleton Knight",22);
																																						}else{
																																							if(t_8==204){
																																								t_enemyName=String(L"Black Skeleton Knight",21);
																																							}else{
																																								if(t_8==205){
																																									t_enemyName=String(L"Fire Elemental",14);
																																								}else{
																																									if(t_8==206){
																																										t_enemyName=String(L"Ice Elemental",13);
																																									}else{
																																										if(t_8==207){
																																											t_enemyName=String(L"Purple Goblin",13);
																																										}else{
																																											if(t_8==208){
																																												t_enemyName=String(L"Gray Goblin",11);
																																											}else{
																																												if(t_8==209){
																																													t_enemyName=String(L"Fire Beetle",11);
																																												}else{
																																													if(t_8==210){
																																														t_enemyName=String(L"Ice Beetle",10);
																																													}else{
																																														if(t_8==211){
																																															t_enemyName=String(L"Hellhound",9);
																																														}else{
																																															if(t_8==212){
																																																t_enemyName=String(L"Shovemonster",12);
																																															}else{
																																																if(t_8==219){
																																																	t_enemyName=String(L"Gray Shovemonster",17);
																																																}else{
																																																	if(t_8==213){
																																																		t_enemyName=String(L"Yeti",4);
																																																	}else{
																																																		if(t_8==214){
																																																			t_enemyName=String(L"Ghast",5);
																																																		}else{
																																																			if(t_8==215){
																																																				t_enemyName=String(L"Fire Cauldron Mimic",19);
																																																			}else{
																																																				if(t_8==216){
																																																					t_enemyName=String(L"Ice Cauldron Mimic",18);
																																																				}else{
																																																					if(t_8==217 || t_8==218){
																																																						t_enemyName=String(L"Cauldron",8);
																																																					}else{
																																																						if(t_8==300){
																																																							t_enemyName=String(L"Goblin Bomber",13);
																																																						}else{
																																																							if(t_8==301){
																																																								t_enemyName=String(L"Goblin Sentry",13);
																																																							}else{
																																																								if(t_8==302){
																																																									t_enemyName=String(L"Black Bat",9);
																																																								}else{
																																																									if(t_8==303){
																																																										t_enemyName=String(L"Orange Armadillo",16);
																																																									}else{
																																																										if(t_8==304){
																																																											t_enemyName=String(L"Apprentice Blademaster",22);
																																																										}else{
																																																											if(t_8==305){
																																																												t_enemyName=String(L"Blademaster",11);
																																																											}else{
																																																												if(t_8==306){
																																																													t_enemyName=String(L"Ghoul",5);
																																																												}else{
																																																													if(t_8==307){
																																																														t_enemyName=String(L"Ooze Golem",10);
																																																													}else{
																																																														if(t_8==308){
																																																															t_enemyName=String(L"Harpy",5);
																																																														}else{
																																																															if(t_8==309){
																																																																t_enemyName=String(L"Lich",4);
																																																															}else{
																																																																if(t_8==310){
																																																																	t_enemyName=String(L"Red Lich",8);
																																																																}else{
																																																																	if(t_8==311){
																																																																		t_enemyName=String(L"Black Lich",10);
																																																																	}else{
																																																																		if(t_8==312){
																																																																			t_enemyName=String(L"Green Monkey",12);
																																																																		}else{
																																																																			if(t_8==313){
																																																																				t_enemyName=String(L"Magic Monkey",12);
																																																																			}else{
																																																																				if(t_8==314){
																																																																					t_enemyName=String(L"Pixie",5);
																																																																				}else{
																																																																					if(t_8==315){
																																																																						t_enemyName=String(L"Sarcophagus",11);
																																																																					}else{
																																																																						if(t_8==316){
																																																																							t_enemyName=String(L"Yellow Sarcophagus",18);
																																																																						}else{
																																																																							if(t_8==317){
																																																																								t_enemyName=String(L"Black Sarcophagus",17);
																																																																							}else{
																																																																								if(t_8==318){
																																																																									t_enemyName=String(L"Spider",6);
																																																																								}else{
																																																																									if(t_8==319){
																																																																										t_enemyName=String(L"Warlock",7);
																																																																									}else{
																																																																										if(t_8==320){
																																																																											t_enemyName=String(L"Neon Warlock",12);
																																																																										}else{
																																																																											if(t_8==400){
																																																																												t_enemyName=String(L"Yellow Direbat",14);
																																																																											}else{
																																																																												if(t_8==401){
																																																																													t_enemyName=String(L"Brown Direbat",13);
																																																																												}else{
																																																																													if(t_8==402){
																																																																														t_enemyName=String(L"Green Dragon",12);
																																																																													}else{
																																																																														if(t_8==403){
																																																																															t_enemyName=String(L"Red Dragon",10);
																																																																														}else{
																																																																															if(t_8==404){
																																																																																t_enemyName=String(L"Blue Dragon",11);
																																																																															}else{
																																																																																if(t_8==405){
																																																																																	t_enemyName=String(L"Blue Banshee",12);
																																																																																}else{
																																																																																	if(t_8==406){
																																																																																		t_enemyName=String(L"Green Banshee",13);
																																																																																	}else{
																																																																																		if(t_8==407){
																																																																																			t_enemyName=String(L"Light Minotaur",14);
																																																																																		}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return t_enemyName;
}
String c_Enemy::m_GetEnemyNameHelper2(int t_type){
	String t_enemyName=String();
	int t_9=t_type;
	if(t_9==408){
		t_enemyName=String(L"Dark Minotaur",13);
	}else{
		if(t_9==409){
			t_enemyName=String(L"Dark Nightmare",14);
		}else{
			if(t_9==410){
				t_enemyName=String(L"Blood Nightmare",15);
			}else{
				if(t_9==411){
					t_enemyName=String(L"The Mommy",9);
				}else{
					if(t_9==412){
						t_enemyName=String(L"Ogre",4);
					}else{
						if(t_9==500){
							t_enemyName=String(L"King Conga",10);
						}else{
							if(t_9==501){
								t_enemyName=String(L"Death Metal",11);
							}else{
								if(t_9==502){
									t_enemyName=String(L"Deep Blues",10);
								}else{
									if(t_9==503){
										t_enemyName=String(L"Coral Riff",10);
									}else{
										if(t_9==504){
											t_enemyName=String(L"Fortissimole",12);
										}else{
											if(t_9==505){
												t_enemyName=String(L"Dead Ringer",11);
											}else{
												if(t_9==506 || t_9==507){
													t_enemyName=String(L"The Necrodancer",15);
												}else{
													if(t_9==508){
														t_enemyName=String(L"The Golden Lute",15);
													}else{
														if(t_9==509){
															t_enemyName=String(L"Frankensteinway",15);
														}else{
															if(t_9==510){
																t_enemyName=String(L"The Conductor",13);
															}else{
																if(t_9==600 || t_9==601 || t_9==602 || t_9==603){
																	t_enemyName=String(L"Shopkeeper",10);
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return t_enemyName;
}
String c_Enemy::m_GetEnemyNameHelper(int t_type){
	String t_enemyName=String();
	t_enemyName=m_GetEnemyNameHelper1(t_type);
	if(t_enemyName!=String()){
		return t_enemyName;
	}
	t_enemyName=m_GetEnemyNameHelper2(t_type);
	if(t_enemyName!=String()){
		return t_enemyName;
	}
	c_XMLNode* t_enemiesNode=bb_necrodancergame_xmlData->p_GetChildAtPath(String(L"enemies",7));
	c_List* t_enemyNodes=t_enemiesNode->p_GetChildrenWithAttributes(String(L"id=",3)+String(t_type),0,false);
	if(!t_enemyNodes->p_IsEmpty()){
		c_XMLNode* t_enemyNode=t_enemyNodes->p_First();
		t_enemyName=t_enemyNode->p_GetAttribute5(String(L"friendlyName",12),t_enemyNode->p_name());
	}else{
		t_enemyName=String(L"Unknown Enemy",13);
	}
	return t_enemyName;
}
String c_Enemy::m_AddTagsToEnemyName_Size1_1(String t_eName){
	String t_enemyName=String();
	String t_2=t_eName;
	if(t_2==String(L"WHITE ARMADILLO",15)){
		t_enemyName=String(L"|4000|WHITE ARMADILLO|",22);
	}else{
		if(t_2==String(L"YELLOW ARMADILLO",16)){
			t_enemyName=String(L"|4001|YELLOW ARMADILLO|",23);
		}else{
			if(t_2==String(L"ORANGE ARMADILLO",16)){
				t_enemyName=String(L"|4002|ORANGE ARMADILLO|",23);
			}else{
				if(t_2==String(L"WHITE ARMORED SKELETON",22)){
					t_enemyName=String(L"|4003|WHITE ARMORED SKELETON|",29);
				}else{
					if(t_2==String(L"YELLOW ARMORED SKELETON",23)){
						t_enemyName=String(L"|4004|YELLOW ARMORED SKELETON|",30);
					}else{
						if(t_2==String(L"BLACK ARMORED SKELETON",22)){
							t_enemyName=String(L"|4005|BLACK ARMORED SKELETON|",29);
						}else{
							if(t_2==String(L"BLUE BANSHEE",12)){
								t_enemyName=String(L"|4006|BLUE BANSHEE|",19);
							}else{
								if(t_2==String(L"GREEN BANSHEE",13)){
									t_enemyName=String(L"|4007|GREEN BANSHEE|",20);
								}else{
									if(t_2==String(L"BLUE BAT",8)){
										t_enemyName=String(L"|4008|BLUE BAT|",15);
									}else{
										if(t_2==String(L"RED BAT",7)){
											t_enemyName=String(L"|4009|RED BAT|",14);
										}else{
											if(t_2==String(L"GREEN BAT",9)){
												t_enemyName=String(L"|4010|GREEN BAT|",16);
											}else{
												if(t_2==String(L"BLACK BAT",9)){
													t_enemyName=String(L"|4011|BLACK BAT|",16);
												}else{
													if(t_2==String(L"YELLOW DIREBAT",14)){
														t_enemyName=String(L"|4012|YELLOW DIREBAT|",21);
													}else{
														if(t_2==String(L"BROWN DIREBAT",13)){
															t_enemyName=String(L"|4013|BROWN DIREBAT|",20);
														}else{
															if(t_2==String(L"FIRE BEETLE",11)){
																t_enemyName=String(L"|4014|FIRE BEETLE|",18);
															}else{
																if(t_2==String(L"ICE BEETLE",10)){
																	t_enemyName=String(L"|4015|ICE BEETLE|",17);
																}else{
																	if(t_2==String(L"BISHOP",6)){
																		t_enemyName=String(L"|4016|BISHOP|",13);
																	}else{
																		if(t_2==String(L"RED BISHOP",10)){
																			t_enemyName=String(L"|4017|RED BISHOP|",17);
																		}else{
																			if(t_2==String(L"APPRENTICE BLADEMASTER",22)){
																				t_enemyName=String(L"|4018|APPRENTICE BLADEMASTER|",29);
																			}else{
																				if(t_2==String(L"BLADEMASTER",11)){
																					t_enemyName=String(L"|4019|BLADEMASTER|",18);
																				}else{
																					if(t_2==String(L"CLONE",5)){
																						t_enemyName=String(L"|4020|CLONE|",12);
																					}else{
																						if(t_2==String(L"CORAL RIFF",10)){
																							t_enemyName=String(L"|4021|CORAL RIFF|",17);
																						}else{
																							if(t_2==String(L"BARREL",6)){
																								t_enemyName=String(L"|4022|BARREL|",13);
																							}else{
																								if(t_2==String(L"DEAD RINGER",11)){
																									t_enemyName=String(L"|4023|DEAD RINGER|",18);
																								}else{
																									if(t_2==String(L"DEATH METAL",11)){
																										t_enemyName=String(L"|4024|DEATH METAL|",18);
																									}else{
																										if(t_2==String(L"GREEN DRAGON",12)){
																											t_enemyName=String(L"|4025|GREEN DRAGON|",19);
																										}else{
																											if(t_2==String(L"RED DRAGON",10)){
																												t_enemyName=String(L"|4026|RED DRAGON|",17);
																											}else{
																												if(t_2==String(L"BLUE DRAGON",11)){
																													t_enemyName=String(L"|4027|BLUE DRAGON|",18);
																												}else{
																													if(t_2==String(L"WALL MIMIC",10)){
																														t_enemyName=String(L"|4028|WALL MIMIC|",17);
																													}else{
																														if(t_2==String(L"FIRE ELEMENTAL",14)){
																															t_enemyName=String(L"|4029|FIRE ELEMENTAL|",21);
																														}else{
																															if(t_2==String(L"GARGOYLE",8)){
																																t_enemyName=String(L"|4030|GARGOYLE|",15);
																															}else{
																																if(t_2==String(L"GHAST",5)){
																																	t_enemyName=String(L"|4031|GHAST|",12);
																																}else{
																																	if(t_2==String(L"GHOST",5)){
																																		t_enemyName=String(L"|4032|GHOST|",12);
																																	}else{
																																		if(t_2==String(L"GHOUL",5)){
																																			t_enemyName=String(L"|4033|GHOUL|",12);
																																		}else{
																																			if(t_2==String(L"PURPLE GOBLIN",13)){
																																				t_enemyName=String(L"|4034|PURPLE GOBLIN|",20);
																																			}else{
																																				if(t_2==String(L"GRAY GOBLIN",11)){
																																					t_enemyName=String(L"|4035|GRAY GOBLIN|",18);
																																				}else{
																																					if(t_2==String(L"GOBLIN BOMBER",13)){
																																						t_enemyName=String(L"|4036|GOBLIN BOMBER|",20);
																																					}else{
																																						if(t_2==String(L"LIGHT GOLEM",11)){
																																							t_enemyName=String(L"|4037|LIGHT GOLEM|",18);
																																						}else{
																																							if(t_2==String(L"DARK GOLEM",10)){
																																								t_enemyName=String(L"|4038|DARK GOLEM|",17);
																																							}else{
																																								if(t_2==String(L"OOZE GOLEM",10)){
																																									t_enemyName=String(L"|4039|OOZE GOLEM|",17);
																																								}else{
																																									if(t_2==String(L"HARPY",5)){
																																										t_enemyName=String(L"|4040|HARPY|",12);
																																									}else{
																																										if(t_2==String(L"HELLHOUND",9)){
																																											t_enemyName=String(L"|4041|HELLHOUND|",16);
																																										}else{
																																											if(t_2==String(L"ICE ELEMENTAL",13)){
																																												t_enemyName=String(L"|4042|ICE ELEMENTAL|",20);
																																											}else{
																																												if(t_2==String(L"KING",4)){
																																													t_enemyName=String(L"|4043|KING|",11);
																																												}else{
																																													if(t_2==String(L"RED KING",8)){
																																														t_enemyName=String(L"|4044|RED KING|",15);
																																													}else{
																																														if(t_2==String(L"KING CONGA",10)){
																																															t_enemyName=String(L"|4045|KING CONGA|",17);
																																														}else{
																																															if(t_2==String(L"KNIGHT",6)){
																																																t_enemyName=String(L"|4046|KNIGHT|",13);
																																															}else{
																																																if(t_2==String(L"RED KNIGHT",10)){
																																																	t_enemyName=String(L"|4047|RED KNIGHT|",17);
																																																}else{
																																																	if(t_2==String(L"LEPRECHAUN",10)){
																																																		t_enemyName=String(L"|4048|LEPRECHAUN|",17);
																																																	}else{
																																																		if(t_2==String(L"LICH",4)){
																																																			t_enemyName=String(L"|4049|LICH|",11);
																																																		}else{
																																																			if(t_2==String(L"RED LICH",8)){
																																																				t_enemyName=String(L"|4050|RED LICH|",15);
																																																			}else{
																																																				if(t_2==String(L"BLACK LICH",10)){
																																																					t_enemyName=String(L"|4051|BLACK LICH|",17);
																																																				}else{
																																																					if(t_2==String(L"THE GOLDEN LUTE",15)){
																																																						t_enemyName=String(L"|4052|THE GOLDEN LUTE|",22);
																																																					}else{
																																																						if(t_2==String(L"LIGHT MINOTAUR",14)){
																																																							t_enemyName=String(L"|4053|LIGHT MINOTAUR|",21);
																																																						}else{
																																																							if(t_2==String(L"DARK MINOTAUR",13)){
																																																								t_enemyName=String(L"|4054|DARK MINOTAUR|",20);
																																																							}else{
																																																								if(t_2==String(L"MOLE",4)){
																																																									t_enemyName=String(L"|4055|MOLE|",11);
																																																								}else{
																																																									if(t_2==String(L"PURPLE MONKEY",13)){
																																																										t_enemyName=String(L"|4056|PURPLE MONKEY|",20);
																																																									}else{
																																																										if(t_2==String(L"WHITE MONKEY",12)){
																																																											t_enemyName=String(L"|4057|WHITE MONKEY|",19);
																																																										}else{
																																																											if(t_2==String(L"GREEN MONKEY",12)){
																																																												t_enemyName=String(L"|4058|GREEN MONKEY|",19);
																																																											}else{
																																																												if(t_2==String(L"MAGIC MONKEY",12)){
																																																													t_enemyName=String(L"|4059|MAGIC MONKEY|",19);
																																																												}else{
																																																													if(t_2==String(L"THE MOMMY",9)){
																																																														t_enemyName=String(L"|4060|THE MOMMY|",16);
																																																													}else{
																																																														if(t_2==String(L"MUMMY",5)){
																																																															t_enemyName=String(L"|4061|MUMMY|",12);
																																																														}else{
																																																															if(t_2==String(L"BLUE MUSHROOM",13)){
																																																																t_enemyName=String(L"|4062|BLUE MUSHROOM|",20);
																																																															}else{
																																																																if(t_2==String(L"PURPLE MUSHROOM",15)){
																																																																	t_enemyName=String(L"|4063|PURPLE MUSHROOM|",22);
																																																																}else{
																																																																	if(t_2==String(L"EXPLODING MUSHROOM",18)){
																																																																		t_enemyName=String(L"|4064|EXPLODING MUSHROOM|",25);
																																																																	}else{
																																																																		if(t_2==String(L"THE NECRODANCER",15)){
																																																																			t_enemyName=String(L"|4065|THE NECRODANCER|",22);
																																																																		}else{
																																																																			if(t_2==String(L"DARK NIGHTMARE",14)){
																																																																				t_enemyName=String(L"|4066|DARK NIGHTMARE|",21);
																																																																			}else{
																																																																				if(t_2==String(L"BLOOD NIGHTMARE",15)){
																																																																					t_enemyName=String(L"|4067|BLOOD NIGHTMARE|",22);
																																																																				}else{
																																																																					if(t_2==String(L"OGRE",4)){
																																																																						t_enemyName=String(L"|4068|OGRE|",11);
																																																																					}else{
																																																																						if(t_2==String(L"PAWN",4)){
																																																																							t_enemyName=String(L"|4069|PAWN|",11);
																																																																						}else{
																																																																							if(t_2==String(L"RED PAWN",8)){
																																																																								t_enemyName=String(L"|4070|RED PAWN|",15);
																																																																							}else{
																																																																								if(t_2==String(L"PIXIE",5)){
																																																																									t_enemyName=String(L"|4071|PIXIE|",12);
																																																																								}else{
																																																																									if(t_2==String(L"QUEEN",5)){
																																																																										t_enemyName=String(L"|4072|QUEEN|",12);
																																																																									}else{
																																																																										if(t_2==String(L"RED QUEEN",9)){
																																																																											t_enemyName=String(L"|4073|RED QUEEN|",16);
																																																																										}else{
																																																																											if(t_2==String(L"ROOK",4)){
																																																																												t_enemyName=String(L"|4074|ROOK|",11);
																																																																											}else{
																																																																												if(t_2==String(L"RED ROOK",8)){
																																																																													t_enemyName=String(L"|4075|RED ROOK|",15);
																																																																												}else{
																																																																													if(t_2==String(L"SARCOPHAGUS",11)){
																																																																														t_enemyName=String(L"|4076|SARCOPHAGUS|",18);
																																																																													}else{
																																																																														if(t_2==String(L"YELLOW SARCOPHAGUS",18)){
																																																																															t_enemyName=String(L"|4077|YELLOW SARCOPHAGUS|",25);
																																																																														}else{
																																																																															if(t_2==String(L"BLACK SARCOPHAGUS",17)){
																																																																																t_enemyName=String(L"|4078|BLACK SARCOPHAGUS|",24);
																																																																															}else{
																																																																																if(t_2==String(L"SHOPKEEPER",10)){
																																																																																	t_enemyName=String(L"|4079|SHOPKEEPER|",17);
																																																																																}else{
																																																																																	if(t_2==String(L"MONSTROUS SHOPKEEPER",20)){
																																																																																		t_enemyName=String(L"|4080|MONSTROUS SHOPKEEPER|",27);
																																																																																	}else{
																																																																																		if(t_2==String(L"SHOPKEEPER GHOST",16)){
																																																																																			t_enemyName=String(L"|4081|SHOPKEEPER GHOST|",23);
																																																																																		}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return t_enemyName;
}
String c_Enemy::m_AddTagsToEnemyName_Size1_2(String t_eName){
	String t_enemyName=String();
	String t_3=t_eName;
	if(t_3==String(L"SHOVEMONSTER",12)){
		t_enemyName=String(L"|4082|SHOVEMONSTER|",19);
	}else{
		if(t_3==String(L"WHITE SKELETON",14)){
			t_enemyName=String(L"|4083|WHITE SKELETON|",21);
		}else{
			if(t_3==String(L"YELLOW SKELETON",15)){
				t_enemyName=String(L"|4084|YELLOW SKELETON|",22);
			}else{
				if(t_3==String(L"BLACK SKELETON",14)){
					t_enemyName=String(L"|4085|BLACK SKELETON|",21);
				}else{
					if(t_3==String(L"WHITE SKELETON KNIGHT",21)){
						t_enemyName=String(L"|4086|WHITE SKELETON KNIGHT|",28);
					}else{
						if(t_3==String(L"YELLOW SKELETON KNIGHT",22)){
							t_enemyName=String(L"|4087|YELLOW SKELETON KNIGHT|",29);
						}else{
							if(t_3==String(L"BLACK SKELETON KNIGHT",21)){
								t_enemyName=String(L"|4088|BLACK SKELETON KNIGHT|",28);
							}else{
								if(t_3==String(L"WHITE SKELETON MAGE",19)){
									t_enemyName=String(L"|4089|WHITE SKELETON MAGE|",26);
								}else{
									if(t_3==String(L"YELLOW SKELETON MAGE",20)){
										t_enemyName=String(L"|4090|YELLOW SKELETON MAGE|",27);
									}else{
										if(t_3==String(L"BLACK SKELETON MAGE",19)){
											t_enemyName=String(L"|4091|BLACK SKELETON MAGE|",26);
										}else{
											if(t_3==String(L"GOBLIN SENTRY",13)){
												t_enemyName=String(L"|4092|GOBLIN SENTRY|",20);
											}else{
												if(t_3==String(L"GREEN SLIME",11)){
													t_enemyName=String(L"|4093|GREEN SLIME|",18);
												}else{
													if(t_3==String(L"BLUE SLIME",10)){
														t_enemyName=String(L"|4094|BLUE SLIME|",17);
													}else{
														if(t_3==String(L"ORANGE SLIME",12)){
															t_enemyName=String(L"|4095|ORANGE SLIME|",19);
														}else{
															if(t_3==String(L"ICE SLIME",9)){
																t_enemyName=String(L"|4096|ICE SLIME|",16);
															}else{
																if(t_3==String(L"FIRE SLIME",10)){
																	t_enemyName=String(L"|4097|FIRE SLIME|",17);
																}else{
																	if(t_3==String(L"SPIDER",6)){
																		t_enemyName=String(L"|4098|SPIDER|",13);
																	}else{
																		if(t_3==String(L"TARMONSTER",10)){
																			t_enemyName=String(L"|4099|TARMONSTER|",17);
																		}else{
																			if(t_3==String(L"TENTACLE",8)){
																				t_enemyName=String(L"|4100|TENTACLE|",15);
																			}else{
																				if(t_3==String(L"CHEST MIMIC",11)){
																					t_enemyName=String(L"|4101|CHEST MIMIC|",18);
																				}else{
																					if(t_3==String(L"LOCKED CHEST MIMIC",18)){
																						t_enemyName=String(L"|4102|LOCKED CHEST MIMIC|",25);
																					}else{
																						if(t_3==String(L"WHITE CHEST MIMIC",17)){
																							t_enemyName=String(L"|4103|WHITE CHEST MIMIC|",24);
																						}else{
																							if(t_3==String(L"FIRE CAULDRON MIMIC",19)){
																								t_enemyName=String(L"|4104|FIRE CAULDRON MIMIC|",26);
																							}else{
																								if(t_3==String(L"ICE CAULDRON MIMIC",18)){
																									t_enemyName=String(L"|4105|ICE CAULDRON MIMIC|",25);
																								}else{
																									if(t_3==String(L"WARLOCK",7)){
																										t_enemyName=String(L"|4106|WARLOCK|",14);
																									}else{
																										if(t_3==String(L"NEON WARLOCK",12)){
																											t_enemyName=String(L"|4107|NEON WARLOCK|",19);
																										}else{
																											if(t_3==String(L"WIGHT",5)){
																												t_enemyName=String(L"|4108|WIGHT|",12);
																											}else{
																												if(t_3==String(L"WRAITH",6)){
																													t_enemyName=String(L"|4109|WRAITH|",13);
																												}else{
																													if(t_3==String(L"YETI",4)){
																														t_enemyName=String(L"|4110|YETI|",11);
																													}else{
																														if(t_3==String(L"ZOMBIE",6)){
																															t_enemyName=String(L"|4111|ZOMBIE|",13);
																														}else{
																															if(t_3==String(L"CONGA LINE",10)){
																																t_enemyName=String(L"|4112|CONGA LINE|",17);
																															}else{
																																if(t_3==String(L"SPIKETRAP",9)){
																																	t_enemyName=String(L"|4113|SPIKETRAP|",16);
																																}else{
																																	if(t_3==String(L"BLOOD MAGIC",11)){
																																		t_enemyName=String(L"|4114|BLOOD MAGIC|",18);
																																	}else{
																																		if(t_3==String(L"BLOOD SHOVEL",12)){
																																			t_enemyName=String(L"|4115|BLOOD SHOVEL|",19);
																																		}else{
																																			if(t_3==String(L"BLOOD DRUM",10)){
																																				t_enemyName=String(L"|4116|BLOOD DRUM|",17);
																																			}else{
																																				if(t_3==String(L"BLOOD DEBT",10)){
																																					t_enemyName=String(L"|4117|BLOOD DEBT|",17);
																																				}else{
																																					if(t_3==String(L"BOOTS OF PAIN",13)){
																																						t_enemyName=String(L"|4118|BOOTS OF PAIN|",20);
																																					}else{
																																						if(t_3==String(L"CROWNOFTHORNS",13)){
																																							t_enemyName=String(L"|4119|CROWNOFTHORNS|",20);
																																						}else{
																																							if(t_3==String(L"COWARDICE",9)){
																																								t_enemyName=String(L"|4120|COWARDICE|",16);
																																							}else{
																																								if(t_3==String(L"VOW OF POVERTY",14)){
																																									t_enemyName=String(L"|4121|VOW OF POVERTY|",21);
																																								}else{
																																									if(t_3==String(L"HOTCOAL",7)){
																																										t_enemyName=String(L"|4122|HOTCOAL|",14);
																																									}else{
																																										if(t_3==String(L"LAVA",4)){
																																											t_enemyName=String(L"|4123|LAVA|",11);
																																										}else{
																																											if(t_3==String(L"DORIAN'S CURSE",14)){
																																												t_enemyName=String(L"|4124|DORIAN'S CURSE|",21);
																																											}else{
																																												if(t_3==String(L"SHOVE",5)){
																																													t_enemyName=String(L"|4125|SHOVE|",12);
																																												}else{
																																													if(t_3==String(L"CRYSTALTILE",11)){
																																														t_enemyName=String(L"|4126|CRYSTALTILE|",18);
																																													}else{
																																														if(t_3==String(L"SHRINE OF PACE",14)){
																																															t_enemyName=String(L"|4127|SHRINE OF PACE|",21);
																																														}else{
																																															if(t_3==String(L"SHRINE OF NO RETURN",19)){
																																																t_enemyName=String(L"|4128|SHRINE OF NO RETURN|",26);
																																															}else{
																																																if(t_3==String(L"SHRINE OF RISK",14)){
																																																	t_enemyName=String(L"|4129|SHRINE OF RISK|",21);
																																																}else{
																																																	if(t_3==String(L"TRAP WALLS",10)){
																																																		t_enemyName=String(L"|4130|TRAP WALLS|",17);
																																																	}else{
																																																		if(t_3==String(L"BOMB",4)){
																																																			t_enemyName=String(L"|4131|BOMB|",11);
																																																		}else{
																																																			if(t_3==String(L"MISSED BEAT",11)){
																																																				t_enemyName=String(L"|4132|MISSED BEAT|",18);
																																																			}else{
																																																				if(t_3==String(L"MISSEDBEAT",10)){
																																																					t_enemyName=String(L"|4132|MISSEDBEAT|",17);
																																																				}else{
																																																					if(t_3==String(L"GRAY SHOVEMONSTER",17)){
																																																						t_enemyName=String(L"|4133|GRAY SHOVEMONSTER|",24);
																																																					}else{
																																																						if(t_3==String(L"DEEP BLUES",10)){
																																																							t_enemyName=String(L"|4134|DEEP BLUES|",17);
																																																						}else{
																																																							if(t_3==String(L"FIREBALL",8)){
																																																								t_enemyName=String(L"|4135|FIREBALL|",15);
																																																							}else{
																																																								if(t_3==String(L"RING OF PAIN",12)){
																																																									t_enemyName=String(L"|11500|RING OF PAIN|",20);
																																																								}else{
																																																									if(t_3==String(L"GREEN GORGON STATUE",19)){
																																																										t_enemyName=String(L"|11501|GREEN GORGON STATUE|",27);
																																																									}else{
																																																										if(t_3==String(L"GOLD GORGON STATUE",18)){
																																																											t_enemyName=String(L"|11502|GOLD GORGON STATUE|",26);
																																																										}else{
																																																											if(t_3==String(L"RED DEVIL",9)){
																																																												t_enemyName=String(L"|11503|RED DEVIL|",17);
																																																											}else{
																																																												if(t_3==String(L"GREEN DEVIL",11)){
																																																													t_enemyName=String(L"|11504|GREEN DEVIL|",19);
																																																												}else{
																																																													if(t_3==String(L"PURPLE ELECTRIC MAGE",20)){
																																																														t_enemyName=String(L"|11505|PURPLE ELECTRIC MAGE|",28);
																																																													}else{
																																																														if(t_3==String(L"RED ELECTRIC MAGE",17)){
																																																															t_enemyName=String(L"|11506|RED ELECTRIC MAGE|",25);
																																																														}else{
																																																															if(t_3==String(L"GOLD ELECTRIC MAGE",18)){
																																																																t_enemyName=String(L"|11507|GOLD ELECTRIC MAGE|",26);
																																																															}else{
																																																																if(t_3==String(L"GREEN EVIL EYE",14)){
																																																																	t_enemyName=String(L"|11508|GREEN EVIL EYE|",22);
																																																																}else{
																																																																	if(t_3==String(L"PINK EVIL EYE",13)){
																																																																		t_enemyName=String(L"|11509|PINK EVIL EYE|",21);
																																																																	}else{
																																																																		if(t_3==String(L"SHOP WALL MIMIC",15)){
																																																																			t_enemyName=String(L"|11510|SHOP WALL MIMIC|",23);
																																																																		}else{
																																																																			if(t_3==String(L"FORTISSIMOLE",12)){
																																																																				t_enemyName=String(L"|11511|FORTISSIMOLE|",20);
																																																																			}else{
																																																																				if(t_3==String(L"GREEN GORGON",12)){
																																																																					t_enemyName=String(L"|11512|GREEN GORGON|",20);
																																																																				}else{
																																																																					if(t_3==String(L"GOLD GORGON",11)){
																																																																						t_enemyName=String(L"|11513|GOLD GORGON|",19);
																																																																					}else{
																																																																						if(t_3==String(L"GOLD METROGNOME",15)){
																																																																							t_enemyName=String(L"|11514|GOLD METROGNOME|",23);
																																																																						}else{
																																																																							if(t_3==String(L"GREEN METROGNOME",16)){
																																																																								t_enemyName=String(L"|11515|GREEN METROGNOME|",24);
																																																																							}else{
																																																																								if(t_3==String(L"GREEN ORC",9)){
																																																																									t_enemyName=String(L"|11516|GREEN ORC|",17);
																																																																								}else{
																																																																									if(t_3==String(L"PINK ORC",8)){
																																																																										t_enemyName=String(L"|11517|PINK ORC|",16);
																																																																									}else{
																																																																										if(t_3==String(L"PURPLE ORC",10)){
																																																																											t_enemyName=String(L"|11518|PURPLE ORC|",18);
																																																																										}else{
																																																																											if(t_3==String(L"PURPLE ELECTRIC ORB",19)){
																																																																												t_enemyName=String(L"|11519|PURPLE ELECTRIC ORB|",27);
																																																																											}else{
																																																																												if(t_3==String(L"RED ELECTRIC ORB",16)){
																																																																													t_enemyName=String(L"|11520|RED ELECTRIC ORB|",24);
																																																																												}else{
																																																																													if(t_3==String(L"GOLD ELECTRIC ORB",17)){
																																																																														t_enemyName=String(L"|11521|GOLD ELECTRIC ORB|",25);
																																																																													}else{
																																																																														if(t_3==String(L"WHITE SKULL",11)){
																																																																															t_enemyName=String(L"|11522|WHITE SKULL|",19);
																																																																														}else{
																																																																															if(t_3==String(L"YELLOW SKULL",12)){
																																																																																t_enemyName=String(L"|11523|YELLOW SKULL|",20);
																																																																															}else{
																																																																																if(t_3==String(L"BLACK SKULL",11)){
																																																																																	t_enemyName=String(L"|11524|BLACK SKULL|",19);
																																																																																}else{
																																																																																	if(t_3==String(L"PURPLE SLIME",12)){
																																																																																		t_enemyName=String(L"|11525|PURPLE SLIME|",20);
																																																																																	}else{
																																																																																		if(t_3==String(L"CRATE MIMIC",11)){
																																																																																			t_enemyName=String(L"|11526|CRATE MIMIC|",19);
																																																																																		}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return t_enemyName;
}
String c_Enemy::m_AddTagsToEnemyName_Size1_3(String t_eName){
	String t_enemyName=String();
	String t_4=t_eName;
	if(t_4==String(L"BARREL MIMIC",12)){
		t_enemyName=String(L"|11527|BARREL MIMIC|",20);
	}else{
		if(t_4==String(L"SHRINE MIMIC",12)){
			t_enemyName=String(L"|11528|SHRINE MIMIC|",20);
		}else{
			if(t_4==String(L"WATER BALL",10)){
				t_enemyName=String(L"|11529|WATER BALL|",18);
			}else{
				if(t_4==String(L"CURSED WRAITH",13)){
					t_enemyName=String(L"|11530|CURSED WRAITH|",21);
				}else{
					if(t_4==String(L"EARTH DRAGON",12)){
						t_enemyName=String(L"|11531|EARTH DRAGON|",20);
					}else{
						if(t_4==String(L"NO RETURN MODE",14)){
							t_enemyName=String(L"|11532|NO RETURN MODE|",22);
						}else{
							if(t_4==String(L"FRANKENSTEINWAY",15)){
								t_enemyName=String(L"|11533|FRANKENSTEINWAY|",23);
							}else{
								if(t_4==String(L"THE CONDUCTOR",13)){
									t_enemyName=String(L"|11534|THE CONDUCTOR|",21);
								}else{
									if(t_4==String(L"TEMPO'S CURSE",13)){
										t_enemyName=String(L"|11535|TEMPO'S CURSE|",21);
									}else{
										if(t_4==String(L"MARY'S CURSE",12)){
											t_enemyName=String(L"|11536|MARY'S CURSE|",20);
										}else{
											if(t_4==String(L"ELECTRIC ZOMBIE",15)){
												t_enemyName=String(L"|11537|ELECTRIC ZOMBIE|",23);
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return t_enemyName;
}
String c_Enemy::m_AddTagsToEnemyName_Size1(String t_eName){
	String t_enemyName=String();
	t_enemyName=m_AddTagsToEnemyName_Size1_1(t_eName);
	if(t_enemyName!=String()){
		return t_enemyName;
	}
	t_enemyName=m_AddTagsToEnemyName_Size1_2(t_eName);
	if(t_enemyName!=String()){
		return t_enemyName;
	}
	t_enemyName=m_AddTagsToEnemyName_Size1_3(t_eName);
	if(t_enemyName!=String()){
		return t_enemyName;
	}
	return t_enemyName;
}
String c_Enemy::m_AddTagsToEnemyName_SizeDefault_1(String t_eName){
	String t_enemyName=String();
	String t_5=t_eName;
	if(t_5==String(L"WHITE ARMADILLO",15)){
		t_enemyName=String(L"|6000|WHITE ARMADILLO|",22);
	}else{
		if(t_5==String(L"YELLOW ARMADILLO",16)){
			t_enemyName=String(L"|6001|YELLOW ARMADILLO|",23);
		}else{
			if(t_5==String(L"ORANGE ARMADILLO",16)){
				t_enemyName=String(L"|6002|ORANGE ARMADILLO|",23);
			}else{
				if(t_5==String(L"WHITE ARMORED SKELETON",22)){
					t_enemyName=String(L"|6003|WHITE ARMORED SKELETON|",29);
				}else{
					if(t_5==String(L"YELLOW ARMORED SKELETON",23)){
						t_enemyName=String(L"|6004|YELLOW ARMORED SKELETON|",30);
					}else{
						if(t_5==String(L"BLACK ARMORED SKELETON",22)){
							t_enemyName=String(L"|6005|BLACK ARMORED SKELETON|",29);
						}else{
							if(t_5==String(L"BLUE BANSHEE",12)){
								t_enemyName=String(L"|6006|BLUE BANSHEE|",19);
							}else{
								if(t_5==String(L"GREEN BANSHEE",13)){
									t_enemyName=String(L"|6007|GREEN BANSHEE|",20);
								}else{
									if(t_5==String(L"BLUE BAT",8)){
										t_enemyName=String(L"|6008|BLUE BAT|",15);
									}else{
										if(t_5==String(L"RED BAT",7)){
											t_enemyName=String(L"|6009|RED BAT|",14);
										}else{
											if(t_5==String(L"GREEN BAT",9)){
												t_enemyName=String(L"|6010|GREEN BAT|",16);
											}else{
												if(t_5==String(L"BLACK BAT",9)){
													t_enemyName=String(L"|6011|BLACK BAT|",16);
												}else{
													if(t_5==String(L"YELLOW DIREBAT",14)){
														t_enemyName=String(L"|6012|YELLOW DIREBAT|",21);
													}else{
														if(t_5==String(L"BROWN DIREBAT",13)){
															t_enemyName=String(L"|6013|BROWN DIREBAT|",20);
														}else{
															if(t_5==String(L"FIRE BEETLE",11)){
																t_enemyName=String(L"|6014|FIRE BEETLE|",18);
															}else{
																if(t_5==String(L"ICE BEETLE",10)){
																	t_enemyName=String(L"|6015|ICE BEETLE|",17);
																}else{
																	if(t_5==String(L"BISHOP",6)){
																		t_enemyName=String(L"|6016|BISHOP|",13);
																	}else{
																		if(t_5==String(L"RED BISHOP",10)){
																			t_enemyName=String(L"|6017|RED BISHOP|",17);
																		}else{
																			if(t_5==String(L"APPRENTICE BLADEMASTER",22)){
																				t_enemyName=String(L"|6018|APPRENTICE BLADEMASTER|",29);
																			}else{
																				if(t_5==String(L"BLADEMASTER",11)){
																					t_enemyName=String(L"|6019|BLADEMASTER|",18);
																				}else{
																					if(t_5==String(L"CLONE",5)){
																						t_enemyName=String(L"|6020|CLONE|",12);
																					}else{
																						if(t_5==String(L"CORAL RIFF",10)){
																							t_enemyName=String(L"|6021|CORAL RIFF|",17);
																						}else{
																							if(t_5==String(L"BARREL",6)){
																								t_enemyName=String(L"|6022|BARREL|",13);
																							}else{
																								if(t_5==String(L"DEAD RINGER",11)){
																									t_enemyName=String(L"|6023|DEAD RINGER|",18);
																								}else{
																									if(t_5==String(L"DEATH METAL",11)){
																										t_enemyName=String(L"|6024|DEATH METAL|",18);
																									}else{
																										if(t_5==String(L"GREEN DRAGON",12)){
																											t_enemyName=String(L"|6025|GREEN DRAGON|",19);
																										}else{
																											if(t_5==String(L"RED DRAGON",10)){
																												t_enemyName=String(L"|6026|RED DRAGON|",17);
																											}else{
																												if(t_5==String(L"BLUE DRAGON",11)){
																													t_enemyName=String(L"|6027|BLUE DRAGON|",18);
																												}else{
																													if(t_5==String(L"WALL MIMIC",10)){
																														t_enemyName=String(L"|6028|WALL MIMIC|",17);
																													}else{
																														if(t_5==String(L"FIRE ELEMENTAL",14)){
																															t_enemyName=String(L"|6029|FIRE ELEMENTAL|",21);
																														}else{
																															if(t_5==String(L"GARGOYLE",8)){
																																t_enemyName=String(L"|6030|GARGOYLE|",15);
																															}else{
																																if(t_5==String(L"GHAST",5)){
																																	t_enemyName=String(L"|6031|GHAST|",12);
																																}else{
																																	if(t_5==String(L"GHOST",5)){
																																		t_enemyName=String(L"|6032|GHOST|",12);
																																	}else{
																																		if(t_5==String(L"GHOUL",5)){
																																			t_enemyName=String(L"|6033|GHOUL|",12);
																																		}else{
																																			if(t_5==String(L"PURPLE GOBLIN",13)){
																																				t_enemyName=String(L"|6034|PURPLE GOBLIN|",20);
																																			}else{
																																				if(t_5==String(L"GRAY GOBLIN",11)){
																																					t_enemyName=String(L"|6035|GRAY GOBLIN|",18);
																																				}else{
																																					if(t_5==String(L"GOBLIN BOMBER",13)){
																																						t_enemyName=String(L"|6036|GOBLIN BOMBER|",20);
																																					}else{
																																						if(t_5==String(L"LIGHT GOLEM",11)){
																																							t_enemyName=String(L"|6037|LIGHT GOLEM|",18);
																																						}else{
																																							if(t_5==String(L"DARK GOLEM",10)){
																																								t_enemyName=String(L"|6038|DARK GOLEM|",17);
																																							}else{
																																								if(t_5==String(L"OOZE GOLEM",10)){
																																									t_enemyName=String(L"|6039|OOZE GOLEM|",17);
																																								}else{
																																									if(t_5==String(L"HARPY",5)){
																																										t_enemyName=String(L"|6040|HARPY|",12);
																																									}else{
																																										if(t_5==String(L"HELLHOUND",9)){
																																											t_enemyName=String(L"|6041|HELLHOUND|",16);
																																										}else{
																																											if(t_5==String(L"ICE ELEMENTAL",13)){
																																												t_enemyName=String(L"|6042|ICE ELEMENTAL|",20);
																																											}else{
																																												if(t_5==String(L"KING",4)){
																																													t_enemyName=String(L"|6043|KING|",11);
																																												}else{
																																													if(t_5==String(L"RED KING",8)){
																																														t_enemyName=String(L"|6044|RED KING|",15);
																																													}else{
																																														if(t_5==String(L"KING CONGA",10)){
																																															t_enemyName=String(L"|6045|KING CONGA|",17);
																																														}else{
																																															if(t_5==String(L"KNIGHT",6)){
																																																t_enemyName=String(L"|6046|KNIGHT|",13);
																																															}else{
																																																if(t_5==String(L"RED KNIGHT",10)){
																																																	t_enemyName=String(L"|6047|RED KNIGHT|",17);
																																																}else{
																																																	if(t_5==String(L"LEPRECHAUN",10)){
																																																		t_enemyName=String(L"|6048|LEPRECHAUN|",17);
																																																	}else{
																																																		if(t_5==String(L"LICH",4)){
																																																			t_enemyName=String(L"|6049|LICH|",11);
																																																		}else{
																																																			if(t_5==String(L"RED LICH",8)){
																																																				t_enemyName=String(L"|6050|RED LICH|",15);
																																																			}else{
																																																				if(t_5==String(L"BLACK LICH",10)){
																																																					t_enemyName=String(L"|6051|BLACK LICH|",17);
																																																				}else{
																																																					if(t_5==String(L"THE GOLDEN LUTE",15)){
																																																						t_enemyName=String(L"|6052|THE GOLDEN LUTE|",22);
																																																					}else{
																																																						if(t_5==String(L"LIGHT MINOTAUR",14)){
																																																							t_enemyName=String(L"|6053|LIGHT MINOTAUR|",21);
																																																						}else{
																																																							if(t_5==String(L"DARK MINOTAUR",13)){
																																																								t_enemyName=String(L"|6054|DARK MINOTAUR|",20);
																																																							}else{
																																																								if(t_5==String(L"MOLE",4)){
																																																									t_enemyName=String(L"|6055|MOLE|",11);
																																																								}else{
																																																									if(t_5==String(L"PURPLE MONKEY",13)){
																																																										t_enemyName=String(L"|6056|PURPLE MONKEY|",20);
																																																									}else{
																																																										if(t_5==String(L"WHITE MONKEY",12)){
																																																											t_enemyName=String(L"|6057|WHITE MONKEY|",19);
																																																										}else{
																																																											if(t_5==String(L"GREEN MONKEY",12)){
																																																												t_enemyName=String(L"|6058|GREEN MONKEY|",19);
																																																											}else{
																																																												if(t_5==String(L"MAGIC MONKEY",12)){
																																																													t_enemyName=String(L"|6059|MAGIC MONKEY|",19);
																																																												}else{
																																																													if(t_5==String(L"THE MOMMY",9)){
																																																														t_enemyName=String(L"|6060|THE MOMMY|",16);
																																																													}else{
																																																														if(t_5==String(L"MUMMY",5)){
																																																															t_enemyName=String(L"|6061|MUMMY|",12);
																																																														}else{
																																																															if(t_5==String(L"BLUE MUSHROOM",13)){
																																																																t_enemyName=String(L"|6062|BLUE MUSHROOM|",20);
																																																															}else{
																																																																if(t_5==String(L"PURPLE MUSHROOM",15)){
																																																																	t_enemyName=String(L"|6063|PURPLE MUSHROOM|",22);
																																																																}else{
																																																																	if(t_5==String(L"EXPLODING MUSHROOM",18)){
																																																																		t_enemyName=String(L"|6064|EXPLODING MUSHROOM|",25);
																																																																	}else{
																																																																		if(t_5==String(L"THE NECRODANCER",15)){
																																																																			t_enemyName=String(L"|6065|THE NECRODANCER|",22);
																																																																		}else{
																																																																			if(t_5==String(L"DARK NIGHTMARE",14)){
																																																																				t_enemyName=String(L"|6066|DARK NIGHTMARE|",21);
																																																																			}else{
																																																																				if(t_5==String(L"BLOOD NIGHTMARE",15)){
																																																																					t_enemyName=String(L"|6067|BLOOD NIGHTMARE|",22);
																																																																				}else{
																																																																					if(t_5==String(L"OGRE",4)){
																																																																						t_enemyName=String(L"|6068|OGRE|",11);
																																																																					}else{
																																																																						if(t_5==String(L"PAWN",4)){
																																																																							t_enemyName=String(L"|6069|PAWN|",11);
																																																																						}else{
																																																																							if(t_5==String(L"RED PAWN",8)){
																																																																								t_enemyName=String(L"|6070|RED PAWN|",15);
																																																																							}else{
																																																																								if(t_5==String(L"PIXIE",5)){
																																																																									t_enemyName=String(L"|6071|PIXIE|",12);
																																																																								}else{
																																																																									if(t_5==String(L"QUEEN",5)){
																																																																										t_enemyName=String(L"|6072|QUEEN|",12);
																																																																									}else{
																																																																										if(t_5==String(L"RED QUEEN",9)){
																																																																											t_enemyName=String(L"|6073|RED QUEEN|",16);
																																																																										}else{
																																																																											if(t_5==String(L"ROOK",4)){
																																																																												t_enemyName=String(L"|6074|ROOK|",11);
																																																																											}else{
																																																																												if(t_5==String(L"RED ROOK",8)){
																																																																													t_enemyName=String(L"|6075|RED ROOK|",15);
																																																																												}else{
																																																																													if(t_5==String(L"SARCOPHAGUS",11)){
																																																																														t_enemyName=String(L"|6076|SARCOPHAGUS|",18);
																																																																													}else{
																																																																														if(t_5==String(L"YELLOW SARCOPHAGUS",18)){
																																																																															t_enemyName=String(L"|6077|YELLOW SARCOPHAGUS|",25);
																																																																														}else{
																																																																															if(t_5==String(L"BLACK SARCOPHAGUS",17)){
																																																																																t_enemyName=String(L"|6078|BLACK SARCOPHAGUS|",24);
																																																																															}else{
																																																																																if(t_5==String(L"SHOPKEEPER",10)){
																																																																																	t_enemyName=String(L"|6079|SHOPKEEPER|",17);
																																																																																}else{
																																																																																	if(t_5==String(L"MONSTROUS SHOPKEEPER",20)){
																																																																																		t_enemyName=String(L"|6080|MONSTROUS SHOPKEEPER|",27);
																																																																																	}else{
																																																																																		if(t_5==String(L"SHOPKEEPER GHOST",16)){
																																																																																			t_enemyName=String(L"|6081|SHOPKEEPER GHOST|",23);
																																																																																		}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return t_enemyName;
}
String c_Enemy::m_AddTagsToEnemyName_SizeDefault_2(String t_eName){
	String t_enemyName=String();
	String t_6=t_eName;
	if(t_6==String(L"SHOVEMONSTER",12)){
		t_enemyName=String(L"|6082|SHOVEMONSTER|",19);
	}else{
		if(t_6==String(L"WHITE SKELETON",14)){
			t_enemyName=String(L"|6083|WHITE SKELETON|",21);
		}else{
			if(t_6==String(L"YELLOW SKELETON",15)){
				t_enemyName=String(L"|6084|YELLOW SKELETON|",22);
			}else{
				if(t_6==String(L"BLACK SKELETON",14)){
					t_enemyName=String(L"|6085|BLACK SKELETON|",21);
				}else{
					if(t_6==String(L"WHITE SKELETON KNIGHT",21)){
						t_enemyName=String(L"|6086|WHITE SKELETON KNIGHT|",28);
					}else{
						if(t_6==String(L"YELLOW SKELETON KNIGHT",22)){
							t_enemyName=String(L"|6087|YELLOW SKELETON KNIGHT|",29);
						}else{
							if(t_6==String(L"BLACK SKELETON KNIGHT",21)){
								t_enemyName=String(L"|6088|BLACK SKELETON KNIGHT|",28);
							}else{
								if(t_6==String(L"WHITE SKELETON MAGE",19)){
									t_enemyName=String(L"|6089|WHITE SKELETON MAGE|",26);
								}else{
									if(t_6==String(L"YELLOW SKELETON MAGE",20)){
										t_enemyName=String(L"|6090|YELLOW SKELETON MAGE|",27);
									}else{
										if(t_6==String(L"BLACK SKELETON MAGE",19)){
											t_enemyName=String(L"|6091|BLACK SKELETON MAGE|",26);
										}else{
											if(t_6==String(L"GOBLIN SENTRY",13)){
												t_enemyName=String(L"|6092|GOBLIN SENTRY|",20);
											}else{
												if(t_6==String(L"GREEN SLIME",11)){
													t_enemyName=String(L"|6093|GREEN SLIME|",18);
												}else{
													if(t_6==String(L"BLUE SLIME",10)){
														t_enemyName=String(L"|6094|BLUE SLIME|",17);
													}else{
														if(t_6==String(L"ORANGE SLIME",12)){
															t_enemyName=String(L"|6095|ORANGE SLIME|",19);
														}else{
															if(t_6==String(L"ICE SLIME",9)){
																t_enemyName=String(L"|6096|ICE SLIME|",16);
															}else{
																if(t_6==String(L"FIRE SLIME",10)){
																	t_enemyName=String(L"|6097|FIRE SLIME|",17);
																}else{
																	if(t_6==String(L"SPIDER",6)){
																		t_enemyName=String(L"|6098|SPIDER|",13);
																	}else{
																		if(t_6==String(L"TARMONSTER",10)){
																			t_enemyName=String(L"|6099|TARMONSTER|",17);
																		}else{
																			if(t_6==String(L"TENTACLE",8)){
																				t_enemyName=String(L"|6100|TENTACLE|",15);
																			}else{
																				if(t_6==String(L"CHEST MIMIC",11)){
																					t_enemyName=String(L"|6101|CHEST MIMIC|",18);
																				}else{
																					if(t_6==String(L"LOCKED CHEST MIMIC",18)){
																						t_enemyName=String(L"|6102|LOCKED CHEST MIMIC|",25);
																					}else{
																						if(t_6==String(L"WHITE CHEST MIMIC",17)){
																							t_enemyName=String(L"|6103|WHITE CHEST MIMIC|",24);
																						}else{
																							if(t_6==String(L"FIRE CAULDRON MIMIC",19)){
																								t_enemyName=String(L"|6104|FIRE CAULDRON MIMIC|",26);
																							}else{
																								if(t_6==String(L"ICE CAULDRON MIMIC",18)){
																									t_enemyName=String(L"|6105|ICE CAULDRON MIMIC|",25);
																								}else{
																									if(t_6==String(L"WARLOCK",7)){
																										t_enemyName=String(L"|6106|WARLOCK|",14);
																									}else{
																										if(t_6==String(L"NEON WARLOCK",12)){
																											t_enemyName=String(L"|6107|NEON WARLOCK|",19);
																										}else{
																											if(t_6==String(L"WIGHT",5)){
																												t_enemyName=String(L"|6108|WIGHT|",12);
																											}else{
																												if(t_6==String(L"WRAITH",6)){
																													t_enemyName=String(L"|6109|WRAITH|",13);
																												}else{
																													if(t_6==String(L"YETI",4)){
																														t_enemyName=String(L"|6110|YETI|",11);
																													}else{
																														if(t_6==String(L"ZOMBIE",6)){
																															t_enemyName=String(L"|6111|ZOMBIE|",13);
																														}else{
																															if(t_6==String(L"CONGA LINE",10)){
																																t_enemyName=String(L"|6112|CONGA LINE|",17);
																															}else{
																																if(t_6==String(L"SPIKETRAP",9)){
																																	t_enemyName=String(L"|6113|SPIKETRAP|",16);
																																}else{
																																	if(t_6==String(L"BLOOD MAGIC",11)){
																																		t_enemyName=String(L"|6114|BLOOD MAGIC|",18);
																																	}else{
																																		if(t_6==String(L"BLOOD SHOVEL",12)){
																																			t_enemyName=String(L"|6115|BLOOD SHOVEL|",19);
																																		}else{
																																			if(t_6==String(L"BLOOD DRUM",10)){
																																				t_enemyName=String(L"|6116|BLOOD DRUM|",17);
																																			}else{
																																				if(t_6==String(L"BLOOD DEBT",10)){
																																					t_enemyName=String(L"|6117|BLOOD DEBT|",17);
																																				}else{
																																					if(t_6==String(L"BOOTS OF PAIN",13)){
																																						t_enemyName=String(L"|6118|BOOTS OF PAIN|",20);
																																					}else{
																																						if(t_6==String(L"CROWNOFTHORNS",13)){
																																							t_enemyName=String(L"|6119|CROWNOFTHORNS|",20);
																																						}else{
																																							if(t_6==String(L"COWARDICE",9)){
																																								t_enemyName=String(L"|6120|COWARDICE|",16);
																																							}else{
																																								if(t_6==String(L"VOW OF POVERTY",14)){
																																									t_enemyName=String(L"|6121|VOW OF POVERTY|",21);
																																								}else{
																																									if(t_6==String(L"HOTCOAL",7)){
																																										t_enemyName=String(L"|6122|HOTCOAL|",14);
																																									}else{
																																										if(t_6==String(L"LAVA",4)){
																																											t_enemyName=String(L"|6123|LAVA|",11);
																																										}else{
																																											if(t_6==String(L"DORIAN'S CURSE",14)){
																																												t_enemyName=String(L"|6124|DORIAN'S CURSE|",21);
																																											}else{
																																												if(t_6==String(L"SHOVE",5)){
																																													t_enemyName=String(L"|6125|SHOVE|",12);
																																												}else{
																																													if(t_6==String(L"CRYSTALTILE",11)){
																																														t_enemyName=String(L"|6126|CRYSTALTILE|",18);
																																													}else{
																																														if(t_6==String(L"SHRINE OF PACE",14)){
																																															t_enemyName=String(L"|6127|SHRINE OF PACE|",21);
																																														}else{
																																															if(t_6==String(L"SHRINE OF NO RETURN",19)){
																																																t_enemyName=String(L"|6128|SHRINE OF NO RETURN|",26);
																																															}else{
																																																if(t_6==String(L"SHRINE OF RISK",14)){
																																																	t_enemyName=String(L"|6129|SHRINE OF RISK|",21);
																																																}else{
																																																	if(t_6==String(L"TRAP WALLS",10)){
																																																		t_enemyName=String(L"|6130|TRAP WALLS|",17);
																																																	}else{
																																																		if(t_6==String(L"BOMB",4)){
																																																			t_enemyName=String(L"|6131|BOMB|",11);
																																																		}else{
																																																			if(t_6==String(L"MISSED BEAT",11)){
																																																				t_enemyName=String(L"|6132|MISSED BEAT|",18);
																																																			}else{
																																																				if(t_6==String(L"MISSEDBEAT",10)){
																																																					t_enemyName=String(L"|6132|MISSEDBEAT|",17);
																																																				}else{
																																																					if(t_6==String(L"GRAY SHOVEMONSTER",17)){
																																																						t_enemyName=String(L"|6133|GRAY SHOVEMONSTER|",24);
																																																					}else{
																																																						if(t_6==String(L"DEEP BLUES",10)){
																																																							t_enemyName=String(L"|6134|DEEP BLUES|",17);
																																																						}else{
																																																							if(t_6==String(L"FIREBALL",8)){
																																																								t_enemyName=String(L"|6135|FIREBALL|",15);
																																																							}else{
																																																								if(t_6==String(L"RING OF PAIN",12)){
																																																									t_enemyName=String(L"|12500|RING OF PAIN|",20);
																																																								}else{
																																																									if(t_6==String(L"GREEN GORGON STATUE",19)){
																																																										t_enemyName=String(L"|12501|GREEN GORGON STATUE|",27);
																																																									}else{
																																																										if(t_6==String(L"GOLD GORGON STATUE",18)){
																																																											t_enemyName=String(L"|12502|GOLD GORGON STATUE|",26);
																																																										}else{
																																																											if(t_6==String(L"RED DEVIL",9)){
																																																												t_enemyName=String(L"|12503|RED DEVIL|",17);
																																																											}else{
																																																												if(t_6==String(L"GREEN DEVIL",11)){
																																																													t_enemyName=String(L"|12504|GREEN DEVIL|",19);
																																																												}else{
																																																													if(t_6==String(L"PURPLE ELECTRIC MAGE",20)){
																																																														t_enemyName=String(L"|12505|PURPLE ELECTRIC MAGE|",28);
																																																													}else{
																																																														if(t_6==String(L"RED ELECTRIC MAGE",17)){
																																																															t_enemyName=String(L"|12506|RED ELECTRIC MAGE|",25);
																																																														}else{
																																																															if(t_6==String(L"GOLD ELECTRIC MAGE",18)){
																																																																t_enemyName=String(L"|12507|GOLD ELECTRIC MAGE|",26);
																																																															}else{
																																																																if(t_6==String(L"GREEN EVIL EYE",14)){
																																																																	t_enemyName=String(L"|12508|GREEN EVIL EYE|",22);
																																																																}else{
																																																																	if(t_6==String(L"PINK EVIL EYE",13)){
																																																																		t_enemyName=String(L"|12509|PINK EVIL EYE|",21);
																																																																	}else{
																																																																		if(t_6==String(L"SHOP WALL MIMIC",15)){
																																																																			t_enemyName=String(L"|12510|SHOP WALL MIMIC|",23);
																																																																		}else{
																																																																			if(t_6==String(L"FORTISSIMOLE",12)){
																																																																				t_enemyName=String(L"|12511|FORTISSIMOLE|",20);
																																																																			}else{
																																																																				if(t_6==String(L"GREEN GORGON",12)){
																																																																					t_enemyName=String(L"|12512|GREEN GORGON|",20);
																																																																				}else{
																																																																					if(t_6==String(L"GOLD GORGON",11)){
																																																																						t_enemyName=String(L"|12513|GOLD GORGON|",19);
																																																																					}else{
																																																																						if(t_6==String(L"GOLD METROGNOME",15)){
																																																																							t_enemyName=String(L"|12514|GOLD METROGNOME|",23);
																																																																						}else{
																																																																							if(t_6==String(L"GREEN METROGNOME",16)){
																																																																								t_enemyName=String(L"|12515|GREEN METROGNOME|",24);
																																																																							}else{
																																																																								if(t_6==String(L"GREEN ORC",9)){
																																																																									t_enemyName=String(L"|12516|GREEN ORC|",17);
																																																																								}else{
																																																																									if(t_6==String(L"PINK ORC",8)){
																																																																										t_enemyName=String(L"|12517|PINK ORC|",16);
																																																																									}else{
																																																																										if(t_6==String(L"PURPLE ORC",10)){
																																																																											t_enemyName=String(L"|12518|PURPLE ORC|",18);
																																																																										}else{
																																																																											if(t_6==String(L"PURPLE ELECTRIC ORB",19)){
																																																																												t_enemyName=String(L"|12519|PURPLE ELECTRIC ORB|",27);
																																																																											}else{
																																																																												if(t_6==String(L"RED ELECTRIC ORB",16)){
																																																																													t_enemyName=String(L"|12520|RED ELECTRIC ORB|",24);
																																																																												}else{
																																																																													if(t_6==String(L"GOLD ELECTRIC ORB",17)){
																																																																														t_enemyName=String(L"|12521|GOLD ELECTRIC ORB|",25);
																																																																													}else{
																																																																														if(t_6==String(L"WHITE SKULL",11)){
																																																																															t_enemyName=String(L"|12522|WHITE SKULL|",19);
																																																																														}else{
																																																																															if(t_6==String(L"YELLOW SKULL",12)){
																																																																																t_enemyName=String(L"|12523|YELLOW SKULL|",20);
																																																																															}else{
																																																																																if(t_6==String(L"BLACK SKULL",11)){
																																																																																	t_enemyName=String(L"|12524|BLACK SKULL|",19);
																																																																																}else{
																																																																																	if(t_6==String(L"PURPLE SLIME",12)){
																																																																																		t_enemyName=String(L"|12525|PURPLE SLIME|",20);
																																																																																	}else{
																																																																																		if(t_6==String(L"CRATE MIMIC",11)){
																																																																																			t_enemyName=String(L"|12526|CRATE MIMIC|",19);
																																																																																		}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return t_enemyName;
}
String c_Enemy::m_AddTagsToEnemyName_SizeDefault_3(String t_eName){
	String t_enemyName=String();
	String t_7=t_eName;
	if(t_7==String(L"BARREL MIMIC",12)){
		t_enemyName=String(L"|12527|BARREL MIMIC|",20);
	}else{
		if(t_7==String(L"SHRINE MIMIC",12)){
			t_enemyName=String(L"|12528|SHRINE MIMIC|",20);
		}else{
			if(t_7==String(L"WATER BALL",10)){
				t_enemyName=String(L"|12529|WATER BALL|",18);
			}else{
				if(t_7==String(L"CURSED WRAITH",13)){
					t_enemyName=String(L"|12530|CURSED WRAITH|",21);
				}else{
					if(t_7==String(L"EARTH DRAGON",12)){
						t_enemyName=String(L"|12531|EARTH DRAGON|",20);
					}else{
						if(t_7==String(L"NO RETURN MODE",14)){
							t_enemyName=String(L"|12532|NO RETURN MODE|",22);
						}else{
							if(t_7==String(L"FRANKENSTEINWAY",15)){
								t_enemyName=String(L"|12533|FRANKENSTEINWAY|",23);
							}else{
								if(t_7==String(L"THE CONDUCTOR",13)){
									t_enemyName=String(L"|12534|THE CONDUCTOR|",21);
								}else{
									if(t_7==String(L"TEMPO'S CURSE",13)){
										t_enemyName=String(L"|12535|TEMPO'S CURSE|",21);
									}else{
										if(t_7==String(L"MARY'S CURSE",12)){
											t_enemyName=String(L"|12536|MARY'S CURSE|",20);
										}else{
											if(t_7==String(L"ELECTRIC ZOMBIE",15)){
												t_enemyName=String(L"|12537|ELECTRIC ZOMBIE|",23);
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return t_enemyName;
}
String c_Enemy::m_AddTagsToEnemyName_SizeDefault(String t_eName){
	String t_enemyName=String();
	t_enemyName=m_AddTagsToEnemyName_SizeDefault_1(t_eName);
	if(t_enemyName!=String()){
		return t_enemyName;
	}
	t_enemyName=m_AddTagsToEnemyName_SizeDefault_2(t_eName);
	if(t_enemyName!=String()){
		return t_enemyName;
	}
	t_enemyName=m_AddTagsToEnemyName_SizeDefault_3(t_eName);
	if(t_enemyName!=String()){
		return t_enemyName;
	}
	return t_enemyName;
}
String c_Enemy::m_AddTagsToEnemyName(String t_eName,int t_size){
	t_eName=t_eName.ToUpper();
	String t_enemyName=String();
	int t_1=t_size;
	if(t_1==1){
		t_enemyName=m_AddTagsToEnemyName_Size1(t_eName);
	}else{
		t_enemyName=m_AddTagsToEnemyName_SizeDefault(t_eName);
	}
	if(t_enemyName==String()){
		bb_logger_Debug->p_Log(String(L"WARNING: Missing localization tags for enemy name \"",51)+t_eName+String(L"\"",1));
		t_enemyName=t_eName;
	}
	return t_enemyName;
}
String c_Enemy::m_GetEnemyName(int t_type){
	String t_enemyName=m_GetEnemyNameHelper(t_type);
	return m_AddTagsToEnemyName(t_enemyName.ToUpper(),2);
}
c_Sprite* c_Enemy::m_LoadBestiarySprite1(int t_type){
	c_Sprite* t_sprite=0;
	int t_10=t_type;
	if(t_10==0){
		t_sprite=(new c_Sprite)->m_new2(String(L"bestiary_greenslime.png",23),1,c_Image::m_DefaultFlags);
	}else{
		if(t_10==1){
			t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_blueslime.png",31),1,c_Image::m_DefaultFlags);
		}else{
			if(t_10==2){
				t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_orangeslime.png",33),1,c_Image::m_DefaultFlags);
			}else{
				if(t_10==3){
					t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_skeleton.png",30),1,c_Image::m_DefaultFlags);
				}else{
					if(t_10==4){
						t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_yellowskeleton.png",36),1,c_Image::m_DefaultFlags);
					}else{
						if(t_10==5){
							t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_blackskeleton.png",35),1,c_Image::m_DefaultFlags);
						}else{
							if(t_10==6){
								t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_bluebat.png",29),1,c_Image::m_DefaultFlags);
							}else{
								if(t_10==7){
									t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_redbat.png",28),1,c_Image::m_DefaultFlags);
								}else{
									if(t_10==8){
										t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_greenbat.png",30),1,c_Image::m_DefaultFlags);
									}else{
										if(t_10==9){
											t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_purplemonkey.png",34),1,c_Image::m_DefaultFlags);
										}else{
											if(t_10==10){
												t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_whitemonkey.png",33),1,c_Image::m_DefaultFlags);
											}else{
												if(t_10==11){
													t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_ghost.png",27),1,c_Image::m_DefaultFlags);
												}else{
													if(t_10==12){
														t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_zombie.png",28),1,c_Image::m_DefaultFlags);
													}else{
														if(t_10==13){
															t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_wraith.png",28),1,c_Image::m_DefaultFlags);
														}else{
															if(t_10==14){
																t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_trapchest.png",31),1,c_Image::m_DefaultFlags);
															}else{
																if(t_10==15){
																	t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_trapchest.png",31),1,c_Image::m_DefaultFlags);
																}else{
																	if(t_10==16){
																		t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_trapchest.png",31),1,c_Image::m_DefaultFlags);
																	}else{
																		if(t_10==100){
																			t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_armoredskeleton.png",37),1,c_Image::m_DefaultFlags);
																		}else{
																			if(t_10==101){
																				t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_yellowarmoredskeleton.png",43),1,c_Image::m_DefaultFlags);
																			}else{
																				if(t_10==102){
																					t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_blackarmoredskeleton.png",42),1,c_Image::m_DefaultFlags);
																				}else{
																					if(t_10==103){
																						t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_skeletonmage.png",34),1,c_Image::m_DefaultFlags);
																					}else{
																						if(t_10==104){
																							t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_yellowskeletonmage.png",40),1,c_Image::m_DefaultFlags);
																						}else{
																							if(t_10==105){
																								t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_blackskeletonmage.png",39),1,c_Image::m_DefaultFlags);
																							}else{
																								if(t_10==106){
																									t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_mushroom.png",30),1,c_Image::m_DefaultFlags);
																								}else{
																									if(t_10==107){
																										t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_purplemushroom.png",36),1,c_Image::m_DefaultFlags);
																									}else{
																										if(t_10==108){
																											t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_dirtgolem.png",31),1,c_Image::m_DefaultFlags);
																										}else{
																											if(t_10==109){
																												t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_darkgolem.png",31),1,c_Image::m_DefaultFlags);
																											}else{
																												if(t_10==110){
																													t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_whitearmadillo.png",36),1,c_Image::m_DefaultFlags);
																												}else{
																													if(t_10==111){
																														t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_yellowarmadillo.png",37),1,c_Image::m_DefaultFlags);
																													}else{
																														if(t_10==112){
																															t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_clone.png",27),1,c_Image::m_DefaultFlags);
																														}else{
																															if(t_10==113){
																																t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_tarmonster.png",32),1,c_Image::m_DefaultFlags);
																															}else{
																																if(t_10==114){
																																	t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_mole.png",26),1,c_Image::m_DefaultFlags);
																																}else{
																																	if(t_10==115){
																																		t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_wight.png",27),1,c_Image::m_DefaultFlags);
																																	}else{
																																		if(t_10==116){
																																			t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_fakewall.png",30),1,c_Image::m_DefaultFlags);
																																		}else{
																																			if(t_10==200){
																																				t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_fireslime.png",31),1,c_Image::m_DefaultFlags);
																																			}else{
																																				if(t_10==201){
																																					t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_iceslime.png",30),1,c_Image::m_DefaultFlags);
																																				}else{
																																					if(t_10==202){
																																						t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_skeletonknight.png",36),1,c_Image::m_DefaultFlags);
																																					}else{
																																						if(t_10==203){
																																							t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_yellowskeletonknight.png",42),1,c_Image::m_DefaultFlags);
																																						}else{
																																							if(t_10==204){
																																								t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_blackskeletonknight.png",41),1,c_Image::m_DefaultFlags);
																																							}else{
																																								if(t_10==205){
																																									t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_fireelemental.png",35),1,c_Image::m_DefaultFlags);
																																								}else{
																																									if(t_10==206){
																																										t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_iceelemental.png",34),1,c_Image::m_DefaultFlags);
																																									}else{
																																										if(t_10==207){
																																											t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_goblin.png",28),1,c_Image::m_DefaultFlags);
																																										}else{
																																											if(t_10==208){
																																												t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_greygoblin.png",32),1,c_Image::m_DefaultFlags);
																																											}else{
																																												if(t_10==209){
																																													t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_firebeetle.png",32),1,c_Image::m_DefaultFlags);
																																												}else{
																																													if(t_10==210){
																																														t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_icebeetle.png",31),1,c_Image::m_DefaultFlags);
																																													}else{
																																														if(t_10==211){
																																															t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_hellhound.png",31),1,c_Image::m_DefaultFlags);
																																														}else{
																																															if(t_10==212){
																																																t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_shovemonster.png",34),1,c_Image::m_DefaultFlags);
																																															}else{
																																																if(t_10==219){
																																																	t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_greyshovemonster.png",38),1,c_Image::m_DefaultFlags);
																																																}else{
																																																	if(t_10==213){
																																																		t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_yeti.png",26),1,c_Image::m_DefaultFlags);
																																																	}else{
																																																		if(t_10==214){
																																																			t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_ghast.png",27),1,c_Image::m_DefaultFlags);
																																																		}else{
																																																			if(t_10==215){
																																																				t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_trapcauldron.png",34),1,c_Image::m_DefaultFlags);
																																																			}else{
																																																				if(t_10==216){
																																																					t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_trapcauldron.png",34),1,c_Image::m_DefaultFlags);
																																																				}else{
																																																					if(t_10==300){
																																																						t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_goblinbomber.png",34),1,c_Image::m_DefaultFlags);
																																																					}else{
																																																						if(t_10==301){
																																																							t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_goblinsentry.png",34),1,c_Image::m_DefaultFlags);
																																																						}else{
																																																							if(t_10==302){
																																																								t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_blackbat.png",30),1,c_Image::m_DefaultFlags);
																																																							}else{
																																																								if(t_10==303){
																																																									t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_orangearmadillo.png",37),1,c_Image::m_DefaultFlags);
																																																								}else{
																																																									if(t_10==304){
																																																										t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_blademaster.png",33),1,c_Image::m_DefaultFlags);
																																																									}else{
																																																										if(t_10==305){
																																																											t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_orangeblademaster.png",39),1,c_Image::m_DefaultFlags);
																																																										}else{
																																																											if(t_10==306){
																																																												t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_ghoul.png",27),1,c_Image::m_DefaultFlags);
																																																											}else{
																																																												if(t_10==307){
																																																													t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_oozegolem.png",31),1,c_Image::m_DefaultFlags);
																																																												}else{
																																																													if(t_10==308){
																																																														t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_harpy.png",27),1,c_Image::m_DefaultFlags);
																																																													}else{
																																																														if(t_10==309){
																																																															t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_lich.png",26),1,c_Image::m_DefaultFlags);
																																																														}else{
																																																															if(t_10==310){
																																																																t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_redlich.png",29),1,c_Image::m_DefaultFlags);
																																																															}else{
																																																																if(t_10==311){
																																																																	t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_blacklich.png",31),1,c_Image::m_DefaultFlags);
																																																																}else{
																																																																	if(t_10==312){
																																																																		t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_greenmonkey.png",33),1,c_Image::m_DefaultFlags);
																																																																	}else{
																																																																		if(t_10==313){
																																																																			t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_magicmonkey.png",33),1,c_Image::m_DefaultFlags);
																																																																		}else{
																																																																			if(t_10==314){
																																																																				t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_pixie.png",27),1,c_Image::m_DefaultFlags);
																																																																			}else{
																																																																				if(t_10==315){
																																																																					t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_sarcophagus.png",33),1,c_Image::m_DefaultFlags);
																																																																				}else{
																																																																					if(t_10==316){
																																																																						t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_yellowsarcophagus.png",39),1,c_Image::m_DefaultFlags);
																																																																					}else{
																																																																						if(t_10==317){
																																																																							t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_blacksarcophagus.png",38),1,c_Image::m_DefaultFlags);
																																																																						}else{
																																																																							if(t_10==318){
																																																																								t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_spider.png",28),1,c_Image::m_DefaultFlags);
																																																																							}else{
																																																																								if(t_10==319){
																																																																									t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_warlock.png",29),1,c_Image::m_DefaultFlags);
																																																																								}else{
																																																																									if(t_10==701){
																																																																										t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_skull.png",27),1,c_Image::m_DefaultFlags);
																																																																									}else{
																																																																										if(t_10==712){
																																																																											t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_yellowskull.png",33),1,c_Image::m_DefaultFlags);
																																																																										}else{
																																																																											if(t_10==713){
																																																																												t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_blackskull.png",32),1,c_Image::m_DefaultFlags);
																																																																											}else{
																																																																												if(t_10==702){
																																																																													t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_waterball.png",31),1,c_Image::m_DefaultFlags);
																																																																												}else{
																																																																													if(t_10==704){
																																																																														t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_electricmage.png",34),1,c_Image::m_DefaultFlags);
																																																																													}else{
																																																																														if(t_10==705){
																																																																															t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_redelectricmage.png",37),1,c_Image::m_DefaultFlags);
																																																																														}else{
																																																																															if(t_10==706){
																																																																																t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_goldelectricmage.png",38),1,c_Image::m_DefaultFlags);
																																																																															}else{
																																																																																if(t_10==711){
																																																																																	t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_electriczombie.png",36),1,c_Image::m_DefaultFlags);
																																																																																}else{
																																																																																	if(t_10==717){
																																																																																		t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_evileye.png",29),1,c_Image::m_DefaultFlags);
																																																																																	}else{
																																																																																		if(t_10==719){
																																																																																			t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_pinkevileye.png",33),1,c_Image::m_DefaultFlags);
																																																																																		}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return t_sprite;
}
c_Sprite* c_Enemy::m_LoadBestiarySprite2(int t_type){
	c_Sprite* t_sprite=0;
	int t_11=t_type;
	if(t_11==710){
		t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_gorgon.png",28),1,c_Image::m_DefaultFlags);
	}else{
		if(t_11==718){
			t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_goldgorgon.png",32),1,c_Image::m_DefaultFlags);
		}else{
			if(t_11==720){
				t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_orc.png",25),1,c_Image::m_DefaultFlags);
			}else{
				if(t_11==721){
					t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_pinkorc.png",29),1,c_Image::m_DefaultFlags);
				}else{
					if(t_11==722){
						t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_purpleorc.png",31),1,c_Image::m_DefaultFlags);
					}else{
						if(t_11==723){
							t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_devil.png",27),1,c_Image::m_DefaultFlags);
						}else{
							if(t_11==724){
								t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_greendevil.png",32),1,c_Image::m_DefaultFlags);
							}else{
								if(t_11==725){
									t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_purpleslime.png",33),1,c_Image::m_DefaultFlags);
								}else{
									if(t_11==726){
										t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_cursedwraith.png",34),1,c_Image::m_DefaultFlags);
									}else{
										if(t_11==727){
											t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_cratemimic.png",32),1,c_Image::m_DefaultFlags);
										}else{
											if(t_11==728){
												t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_shopwall.png",30),1,c_Image::m_DefaultFlags);
											}else{
												if(t_11==731){
													t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_barrelmimic.png",33),1,c_Image::m_DefaultFlags);
												}else{
													if(t_11==732){
														t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_shrinemimic.png",33),1,c_Image::m_DefaultFlags);
													}else{
														if(t_11==320){
															t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_neonwarlock.png",33),1,c_Image::m_DefaultFlags);
														}else{
															if(t_11==400){
																t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_direbat.png",29),1,c_Image::m_DefaultFlags);
															}else{
																if(t_11==401){
																	t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_greydirebat.png",33),1,c_Image::m_DefaultFlags);
																}else{
																	if(t_11==402){
																		t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_greendragon.png",33),1,c_Image::m_DefaultFlags);
																	}else{
																		if(t_11==403){
																			t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_reddragon.png",31),1,c_Image::m_DefaultFlags);
																		}else{
																			if(t_11==404){
																				t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_bluedragon.png",32),1,c_Image::m_DefaultFlags);
																			}else{
																				if(t_11==415){
																					t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_earthdragon.png",33),1,c_Image::m_DefaultFlags);
																				}else{
																					if(t_11==405){
																						t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_banshee.png",29),1,c_Image::m_DefaultFlags);
																					}else{
																						if(t_11==406){
																							t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_greenbanshee.png",34),1,c_Image::m_DefaultFlags);
																						}else{
																							if(t_11==407){
																								t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_minotaur.png",30),1,c_Image::m_DefaultFlags);
																							}else{
																								if(t_11==408){
																									t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_greyminotaur.png",34),1,c_Image::m_DefaultFlags);
																								}else{
																									if(t_11==409){
																										t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_nightmare.png",31),1,c_Image::m_DefaultFlags);
																									}else{
																										if(t_11==410){
																											t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_bloodnightmare.png",36),1,c_Image::m_DefaultFlags);
																										}else{
																											if(t_11==411){
																												t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_mommy.png",27),1,c_Image::m_DefaultFlags);
																											}else{
																												if(t_11==412){
																													t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_ogre.png",26),1,c_Image::m_DefaultFlags);
																												}else{
																													if(t_11==413){
																														t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_metrognome.png",32),1,c_Image::m_DefaultFlags);
																													}else{
																														if(t_11==414){
																															t_sprite=(new c_Sprite)->m_new2(String(L"bestiary/bestiary_greenmetrognome.png",37),1,c_Image::m_DefaultFlags);
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return t_sprite;
}
c_Sprite* c_Enemy::m_LoadBestiarySprite(int t_type){
	c_Sprite* t_sprite=0;
	t_sprite=m_LoadBestiarySprite1(t_type);
	if(t_sprite!=0){
		return t_sprite;
	}
	t_sprite=m_LoadBestiarySprite2(t_type);
	if(t_sprite!=0){
		return t_sprite;
	}
	return t_sprite;
}
bool c_Enemy::m_EnemiesHaveMovedThisBeat(){
	if(c_Audio::m_fixedBeatNum==-64){
		return c_Audio::m_GetCurrentBeatNumberIncludingLoops(0,true)<=bb_controller_game_lastEnemyMoveBeat;
	}
	return c_Audio::m_GetCurrentBeatNumberIncludingLoops(0,true)<bb_controller_game_lastEnemyMoveBeat;
}
bool c_Enemy::m_EnemiesMovingThisFrame(){
	if(m_movesBehind>0){
		return true;
	}
	if(!c_Player::m_PlayersHaveMovedThisBeat()){
		return false;
	}
	return !m_EnemiesHaveMovedThisBeat();
}
void c_Enemy::m_MoveAll(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Enemy.MoveAll()",15));
}
bool c_Enemy::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Enemy.Hit(String, Int, Int, Entity, Bool, Int)",46));
	return false;
}
void c_Enemy::p_AnimateToTheBeat(){
	if(this->m_animOverrideState!=-1){
		this->m_image->p_SetFrame(this->m_animOverrideState);
	}
	if(this->m_wasFrozen && this->p_IsFrozen(true)){
		int t_frame=this->m_image->p_GetFrame();
		int t_numFrames=this->m_image->p_GetNumFrames();
		if(t_frame>=t_numFrames/2){
			t_frame=this->m_image->p_GetFrame();
			t_numFrames=this->m_image->p_GetNumFrames();
			this->m_image->p_SetFrame(t_frame-t_numFrames/2);
		}
		return;
	}
	this->m_blinkDelay-=1;
	this->m_blinkDuration-=1;
	if(this->m_blinkDelay<=0){
		this->m_blinkDelay=c_Util::m_RndIntRange(this->m_blink_MIN,this->m_blink_MAX,false,-1);
		this->m_blinkDuration=this->m_blink_DUR;
	}
	if(this->m_animOverride==-1){
		if(this->m_animNormal->p_IsEmpty()){
			return;
		}
		this->m_image->p_SetFrame(this->m_animOffset);
	}
	bb_logger_Debug->p_TraceNotImplemented(String(L"Enemy.AnimateToTheBeat()",24));
}
void c_Enemy::p_Update(){
	if(this->p_IsVisible() && c_Camera::m_IsOnScreen(this->m_x,this->m_y) && !this->m_executedCry && !c_Level::m_isLevelEditor){
		this->m_executedCry=true;
		if(this->m_overrideCrySound!=String()){
			c_Audio::m_PlayGameSoundAt(this->m_overrideCrySound,this->m_x,this->m_y,true,-1,false);
		}
	}
	if(this->m_isDancer && !c_Level::m_IsWallAt2(this->m_x,this->m_y)){
		this->m_shadowYOff+=8;
		this->m_isDancer=false;
		this->m_yOff+=FLOAT(8.0);
		this->m_image->p_SetZOff(this->m_image->m_zOff-FLOAT(124.0));
		this->m_shadow->p_SetZOff(FLOAT(0.0));
		this->m_shadow->p_SetZ(FLOAT(-990.0));
		this->m_currentMoveDelay=2;
	}
	this->p_AnimateToTheBeat();
	c_MobileEntity::p_Update();
	this->m_wasKnockedBack=false;
	this->m_justSpawned=false;
	this->m_wasFrozen=this->p_IsFrozen(false);
}
void c_Enemy::m_SetEnemiesToDropNoCoinsOverride(){
	c_Enumerator4* t_=m_enemyList->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Enemy* t_enemy=t_->p_NextObject();
		t_enemy->m_dropNoCoinsOverride=true;
	}
}
void c_Enemy::m_KillAllEnemies(){
	m_killingAllEnemies=true;
	c_Enumerator4* t_=m_enemyList->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Enemy* t_enemy=t_->p_NextObject();
		t_enemy->p_Die();
	}
	m_killingAllEnemies=false;
}
void c_Enemy::mark(){
	c_MobileEntity::mark();
	gc_mark_q(m_lastPlayerHitFrame);
	gc_mark_q(m_lastPlayerHitSource);
	gc_mark_q(m_animNormal);
	gc_mark_q(m_animNormal2);
	gc_mark_q(m_animNormal3);
	gc_mark_q(m_animBlink);
	gc_mark_q(m_animTell);
	gc_mark_q(m_animTellBlink);
	gc_mark_q(m_attackSwipeImage);
	gc_mark_q(m_jumpDirt);
}
c_Crate::c_Crate(){
	m_initialYOff=0;
	m_crateType=0;
	m_contents=String(L"no_item",7);
	m_beEmpty=false;
	m_emptyCoins=0;
	m_contents2=String(L"no_item",7);
	m_contents3=String(L"no_item",7);
	m_determinedContents=false;
	m_gorgonFlipX=false;
	m_gorgonFlashFrames=0;
}
c_List5* c_Crate::m_fallenCrates;
c_List6* c_Crate::m_fallenGargoyles;
String c_Crate::m_SelectItem(int t_itemLevel){
	int t_replayConsistencyChannel=1;
	if(c_Level::m_creatingMap){
		t_replayConsistencyChannel=-1;
	}
	int t_lockedChestItemRoll=c_Util::m_RndIntRange(0,100,false,t_replayConsistencyChannel);
	if(t_lockedChestItemRoll>45){
		return c_Item::m_GetRandomItemInClass(String(),t_itemLevel,String(L"lockedChestChance",17),0,false,String(),false);
	}
	int t_foodRoll=c_Util::m_RndIntRange(0,150,false,t_replayConsistencyChannel);
	if(t_foodRoll<=40){
		if(c_Player::m_DoesAnyPlayerHaveItemOfType(String(L"ring_luck",9),false)){
			return String(L"food_4",6);
		}
		if(c_Player::m_DoesAnyPlayerHaveItemOfType(String(L"charm_luck",10),false)){
			return String(L"food_2",6);
		}
		return String(L"food_1",6);
	}
	if(t_foodRoll<=70){
		if(c_Player::m_DoesAnyPlayerHaveItemOfType(String(L"ring_luck",9),false)){
			return String(L"food_4",6);
		}
		if(c_Player::m_DoesAnyPlayerHaveItemOfType(String(L"charm_luck",10),false)){
			return String(L"food_3",6);
		}
		return String(L"food_2",6);
	}
	if(t_foodRoll<=90){
		if(c_Player::m_DoesAnyPlayerHaveItemOfType(String(L"ring_luck",9),false)){
			return String(L"food_4",6);
		}
		return String(L"food_3",6);
	}
	if(t_foodRoll<=100){
		return String(L"food_4",6);
	}
	if(t_foodRoll<=130){
		return String(L"food_carrot",11);
	}
	return String(L"food_cookies",12);
}
void c_Crate::p_DecideIfStayingEmpty(){
	if(this->m_beEmpty){
		return;
	}
	if(this->m_contents!=String(L"no_item",7)){
		return;
	}
	int t_replayConsistencyChannel=1;
	if(c_Level::m_creatingMap){
		t_replayConsistencyChannel=-1;
	}
	int t_itemRoll=c_Util::m_RndIntRange(0,100,false,t_replayConsistencyChannel);
	if(this->m_crateType==1 && t_itemRoll<=30 || t_itemRoll<=40){
		this->m_beEmpty=true;
	}else{
		if(!this->m_beEmpty){
			this->m_contents=m_SelectItem(bb_controller_game_currentLevel);
			return;
		}
	}
	int t_coinsRoll=c_Util::m_RndIntRange(0,100,false,t_replayConsistencyChannel);
	if(t_coinsRoll<=10){
		this->m_emptyCoins=-3;
		if(c_Player::m_DoesAnyPlayerHaveItemOfType(String(L"ring_luck",9),false)){
			this->m_emptyCoins=-2;
		}
		return;
	}
	if(t_coinsRoll<=15){
		this->m_emptyCoins=-2;
		return;
	}
	if(t_coinsRoll<=45){
		this->m_emptyCoins=-1;
		if(c_Player::m_DoesAnyPlayerHaveItemOfType(String(L"ring_luck",9),false)){
			this->m_emptyCoins=-2;
		}
		return;
	}
	if(t_coinsRoll<=75){
		this->m_emptyCoins=10;
		if(c_Player::m_DoesAnyPlayerHaveItemOfType(String(L"charm_luck",10),false)){
			this->m_emptyCoins=30;
		}
		if(c_Player::m_DoesAnyPlayerHaveItemOfType(String(L"ring_luck",9),false)){
			this->m_emptyCoins=50;
		}
		return;
	}
	if(t_coinsRoll>98){
		this->m_emptyCoins=30;
		if(c_Player::m_DoesAnyPlayerHaveItemOfType(String(L"ring_luck",9),false)){
			this->m_emptyCoins=50;
		}
	}
}
void c_Crate::p_DetermineContents(){
	int t_2=this->m_crateType;
	if(t_2==4){
		this->m_beEmpty=true;
		this->m_emptyCoins=30;
	}else{
		if(t_2==3){
			this->m_beEmpty=true;
			this->m_emptyCoins=-4;
		}else{
			if(t_2==2){
				this->m_contents=c_Item::m_GetRandomItemInClass(String(),bb_controller_game_currentLevel,String(L"urnChance",9),0,false,String(),false);
				for(int t_requestedLevel=bb_controller_game_currentLevel;t_requestedLevel>0;t_requestedLevel=t_requestedLevel+-1){
					if(this->m_contents2!=String(L"no_item",7)){
						break;
					}
					this->m_contents2=c_Item::m_GetRandomItemInClass(String(L"isSpell",7),t_requestedLevel,String(L"chestChance",11),0,false,String(),false);
				}
				this->m_contents3=c_Item::m_GetRandomItemInClass(String(L"isFood",6),bb_controller_game_currentLevel+2,String(L"chestChance",11),0,false,String(),false);
			}else{
				this->p_DecideIfStayingEmpty();
			}
		}
	}
	this->m_determinedContents=true;
}
c_List5* c_Crate::m_crateList;
c_Crate* c_Crate::m_new(int t_xVal,int t_yVal,int t_type,String t_cont){
	c_Enemy::m_new();
	this->m_isCrate=true;
	this->m_containsItem=true;
	this->p_Init3(t_xVal,t_yVal,t_type+1,String(L"crate",5),String(),-1,-1);
	this->m_initialYOff=int(this->m_yOff);
	this->m_crateType=t_type;
	this->m_contents=t_cont;
	if(this->m_contents==String(L"no_item",7) && c_Level::m_randSeed!=-1){
		this->p_DetermineContents();
	}
	m_crateList->p_AddLast5(this);
	bb_logger_Debug->p_WriteLine2(String(L"  with ",7)+c_Item::m_GetDisplayName(this->m_contents));
	return this;
}
c_Crate* c_Crate::m_new2(){
	c_Enemy::m_new();
	return this;
}
bool c_Crate::p_Open2(bool t_playSound){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Crate.Open(Bool)",16));
	return false;
}
void c_Crate::m_ProcessFallenCrates(){
	int t_x=-1;
	int t_y=0;
	while(m_fallenCrates->p_Count()>0){
		c_Crate* t_fallenCrate=m_fallenCrates->p_RemoveFirst();
		c_Point* t_point=c_Util::m_FindClosestTrulyUnoccupiedSpace(t_x,t_y,false);
		if(t_point!=0){
			t_x=t_point->m_x;
			t_y=t_point->m_y;
		}
		t_fallenCrate->m_x=t_x;
		t_fallenCrate->m_y=t_y;
		t_fallenCrate->m_falling=false;
		t_fallenCrate->m_flaggedForDeath=false;
		t_fallenCrate->m_collides=true;
		if(t_fallenCrate->m_emptyCoins==-3){
			t_fallenCrate->m_emptyCoins=-1;
		}
		int t_1=t_fallenCrate->m_crateType;
		if(t_1==2 || t_1==4){
			t_fallenCrate->m_health-=1;
			if(t_fallenCrate->m_health<=0){
				t_fallenCrate->p_Open2(false);
			}
		}else{
			if(t_1==3){
			}else{
				t_fallenCrate->p_Open2(false);
			}
		}
		t_y+=1;
	}
	while(m_fallenGargoyles->p_Count()>0){
		c_Gargoyle* t_fallenGargoyle=m_fallenGargoyles->p_RemoveFirst();
		c_Point* t_point2=c_Util::m_FindClosestTrulyUnoccupiedSpace(t_x,t_y,false);
		if(t_point2!=0){
			t_x=t_point2->m_x;
			t_y=t_point2->m_y;
		}
		t_fallenGargoyle->m_x=t_x;
		t_fallenGargoyle->m_y=t_y;
		t_fallenGargoyle->m_falling=false;
		t_fallenGargoyle->m_flaggedForDeath=false;
		t_fallenGargoyle->p_OpenAsCrate(false);
		t_y+=1;
	}
}
void c_Crate::p_Die(){
	if(!this->m_dead){
		if(m_fallenCrates->p_Contains3(this)){
			this->m_x=-9999;
			this->m_y=-9999;
		}else{
			m_crateList->p_RemoveEach3(this);
			c_Enemy::p_Die();
		}
	}
}
bool c_Crate::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Crate.Hit(String, Int, Int, Entity, Bool, Int)",46));
	return false;
}
void c_Crate::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Crate.Update()",14));
}
void c_Crate::mark(){
	c_Enemy::mark();
}
c_List5::c_List5(){
	m__head=((new c_HeadNode5)->m_new());
}
c_List5* c_List5::m_new(){
	return this;
}
c_Node11* c_List5::p_AddLast5(c_Crate* t_data){
	return (new c_Node11)->m_new(m__head,m__head->m__pred,t_data);
}
c_List5* c_List5::m_new2(Array<c_Crate* > t_data){
	Array<c_Crate* > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		c_Crate* t_t=t_[t_2];
		t_2=t_2+1;
		p_AddLast5(t_t);
	}
	return this;
}
int c_List5::p_Clear(){
	gc_assign(m__head->m__succ,m__head);
	gc_assign(m__head->m__pred,m__head);
	return 0;
}
int c_List5::p_Count(){
	int t_n=0;
	c_Node11* t_node=m__head->m__succ;
	while(t_node!=m__head){
		t_node=t_node->m__succ;
		t_n+=1;
	}
	return t_n;
}
c_Crate* c_List5::p_RemoveFirst(){
	c_Crate* t_data=m__head->m__succ->m__data;
	m__head->m__succ->p_Remove();
	return t_data;
}
bool c_List5::p_Equals5(c_Crate* t_lhs,c_Crate* t_rhs){
	return t_lhs==t_rhs;
}
c_Node11* c_List5::p_Find(c_Crate* t_value,c_Node11* t_start){
	while(t_start!=m__head){
		if(p_Equals5(t_value,t_start->m__data)){
			return t_start;
		}
		t_start=t_start->m__succ;
	}
	return 0;
}
c_Node11* c_List5::p_Find2(c_Crate* t_value){
	return p_Find(t_value,m__head->m__succ);
}
void c_List5::p_RemoveFirst2(c_Crate* t_value){
	c_Node11* t_node=p_Find2(t_value);
	if((t_node)!=0){
		t_node->p_Remove();
	}
}
bool c_List5::p_Contains3(c_Crate* t_value){
	c_Node11* t_node=m__head->m__succ;
	while(t_node!=m__head){
		if(p_Equals5(t_node->m__data,t_value)){
			return true;
		}
		t_node=t_node->m__succ;
	}
	return false;
}
int c_List5::p_RemoveEach3(c_Crate* t_value){
	c_Node11* t_node=m__head->m__succ;
	while(t_node!=m__head){
		c_Node11* t_succ=t_node->m__succ;
		if(p_Equals5(t_node->m__data,t_value)){
			t_node->p_Remove();
		}
		t_node=t_succ;
	}
	return 0;
}
void c_List5::mark(){
	Object::mark();
	gc_mark_q(m__head);
}
c_Node11::c_Node11(){
	m__succ=0;
	m__pred=0;
	m__data=0;
}
c_Node11* c_Node11::m_new(c_Node11* t_succ,c_Node11* t_pred,c_Crate* t_data){
	gc_assign(m__succ,t_succ);
	gc_assign(m__pred,t_pred);
	gc_assign(m__succ->m__pred,this);
	gc_assign(m__pred->m__succ,this);
	gc_assign(m__data,t_data);
	return this;
}
c_Node11* c_Node11::m_new2(){
	return this;
}
int c_Node11::p_Remove(){
	gc_assign(m__succ->m__pred,m__pred);
	gc_assign(m__pred->m__succ,m__succ);
	return 0;
}
void c_Node11::mark(){
	Object::mark();
	gc_mark_q(m__succ);
	gc_mark_q(m__pred);
	gc_mark_q(m__data);
}
c_HeadNode5::c_HeadNode5(){
}
c_HeadNode5* c_HeadNode5::m_new(){
	c_Node11::m_new2();
	gc_assign(m__succ,(this));
	gc_assign(m__pred,(this));
	return this;
}
void c_HeadNode5::mark(){
	c_Node11::mark();
}
c_Gargoyle::c_Gargoyle(){
	m_gustImage=0;
	m_determinedContents=false;
	m_contents=String();
}
void c_Gargoyle::p_DetermineContents(){
	if(!this->m_determinedContents && this->m_level!=7){
		this->m_contents=c_Crate::m_SelectItem(bb_controller_game_currentLevel);
		this->m_determinedContents=true;
	}
}
c_Gargoyle* c_Gargoyle::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	if(t_l==5){
		if(bb_controller_game_currentLevel==3){
			t_l=6;
		}else{
			if(c_Necrodancer::m_necrodancer!=0){
				t_l=7;
			}
		}
	}
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"gargoyle",8));
	if(this->m_level==1){
		gc_assign(this->m_gustImage,(new c_Sprite)->m_new2(String(L"particles/wind_gust.png",23),7,1));
	}
	if(this->m_level>=5 && c_Level::m_randSeed!=-1){
		this->p_DetermineContents();
	}
	this->m_isCrate=true;
	this->m_containsItem=true;
	this->m_overrideAttackSound=String(L"gargoyleAttack",14);
	this->m_overrideDeathSound=String(L"gargoyleDeath",13);
	return this;
}
c_Gargoyle* c_Gargoyle::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_Gargoyle::p_OpenAsCrate(bool t_enemyOK){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Gargoyle.OpenAsCrate(Bool)",26));
}
void c_Gargoyle::p_Die(){
	if(!this->m_dead){
		if(c_Crate::m_fallenGargoyles->p_Contains4(this)){
			this->m_x=-9999;
			this->m_y=-9999;
		}else{
			c_Enemy::p_Die();
		}
	}
}
bool c_Gargoyle::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Gargoyle.Hit(String, Int, Int, Entity, Bool, Int)",49));
	return false;
}
void c_Gargoyle::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Gargoyle.Update()",17));
}
void c_Gargoyle::mark(){
	c_Enemy::mark();
	gc_mark_q(m_gustImage);
}
c_List6::c_List6(){
	m__head=((new c_HeadNode6)->m_new());
}
c_List6* c_List6::m_new(){
	return this;
}
c_Node12* c_List6::p_AddLast6(c_Gargoyle* t_data){
	return (new c_Node12)->m_new(m__head,m__head->m__pred,t_data);
}
c_List6* c_List6::m_new2(Array<c_Gargoyle* > t_data){
	Array<c_Gargoyle* > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		c_Gargoyle* t_t=t_[t_2];
		t_2=t_2+1;
		p_AddLast6(t_t);
	}
	return this;
}
int c_List6::p_Clear(){
	gc_assign(m__head->m__succ,m__head);
	gc_assign(m__head->m__pred,m__head);
	return 0;
}
int c_List6::p_Count(){
	int t_n=0;
	c_Node12* t_node=m__head->m__succ;
	while(t_node!=m__head){
		t_node=t_node->m__succ;
		t_n+=1;
	}
	return t_n;
}
c_Gargoyle* c_List6::p_RemoveFirst(){
	c_Gargoyle* t_data=m__head->m__succ->m__data;
	m__head->m__succ->p_Remove();
	return t_data;
}
bool c_List6::p_Equals6(c_Gargoyle* t_lhs,c_Gargoyle* t_rhs){
	return t_lhs==t_rhs;
}
c_Node12* c_List6::p_Find3(c_Gargoyle* t_value,c_Node12* t_start){
	while(t_start!=m__head){
		if(p_Equals6(t_value,t_start->m__data)){
			return t_start;
		}
		t_start=t_start->m__succ;
	}
	return 0;
}
c_Node12* c_List6::p_Find4(c_Gargoyle* t_value){
	return p_Find3(t_value,m__head->m__succ);
}
void c_List6::p_RemoveFirst3(c_Gargoyle* t_value){
	c_Node12* t_node=p_Find4(t_value);
	if((t_node)!=0){
		t_node->p_Remove();
	}
}
bool c_List6::p_Contains4(c_Gargoyle* t_value){
	c_Node12* t_node=m__head->m__succ;
	while(t_node!=m__head){
		if(p_Equals6(t_node->m__data,t_value)){
			return true;
		}
		t_node=t_node->m__succ;
	}
	return false;
}
void c_List6::mark(){
	Object::mark();
	gc_mark_q(m__head);
}
c_Node12::c_Node12(){
	m__succ=0;
	m__pred=0;
	m__data=0;
}
c_Node12* c_Node12::m_new(c_Node12* t_succ,c_Node12* t_pred,c_Gargoyle* t_data){
	gc_assign(m__succ,t_succ);
	gc_assign(m__pred,t_pred);
	gc_assign(m__succ->m__pred,this);
	gc_assign(m__pred->m__succ,this);
	gc_assign(m__data,t_data);
	return this;
}
c_Node12* c_Node12::m_new2(){
	return this;
}
int c_Node12::p_Remove(){
	gc_assign(m__succ->m__pred,m__pred);
	gc_assign(m__pred->m__succ,m__succ);
	return 0;
}
void c_Node12::mark(){
	Object::mark();
	gc_mark_q(m__succ);
	gc_mark_q(m__pred);
	gc_mark_q(m__data);
}
c_HeadNode6::c_HeadNode6(){
}
c_HeadNode6* c_HeadNode6::m_new(){
	c_Node12::m_new2();
	gc_assign(m__succ,(this));
	gc_assign(m__pred,(this));
	return this;
}
void c_HeadNode6::mark(){
	c_Node12::mark();
}
c_List7::c_List7(){
	m__head=((new c_HeadNode7)->m_new());
}
c_List7* c_List7::m_new(){
	return this;
}
c_Node13* c_List7::p_AddLast7(String t_data){
	return (new c_Node13)->m_new(m__head,m__head->m__pred,t_data);
}
c_List7* c_List7::m_new2(Array<String > t_data){
	Array<String > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		String t_t=t_[t_2];
		t_2=t_2+1;
		p_AddLast7(t_t);
	}
	return this;
}
int c_List7::p_Clear(){
	gc_assign(m__head->m__succ,m__head);
	gc_assign(m__head->m__pred,m__head);
	return 0;
}
bool c_List7::p_Equals7(String t_lhs,String t_rhs){
	return t_lhs==t_rhs;
}
bool c_List7::p_Contains2(String t_value){
	c_Node13* t_node=m__head->m__succ;
	while(t_node!=m__head){
		if(p_Equals7(t_node->m__data,t_value)){
			return true;
		}
		t_node=t_node->m__succ;
	}
	return false;
}
int c_List7::p_RemoveEach4(String t_value){
	c_Node13* t_node=m__head->m__succ;
	while(t_node!=m__head){
		c_Node13* t_succ=t_node->m__succ;
		if(p_Equals7(t_node->m__data,t_value)){
			t_node->p_Remove();
		}
		t_node=t_succ;
	}
	return 0;
}
void c_List7::mark(){
	Object::mark();
	gc_mark_q(m__head);
}
c_Node13::c_Node13(){
	m__succ=0;
	m__pred=0;
	m__data=String();
}
c_Node13* c_Node13::m_new(c_Node13* t_succ,c_Node13* t_pred,String t_data){
	gc_assign(m__succ,t_succ);
	gc_assign(m__pred,t_pred);
	gc_assign(m__succ->m__pred,this);
	gc_assign(m__pred->m__succ,this);
	m__data=t_data;
	return this;
}
c_Node13* c_Node13::m_new2(){
	return this;
}
int c_Node13::p_Remove(){
	gc_assign(m__succ->m__pred,m__pred);
	gc_assign(m__pred->m__succ,m__succ);
	return 0;
}
void c_Node13::mark(){
	Object::mark();
	gc_mark_q(m__succ);
	gc_mark_q(m__pred);
}
c_HeadNode7::c_HeadNode7(){
}
c_HeadNode7* c_HeadNode7::m_new(){
	c_Node13::m_new2();
	gc_assign(m__succ,(this));
	gc_assign(m__pred,(this));
	return this;
}
void c_HeadNode7::mark(){
	c_Node13::mark();
}
c_Leprechaun::c_Leprechaun(){
}
bool c_Leprechaun::m_seenLeprechaun;
bool c_Leprechaun::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Leprechaun.Hit(String, Int, Int, Entity, Bool, Int)",51));
	return false;
}
void c_Leprechaun::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Leprechaun.Update()",19));
}
void c_Leprechaun::mark(){
	c_Enemy::mark();
}
c_Chain::c_Chain(){
}
int c_Chain::m_kills;
Array<bool > c_Chain::m_waitingForFirstMovement;
void c_Chain::mark(){
	Object::mark();
}
c_Enumerator2::c_Enumerator2(){
	m__list=0;
	m__curr=0;
}
c_Enumerator2* c_Enumerator2::m_new(c_List3* t_list){
	gc_assign(m__list,t_list);
	gc_assign(m__curr,t_list->m__head->m__succ);
	return this;
}
c_Enumerator2* c_Enumerator2::m_new2(){
	return this;
}
bool c_Enumerator2::p_HasNext(){
	while(m__curr->m__succ->m__pred!=m__curr){
		gc_assign(m__curr,m__curr->m__succ);
	}
	return m__curr!=m__list->m__head;
}
c_Entity* c_Enumerator2::p_NextObject(){
	c_Entity* t_data=m__curr->m__data;
	gc_assign(m__curr,m__curr->m__succ);
	return t_data;
}
void c_Enumerator2::mark(){
	Object::mark();
	gc_mark_q(m__list);
	gc_mark_q(m__curr);
}
c_Flyaway::c_Flyaway(){
}
void c_Flyaway::m_StopRenderingOfAllCurrentFlyaways(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Flyaway.StopRenderingOfAllCurrentFlyaways()",43));
}
c_Flyaway* c_Flyaway::m_new(String t_filename,int t_xVal,int t_yVal,int t_tempXOff,int t_tempYOff,bool t_inWrld,Float t_xSpd,Float t_ySpd,bool t_textString,int t_dur){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Flyaway.New(String, Int, Int, Int, Int, Bool, Float, Float, Bool, Int)",70));
	return this;
}
c_Flyaway* c_Flyaway::m_new2(){
	return this;
}
void c_Flyaway::p_CenterX(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Flyaway.CenterX()",17));
}
int c_Flyaway::m_temporarilyDisableNewFlyaways;
c_List38* c_Flyaway::m_activeFlyaways;
void c_Flyaway::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Flyaway.Update()",16));
}
void c_Flyaway::m_UpdateAll(){
	if(m_temporarilyDisableNewFlyaways>0){
		m_temporarilyDisableNewFlyaways-=1;
	}
	c_Enumerator32* t_=m_activeFlyaways->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Flyaway* t_flyaway=t_->p_NextObject();
		t_flyaway->p_Update();
	}
}
void c_Flyaway::mark(){
	Object::mark();
}
c_Camera::c_Camera(){
}
int c_Camera::m_fadeOutDuration;
int c_Camera::m_fadeOutCurrent;
c_Callback* c_Camera::m_fadeOutCallback;
int c_Camera::m_fadeInDuration;
int c_Camera::m_fadeInCurrent;
c_Callback* c_Camera::m_fadeInCallback;
int c_Camera::m_x;
int c_Camera::m_y;
Float c_Camera::m_seekX;
Float c_Camera::m_seekY;
bool c_Camera::m_fixed;
bool c_Camera::m_IsOnScreenStandardizedRelativeToPoint(int t_xVal,int t_yVal,int t_pointX,int t_pointY){
	int t_pixelX=t_pointX-24*t_xVal;
	int t_pixelY=t_pointY-24*t_yVal;
	return -239<=t_pixelX && t_pixelX<=251 && (-134<=t_pixelY && t_pixelY<=146);
}
int c_Camera::m_GetFixedHeight(){
	if(c_Level::m_isReplaying){
		c_Node24* t_curReplayData=c_Level::m_replay->m_curReplayData;
		if(t_curReplayData!=0){
			return t_curReplayData->p_Value()->m_cameraHeight;
		}
	}
	return bb_necrodancergame_FIXED_HEIGHT;
}
int c_Camera::m_GetFixedWidth(){
	if(c_Level::m_isReplaying){
		c_Node24* t_curReplayData=c_Level::m_replay->m_curReplayData;
		if(t_curReplayData!=0){
			return t_curReplayData->p_Value()->m_cameraWidth;
		}
	}
	return bb_necrodancergame_FIXED_WIDTH;
}
void c_Camera::m_FadeOutThenExecute(int t_dur,c_Callback* t_cBack){
	gc_assign(m_fadeOutCallback,t_cBack);
	m_fadeOutDuration=t_dur;
	m_fadeOutCurrent=t_dur;
}
Float c_Camera::m_shakeOffX;
Float c_Camera::m_GetX(){
	return Float(m_x)+m_shakeOffX;
}
Float c_Camera::m_shakeOffY;
Float c_Camera::m_GetY(){
	return Float(m_y)+m_shakeOffY;
}
bool c_Camera::m_IsOnScreen(int t_xVal,int t_yVal){
	int t_scaledXVal=24*t_xVal;
	Float t_x=m_GetX()-Float(24*t_xVal);
	int t_cameraWidth=bb_necrodancergame_FIXED_WIDTH;
	if(c_Level::m_isReplaying && c_Level::m_replay->m_curReplayData!=0){
		t_cameraWidth=c_Level::m_replay->m_curReplayData->p_Value()->m_cameraWidth;
	}
	int t_xMin=t_cameraWidth/-2;
	int t_xMax=t_cameraWidth/2+12;
	if(Float(t_xMin)<t_x && t_x<Float(t_xMax)){
		int t_scaledYVal=24*t_yVal;
		Float t_y=m_GetY()-Float(t_scaledYVal);
		int t_cameraHeight=bb_necrodancergame_FIXED_HEIGHT;
		if(c_Level::m_isReplaying && c_Level::m_replay->m_curReplayData!=0){
			t_cameraHeight=c_Level::m_replay->m_curReplayData->p_Value()->m_cameraHeight;
		}
		int t_yMin=t_cameraHeight/-2;
		int t_yMax=t_cameraHeight/2+12;
		if(Float(t_yMin)<t_y && t_y<Float(t_yMax)){
			return true;
		}
	}
	return false;
}
int c_Camera::m_overlayWhiteDuration;
void c_Camera::m_Shake(int t_type,int t_xVal,int t_yVal){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Camera.Shake(Int, Int, Int)",27));
}
void c_Camera::mark(){
	Object::mark();
}
int bb_math_Abs(int t_x){
	if(t_x>=0){
		return t_x;
	}
	return -t_x;
}
Float bb_math_Abs2(Float t_x){
	if(t_x>=FLOAT(0.0)){
		return t_x;
	}
	return -t_x;
}
c_BossBattleType::c_BossBattleType(){
}
void c_BossBattleType::mark(){
	Object::mark();
}
c_Stairs_callback::c_Stairs_callback(){
}
int c_Stairs_callback::m_levelVal;
int c_Stairs_callback::m_zoneVal;
int c_Stairs_callback::m_playerVal;
bool c_Stairs_callback::m_continuedRun;
c_Stairs_callback* c_Stairs_callback::m_new(){
	return this;
}
void c_Stairs_callback::mark(){
	Object::mark();
}
c_ControllerCutscene::c_ControllerCutscene(){
}
c_ControllerCutscene* c_ControllerCutscene::m_new(int t_cutsceneChar,int t_cutsceneNum,int t_creditsNum){
	c_Controller::m_new();
	bb_logger_Debug->p_TraceNotImplemented(String(L"ControllerCutscene.New(Int, Int, Int)",37));
	return this;
}
c_ControllerCutscene* c_ControllerCutscene::m_new2(){
	c_Controller::m_new();
	return this;
}
void c_ControllerCutscene::m_InitSubtitles(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ControllerCutscene.InitSubtitles()",34));
}
void c_ControllerCutscene::p_RegainFocus(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ControllerCutscene.RegainFocus()",32));
}
void c_ControllerCutscene::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ControllerCutscene.Update()",27));
}
void c_ControllerCutscene::mark(){
	c_Controller::mark();
}
c_Map8::c_Map8(){
	m_root=0;
}
c_Map8* c_Map8::m_new(){
	return this;
}
int c_Map8::p_Clear(){
	m_root=0;
	return 0;
}
c_Node14* c_Map8::p_FindNode2(String t_key){
	c_Node14* t_node=m_root;
	while((t_node)!=0){
		int t_cmp=p_Compare2(t_key,t_node->m_key);
		if(t_cmp>0){
			t_node=t_node->m_right;
		}else{
			if(t_cmp<0){
				t_node=t_node->m_left;
			}else{
				return t_node;
			}
		}
	}
	return t_node;
}
bool c_Map8::p_Contains2(String t_key){
	return p_FindNode2(t_key)!=0;
}
String c_Map8::p_Get(String t_key){
	c_Node14* t_node=p_FindNode2(t_key);
	if((t_node)!=0){
		return t_node->m_value;
	}
	return String();
}
int c_Map8::p_RotateLeft7(c_Node14* t_node){
	c_Node14* t_child=t_node->m_right;
	gc_assign(t_node->m_right,t_child->m_left);
	if((t_child->m_left)!=0){
		gc_assign(t_child->m_left->m_parent,t_node);
	}
	gc_assign(t_child->m_parent,t_node->m_parent);
	if((t_node->m_parent)!=0){
		if(t_node==t_node->m_parent->m_left){
			gc_assign(t_node->m_parent->m_left,t_child);
		}else{
			gc_assign(t_node->m_parent->m_right,t_child);
		}
	}else{
		gc_assign(m_root,t_child);
	}
	gc_assign(t_child->m_left,t_node);
	gc_assign(t_node->m_parent,t_child);
	return 0;
}
int c_Map8::p_RotateRight7(c_Node14* t_node){
	c_Node14* t_child=t_node->m_left;
	gc_assign(t_node->m_left,t_child->m_right);
	if((t_child->m_right)!=0){
		gc_assign(t_child->m_right->m_parent,t_node);
	}
	gc_assign(t_child->m_parent,t_node->m_parent);
	if((t_node->m_parent)!=0){
		if(t_node==t_node->m_parent->m_right){
			gc_assign(t_node->m_parent->m_right,t_child);
		}else{
			gc_assign(t_node->m_parent->m_left,t_child);
		}
	}else{
		gc_assign(m_root,t_child);
	}
	gc_assign(t_child->m_right,t_node);
	gc_assign(t_node->m_parent,t_child);
	return 0;
}
int c_Map8::p_InsertFixup7(c_Node14* t_node){
	while(((t_node->m_parent)!=0) && t_node->m_parent->m_color==-1 && ((t_node->m_parent->m_parent)!=0)){
		if(t_node->m_parent==t_node->m_parent->m_parent->m_left){
			c_Node14* t_uncle=t_node->m_parent->m_parent->m_right;
			if(((t_uncle)!=0) && t_uncle->m_color==-1){
				t_node->m_parent->m_color=1;
				t_uncle->m_color=1;
				t_uncle->m_parent->m_color=-1;
				t_node=t_uncle->m_parent;
			}else{
				if(t_node==t_node->m_parent->m_right){
					t_node=t_node->m_parent;
					p_RotateLeft7(t_node);
				}
				t_node->m_parent->m_color=1;
				t_node->m_parent->m_parent->m_color=-1;
				p_RotateRight7(t_node->m_parent->m_parent);
			}
		}else{
			c_Node14* t_uncle2=t_node->m_parent->m_parent->m_left;
			if(((t_uncle2)!=0) && t_uncle2->m_color==-1){
				t_node->m_parent->m_color=1;
				t_uncle2->m_color=1;
				t_uncle2->m_parent->m_color=-1;
				t_node=t_uncle2->m_parent;
			}else{
				if(t_node==t_node->m_parent->m_left){
					t_node=t_node->m_parent;
					p_RotateRight7(t_node);
				}
				t_node->m_parent->m_color=1;
				t_node->m_parent->m_parent->m_color=-1;
				p_RotateLeft7(t_node->m_parent->m_parent);
			}
		}
	}
	m_root->m_color=1;
	return 0;
}
bool c_Map8::p_Set8(String t_key,String t_value){
	c_Node14* t_node=m_root;
	c_Node14* t_parent=0;
	int t_cmp=0;
	while((t_node)!=0){
		t_parent=t_node;
		t_cmp=p_Compare2(t_key,t_node->m_key);
		if(t_cmp>0){
			t_node=t_node->m_right;
		}else{
			if(t_cmp<0){
				t_node=t_node->m_left;
			}else{
				t_node->m_value=t_value;
				return false;
			}
		}
	}
	t_node=(new c_Node14)->m_new(t_key,t_value,-1,t_parent);
	if((t_parent)!=0){
		if(t_cmp>0){
			gc_assign(t_parent->m_right,t_node);
		}else{
			gc_assign(t_parent->m_left,t_node);
		}
		p_InsertFixup7(t_node);
	}else{
		gc_assign(m_root,t_node);
	}
	return true;
}
void c_Map8::mark(){
	Object::mark();
	gc_mark_q(m_root);
}
c_StringMap4::c_StringMap4(){
}
c_StringMap4* c_StringMap4::m_new(){
	c_Map8::m_new();
	return this;
}
int c_StringMap4::p_Compare2(String t_lhs,String t_rhs){
	return t_lhs.Compare(t_rhs);
}
void c_StringMap4::mark(){
	c_Map8::mark();
}
c_Node14::c_Node14(){
	m_key=String();
	m_right=0;
	m_left=0;
	m_value=String();
	m_color=0;
	m_parent=0;
}
c_Node14* c_Node14::m_new(String t_key,String t_value,int t_color,c_Node14* t_parent){
	this->m_key=t_key;
	this->m_value=t_value;
	this->m_color=t_color;
	gc_assign(this->m_parent,t_parent);
	return this;
}
c_Node14* c_Node14::m_new2(){
	return this;
}
void c_Node14::mark(){
	Object::mark();
	gc_mark_q(m_right);
	gc_mark_q(m_left);
	gc_mark_q(m_parent);
}
c_Map9::c_Map9(){
	m_root=0;
}
c_Map9* c_Map9::m_new(){
	return this;
}
int c_Map9::p_Clear(){
	m_root=0;
	return 0;
}
int c_Map9::p_RotateLeft8(c_Node15* t_node){
	c_Node15* t_child=t_node->m_right;
	gc_assign(t_node->m_right,t_child->m_left);
	if((t_child->m_left)!=0){
		gc_assign(t_child->m_left->m_parent,t_node);
	}
	gc_assign(t_child->m_parent,t_node->m_parent);
	if((t_node->m_parent)!=0){
		if(t_node==t_node->m_parent->m_left){
			gc_assign(t_node->m_parent->m_left,t_child);
		}else{
			gc_assign(t_node->m_parent->m_right,t_child);
		}
	}else{
		gc_assign(m_root,t_child);
	}
	gc_assign(t_child->m_left,t_node);
	gc_assign(t_node->m_parent,t_child);
	return 0;
}
int c_Map9::p_RotateRight8(c_Node15* t_node){
	c_Node15* t_child=t_node->m_left;
	gc_assign(t_node->m_left,t_child->m_right);
	if((t_child->m_right)!=0){
		gc_assign(t_child->m_right->m_parent,t_node);
	}
	gc_assign(t_child->m_parent,t_node->m_parent);
	if((t_node->m_parent)!=0){
		if(t_node==t_node->m_parent->m_right){
			gc_assign(t_node->m_parent->m_right,t_child);
		}else{
			gc_assign(t_node->m_parent->m_left,t_child);
		}
	}else{
		gc_assign(m_root,t_child);
	}
	gc_assign(t_child->m_right,t_node);
	gc_assign(t_node->m_parent,t_child);
	return 0;
}
int c_Map9::p_InsertFixup8(c_Node15* t_node){
	while(((t_node->m_parent)!=0) && t_node->m_parent->m_color==-1 && ((t_node->m_parent->m_parent)!=0)){
		if(t_node->m_parent==t_node->m_parent->m_parent->m_left){
			c_Node15* t_uncle=t_node->m_parent->m_parent->m_right;
			if(((t_uncle)!=0) && t_uncle->m_color==-1){
				t_node->m_parent->m_color=1;
				t_uncle->m_color=1;
				t_uncle->m_parent->m_color=-1;
				t_node=t_uncle->m_parent;
			}else{
				if(t_node==t_node->m_parent->m_right){
					t_node=t_node->m_parent;
					p_RotateLeft8(t_node);
				}
				t_node->m_parent->m_color=1;
				t_node->m_parent->m_parent->m_color=-1;
				p_RotateRight8(t_node->m_parent->m_parent);
			}
		}else{
			c_Node15* t_uncle2=t_node->m_parent->m_parent->m_left;
			if(((t_uncle2)!=0) && t_uncle2->m_color==-1){
				t_node->m_parent->m_color=1;
				t_uncle2->m_color=1;
				t_uncle2->m_parent->m_color=-1;
				t_node=t_uncle2->m_parent;
			}else{
				if(t_node==t_node->m_parent->m_left){
					t_node=t_node->m_parent;
					p_RotateRight8(t_node);
				}
				t_node->m_parent->m_color=1;
				t_node->m_parent->m_parent->m_color=-1;
				p_RotateLeft8(t_node->m_parent->m_parent);
			}
		}
	}
	m_root->m_color=1;
	return 0;
}
bool c_Map9::p_Set9(String t_key,bool t_value){
	c_Node15* t_node=m_root;
	c_Node15* t_parent=0;
	int t_cmp=0;
	while((t_node)!=0){
		t_parent=t_node;
		t_cmp=p_Compare2(t_key,t_node->m_key);
		if(t_cmp>0){
			t_node=t_node->m_right;
		}else{
			if(t_cmp<0){
				t_node=t_node->m_left;
			}else{
				t_node->m_value=t_value;
				return false;
			}
		}
	}
	t_node=(new c_Node15)->m_new(t_key,t_value,-1,t_parent);
	if((t_parent)!=0){
		if(t_cmp>0){
			gc_assign(t_parent->m_right,t_node);
		}else{
			gc_assign(t_parent->m_left,t_node);
		}
		p_InsertFixup8(t_node);
	}else{
		gc_assign(m_root,t_node);
	}
	return true;
}
void c_Map9::mark(){
	Object::mark();
	gc_mark_q(m_root);
}
c_StringMap5::c_StringMap5(){
}
c_StringMap5* c_StringMap5::m_new(){
	c_Map9::m_new();
	return this;
}
int c_StringMap5::p_Compare2(String t_lhs,String t_rhs){
	return t_lhs.Compare(t_rhs);
}
void c_StringMap5::mark(){
	c_Map9::mark();
}
c_Node15::c_Node15(){
	m_key=String();
	m_right=0;
	m_left=0;
	m_value=false;
	m_color=0;
	m_parent=0;
}
c_Node15* c_Node15::m_new(String t_key,bool t_value,int t_color,c_Node15* t_parent){
	this->m_key=t_key;
	this->m_value=t_value;
	this->m_color=t_color;
	gc_assign(this->m_parent,t_parent);
	return this;
}
c_Node15* c_Node15::m_new2(){
	return this;
}
void c_Node15::mark(){
	Object::mark();
	gc_mark_q(m_right);
	gc_mark_q(m_left);
	gc_mark_q(m_parent);
}
c_Set2::c_Set2(){
	m_map=0;
}
c_Set2* c_Set2::m_new(c_Map10* t_map){
	gc_assign(this->m_map,t_map);
	return this;
}
c_Set2* c_Set2::m_new2(){
	return this;
}
int c_Set2::p_Clear(){
	m_map->p_Clear();
	return 0;
}
int c_Set2::p_Insert7(String t_value){
	m_map->p_Insert8(t_value,0);
	return 0;
}
bool c_Set2::p_Contains2(String t_value){
	return m_map->p_Contains2(t_value);
}
void c_Set2::mark(){
	Object::mark();
	gc_mark_q(m_map);
}
c_StringSet::c_StringSet(){
}
c_StringSet* c_StringSet::m_new(){
	c_Set2::m_new((new c_StringMap6)->m_new());
	return this;
}
void c_StringSet::mark(){
	c_Set2::mark();
}
c_Map10::c_Map10(){
	m_root=0;
}
c_Map10* c_Map10::m_new(){
	return this;
}
int c_Map10::p_Clear(){
	m_root=0;
	return 0;
}
int c_Map10::p_RotateLeft9(c_Node16* t_node){
	c_Node16* t_child=t_node->m_right;
	gc_assign(t_node->m_right,t_child->m_left);
	if((t_child->m_left)!=0){
		gc_assign(t_child->m_left->m_parent,t_node);
	}
	gc_assign(t_child->m_parent,t_node->m_parent);
	if((t_node->m_parent)!=0){
		if(t_node==t_node->m_parent->m_left){
			gc_assign(t_node->m_parent->m_left,t_child);
		}else{
			gc_assign(t_node->m_parent->m_right,t_child);
		}
	}else{
		gc_assign(m_root,t_child);
	}
	gc_assign(t_child->m_left,t_node);
	gc_assign(t_node->m_parent,t_child);
	return 0;
}
int c_Map10::p_RotateRight9(c_Node16* t_node){
	c_Node16* t_child=t_node->m_left;
	gc_assign(t_node->m_left,t_child->m_right);
	if((t_child->m_right)!=0){
		gc_assign(t_child->m_right->m_parent,t_node);
	}
	gc_assign(t_child->m_parent,t_node->m_parent);
	if((t_node->m_parent)!=0){
		if(t_node==t_node->m_parent->m_right){
			gc_assign(t_node->m_parent->m_right,t_child);
		}else{
			gc_assign(t_node->m_parent->m_left,t_child);
		}
	}else{
		gc_assign(m_root,t_child);
	}
	gc_assign(t_child->m_right,t_node);
	gc_assign(t_node->m_parent,t_child);
	return 0;
}
int c_Map10::p_InsertFixup9(c_Node16* t_node){
	while(((t_node->m_parent)!=0) && t_node->m_parent->m_color==-1 && ((t_node->m_parent->m_parent)!=0)){
		if(t_node->m_parent==t_node->m_parent->m_parent->m_left){
			c_Node16* t_uncle=t_node->m_parent->m_parent->m_right;
			if(((t_uncle)!=0) && t_uncle->m_color==-1){
				t_node->m_parent->m_color=1;
				t_uncle->m_color=1;
				t_uncle->m_parent->m_color=-1;
				t_node=t_uncle->m_parent;
			}else{
				if(t_node==t_node->m_parent->m_right){
					t_node=t_node->m_parent;
					p_RotateLeft9(t_node);
				}
				t_node->m_parent->m_color=1;
				t_node->m_parent->m_parent->m_color=-1;
				p_RotateRight9(t_node->m_parent->m_parent);
			}
		}else{
			c_Node16* t_uncle2=t_node->m_parent->m_parent->m_left;
			if(((t_uncle2)!=0) && t_uncle2->m_color==-1){
				t_node->m_parent->m_color=1;
				t_uncle2->m_color=1;
				t_uncle2->m_parent->m_color=-1;
				t_node=t_uncle2->m_parent;
			}else{
				if(t_node==t_node->m_parent->m_left){
					t_node=t_node->m_parent;
					p_RotateRight9(t_node);
				}
				t_node->m_parent->m_color=1;
				t_node->m_parent->m_parent->m_color=-1;
				p_RotateLeft9(t_node->m_parent->m_parent);
			}
		}
	}
	m_root->m_color=1;
	return 0;
}
bool c_Map10::p_Set10(String t_key,Object* t_value){
	c_Node16* t_node=m_root;
	c_Node16* t_parent=0;
	int t_cmp=0;
	while((t_node)!=0){
		t_parent=t_node;
		t_cmp=p_Compare2(t_key,t_node->m_key);
		if(t_cmp>0){
			t_node=t_node->m_right;
		}else{
			if(t_cmp<0){
				t_node=t_node->m_left;
			}else{
				gc_assign(t_node->m_value,t_value);
				return false;
			}
		}
	}
	t_node=(new c_Node16)->m_new(t_key,t_value,-1,t_parent);
	if((t_parent)!=0){
		if(t_cmp>0){
			gc_assign(t_parent->m_right,t_node);
		}else{
			gc_assign(t_parent->m_left,t_node);
		}
		p_InsertFixup9(t_node);
	}else{
		gc_assign(m_root,t_node);
	}
	return true;
}
bool c_Map10::p_Insert8(String t_key,Object* t_value){
	return p_Set10(t_key,t_value);
}
c_Node16* c_Map10::p_FindNode2(String t_key){
	c_Node16* t_node=m_root;
	while((t_node)!=0){
		int t_cmp=p_Compare2(t_key,t_node->m_key);
		if(t_cmp>0){
			t_node=t_node->m_right;
		}else{
			if(t_cmp<0){
				t_node=t_node->m_left;
			}else{
				return t_node;
			}
		}
	}
	return t_node;
}
bool c_Map10::p_Contains2(String t_key){
	return p_FindNode2(t_key)!=0;
}
void c_Map10::mark(){
	Object::mark();
	gc_mark_q(m_root);
}
c_StringMap6::c_StringMap6(){
}
c_StringMap6* c_StringMap6::m_new(){
	c_Map10::m_new();
	return this;
}
int c_StringMap6::p_Compare2(String t_lhs,String t_rhs){
	return t_lhs.Compare(t_rhs);
}
void c_StringMap6::mark(){
	c_Map10::mark();
}
c_Node16::c_Node16(){
	m_key=String();
	m_right=0;
	m_left=0;
	m_value=0;
	m_color=0;
	m_parent=0;
}
c_Node16* c_Node16::m_new(String t_key,Object* t_value,int t_color,c_Node16* t_parent){
	this->m_key=t_key;
	gc_assign(this->m_value,t_value);
	this->m_color=t_color;
	gc_assign(this->m_parent,t_parent);
	return this;
}
c_Node16* c_Node16::m_new2(){
	return this;
}
void c_Node16::mark(){
	Object::mark();
	gc_mark_q(m_right);
	gc_mark_q(m_left);
	gc_mark_q(m_value);
	gc_mark_q(m_parent);
}
c_ItemList::c_ItemList(){
}
c_ItemList* c_ItemList::m_new(){
	c_List7::m_new();
	return this;
}
void c_ItemList::mark(){
	c_List7::mark();
}
c_Node17::c_Node17(){
	m_key=String();
	m_right=0;
	m_left=0;
	m_value=0;
	m_color=0;
	m_parent=0;
}
c_Node17* c_Node17::m_new(String t_key,int t_value,int t_color,c_Node17* t_parent){
	this->m_key=t_key;
	this->m_value=t_value;
	this->m_color=t_color;
	gc_assign(this->m_parent,t_parent);
	return this;
}
c_Node17* c_Node17::m_new2(){
	return this;
}
void c_Node17::mark(){
	Object::mark();
	gc_mark_q(m_right);
	gc_mark_q(m_left);
	gc_mark_q(m_parent);
}
c_Weapon::c_Weapon(){
	m_startingRenderTime=0;
	m_type=String(L"weapon_dagger",13);
	m_hasObsSwipe=false;
	m_swipeImage=(new c_IntMap5)->m_new();
	m_attackPoints=(new c_List8)->m_new();
	m_flipEachHit=false;
	m_glowHUD=0;
	m_numSwipeFrames=3;
	m_glowXOff=0;
	m_glowYOff=0;
	m_arrowWeapon=false;
	m_reloadTime=0;
	m_clipSize=1;
	m_startingRenderTime2=0;
	m_swipeImage2=(new c_IntMap5)->m_new();
	m_numSwipeFramesPerImage=2;
	m_daggerSwipeAdjacent=false;
	m_hasObsSwipe2=false;
	m_numSwipeFrames2=3;
	m_currentClipSize=1;
	m_imageHUD=0;
}
bool c_Weapon::p_IsDagger(){
	String t_7=this->m_type;
	if(t_7==String(L"weapon_dagger",13) || t_7==String(L"weapon_golden_dagger",20) || t_7==String(L"weapon_titanium_dagger",22) || t_7==String(L"weapon_obsidian_dagger",22) || t_7==String(L"weapon_blood_dagger",19) || t_7==String(L"weapon_glass_dagger",19) || t_7==String(L"weapon_dagger_shard",19) || t_7==String(L"weapon_dagger_jeweled",21) || t_7==String(L"weapon_dagger_frost",19) || t_7==String(L"weapon_dagger_phasing",21) || t_7==String(L"weapon_flower",13) || t_7==String(L"weapon_fangs",12) || t_7==String(L"weapon_dagger_electric",22) || t_7==String(L"weapon_eli",10)){
		return true;
	}
	return false;
}
bool c_Weapon::p_IsLongsword(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Weapon.IsLongsword()",20));
	return false;
}
bool c_Weapon::p_IsBroadsword(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Weapon.IsBroadsword()",21));
	return false;
}
bool c_Weapon::p_IsBow(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Weapon.IsBow()",14));
	return false;
}
bool c_Weapon::p_IsCrossbow(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Weapon.IsCrossbow()",19));
	return false;
}
bool c_Weapon::p_IsWhip(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Weapon.IsWhip()",15));
	return false;
}
bool c_Weapon::p_IsFlail(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Weapon.IsFlail()",16));
	return false;
}
bool c_Weapon::p_IsCat(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Weapon.IsCat()",14));
	return false;
}
bool c_Weapon::p_IsRapier(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Weapon.IsRapier()",17));
	return false;
}
bool c_Weapon::p_IsSpear(){
	String t_8=this->m_type;
	if(t_8==String(L"weapon_spear",12) || t_8==String(L"weapon_golden_spear",19) || t_8==String(L"weapon_titanium_spear",21) || t_8==String(L"weapon_obsidian_spear",21) || t_8==String(L"weapon_blood_spear",18) || t_8==String(L"weapon_glass_spear",18)){
		return true;
	}
	return false;
}
bool c_Weapon::p_IsBlunderbuss(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Weapon.IsBlunderbuss()",22));
	return false;
}
bool c_Weapon::p_IsRifle(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Weapon.IsRifle()",16));
	return false;
}
bool c_Weapon::p_IsAxe(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Weapon.IsAxe()",14));
	return false;
}
bool c_Weapon::p_IsHarp(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Weapon.IsHarp()",15));
	return false;
}
bool c_Weapon::p_IsWarhammer(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Weapon.IsWarhammer()",20));
	return false;
}
bool c_Weapon::p_IsStaff(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Weapon.IsStaff()",16));
	return false;
}
bool c_Weapon::p_IsCutlass(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Weapon.IsCutlass()",18));
	return false;
}
c_Weapon* c_Weapon::m_new(String t_t){
	this->m_startingRenderTime=9;
	this->m_type=t_t;
	if(this->m_type!=String(L"no_item",7)){
		c_XMLNode* t_itemNode=c_Item::m_GetItemXML(this->m_type);
		int t_numFrames=t_itemNode->p_GetAttribute3(String(L"numFrames",9),1);
		int t_imageW=t_itemNode->p_GetAttribute3(String(L"imageW",6),24);
		int t_imageH=t_itemNode->p_GetAttribute3(String(L"imageH",6),24);
		if(this->p_IsDagger()){
			c_Sprite* t_swipeImage=0;
			String t_1=this->m_type;
			if(t_1==String(L"weapon_obsidian_dagger",22)){
				t_swipeImage=(new c_Sprite)->m_new(String(L"swipes/swipe_dagger_obsidian.png",32),24,24,9,1);
				this->m_hasObsSwipe=true;
			}else{
				if(t_1==String(L"weapon_blood_dagger",19)){
					t_swipeImage=(new c_Sprite)->m_new2(String(L"swipes/swipe_dagger_blood.png",29),3,1);
				}else{
					if(t_1==String(L"weapon_titanium_dagger",22)){
						t_swipeImage=(new c_Sprite)->m_new2(String(L"swipes/swipe_dagger_titanium.png",32),3,1);
					}else{
						if(t_1==String(L"weapon_glass_dagger",19)){
							t_swipeImage=(new c_Sprite)->m_new2(String(L"swipes/swipe_dagger_glass.png",29),3,1);
						}else{
							if(t_1==String(L"weapon_golden_dagger",20)){
								t_swipeImage=(new c_Sprite)->m_new2(String(L"swipes/swipe_dagger_gold.png",28),3,1);
							}else{
								if(t_1==String(L"weapon_dagger_shard",19)){
									t_swipeImage=(new c_Sprite)->m_new2(String(L"swipes/swipe_dagger_glass.png",29),3,1);
								}else{
									t_swipeImage=(new c_Sprite)->m_new2(String(L"swipes/swipe_dagger.png",23),3,1);
								}
							}
						}
					}
				}
			}
			this->m_startingRenderTime=6;
			t_swipeImage->p_SetZOff(FLOAT(1000.0));
			this->m_swipeImage->p_Set11(0,t_swipeImage);
			c_WeaponPoint* t_attackPoint1=(new c_WeaponPoint)->m_new(0,-1,(this),-1,0,3,true,0,1);
			this->m_attackPoints->p_AddLast8(t_attackPoint1);
			this->m_flipEachHit=true;
			gc_assign(this->m_glowHUD,(new c_Sprite)->m_new(String(L"items/weaponglow_dagger.png",27),t_imageW,t_imageH,1,c_Image::m_DefaultFlags));
		}else{
			if(this->p_IsLongsword()){
				c_Sprite* t_swipeImage2=0;
				String t_2=this->m_type;
				if(t_2==String(L"weapon_obsidian_longsword",25)){
					t_swipeImage2=(new c_Sprite)->m_new(String(L"swipes/swipe_longsword_obsidian.png",35),48,24,12,1);
					this->m_hasObsSwipe=true;
				}else{
					if(t_2==String(L"weapon_blood_longsword",22)){
						t_swipeImage2=(new c_Sprite)->m_new2(String(L"swipes/swipe_longsword_blood.png",32),4,1);
					}else{
						if(t_2==String(L"weapon_titanium_longsword",25)){
							t_swipeImage2=(new c_Sprite)->m_new2(String(L"swipes/swipe_longsword_titanium.png",35),4,1);
						}else{
							if(t_2==String(L"weapon_glass_longsword",22)){
								t_swipeImage2=(new c_Sprite)->m_new2(String(L"swipes/swipe_longsword_glass.png",32),4,1);
							}else{
								if(t_2==String(L"weapon_golden_longsword",23)){
									t_swipeImage2=(new c_Sprite)->m_new2(String(L"swipes/swipe_longsword_gold.png",31),4,1);
								}else{
									t_swipeImage2=(new c_Sprite)->m_new2(String(L"swipes/swipe_longsword.png",26),4,1);
								}
							}
						}
					}
				}
				this->m_startingRenderTime=8;
				this->m_numSwipeFrames=4;
				t_swipeImage2->p_SetHandle2(12,12);
				t_swipeImage2->p_SetZOff(FLOAT(1000.0));
				this->m_swipeImage->p_Set11(0,t_swipeImage2);
				c_WeaponPoint* t_attackPoint12=(new c_WeaponPoint)->m_new(0,-1,(this),-1,0,3,true,0,1);
				c_WeaponPoint* t_attackPoint2=(new c_WeaponPoint)->m_new(0,-2,(this),-1,(t_attackPoint12),3,true,0,1);
				t_attackPoint12->m_children->p_AddLast9(t_attackPoint2);
				this->m_attackPoints->p_AddLast8(t_attackPoint12);
				this->m_flipEachHit=true;
				gc_assign(this->m_glowHUD,(new c_Sprite)->m_new(String(L"items/weaponglow_longsword.png",30),t_imageW,t_imageH,1,c_Image::m_DefaultFlags));
				this->m_glowXOff=-1;
				this->m_glowYOff=-1;
			}else{
				if(this->p_IsBroadsword()){
					c_Sprite* t_swipeImage3=0;
					String t_3=this->m_type;
					if(t_3==String(L"weapon_obsidian_broadsword",26)){
						t_swipeImage3=(new c_Sprite)->m_new(String(L"swipes/swipe_broadsword_obsidian.png",36),24,72,9,1);
						this->m_hasObsSwipe=true;
					}else{
						if(t_3==String(L"weapon_blood_broadsword",23)){
							t_swipeImage3=(new c_Sprite)->m_new2(String(L"swipes/swipe_broadsword_blood.png",33),3,1);
						}else{
							if(t_3==String(L"weapon_titanium_broadsword",26)){
								t_swipeImage3=(new c_Sprite)->m_new2(String(L"swipes/swipe_broadsword_titanium.png",36),3,1);
							}else{
								if(t_3==String(L"weapon_glass_broadsword",23)){
									t_swipeImage3=(new c_Sprite)->m_new2(String(L"swipes/swipe_broadsword_glass.png",33),3,1);
								}else{
									if(t_3==String(L"weapon_golden_broadsword",24)){
										t_swipeImage3=(new c_Sprite)->m_new2(String(L"swipes/swipe_broadsword_gold.png",32),3,1);
									}else{
										t_swipeImage3=(new c_Sprite)->m_new2(String(L"swipes/swipe_broadsword.png",27),3,1);
									}
								}
							}
						}
					}
					this->m_startingRenderTime=6;
					t_swipeImage3->p_SetZOff(FLOAT(1000.0));
					this->m_swipeImage->p_Set11(0,t_swipeImage3);
					c_WeaponPoint* t_attackPoint13=(new c_WeaponPoint)->m_new(0,-1,(this),-1,0,3,true,0,1);
					c_WeaponPoint* t_attackPoint22=(new c_WeaponPoint)->m_new(1,-1,(this),-1,0,3,true,0,1);
					c_WeaponPoint* t_attackPoint3=(new c_WeaponPoint)->m_new(-1,-1,(this),-1,0,3,true,0,1);
					this->m_attackPoints->p_AddLast8(t_attackPoint22);
					this->m_attackPoints->p_AddLast8(t_attackPoint3);
					this->m_attackPoints->p_AddLast8(t_attackPoint13);
					this->m_flipEachHit=true;
					gc_assign(this->m_glowHUD,(new c_Sprite)->m_new(String(L"items/weaponglow_broadsword.png",31),t_imageW,t_imageH,1,c_Image::m_DefaultFlags));
					this->m_glowXOff=-1;
					this->m_glowYOff=-1;
				}else{
					if(this->p_IsBow()){
						c_WeaponPoint* t_attackPoint14=(new c_WeaponPoint)->m_new(0,-1,(this),1,0,3,true,-1,1);
						c_WeaponPoint* t_attackPoint23=(new c_WeaponPoint)->m_new(0,-2,(this),1,(t_attackPoint14),3,true,-1,1);
						c_WeaponPoint* t_attackPoint32=(new c_WeaponPoint)->m_new(0,-3,(this),1,(t_attackPoint23),3,true,-1,1);
						t_attackPoint23->m_children->p_AddLast9(t_attackPoint32);
						t_attackPoint14->m_children->p_AddLast9(t_attackPoint23);
						this->m_attackPoints->p_AddLast8(t_attackPoint14);
						this->m_arrowWeapon=true;
						gc_assign(this->m_glowHUD,(new c_Sprite)->m_new(String(L"items/weaponglow_bow.png",24),t_imageW,t_imageH,1,c_Image::m_DefaultFlags));
					}else{
						if(this->p_IsCrossbow()){
							c_WeaponPoint* t_attackPoint15=(new c_WeaponPoint)->m_new(0,-1,(this),1,0,3,true,0,1);
							c_WeaponPoint* t_attackPoint24=(new c_WeaponPoint)->m_new(0,-2,(this),1,(t_attackPoint15),3,true,-1,1);
							c_WeaponPoint* t_attackPoint33=(new c_WeaponPoint)->m_new(0,-3,(this),1,(t_attackPoint24),3,true,-1,1);
							c_WeaponPoint* t_attackPoint4=(new c_WeaponPoint)->m_new(0,-3,(this),1,(t_attackPoint33),3,true,-1,1);
							t_attackPoint33->m_children->p_AddLast9(t_attackPoint4);
							t_attackPoint24->m_children->p_AddLast9(t_attackPoint33);
							t_attackPoint15->m_children->p_AddLast9(t_attackPoint24);
							this->m_attackPoints->p_AddLast8(t_attackPoint15);
							this->m_reloadTime=1;
							this->m_clipSize=3;
							this->m_arrowWeapon=true;
							c_Sprite* t_swipeImage22=(new c_Sprite)->m_new2(String(L"swipes/swipe_dagger.png",23),3,1);
							this->m_startingRenderTime2=6;
							t_swipeImage22->p_SetZOff(FLOAT(1000.0));
							this->m_swipeImage2->p_Set11(0,t_swipeImage22);
							gc_assign(this->m_glowHUD,(new c_Sprite)->m_new(String(L"items/weaponglow_crossbow.png",29),t_imageW,t_imageH,1,c_Image::m_DefaultFlags));
						}else{
							if(this->p_IsWhip()){
								this->m_startingRenderTime=8;
								this->m_numSwipeFramesPerImage=2;
								this->m_numSwipeFrames=4;
								String t_4=this->m_type;
								if(t_4==String(L"weapon_golden_whip",18)){
									c_Sprite* t_swipeImageA=(new c_Sprite)->m_new2(String(L"swipes/swipe_whip_gold_A.png",28),4,1);
									t_swipeImageA->p_SetZOff(FLOAT(1000.0));
									this->m_swipeImage->p_Set11(0,t_swipeImageA);
									c_Sprite* t_swipeImageB=(new c_Sprite)->m_new2(String(L"swipes/swipe_whip_gold_B.png",28),4,1);
									t_swipeImageB->p_SetZOff(FLOAT(1000.0));
									this->m_swipeImage->p_Set11(1,t_swipeImageB);
									c_Sprite* t_swipeImageC=(new c_Sprite)->m_new2(String(L"swipes/swipe_whip_gold_C.png",28),4,1);
									t_swipeImageC->p_SetZOff(FLOAT(1000.0));
									this->m_swipeImage->p_Set11(2,t_swipeImageC);
									c_Sprite* t_swipeImageD=(new c_Sprite)->m_new2(String(L"swipes/swipe_whip_gold_D.png",28),4,1);
									t_swipeImageD->p_SetZOff(FLOAT(1000.0));
									this->m_swipeImage->p_Set11(3,t_swipeImageD);
									c_Sprite* t_swipeImageE=(new c_Sprite)->m_new2(String(L"swipes/swipe_whip_gold_E.png",28),4,1);
									t_swipeImageE->p_SetZOff(FLOAT(1000.0));
									this->m_swipeImage->p_Set11(4,t_swipeImageE);
								}else{
									if(t_4==String(L"weapon_obsidian_whip",20)){
										c_Sprite* t_swipeImageA2=(new c_Sprite)->m_new(String(L"swipes/swipe_whip_obsidian_A.png",32),24,120,12,1);
										t_swipeImageA2->p_SetZOff(FLOAT(1000.0));
										this->m_swipeImage->p_Set11(0,t_swipeImageA2);
										c_Sprite* t_swipeImageB2=(new c_Sprite)->m_new(String(L"swipes/swipe_whip_obsidian_B.png",32),24,120,12,1);
										t_swipeImageB2->p_SetZOff(FLOAT(1000.0));
										this->m_swipeImage->p_Set11(1,t_swipeImageB2);
										c_Sprite* t_swipeImageC2=(new c_Sprite)->m_new(String(L"swipes/swipe_whip_obsidian_C.png",32),24,120,12,1);
										t_swipeImageC2->p_SetZOff(FLOAT(1000.0));
										this->m_swipeImage->p_Set11(2,t_swipeImageC2);
										c_Sprite* t_swipeImageD2=(new c_Sprite)->m_new(String(L"swipes/swipe_whip_obsidian_D.png",32),24,120,12,1);
										t_swipeImageD2->p_SetZOff(FLOAT(1000.0));
										this->m_swipeImage->p_Set11(3,t_swipeImageD2);
										c_Sprite* t_swipeImageE2=(new c_Sprite)->m_new(String(L"swipes/swipe_whip_obsidian_E.png",32),24,120,12,1);
										t_swipeImageE2->p_SetZOff(FLOAT(1000.0));
										this->m_swipeImage->p_Set11(4,t_swipeImageE2);
										this->m_hasObsSwipe=true;
									}else{
										c_Sprite* t_swipeImageA3=(new c_Sprite)->m_new2(String(L"swipes/swipe_whip_A.png",23),4,1);
										t_swipeImageA3->p_SetZOff(FLOAT(1000.0));
										this->m_swipeImage->p_Set11(0,t_swipeImageA3);
										c_Sprite* t_swipeImageB3=(new c_Sprite)->m_new2(String(L"swipes/swipe_whip_B.png",23),4,1);
										t_swipeImageB3->p_SetZOff(FLOAT(1000.0));
										this->m_swipeImage->p_Set11(1,t_swipeImageB3);
										c_Sprite* t_swipeImageC3=(new c_Sprite)->m_new2(String(L"swipes/swipe_whip_C.png",23),4,1);
										t_swipeImageC3->p_SetZOff(FLOAT(1000.0));
										this->m_swipeImage->p_Set11(2,t_swipeImageC3);
										c_Sprite* t_swipeImageD3=(new c_Sprite)->m_new2(String(L"swipes/swipe_whip_D.png",23),4,1);
										t_swipeImageD3->p_SetZOff(FLOAT(1000.0));
										this->m_swipeImage->p_Set11(3,t_swipeImageD3);
										c_Sprite* t_swipeImageE3=(new c_Sprite)->m_new2(String(L"swipes/swipe_whip_E.png",23),4,1);
										t_swipeImageE3->p_SetZOff(FLOAT(1000.0));
										this->m_swipeImage->p_Set11(4,t_swipeImageE3);
									}
								}
								c_WeaponPoint* t_attackPoint16=(new c_WeaponPoint)->m_new(0,-1,(this),1,0,3,false,2,1);
								c_WeaponPoint* t_attackPoint25=(new c_WeaponPoint)->m_new(-1,-1,(this),1,(t_attackPoint16),2,false,1,1);
								c_WeaponPoint* t_attackPoint34=(new c_WeaponPoint)->m_new(1,-1,(this),1,(t_attackPoint16),0,false,3,1);
								c_WeaponPoint* t_attackPoint42=(new c_WeaponPoint)->m_new(-1,-1,(this),1,(t_attackPoint16),2,true,1,0);
								c_WeaponPoint* t_attackPoint5=(new c_WeaponPoint)->m_new(-2,-1,(this),1,(t_attackPoint42),2,true,0,1);
								c_WeaponPoint* t_attackPoint6=(new c_WeaponPoint)->m_new(1,-1,(this),1,(t_attackPoint16),0,true,3,0);
								c_WeaponPoint* t_attackPoint7=(new c_WeaponPoint)->m_new(2,-1,(this),1,(t_attackPoint6),0,true,4,1);
								t_attackPoint16->m_children->p_AddLast9(t_attackPoint25);
								t_attackPoint16->m_children->p_AddLast9(t_attackPoint34);
								t_attackPoint16->m_children->p_AddLast9(t_attackPoint42);
								t_attackPoint42->m_children->p_AddLast9(t_attackPoint5);
								t_attackPoint16->m_children->p_AddLast9(t_attackPoint6);
								t_attackPoint6->m_children->p_AddLast9(t_attackPoint7);
								this->m_attackPoints->p_AddLast8(t_attackPoint16);
								gc_assign(this->m_glowHUD,(new c_Sprite)->m_new(String(L"items/weaponglow_whip.png",25),t_imageW,t_imageH,1,c_Image::m_DefaultFlags));
							}else{
								if(this->p_IsFlail()){
									this->m_startingRenderTime=6;
									c_Sprite* t_swipeImage4=(new c_Sprite)->m_new2(String(L"swipes/swipe_flail.png",22),5,1);
									t_swipeImage4->p_SetZOff(FLOAT(1000.0));
									this->m_swipeImage->p_Set11(0,t_swipeImage4);
									c_WeaponPoint* t_attackPoint17=(new c_WeaponPoint)->m_new(0,-1,(this),-1,0,3,true,0,1);
									c_WeaponPoint* t_attackPoint26=(new c_WeaponPoint)->m_new(-1,-1,(this),-1,0,3,true,0,1);
									c_WeaponPoint* t_attackPoint35=(new c_WeaponPoint)->m_new(-1,0,(this),-1,0,3,true,0,1);
									c_WeaponPoint* t_attackPoint43=(new c_WeaponPoint)->m_new(1,-1,(this),-1,0,3,true,0,1);
									c_WeaponPoint* t_attackPoint52=(new c_WeaponPoint)->m_new(1,0,(this),-1,0,3,true,0,1);
									this->m_attackPoints->p_AddLast8(t_attackPoint26);
									this->m_attackPoints->p_AddLast8(t_attackPoint35);
									this->m_attackPoints->p_AddLast8(t_attackPoint43);
									this->m_attackPoints->p_AddLast8(t_attackPoint52);
									this->m_attackPoints->p_AddLast8(t_attackPoint17);
									this->m_flipEachHit=true;
									gc_assign(this->m_glowHUD,(new c_Sprite)->m_new(String(L"items/weaponglow_flail.png",26),t_imageW,t_imageH,1,c_Image::m_DefaultFlags));
								}else{
									if(this->p_IsCat()){
										this->m_startingRenderTime=8;
										this->m_numSwipeFramesPerImage=2;
										this->m_numSwipeFrames=4;
										c_Sprite* t_swipeImageA4=(new c_Sprite)->m_new2(String(L"swipes/swipe_cat_A.png",22),4,1);
										t_swipeImageA4->p_SetZOff(FLOAT(1000.0));
										this->m_swipeImage->p_Set11(0,t_swipeImageA4);
										c_Sprite* t_swipeImageB4=(new c_Sprite)->m_new2(String(L"swipes/swipe_cat_B.png",22),4,1);
										t_swipeImageB4->p_SetZOff(FLOAT(1000.0));
										this->m_swipeImage->p_Set11(1,t_swipeImageB4);
										c_Sprite* t_swipeImageC4=(new c_Sprite)->m_new2(String(L"swipes/swipe_cat_C.png",22),4,1);
										t_swipeImageC4->p_SetZOff(FLOAT(1000.0));
										this->m_swipeImage->p_Set11(2,t_swipeImageC4);
										c_Sprite* t_swipeImageD4=(new c_Sprite)->m_new2(String(L"swipes/swipe_cat_D.png",22),4,1);
										t_swipeImageD4->p_SetZOff(FLOAT(1000.0));
										this->m_swipeImage->p_Set11(3,t_swipeImageD4);
										c_Sprite* t_swipeImageE4=(new c_Sprite)->m_new2(String(L"swipes/swipe_cat_E.png",22),4,1);
										t_swipeImageE4->p_SetZOff(FLOAT(1000.0));
										this->m_swipeImage->p_Set11(4,t_swipeImageE4);
										c_WeaponPoint* t_attackPoint18=(new c_WeaponPoint)->m_new(0,-1,(this),1,0,3,false,2,1);
										c_WeaponPoint* t_attackPoint27=(new c_WeaponPoint)->m_new(-1,-1,(this),1,(t_attackPoint18),2,false,1,1);
										c_WeaponPoint* t_attackPoint36=(new c_WeaponPoint)->m_new(1,-1,(this),1,(t_attackPoint18),0,false,3,1);
										c_WeaponPoint* t_attackPoint44=(new c_WeaponPoint)->m_new(-1,0,(this),1,(t_attackPoint18),2,true,0,1);
										c_WeaponPoint* t_attackPoint53=(new c_WeaponPoint)->m_new(1,0,(this),1,(t_attackPoint18),0,true,4,1);
										t_attackPoint18->m_children->p_AddLast9(t_attackPoint27);
										t_attackPoint18->m_children->p_AddLast9(t_attackPoint36);
										t_attackPoint18->m_children->p_AddLast9(t_attackPoint44);
										t_attackPoint18->m_children->p_AddLast9(t_attackPoint53);
										this->m_attackPoints->p_AddLast8(t_attackPoint18);
										gc_assign(this->m_glowHUD,(new c_Sprite)->m_new(String(L"items/weaponglow_cat.png",24),t_imageW,t_imageH,1,c_Image::m_DefaultFlags));
										this->m_glowYOff=1;
									}else{
										if(this->p_IsRapier()){
											this->m_daggerSwipeAdjacent=true;
											c_Sprite* t_swipeImage5=0;
											c_Sprite* t_swipeImage23=0;
											String t_5=this->m_type;
											if(t_5==String(L"weapon_obsidian_rapier",22)){
												t_swipeImage5=(new c_Sprite)->m_new(String(L"swipes/swipe_rapier_obsidian.png",32),48,24,12,1);
												t_swipeImage23=(new c_Sprite)->m_new(String(L"swipes/swipe_dagger_obsidian.png",32),24,24,9,1);
												this->m_hasObsSwipe=true;
												this->m_hasObsSwipe2=true;
											}else{
												if(t_5==String(L"weapon_blood_rapier",19)){
													t_swipeImage5=(new c_Sprite)->m_new2(String(L"swipes/swipe_rapier_blood.png",29),4,1);
													t_swipeImage23=(new c_Sprite)->m_new2(String(L"swipes/swipe_dagger_blood.png",29),3,1);
												}else{
													if(t_5==String(L"weapon_titanium_rapier",22)){
														t_swipeImage5=(new c_Sprite)->m_new2(String(L"swipes/swipe_rapier_titanium.png",32),4,1);
														t_swipeImage23=(new c_Sprite)->m_new2(String(L"swipes/swipe_dagger_titanium.png",32),3,1);
													}else{
														if(t_5==String(L"weapon_glass_rapier",19)){
															t_swipeImage5=(new c_Sprite)->m_new2(String(L"swipes/swipe_rapier_glass.png",29),4,1);
															t_swipeImage23=(new c_Sprite)->m_new2(String(L"swipes/swipe_dagger_glass.png",29),3,1);
														}else{
															if(t_5==String(L"weapon_golden_rapier",20)){
																t_swipeImage5=(new c_Sprite)->m_new2(String(L"swipes/swipe_rapier_golden.png",30),4,1);
																t_swipeImage23=(new c_Sprite)->m_new2(String(L"swipes/swipe_dagger_golden.png",30),3,1);
															}else{
																t_swipeImage5=(new c_Sprite)->m_new2(String(L"swipes/swipe_rapier.png",23),4,1);
																t_swipeImage23=(new c_Sprite)->m_new2(String(L"swipes/swipe_dagger.png",23),3,1);
															}
														}
													}
												}
											}
											t_swipeImage5->p_SetHandle2(24,12);
											this->m_startingRenderTime=8;
											this->m_startingRenderTime2=6;
											this->m_numSwipeFrames=4;
											t_swipeImage5->p_SetZOff(FLOAT(1000.0));
											t_swipeImage23->p_SetZOff(FLOAT(1000.0));
											this->m_swipeImage->p_Set11(0,t_swipeImage5);
											this->m_swipeImage2->p_Set11(0,t_swipeImage23);
											c_WeaponPoint* t_attackPoint19=(new c_WeaponPoint)->m_new(0,-1,(this),1,0,3,true,0,1);
											c_WeaponPoint* t_attackPoint28=(new c_WeaponPoint)->m_new(0,-2,(this),1,(t_attackPoint19),3,true,0,2);
											t_attackPoint19->m_children->p_AddLast9(t_attackPoint28);
											this->m_attackPoints->p_AddLast8(t_attackPoint19);
											this->m_flipEachHit=true;
											gc_assign(this->m_glowHUD,(new c_Sprite)->m_new(String(L"items/weaponglow_rapier.png",27),t_imageW,t_imageH,1,c_Image::m_DefaultFlags));
										}else{
											if(this->p_IsSpear()){
												this->m_daggerSwipeAdjacent=true;
												c_Sprite* t_swipeImage6=0;
												c_Sprite* t_swipeImage24=0;
												String t_6=this->m_type;
												if(t_6==String(L"weapon_obsidian_spear",21)){
													t_swipeImage6=(new c_Sprite)->m_new(String(L"swipes/swipe_spear_obsidian.png",31),48,24,12,1);
													t_swipeImage24=(new c_Sprite)->m_new(String(L"swipes/swipe_dagger_obsidian.png",32),24,24,9,1);
													this->m_hasObsSwipe=true;
													this->m_hasObsSwipe2=true;
												}else{
													if(t_6==String(L"weapon_blood_spear",18)){
														t_swipeImage6=(new c_Sprite)->m_new2(String(L"swipes/swipe_spear_blood.png",28),4,1);
														t_swipeImage24=(new c_Sprite)->m_new2(String(L"swipes/swipe_dagger_blood.png",29),3,1);
													}else{
														if(t_6==String(L"weapon_titanium_spear",21)){
															t_swipeImage6=(new c_Sprite)->m_new2(String(L"swipes/swipe_spear_titanium.png",31),4,1);
															t_swipeImage24=(new c_Sprite)->m_new2(String(L"swipes/swipe_dagger_titanium.png",32),3,1);
														}else{
															if(t_6==String(L"weapon_glass_spear",18)){
																t_swipeImage6=(new c_Sprite)->m_new2(String(L"swipes/swipe_spear_glass.png",28),4,1);
																t_swipeImage24=(new c_Sprite)->m_new2(String(L"swipes/swipe_dagger_glass.png",29),3,1);
															}else{
																if(t_6==String(L"weapon_golden_spear",19)){
																	t_swipeImage6=(new c_Sprite)->m_new2(String(L"swipes/swipe_spear_golden.png",29),4,1);
																	t_swipeImage24=(new c_Sprite)->m_new2(String(L"swipes/swipe_dagger_golden.png",30),3,1);
																}else{
																	t_swipeImage6=(new c_Sprite)->m_new2(String(L"swipes/swipe_spear.png",22),4,1);
																	t_swipeImage24=(new c_Sprite)->m_new2(String(L"swipes/swipe_dagger.png",23),3,1);
																}
															}
														}
													}
												}
												t_swipeImage6->p_SetHandle2(12,12);
												this->m_startingRenderTime=8;
												this->m_startingRenderTime2=6;
												this->m_numSwipeFrames=4;
												t_swipeImage6->p_SetZOff(FLOAT(1000.0));
												t_swipeImage24->p_SetZOff(FLOAT(1000.0));
												this->m_swipeImage->p_Set11(0,t_swipeImage6);
												this->m_swipeImage2->p_Set11(0,t_swipeImage24);
												c_WeaponPoint* t_attackPoint110=(new c_WeaponPoint)->m_new(0,-1,(this),1,0,3,true,0,1);
												c_WeaponPoint* t_attackPoint29=(new c_WeaponPoint)->m_new(0,-2,(this),1,(t_attackPoint110),3,true,0,1);
												t_attackPoint110->m_children->p_AddLast9(t_attackPoint29);
												this->m_attackPoints->p_AddLast8(t_attackPoint110);
												this->m_flipEachHit=true;
												gc_assign(this->m_glowHUD,(new c_Sprite)->m_new(String(L"items/weaponglow_spear.png",26),t_imageW,t_imageH,1,c_Image::m_DefaultFlags));
											}else{
												if(this->p_IsBlunderbuss()){
													c_Sprite* t_swipeImage7=(new c_Sprite)->m_new2(String(L"swipes/swipe_blunderbuss.png",28),8,1);
													t_swipeImage7->p_SetHandle2(-2,59);
													this->m_startingRenderTime=16;
													this->m_numSwipeFrames=8;
													this->m_numSwipeFramesPerImage=2;
													t_swipeImage7->p_SetZOff(FLOAT(1000.0));
													this->m_swipeImage->p_Set11(0,t_swipeImage7);
													c_WeaponPoint* t_attackPoint111=(new c_WeaponPoint)->m_new(0,-1,(this),-1,0,3,true,0,1);
													c_WeaponPoint* t_attackPoint210=(new c_WeaponPoint)->m_new(-1,-2,(this),-1,(t_attackPoint111),3,true,0,1);
													c_WeaponPoint* t_attackPoint37=(new c_WeaponPoint)->m_new(0,-2,(this),-1,(t_attackPoint111),3,true,0,1);
													c_WeaponPoint* t_attackPoint45=(new c_WeaponPoint)->m_new(1,-2,(this),-1,(t_attackPoint111),3,true,0,1);
													c_WeaponPoint* t_attackPoint54=(new c_WeaponPoint)->m_new(-2,-3,(this),-1,(t_attackPoint210),3,true,0,1);
													c_WeaponPoint* t_attackPoint62=(new c_WeaponPoint)->m_new(-1,-3,(this),-1,(t_attackPoint210),3,true,0,1);
													c_WeaponPoint* t_attackPoint72=(new c_WeaponPoint)->m_new(0,-3,(this),-1,(t_attackPoint37),3,true,0,1);
													c_WeaponPoint* t_attackPoint8=(new c_WeaponPoint)->m_new(1,-3,(this),-1,(t_attackPoint45),3,true,0,1);
													c_WeaponPoint* t_attackPoint9=(new c_WeaponPoint)->m_new(2,-3,(this),-1,(t_attackPoint45),3,true,0,1);
													t_attackPoint111->m_children->p_AddLast9(t_attackPoint210);
													t_attackPoint111->m_children->p_AddLast9(t_attackPoint37);
													t_attackPoint111->m_children->p_AddLast9(t_attackPoint45);
													t_attackPoint210->m_children->p_AddLast9(t_attackPoint54);
													t_attackPoint210->m_children->p_AddLast9(t_attackPoint62);
													t_attackPoint37->m_children->p_AddLast9(t_attackPoint72);
													t_attackPoint45->m_children->p_AddLast9(t_attackPoint8);
													t_attackPoint45->m_children->p_AddLast9(t_attackPoint9);
													this->m_attackPoints->p_AddLast8(t_attackPoint111);
													this->m_flipEachHit=true;
													this->m_reloadTime=1;
													this->m_clipSize=1;
													c_Sprite* t_swipeImage25=(new c_Sprite)->m_new2(String(L"swipes/swipe_dagger.png",23),3,1);
													this->m_startingRenderTime2=6;
													t_swipeImage25->p_SetZOff(FLOAT(1000.0));
													this->m_swipeImage2->p_Set11(0,t_swipeImage25);
												}else{
													if(this->p_IsRifle()){
														c_WeaponPoint* t_attackPoint112=(new c_WeaponPoint)->m_new(0,-1,(this),-1,0,3,true,0,1);
														c_WeaponPoint* t_attackPoint211=(new c_WeaponPoint)->m_new(0,-2,(this),-1,(t_attackPoint112),3,true,-1,1);
														c_WeaponPoint* t_attackPoint38=(new c_WeaponPoint)->m_new(0,-3,(this),-1,(t_attackPoint211),3,true,-1,1);
														c_WeaponPoint* t_attackPoint46=(new c_WeaponPoint)->m_new(0,-4,(this),-1,(t_attackPoint38),3,true,-1,1);
														c_WeaponPoint* t_attackPoint55=(new c_WeaponPoint)->m_new(0,-5,(this),-1,(t_attackPoint46),3,true,-1,1);
														c_WeaponPoint* t_attackPoint63=(new c_WeaponPoint)->m_new(0,-6,(this),-1,(t_attackPoint55),3,true,-1,1);
														c_WeaponPoint* t_attackPoint73=(new c_WeaponPoint)->m_new(0,-7,(this),-1,(t_attackPoint63),3,true,-1,1);
														c_WeaponPoint* t_attackPoint82=(new c_WeaponPoint)->m_new(0,-8,(this),-1,(t_attackPoint73),3,true,-1,1);
														c_WeaponPoint* t_attackPoint92=(new c_WeaponPoint)->m_new(0,-9,(this),-1,(t_attackPoint82),3,true,-1,1);
														c_WeaponPoint* t_attackPoint10=(new c_WeaponPoint)->m_new(0,-10,(this),-1,(t_attackPoint92),3,true,-1,1);
														c_WeaponPoint* t_attackPoint11=(new c_WeaponPoint)->m_new(0,-11,(this),-1,(t_attackPoint10),3,true,-1,1);
														c_WeaponPoint* t_attackPoint122=(new c_WeaponPoint)->m_new(0,-12,(this),-1,(t_attackPoint11),3,true,-1,1);
														c_WeaponPoint* t_attackPoint132=(new c_WeaponPoint)->m_new(0,-13,(this),-1,(t_attackPoint122),3,true,-1,1);
														c_WeaponPoint* t_attackPoint142=(new c_WeaponPoint)->m_new(0,-14,(this),-1,(t_attackPoint132),3,true,-1,1);
														c_WeaponPoint* t_attackPoint152=(new c_WeaponPoint)->m_new(0,-15,(this),-1,(t_attackPoint142),3,true,-1,1);
														c_WeaponPoint* t_attackPoint162=(new c_WeaponPoint)->m_new(0,-16,(this),-1,(t_attackPoint152),3,true,-1,1);
														c_WeaponPoint* t_attackPoint172=(new c_WeaponPoint)->m_new(0,-17,(this),-1,(t_attackPoint162),3,true,-1,1);
														c_WeaponPoint* t_attackPoint182=(new c_WeaponPoint)->m_new(0,-18,(this),-1,(t_attackPoint172),3,true,-1,1);
														c_WeaponPoint* t_attackPoint192=(new c_WeaponPoint)->m_new(0,-19,(this),-1,(t_attackPoint182),3,true,-1,1);
														c_WeaponPoint* t_attackPoint20=(new c_WeaponPoint)->m_new(0,-20,(this),-1,(t_attackPoint192),3,true,-1,1);
														t_attackPoint112->m_children->p_AddLast9(t_attackPoint211);
														t_attackPoint211->m_children->p_AddLast9(t_attackPoint38);
														t_attackPoint38->m_children->p_AddLast9(t_attackPoint46);
														t_attackPoint46->m_children->p_AddLast9(t_attackPoint55);
														t_attackPoint55->m_children->p_AddLast9(t_attackPoint63);
														t_attackPoint63->m_children->p_AddLast9(t_attackPoint73);
														t_attackPoint73->m_children->p_AddLast9(t_attackPoint82);
														t_attackPoint82->m_children->p_AddLast9(t_attackPoint92);
														t_attackPoint92->m_children->p_AddLast9(t_attackPoint10);
														t_attackPoint10->m_children->p_AddLast9(t_attackPoint11);
														t_attackPoint11->m_children->p_AddLast9(t_attackPoint122);
														t_attackPoint122->m_children->p_AddLast9(t_attackPoint132);
														t_attackPoint132->m_children->p_AddLast9(t_attackPoint142);
														t_attackPoint142->m_children->p_AddLast9(t_attackPoint152);
														t_attackPoint152->m_children->p_AddLast9(t_attackPoint162);
														t_attackPoint162->m_children->p_AddLast9(t_attackPoint172);
														t_attackPoint172->m_children->p_AddLast9(t_attackPoint182);
														t_attackPoint182->m_children->p_AddLast9(t_attackPoint192);
														t_attackPoint192->m_children->p_AddLast9(t_attackPoint20);
														this->m_attackPoints->p_AddLast8(t_attackPoint112);
														this->m_reloadTime=1;
														this->m_clipSize=3;
														this->m_arrowWeapon=true;
														c_Sprite* t_swipeImage26=(new c_Sprite)->m_new2(String(L"swipes/swipe_dagger.png",23),3,1);
														this->m_startingRenderTime2=6;
														t_swipeImage26->p_SetZOff(FLOAT(1000.0));
														this->m_swipeImage2->p_Set11(0,t_swipeImage26);
													}else{
														if(this->p_IsAxe()){
															this->m_daggerSwipeAdjacent=true;
															c_Sprite* t_swipeImage8=(new c_Sprite)->m_new2(String(L"swipes/swipe_broadsword.png",27),3,1);
															c_Sprite* t_swipeImage27=(new c_Sprite)->m_new2(String(L"swipes/swipe_dagger.png",23),3,1);
															this->m_startingRenderTime=6;
															this->m_startingRenderTime2=6;
															t_swipeImage8->p_SetZOff(FLOAT(1000.0));
															t_swipeImage27->p_SetZOff(FLOAT(1000.0));
															this->m_swipeImage->p_Set11(0,t_swipeImage8);
															this->m_swipeImage2->p_Set11(0,t_swipeImage27);
															c_WeaponPoint* t_attackPoint113=(new c_WeaponPoint)->m_new(0,-1,(this),1,0,3,true,0,1);
															c_WeaponPoint* t_attackPoint212=(new c_WeaponPoint)->m_new(0,-2,(this),-1,(t_attackPoint113),3,true,0,1);
															c_WeaponPoint* t_attackPoint39=(new c_WeaponPoint)->m_new(1,-2,(this),-1,(t_attackPoint113),3,true,0,1);
															c_WeaponPoint* t_attackPoint47=(new c_WeaponPoint)->m_new(-1,-2,(this),-1,(t_attackPoint113),3,true,0,1);
															t_attackPoint113->m_children->p_AddLast9(t_attackPoint212);
															t_attackPoint113->m_children->p_AddLast9(t_attackPoint39);
															t_attackPoint113->m_children->p_AddLast9(t_attackPoint47);
															this->m_attackPoints->p_AddLast8(t_attackPoint113);
															this->m_flipEachHit=true;
															gc_assign(this->m_glowHUD,(new c_Sprite)->m_new(String(L"items/weaponglow_axe.png",24),t_imageW,t_imageH,1,c_Image::m_DefaultFlags));
														}else{
															if(this->p_IsHarp()){
																this->m_startingRenderTime=10;
																this->m_numSwipeFrames=5;
																c_Sprite* t_swipeImage9=(new c_Sprite)->m_new2(String(L"swipes/swipe_harp.png",21),5,c_Image::m_DefaultFlags);
																t_swipeImage9->p_SetZOff(FLOAT(1000.0));
																this->m_swipeImage->p_Set11(0,t_swipeImage9);
																c_WeaponPoint* t_attackPoint114=(new c_WeaponPoint)->m_new(0,-1,(this),-1,0,3,true,0,1);
																this->m_attackPoints->p_AddLast8(t_attackPoint114);
																this->m_flipEachHit=true;
																gc_assign(this->m_glowHUD,(new c_Sprite)->m_new(String(L"items/weaponglow_harp.png",25),t_imageW,t_imageH,1,c_Image::m_DefaultFlags));
															}else{
																if(this->p_IsWarhammer()){
																	this->m_startingRenderTime=8;
																	c_Sprite* t_swipeImage10=(new c_Sprite)->m_new2(String(L"swipes/swipe_broadsword.png",27),3,1);
																	t_swipeImage10->p_SetZOff(FLOAT(1000.0));
																	this->m_swipeImage->p_Set11(0,t_swipeImage10);
																	this->m_startingRenderTime2=8;
																	this->m_numSwipeFrames2=4;
																	c_Sprite* t_swipeImage28=(new c_Sprite)->m_new2(String(L"swipes/swipe_warhammer.png",26),4,1);
																	t_swipeImage28->p_SetZOff(FLOAT(1000.0));
																	this->m_swipeImage2->p_Set11(0,t_swipeImage28);
																	c_WeaponPoint* t_attackPoint115=(new c_WeaponPoint)->m_new(0,-1,(this),-1,0,3,true,0,1);
																	c_WeaponPoint* t_attackPoint213=(new c_WeaponPoint)->m_new(1,-1,(this),-1,0,3,true,0,1);
																	c_WeaponPoint* t_attackPoint310=(new c_WeaponPoint)->m_new(-1,-1,(this),-1,0,3,true,0,1);
																	c_WeaponPoint* t_attackPoint48=(new c_WeaponPoint)->m_new(1,-2,(this),-1,(t_attackPoint115),3,true,0,1);
																	c_WeaponPoint* t_attackPoint56=(new c_WeaponPoint)->m_new(-1,-2,(this),-1,(t_attackPoint115),3,true,0,1);
																	c_WeaponPoint* t_attackPoint64=(new c_WeaponPoint)->m_new(0,-2,(this),-1,(t_attackPoint115),3,true,0,1);
																	this->m_attackPoints->p_AddLast8(t_attackPoint213);
																	this->m_attackPoints->p_AddLast8(t_attackPoint310);
																	t_attackPoint115->m_children->p_AddLast9(t_attackPoint48);
																	t_attackPoint115->m_children->p_AddLast9(t_attackPoint56);
																	t_attackPoint115->m_children->p_AddLast9(t_attackPoint64);
																	this->m_attackPoints->p_AddLast8(t_attackPoint115);
																	gc_assign(this->m_glowHUD,(new c_Sprite)->m_new(String(L"items/weaponglow_warhammer.png",30),t_imageW,t_imageH,1,c_Image::m_DefaultFlags));
																}else{
																	if(this->p_IsStaff()){
																		c_WeaponPoint* t_attackPoint116=(new c_WeaponPoint)->m_new(0,-1,(this),-1,0,3,true,0,1);
																		this->m_attackPoints->p_AddLast8(t_attackPoint116);
																		gc_assign(this->m_glowHUD,(new c_Sprite)->m_new(String(L"items/weaponglow_staff.png",26),t_imageW,t_imageH,1,c_Image::m_DefaultFlags));
																	}else{
																		if(this->p_IsCutlass()){
																			this->m_daggerSwipeAdjacent=true;
																			c_Sprite* t_swipeImage11=(new c_Sprite)->m_new2(String(L"swipes/swipe_rapier.png",23),4,1);
																			c_Sprite* t_swipeImage29=(new c_Sprite)->m_new2(String(L"swipes/swipe_dagger.png",23),3,1);
																			t_swipeImage11->p_SetHandle2(12,12);
																			this->m_startingRenderTime=8;
																			this->m_startingRenderTime2=6;
																			this->m_numSwipeFrames=4;
																			t_swipeImage11->p_SetZOff(FLOAT(1000.0));
																			t_swipeImage29->p_SetZOff(FLOAT(1000.0));
																			this->m_swipeImage->p_Set11(0,t_swipeImage11);
																			this->m_swipeImage2->p_Set11(0,t_swipeImage29);
																			c_WeaponPoint* t_attackPoint117=(new c_WeaponPoint)->m_new(0,-1,(this),1,0,3,true,0,1);
																			c_WeaponPoint* t_attackPoint214=(new c_WeaponPoint)->m_new(0,-2,(this),1,(t_attackPoint117),3,true,0,1);
																			t_attackPoint117->m_children->p_AddLast9(t_attackPoint214);
																			this->m_attackPoints->p_AddLast8(t_attackPoint117);
																			this->m_flipEachHit=true;
																			gc_assign(this->m_glowHUD,(new c_Sprite)->m_new(String(L"items/weaponglow_cutlass.png",28),t_imageW,t_imageH,1,c_Image::m_DefaultFlags));
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		this->m_currentClipSize=this->m_clipSize;
		gc_assign(this->m_imageHUD,(new c_Sprite)->m_new(t_itemNode->p_value(),t_imageW,t_imageH,2*t_numFrames,c_Image::m_DefaultFlags));
		this->m_imageHUD->p_InWorld(false);
		this->m_imageHUD->p_SetZ(FLOAT(10000.0));
		if(this->m_glowHUD!=0){
			this->m_glowHUD->p_InWorld(false);
			this->m_glowHUD->p_SetZ(FLOAT(9998.0));
		}
	}
	return this;
}
c_Weapon* c_Weapon::m_new2(){
	return this;
}
bool c_Weapon::p_IsKeepable(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Weapon.IsKeepable()",19));
	return false;
}
bool c_Weapon::p_IsThrowable(){
	if(this->p_IsSpear()){
		return true;
	}
	if(this->p_IsDagger()){
		String t_9=this->m_type;
		if(t_9==String(L"weapon_flower",13) || t_9==String(L"weapon_fangs",12) || t_9==String(L"weapon_eli",10)){
			return false;
		}
		return true;
	}
	return false;
}
void c_Weapon::mark(){
	Object::mark();
	gc_mark_q(m_swipeImage);
	gc_mark_q(m_attackPoints);
	gc_mark_q(m_glowHUD);
	gc_mark_q(m_swipeImage2);
	gc_mark_q(m_imageHUD);
}
c_ItemType::c_ItemType(){
}
void c_ItemType::mark(){
	Object::mark();
}
c_Enumerator3::c_Enumerator3(){
	m__list=0;
	m__curr=0;
}
c_Enumerator3* c_Enumerator3::m_new(c_List* t_list){
	gc_assign(m__list,t_list);
	gc_assign(m__curr,t_list->m__head->m__succ);
	return this;
}
c_Enumerator3* c_Enumerator3::m_new2(){
	return this;
}
bool c_Enumerator3::p_HasNext(){
	while(m__curr->m__succ->m__pred!=m__curr){
		gc_assign(m__curr,m__curr->m__succ);
	}
	return m__curr!=m__list->m__head;
}
c_XMLNode* c_Enumerator3::p_NextObject(){
	c_XMLNode* t_data=m__curr->m__data;
	gc_assign(m__curr,m__curr->m__succ);
	return t_data;
}
void c_Enumerator3::mark(){
	Object::mark();
	gc_mark_q(m__list);
	gc_mark_q(m__curr);
}
c_Map11::c_Map11(){
	m_root=0;
}
c_Map11* c_Map11::m_new(){
	return this;
}
int c_Map11::p_RotateLeft10(c_Node18* t_node){
	c_Node18* t_child=t_node->m_right;
	gc_assign(t_node->m_right,t_child->m_left);
	if((t_child->m_left)!=0){
		gc_assign(t_child->m_left->m_parent,t_node);
	}
	gc_assign(t_child->m_parent,t_node->m_parent);
	if((t_node->m_parent)!=0){
		if(t_node==t_node->m_parent->m_left){
			gc_assign(t_node->m_parent->m_left,t_child);
		}else{
			gc_assign(t_node->m_parent->m_right,t_child);
		}
	}else{
		gc_assign(m_root,t_child);
	}
	gc_assign(t_child->m_left,t_node);
	gc_assign(t_node->m_parent,t_child);
	return 0;
}
int c_Map11::p_RotateRight10(c_Node18* t_node){
	c_Node18* t_child=t_node->m_left;
	gc_assign(t_node->m_left,t_child->m_right);
	if((t_child->m_right)!=0){
		gc_assign(t_child->m_right->m_parent,t_node);
	}
	gc_assign(t_child->m_parent,t_node->m_parent);
	if((t_node->m_parent)!=0){
		if(t_node==t_node->m_parent->m_right){
			gc_assign(t_node->m_parent->m_right,t_child);
		}else{
			gc_assign(t_node->m_parent->m_left,t_child);
		}
	}else{
		gc_assign(m_root,t_child);
	}
	gc_assign(t_child->m_right,t_node);
	gc_assign(t_node->m_parent,t_child);
	return 0;
}
int c_Map11::p_InsertFixup10(c_Node18* t_node){
	while(((t_node->m_parent)!=0) && t_node->m_parent->m_color==-1 && ((t_node->m_parent->m_parent)!=0)){
		if(t_node->m_parent==t_node->m_parent->m_parent->m_left){
			c_Node18* t_uncle=t_node->m_parent->m_parent->m_right;
			if(((t_uncle)!=0) && t_uncle->m_color==-1){
				t_node->m_parent->m_color=1;
				t_uncle->m_color=1;
				t_uncle->m_parent->m_color=-1;
				t_node=t_uncle->m_parent;
			}else{
				if(t_node==t_node->m_parent->m_right){
					t_node=t_node->m_parent;
					p_RotateLeft10(t_node);
				}
				t_node->m_parent->m_color=1;
				t_node->m_parent->m_parent->m_color=-1;
				p_RotateRight10(t_node->m_parent->m_parent);
			}
		}else{
			c_Node18* t_uncle2=t_node->m_parent->m_parent->m_left;
			if(((t_uncle2)!=0) && t_uncle2->m_color==-1){
				t_node->m_parent->m_color=1;
				t_uncle2->m_color=1;
				t_uncle2->m_parent->m_color=-1;
				t_node=t_uncle2->m_parent;
			}else{
				if(t_node==t_node->m_parent->m_left){
					t_node=t_node->m_parent;
					p_RotateRight10(t_node);
				}
				t_node->m_parent->m_color=1;
				t_node->m_parent->m_parent->m_color=-1;
				p_RotateLeft10(t_node->m_parent->m_parent);
			}
		}
	}
	m_root->m_color=1;
	return 0;
}
bool c_Map11::p_Set11(int t_key,c_Sprite* t_value){
	c_Node18* t_node=m_root;
	c_Node18* t_parent=0;
	int t_cmp=0;
	while((t_node)!=0){
		t_parent=t_node;
		t_cmp=p_Compare(t_key,t_node->m_key);
		if(t_cmp>0){
			t_node=t_node->m_right;
		}else{
			if(t_cmp<0){
				t_node=t_node->m_left;
			}else{
				gc_assign(t_node->m_value,t_value);
				return false;
			}
		}
	}
	t_node=(new c_Node18)->m_new(t_key,t_value,-1,t_parent);
	if((t_parent)!=0){
		if(t_cmp>0){
			gc_assign(t_parent->m_right,t_node);
		}else{
			gc_assign(t_parent->m_left,t_node);
		}
		p_InsertFixup10(t_node);
	}else{
		gc_assign(m_root,t_node);
	}
	return true;
}
void c_Map11::mark(){
	Object::mark();
	gc_mark_q(m_root);
}
c_IntMap5::c_IntMap5(){
}
c_IntMap5* c_IntMap5::m_new(){
	c_Map11::m_new();
	return this;
}
int c_IntMap5::p_Compare(int t_lhs,int t_rhs){
	return t_lhs-t_rhs;
}
void c_IntMap5::mark(){
	c_Map11::mark();
}
c_Node18::c_Node18(){
	m_key=0;
	m_right=0;
	m_left=0;
	m_value=0;
	m_color=0;
	m_parent=0;
}
c_Node18* c_Node18::m_new(int t_key,c_Sprite* t_value,int t_color,c_Node18* t_parent){
	this->m_key=t_key;
	gc_assign(this->m_value,t_value);
	this->m_color=t_color;
	gc_assign(this->m_parent,t_parent);
	return this;
}
c_Node18* c_Node18::m_new2(){
	return this;
}
void c_Node18::mark(){
	Object::mark();
	gc_mark_q(m_right);
	gc_mark_q(m_left);
	gc_mark_q(m_value);
	gc_mark_q(m_parent);
}
c_WeaponPoint::c_WeaponPoint(){
	m_children=0;
}
c_WeaponPoint* c_WeaponPoint::m_new(int t_x,int t_y,Object* t_wep,int t_strikes,Object* t_par,int t_dir,bool t_sObs,int t_swpImgNum,int t_dmgMult){
	bb_logger_Debug->p_TraceNotImplemented(String(L"WeaponPoint.New(Int, Int, Object, Int, Object, Int, Bool, Int, Int)",67));
	return this;
}
c_WeaponPoint* c_WeaponPoint::m_new2(){
	return this;
}
void c_WeaponPoint::mark(){
	Object::mark();
	gc_mark_q(m_children);
}
c_List8::c_List8(){
	m__head=((new c_HeadNode8)->m_new());
}
c_List8* c_List8::m_new(){
	return this;
}
c_Node19* c_List8::p_AddLast8(c_WeaponPoint* t_data){
	return (new c_Node19)->m_new(m__head,m__head->m__pred,t_data);
}
c_List8* c_List8::m_new2(Array<c_WeaponPoint* > t_data){
	Array<c_WeaponPoint* > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		c_WeaponPoint* t_t=t_[t_2];
		t_2=t_2+1;
		p_AddLast8(t_t);
	}
	return this;
}
void c_List8::mark(){
	Object::mark();
	gc_mark_q(m__head);
}
c_Node19::c_Node19(){
	m__succ=0;
	m__pred=0;
	m__data=0;
}
c_Node19* c_Node19::m_new(c_Node19* t_succ,c_Node19* t_pred,c_WeaponPoint* t_data){
	gc_assign(m__succ,t_succ);
	gc_assign(m__pred,t_pred);
	gc_assign(m__succ->m__pred,this);
	gc_assign(m__pred->m__succ,this);
	gc_assign(m__data,t_data);
	return this;
}
c_Node19* c_Node19::m_new2(){
	return this;
}
void c_Node19::mark(){
	Object::mark();
	gc_mark_q(m__succ);
	gc_mark_q(m__pred);
	gc_mark_q(m__data);
}
c_HeadNode8::c_HeadNode8(){
}
c_HeadNode8* c_HeadNode8::m_new(){
	c_Node19::m_new2();
	gc_assign(m__succ,(this));
	gc_assign(m__pred,(this));
	return this;
}
void c_HeadNode8::mark(){
	c_Node19::mark();
}
c_List9::c_List9(){
	m__head=((new c_HeadNode9)->m_new());
}
c_Node20* c_List9::p_AddLast9(Object* t_data){
	return (new c_Node20)->m_new(m__head,m__head->m__pred,t_data);
}
void c_List9::mark(){
	Object::mark();
	gc_mark_q(m__head);
}
c_Node20::c_Node20(){
	m__succ=0;
	m__pred=0;
	m__data=0;
}
c_Node20* c_Node20::m_new(c_Node20* t_succ,c_Node20* t_pred,Object* t_data){
	gc_assign(m__succ,t_succ);
	gc_assign(m__pred,t_pred);
	gc_assign(m__succ->m__pred,this);
	gc_assign(m__pred->m__succ,this);
	gc_assign(m__data,t_data);
	return this;
}
c_Node20* c_Node20::m_new2(){
	return this;
}
void c_Node20::mark(){
	Object::mark();
	gc_mark_q(m__succ);
	gc_mark_q(m__pred);
	gc_mark_q(m__data);
}
c_HeadNode9::c_HeadNode9(){
}
c_HeadNode9* c_HeadNode9::m_new(){
	c_Node20::m_new2();
	gc_assign(m__succ,(this));
	gc_assign(m__pred,(this));
	return this;
}
void c_HeadNode9::mark(){
	c_Node20::mark();
}
c_PlayerHealth::c_PlayerHealth(){
	m_bonusMax=0;
	m_baseMax=4;
	m_current=4;
	m_fragile=false;
	m_cursedCurrent=0;
	m_cursedMax=0;
}
c_PlayerHealth* c_PlayerHealth::m_new(){
	return this;
}
void c_PlayerHealth::p_GainBonusHeart(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"PlayerHealth.GainBonusHeart()",29));
}
int c_PlayerHealth::p_GetNormalMax(){
	int t_normalMax=this->m_baseMax+this->m_bonusMax;
	return bb_math_Min(t_normalMax,20);
}
void c_PlayerHealth::p_LoseBonusHeart(){
	this->m_bonusMax=0;
	int t_normalMax=this->p_GetNormalMax();
	this->m_current=bb_math_Min(this->m_current,t_normalMax);
}
void c_PlayerHealth::p_Refill(){
	this->m_current=this->p_GetNormalMax();
}
void c_PlayerHealth::p_Reset2(int t_newMax){
	this->m_fragile=false;
	if(!c_Level::m_isHardcoreMode){
		int t_playerHealthMax=c_GameData::m_GetPlayerHealthMax();
		t_newMax=bb_math_Max(t_newMax,t_playerHealthMax);
	}
	this->m_baseMax=t_newMax;
	this->m_cursedCurrent=0;
	this->m_cursedMax=0;
	this->m_bonusMax=0;
	this->p_Refill();
}
bool c_PlayerHealth::p_Heal2(int t_amount,bool t_allowGluttony){
	bb_logger_Debug->p_TraceNotImplemented(String(L"PlayerHealth.Heal(Int, Bool)",28));
	return false;
}
void c_PlayerHealth::p_ResetFragile(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"PlayerHealth.ResetFragile()",27));
}
void c_PlayerHealth::p_Revive(){
	if(this->m_fragile){
		this->m_baseMax=bb_math_Max(1,this->m_baseMax);
		this->m_current=1;
	}else{
		this->m_baseMax=bb_math_Max(4,this->m_baseMax);
		this->m_current=4;
	}
}
int c_PlayerHealth::p_Get3(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"PlayerHealth.Get()",18));
	return 0;
}
void c_PlayerHealth::p_Damage(int t_damage){
	bb_logger_Debug->p_TraceNotImplemented(String(L"PlayerHealth.Damage(Int)",24));
}
void c_PlayerHealth::mark(){
	Object::mark();
}
c_Map12::c_Map12(){
	m_root=0;
}
c_Map12* c_Map12::m_new(){
	return this;
}
c_Node21* c_Map12::p_FindNode2(String t_key){
	c_Node21* t_node=m_root;
	while((t_node)!=0){
		int t_cmp=p_Compare2(t_key,t_node->m_key);
		if(t_cmp>0){
			t_node=t_node->m_right;
		}else{
			if(t_cmp<0){
				t_node=t_node->m_left;
			}else{
				return t_node;
			}
		}
	}
	return t_node;
}
bool c_Map12::p_Contains2(String t_key){
	return p_FindNode2(t_key)!=0;
}
int c_Map12::p_RotateLeft11(c_Node21* t_node){
	c_Node21* t_child=t_node->m_right;
	gc_assign(t_node->m_right,t_child->m_left);
	if((t_child->m_left)!=0){
		gc_assign(t_child->m_left->m_parent,t_node);
	}
	gc_assign(t_child->m_parent,t_node->m_parent);
	if((t_node->m_parent)!=0){
		if(t_node==t_node->m_parent->m_left){
			gc_assign(t_node->m_parent->m_left,t_child);
		}else{
			gc_assign(t_node->m_parent->m_right,t_child);
		}
	}else{
		gc_assign(m_root,t_child);
	}
	gc_assign(t_child->m_left,t_node);
	gc_assign(t_node->m_parent,t_child);
	return 0;
}
int c_Map12::p_RotateRight11(c_Node21* t_node){
	c_Node21* t_child=t_node->m_left;
	gc_assign(t_node->m_left,t_child->m_right);
	if((t_child->m_right)!=0){
		gc_assign(t_child->m_right->m_parent,t_node);
	}
	gc_assign(t_child->m_parent,t_node->m_parent);
	if((t_node->m_parent)!=0){
		if(t_node==t_node->m_parent->m_right){
			gc_assign(t_node->m_parent->m_right,t_child);
		}else{
			gc_assign(t_node->m_parent->m_left,t_child);
		}
	}else{
		gc_assign(m_root,t_child);
	}
	gc_assign(t_child->m_right,t_node);
	gc_assign(t_node->m_parent,t_child);
	return 0;
}
int c_Map12::p_InsertFixup11(c_Node21* t_node){
	while(((t_node->m_parent)!=0) && t_node->m_parent->m_color==-1 && ((t_node->m_parent->m_parent)!=0)){
		if(t_node->m_parent==t_node->m_parent->m_parent->m_left){
			c_Node21* t_uncle=t_node->m_parent->m_parent->m_right;
			if(((t_uncle)!=0) && t_uncle->m_color==-1){
				t_node->m_parent->m_color=1;
				t_uncle->m_color=1;
				t_uncle->m_parent->m_color=-1;
				t_node=t_uncle->m_parent;
			}else{
				if(t_node==t_node->m_parent->m_right){
					t_node=t_node->m_parent;
					p_RotateLeft11(t_node);
				}
				t_node->m_parent->m_color=1;
				t_node->m_parent->m_parent->m_color=-1;
				p_RotateRight11(t_node->m_parent->m_parent);
			}
		}else{
			c_Node21* t_uncle2=t_node->m_parent->m_parent->m_left;
			if(((t_uncle2)!=0) && t_uncle2->m_color==-1){
				t_node->m_parent->m_color=1;
				t_uncle2->m_color=1;
				t_uncle2->m_parent->m_color=-1;
				t_node=t_uncle2->m_parent;
			}else{
				if(t_node==t_node->m_parent->m_left){
					t_node=t_node->m_parent;
					p_RotateRight11(t_node);
				}
				t_node->m_parent->m_color=1;
				t_node->m_parent->m_parent->m_color=-1;
				p_RotateLeft11(t_node->m_parent->m_parent);
			}
		}
	}
	m_root->m_color=1;
	return 0;
}
bool c_Map12::p_Set12(String t_key,c_Sprite* t_value){
	c_Node21* t_node=m_root;
	c_Node21* t_parent=0;
	int t_cmp=0;
	while((t_node)!=0){
		t_parent=t_node;
		t_cmp=p_Compare2(t_key,t_node->m_key);
		if(t_cmp>0){
			t_node=t_node->m_right;
		}else{
			if(t_cmp<0){
				t_node=t_node->m_left;
			}else{
				gc_assign(t_node->m_value,t_value);
				return false;
			}
		}
	}
	t_node=(new c_Node21)->m_new(t_key,t_value,-1,t_parent);
	if((t_parent)!=0){
		if(t_cmp>0){
			gc_assign(t_parent->m_right,t_node);
		}else{
			gc_assign(t_parent->m_left,t_node);
		}
		p_InsertFixup11(t_node);
	}else{
		gc_assign(m_root,t_node);
	}
	return true;
}
void c_Map12::mark(){
	Object::mark();
	gc_mark_q(m_root);
}
c_StringMap7::c_StringMap7(){
}
c_StringMap7* c_StringMap7::m_new(){
	c_Map12::m_new();
	return this;
}
int c_StringMap7::p_Compare2(String t_lhs,String t_rhs){
	return t_lhs.Compare(t_rhs);
}
void c_StringMap7::mark(){
	c_Map12::mark();
}
c_Node21::c_Node21(){
	m_key=String();
	m_right=0;
	m_left=0;
	m_value=0;
	m_color=0;
	m_parent=0;
}
c_Node21* c_Node21::m_new(String t_key,c_Sprite* t_value,int t_color,c_Node21* t_parent){
	this->m_key=t_key;
	gc_assign(this->m_value,t_value);
	this->m_color=t_color;
	gc_assign(this->m_parent,t_parent);
	return this;
}
c_Node21* c_Node21::m_new2(){
	return this;
}
void c_Node21::mark(){
	Object::mark();
	gc_mark_q(m_right);
	gc_mark_q(m_left);
	gc_mark_q(m_value);
	gc_mark_q(m_parent);
}
c_SoulFamiliar::c_SoulFamiliar(){
}
c_SoulFamiliar* c_SoulFamiliar::m_new(int t_newX,int t_newY,Object* t_owner_){
	c_FamiliarFixed::m_new();
	bb_logger_Debug->p_TraceNotImplemented(String(L"SoulFamiliar.New(Int, Int, Object)",34));
	return this;
}
c_SoulFamiliar* c_SoulFamiliar::m_new2(){
	c_FamiliarFixed::m_new();
	return this;
}
void c_SoulFamiliar::p_Die(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"SoulFamiliar.Die()",18));
}
bool c_SoulFamiliar::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"SoulFamiliar.Hit(String, Int, Int, Entity, Bool, Int)",53));
	return false;
}
void c_SoulFamiliar::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"SoulFamiliar.Update()",21));
}
void c_SoulFamiliar::mark(){
	c_FamiliarFixed::mark();
}
c_List10::c_List10(){
	m__head=((new c_HeadNode10)->m_new());
}
c_List10* c_List10::m_new(){
	return this;
}
c_Node22* c_List10::p_AddLast10(c_Familiar* t_data){
	return (new c_Node22)->m_new(m__head,m__head->m__pred,t_data);
}
c_List10* c_List10::m_new2(Array<c_Familiar* > t_data){
	Array<c_Familiar* > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		c_Familiar* t_t=t_[t_2];
		t_2=t_2+1;
		p_AddLast10(t_t);
	}
	return this;
}
void c_List10::mark(){
	Object::mark();
	gc_mark_q(m__head);
}
c_Node22::c_Node22(){
	m__succ=0;
	m__pred=0;
	m__data=0;
}
c_Node22* c_Node22::m_new(c_Node22* t_succ,c_Node22* t_pred,c_Familiar* t_data){
	gc_assign(m__succ,t_succ);
	gc_assign(m__pred,t_pred);
	gc_assign(m__succ->m__pred,this);
	gc_assign(m__pred->m__succ,this);
	gc_assign(m__data,t_data);
	return this;
}
c_Node22* c_Node22::m_new2(){
	return this;
}
void c_Node22::mark(){
	Object::mark();
	gc_mark_q(m__succ);
	gc_mark_q(m__pred);
	gc_mark_q(m__data);
}
c_HeadNode10::c_HeadNode10(){
}
c_HeadNode10* c_HeadNode10::m_new(){
	c_Node22::m_new2();
	gc_assign(m__succ,(this));
	gc_assign(m__pred,(this));
	return this;
}
void c_HeadNode10::mark(){
	c_Node22::mark();
}
int bb_math_Max(int t_x,int t_y){
	if(t_x>t_y){
		return t_x;
	}
	return t_y;
}
Float bb_math_Max2(Float t_x,Float t_y){
	if(t_x>t_y){
		return t_x;
	}
	return t_y;
}
int bb_controller_game_dailyChallengeSuccessScore;
int bb_controller_game_speedrunSuccessScore;
int bb_controller_game_hardcoreModeSuccessScore;
c_Audio::c_Audio(){
}
bool c_Audio::m_songShopOpen;
int c_Audio::m_fixedBeatNum;
bool c_Audio::m_debugEnablePlaceholders;
int c_Audio::m_GetSongPosition(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Audio.GetSongPosition()",23));
	return 0;
}
int c_Audio::m_songLoops;
int c_Audio::m_GetCurrentBeatNumber(int t_beatOffset,bool t_useFixed){
	if(t_useFixed){
		if(m_fixedBeatNum!=-64){
			return m_fixedBeatNum;
		}
	}
	int t_songPosition=m_GetSongPosition();
	int t_beatNumber=0;
	for(t_beatNumber=t_beatNumber;t_beatNumber<bb_controller_game_beatData.Length();t_beatNumber=t_beatNumber+1){
		int t_beatData=bb_controller_game_beatData[t_beatNumber];
		if(t_songPosition<t_beatData){
			break;
		}
	}
	t_beatNumber+=t_beatOffset;
	if(t_beatNumber<bb_controller_game_beatData.Length()){
		t_beatNumber=bb_math_Max(0,t_beatNumber);
	}else{
		if((m_songLoops)!=0){
			t_beatNumber=t_beatNumber % bb_controller_game_beatData.Length();
		}else{
			t_beatNumber=bb_controller_game_beatData.Length()-1;
		}
	}
	return t_beatNumber;
}
int c_Audio::m_numLoops;
int c_Audio::m_GetCurrentBeatNumberIncludingLoops(int t_beatOffset,bool t_useFixed){
	if(t_useFixed){
		if(m_fixedBeatNum!=-64){
			return m_fixedBeatNum;
		}
	}
	int t_beatNumber=m_GetCurrentBeatNumber(t_beatOffset,t_useFixed);
	if(((m_songLoops)!=0) && m_numLoops>0){
		t_beatNumber=t_beatOffset+m_GetCurrentBeatNumber(0,t_useFixed);
	}
	int t_beatNumberIncludingLoops=t_beatNumber+m_numLoops*bb_controller_game_beatData.Length();
	t_beatNumberIncludingLoops=bb_math_Max(0,t_beatNumberIncludingLoops);
	return t_beatNumberIncludingLoops;
}
int c_Audio::m_songDuration;
int c_Audio::m_TimeUntilSpecificBeat(int t_beatNum){
	t_beatNum=bb_math_Max(0,t_beatNum);
	if(t_beatNum>=bb_controller_game_beatData.Length()){
		if((m_songLoops)!=0){
			t_beatNum=t_beatNum % bb_controller_game_beatData.Length();
		}else{
			t_beatNum=bb_controller_game_beatData.Length()-1;
		}
	}
	int t_timeUntilSpecificBeat=bb_controller_game_beatData[t_beatNum]-m_GetSongPosition();
	if(!((m_songLoops)!=0)){
		return t_timeUntilSpecificBeat;
	}
	if(t_timeUntilSpecificBeat<0){
		if(-t_timeUntilSpecificBeat>=bb_math_Abs(t_timeUntilSpecificBeat+m_songDuration)){
			t_timeUntilSpecificBeat+=m_songDuration;
		}
	}else{
		if(t_timeUntilSpecificBeat>0){
			if(t_timeUntilSpecificBeat>=bb_math_Abs(t_timeUntilSpecificBeat-m_songDuration)){
				t_timeUntilSpecificBeat-=m_songDuration;
			}
		}
	}
	return t_timeUntilSpecificBeat;
}
int c_Audio::m_GetClosestBeatNum(bool t_useFixed){
	int t_beatNum=m_GetCurrentBeatNumberIncludingLoops(0,t_useFixed);
	int t_timeUntilPreviousBeat=m_TimeUntilSpecificBeat(t_beatNum-1);
	int t_timeUntilCurrentBeat=m_TimeUntilSpecificBeat(t_beatNum);
	if(bb_math_Abs(t_timeUntilCurrentBeat)>bb_math_Abs(t_timeUntilPreviousBeat)){
		t_beatNum=m_GetCurrentBeatNumberIncludingLoops(-1,t_useFixed);
	}
	return t_beatNum;
}
void c_Audio::m_Init(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Audio.Init()",12));
}
void c_Audio::m_UpdateNumLoops(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Audio.UpdateNumLoops()",22));
}
void c_Audio::m_Update(bool t_hasLoadedGameData){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Audio.Update(Bool)",18));
}
void c_Audio::m_PlayGameSoundAt(String t_snd,int t_xVal,int t_yVal,bool t_fullVol,int t_maxDist,bool t_loop){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Audio.PlayGameSoundAt(String, Int, Int, Bool, Int, Bool)",56));
}
void c_Audio::m_PlayGameSoundAt2(String t_snd,int t_xVal,int t_yVal,int t_ch,bool t_fullVol,int t_maxDist,bool t_loop,Float t_spd){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Audio.PlayGameSoundAt(String, Int, Int, Int, Bool, Int, Bool, Float)",68));
}
void c_Audio::m_PauseSong(bool t_pause){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Audio.PauseSong(Bool)",21));
}
bool c_Audio::m_cheatingDetected;
int c_Audio::m_GetNonAbsoluteDistanceFromNearestBeat(){
	int t_currentBeatNumber=m_GetCurrentBeatNumberIncludingLoops(0,false);
	int t_previousBeatNumber=t_currentBeatNumber-1;
	if(bb_math_Abs(m_TimeUntilSpecificBeat(t_previousBeatNumber))<bb_math_Abs(m_TimeUntilSpecificBeat(t_currentBeatNumber))){
		return m_TimeUntilSpecificBeat(t_previousBeatNumber);
	}
	return m_TimeUntilSpecificBeat(t_currentBeatNumber);
}
void c_Audio::m_PlayGameSound(String t_snd,int t_ch,Float t_spd){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Audio.PlayGameSound(String, Int, Float)",39));
}
int c_Audio::m_fadeFrames;
int c_Audio::m_startFadeFrames;
bool c_Audio::m_PastLastBeat(){
	int t_lastBeat=bb_controller_game_beatData[bb_controller_game_beatData.Length()-1];
	return m_GetSongPosition()>t_lastBeat;
}
bool c_Audio::m_HasSongEnded(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Audio.HasSongEnded()",20));
	return false;
}
bool c_Audio::m_DoingNecrodancerTransition(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Audio.DoingNecrodancerTransition()",34));
	return false;
}
bool c_Audio::m_startSong;
int c_Audio::m_GetDistanceFromNearestBeat(){
	int t_beatNum=m_GetCurrentBeatNumberIncludingLoops(0,false);
	int t_timeUntilPreviousBeat=m_TimeUntilSpecificBeat(t_beatNum-1);
	int t_timeUntilCurrentBeat=m_TimeUntilSpecificBeat(t_beatNum);
	return bb_math_Min(bb_math_Abs(t_timeUntilCurrentBeat),bb_math_Abs(t_timeUntilPreviousBeat));
}
int c_Audio::m_GetNextBeatDuration(){
	int t_currentBeatNumber=m_GetCurrentBeatNumberIncludingLoops(0,false);
	int t_timeUntilCurrentBeat=m_TimeUntilSpecificBeat(t_currentBeatNumber);
	int t_previousBeatNumber=t_currentBeatNumber-1;
	int t_timeUntilPreviousBeat=m_TimeUntilSpecificBeat(t_previousBeatNumber);
	int t_duration=t_timeUntilCurrentBeat-t_timeUntilPreviousBeat;
	if(t_duration==0){
		t_duration=1;
	}
	return t_duration;
}
bool c_Audio::m_includeVideoLatency;
Float c_Audio::m_GetPercentDistanceFromNextBeat(){
	int t_currentBeatNumber=m_GetCurrentBeatNumberIncludingLoops(0,false);
	int t_dist=m_TimeUntilSpecificBeat(t_currentBeatNumber);
	int t_duration=m_GetNextBeatDuration();
	Float t_percentDist=Float(t_dist)/Float(t_duration);
	if(t_percentDist>=FLOAT(1.0)){
		t_percentDist=FLOAT(0.0);
	}
	return t_percentDist;
}
int c_Audio::m_GetBeatAnimFrame4(){
	m_includeVideoLatency=true;
	Float t_percentDist=m_GetPercentDistanceFromNextBeat();
	m_includeVideoLatency=false;
	if(t_percentDist<FLOAT(0.09) || t_percentDist>=FLOAT(0.99)){
		return 0;
	}
	if(t_percentDist>=FLOAT(0.69)){
		return 1;
	}
	if(t_percentDist>=FLOAT(0.39)){
		return 2;
	}
	return 3;
}
void c_Audio::mark(){
	Object::mark();
}
c_Point2::c_Point2(){
}
c_Point2* c_Point2::m_new(){
	return this;
}
void c_Point2::mark(){
	Object::mark();
}
c_ItemData::c_ItemData(){
	m_imageFrames=0;
	m_imageW=0;
	m_imageH=0;
	m_bouncer=true;
	m_xOff=0;
	m_yOff=0;
}
c_ItemData* c_ItemData::m_new(c_XMLNode* t_itemXML){
	this->m_imageFrames=2*t_itemXML->p_GetAttribute3(String(L"numFrames",9),1);
	this->m_imageW=t_itemXML->p_GetAttribute3(String(L"imageW",6),24);
	this->m_imageH=t_itemXML->p_GetAttribute3(String(L"imageH",6),24);
	this->m_bouncer=t_itemXML->p_GetAttribute2(String(L"bouncer",7),true);
	int t_xOffDefault=(24-this->m_imageW)/2;
	this->m_xOff=t_itemXML->p_GetAttribute3(String(L"xOff",4),t_xOffDefault);
	int t_yOffDefault=0;
	if(this->m_bouncer){
		t_yOffDefault=(24-this->m_imageH)/2;
	}
	this->m_yOff=t_itemXML->p_GetAttribute3(String(L"yOff",4),t_yOffDefault);
	return this;
}
c_ItemData* c_ItemData::m_new2(){
	return this;
}
void c_ItemData::mark(){
	Object::mark();
}
c_TextSprite::c_TextSprite(){
	m_justification=0;
	m_scaleVal=FLOAT(1.0);
	m_color=-1;
	m_zVal=10000;
	m_showShadow=true;
	m_shadowColor=-16777216;
	m_shadowOffX=1;
	m_shadowOffY=1;
	m_fontScale=1;
	m_containedSprites=(new c_List21)->m_new();
	m_containedSpriteShadows=(new c_List21)->m_new();
}
c_TextSprite* c_TextSprite::m_new(int t_j,Float t_sc,int t_c,int t_z,bool t_shad,int t_shadC,int t_sOffX,int t_sOffY){
	this->m_justification=t_j;
	this->m_scaleVal=t_sc;
	this->m_color=t_c;
	this->m_zVal=t_z;
	this->m_showShadow=t_shad;
	this->m_shadowColor=t_shadC;
	this->m_shadowOffX=t_sOffX;
	this->m_shadowOffY=t_sOffY;
	if((Float)fmod(t_sc,FLOAT(3.0))==FLOAT(0.0)){
		this->m_fontScale=3;
		this->m_scaleVal/=FLOAT(3.0);
	}else{
		if((Float)fmod(t_sc,FLOAT(2.0))==FLOAT(0.0)){
			this->m_fontScale=2;
			this->m_scaleVal/=FLOAT(2.0);
		}
	}
	return this;
}
c_TextSprite* c_TextSprite::m_new2(int t_j,Float t_sc,int t_c,int t_z){
	this->m_justification=t_j;
	this->m_scaleVal=t_sc;
	this->m_color=t_c;
	this->m_zVal=t_z;
	return this;
}
c_TextSprite* c_TextSprite::m_new3(int t_j,Float t_sc){
	this->m_justification=t_j;
	this->m_scaleVal=t_sc;
	return this;
}
c_TextSprite* c_TextSprite::m_new4(int t_j){
	this->m_justification=t_j;
	return this;
}
c_TextSprite* c_TextSprite::m_new5(){
	return this;
}
void c_TextSprite::p_Discard(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"TextSprite.Discard()",20));
}
void c_TextSprite::p_SetText(String t_t,bool t_force){
	bb_logger_Debug->p_TraceNotImplemented(String(L"TextSprite.SetText(String, Bool)",32));
}
void c_TextSprite::p_InWorld(bool t_b){
	c_Enumerator11* t_=this->m_containedSprites->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Sprite* t_containedSprite=t_->p_NextObject();
		t_containedSprite->p_InWorld(t_b);
	}
	c_Enumerator11* t_2=this->m_containedSpriteShadows->p_ObjectEnumerator();
	while(t_2->p_HasNext()){
		c_Sprite* t_containedSpriteShadow=t_2->p_NextObject();
		t_containedSpriteShadow->p_InWorld(t_b);
	}
}
void c_TextSprite::m_Init(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"TextSprite.Init()",17));
}
void c_TextSprite::mark(){
	Object::mark();
	gc_mark_q(m_containedSprites);
	gc_mark_q(m_containedSpriteShadows);
}
c_Bouncer::c_Bouncer(){
	m_min=FLOAT(.0);
	m_max=FLOAT(.0);
	m_power=FLOAT(.0);
	m_value=FLOAT(.0);
	m_steps=0;
	m_currentSteps=0;
	m_goingUp=true;
	m_enabled=true;
}
c_Bouncer* c_Bouncer::m_new(Float t_minVal,Float t_maxVal,Float t_powerVal,int t_stepsVal){
	this->m_min=t_minVal;
	this->m_max=t_maxVal;
	this->m_power=t_powerVal;
	this->m_value=t_minVal;
	this->m_steps=t_stepsVal;
	this->m_currentSteps=c_Util::m_RndIntRange(-t_stepsVal,t_stepsVal-1,false,-1);
	this->m_goingUp=c_Util::m_RndBool(false);
	return this;
}
c_Bouncer* c_Bouncer::m_new2(){
	return this;
}
void c_Bouncer::p_Disable(){
	this->m_enabled=false;
}
void c_Bouncer::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Bouncer.Update()",16));
}
void c_Bouncer::p_Enable(){
	this->m_enabled=true;
}
void c_Bouncer::mark(){
	Object::mark();
}
int bb_random_Seed;
Float bb_random_Rnd(){
	bb_random_Seed=bb_random_Seed*1664525+1013904223|0;
	return Float(bb_random_Seed>>8&16777215)/FLOAT(16777216.0);
}
Float bb_random_Rnd2(Float t_low,Float t_high){
	return bb_random_Rnd3(t_high-t_low)+t_low;
}
Float bb_random_Rnd3(Float t_range){
	return bb_random_Rnd()*t_range;
}
int bb_math_Clamp(int t_n,int t_min,int t_max){
	if(t_n<t_min){
		return t_min;
	}
	if(t_n>t_max){
		return t_max;
	}
	return t_n;
}
Float bb_math_Clamp2(Float t_n,Float t_min,Float t_max){
	if(t_n<t_min){
		return t_min;
	}
	if(t_n>t_max){
		return t_max;
	}
	return t_n;
}
c_Replay::c_Replay(){
	m_startingZone=0;
	m_startingLevel=0;
	m_curReplayData=0;
	m_runTime=0;
	m_saveData=String();
	m_startingGold=0;
	m_hasBroadsword=false;
	m_beatOffset=0;
	m_replayStr=String();
}
int c_Replay::p_GetRand(int t_channel){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Replay.GetRand(Int)",19));
	return 0;
}
void c_Replay::p_RecordRand(int t_channel,int t_num){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Replay.RecordRand(Int, Int)",27));
}
void c_Replay::p_NextLevel(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Replay.NextLevel()",18));
}
c_Replay* c_Replay::m_new(){
	return this;
}
void c_Replay::p_NewLevel(int t_randSeed){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Replay.NewLevel(Int)",20));
}
void c_Replay::p_Save(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Replay.Save()",13));
}
int c_Replay::p_GetNumBeats(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Replay.GetNumBeats()",20));
	return 0;
}
void c_Replay::mark(){
	Object::mark();
	gc_mark_q(m_curReplayData);
}
c_Point::c_Point(){
	m_x=0;
	m_y=0;
}
c_Point* c_Point::m_new(int t_xVal,int t_yVal){
	this->m_x=t_xVal;
	this->m_y=t_yVal;
	return this;
}
c_Point* c_Point::m_new2(){
	return this;
}
String c_Point::p_ToString(){
	return String(L"(",1)+String(this->m_x)+String(L", ",2)+String(this->m_y)+String(L")",1);
}
c_Point* c_Point::m_Add(c_Point* t_a,c_Point* t_b){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Point.Add(Point, Point)",23));
	return 0;
}
c_Point* c_Point::p_Add5(c_Point* t_other){
	int t_x=this->m_x+t_other->m_x;
	int t_y=this->m_y+t_other->m_y;
	return (new c_Point)->m_new(t_x,t_y);
}
c_Point* c_Point::p_Add4(int t_dx,int t_dy){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Point.Add(Int, Int)",19));
	return 0;
}
c_Point* c_Point::p_RotateCWAbout(c_Point* t_origin){
	int t_rotatedX=t_origin->m_x-t_origin->m_y+this->m_y;
	int t_rotatedY=t_origin->m_x+t_origin->m_y-this->m_x;
	return (new c_Point)->m_new(t_rotatedX,t_rotatedY);
}
c_Point* c_Point::p_Scale(int t_scalar){
	int t_scaledX=t_scalar*this->m_x;
	int t_scaledY=t_scalar*this->m_y;
	return (new c_Point)->m_new(t_scaledX,t_scaledY);
}
bool c_Point::p_Equals8(c_Point* t_other){
	return this->m_x==t_other->m_x && this->m_y==t_other->m_y;
}
void c_Point::mark(){
	Object::mark();
}
c_StackEx::c_StackEx(){
}
c_StackEx* c_StackEx::m_new(){
	c_Stack2::m_new();
	return this;
}
int c_StackEx::p_ChooseRandom(bool t_useSeed){
	int t_randomIndex=c_Util::m_RndIntRangeFromZero(this->p_Length()-1,t_useSeed);
	return this->p_Get2(t_randomIndex);
}
void c_StackEx::p_Shuffle(bool t_useSeed){
	for(int t_i=1;t_i<this->p_Length();t_i=t_i+1){
		int t_randomValue=c_Util::m_RndIntRangeFromZero(t_i,t_useSeed);
		if(t_i!=t_randomValue){
			int t_value_at_i=this->p_Get2(t_i);
			int t_value_at_randomValue=this->p_Get2(t_randomValue);
			this->p_Set6(t_i,t_value_at_randomValue);
			this->p_Set6(t_randomValue,t_value_at_i);
		}
	}
}
void c_StackEx::mark(){
	c_Stack2::mark();
}
c_List11::c_List11(){
	m__head=((new c_HeadNode11)->m_new());
}
c_List11* c_List11::m_new(){
	return this;
}
c_Node23* c_List11::p_AddLast11(c_Enemy* t_data){
	return (new c_Node23)->m_new(m__head,m__head->m__pred,t_data);
}
c_List11* c_List11::m_new2(Array<c_Enemy* > t_data){
	Array<c_Enemy* > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		c_Enemy* t_t=t_[t_2];
		t_2=t_2+1;
		p_AddLast11(t_t);
	}
	return this;
}
c_Enumerator4* c_List11::p_ObjectEnumerator(){
	return (new c_Enumerator4)->m_new(this);
}
bool c_List11::p_Equals9(c_Enemy* t_lhs,c_Enemy* t_rhs){
	return t_lhs==t_rhs;
}
int c_List11::p_RemoveEach5(c_Enemy* t_value){
	c_Node23* t_node=m__head->m__succ;
	while(t_node!=m__head){
		c_Node23* t_succ=t_node->m__succ;
		if(p_Equals9(t_node->m__data,t_value)){
			t_node->p_Remove();
		}
		t_node=t_succ;
	}
	return 0;
}
int c_List11::p_Count(){
	int t_n=0;
	c_Node23* t_node=m__head->m__succ;
	while(t_node!=m__head){
		t_node=t_node->m__succ;
		t_n+=1;
	}
	return t_n;
}
Array<c_Enemy* > c_List11::p_ToArray(){
	Array<c_Enemy* > t_arr=Array<c_Enemy* >(p_Count());
	int t_i=0;
	c_Enumerator4* t_=this->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Enemy* t_t=t_->p_NextObject();
		gc_assign(t_arr[t_i],t_t);
		t_i+=1;
	}
	return t_arr;
}
void c_List11::mark(){
	Object::mark();
	gc_mark_q(m__head);
}
c_EnemyList::c_EnemyList(){
}
c_EnemyList* c_EnemyList::m_new(){
	c_List11::m_new();
	return this;
}
void c_EnemyList::mark(){
	c_List11::mark();
}
c_Node23::c_Node23(){
	m__succ=0;
	m__pred=0;
	m__data=0;
}
c_Node23* c_Node23::m_new(c_Node23* t_succ,c_Node23* t_pred,c_Enemy* t_data){
	gc_assign(m__succ,t_succ);
	gc_assign(m__pred,t_pred);
	gc_assign(m__succ->m__pred,this);
	gc_assign(m__pred->m__succ,this);
	gc_assign(m__data,t_data);
	return this;
}
c_Node23* c_Node23::m_new2(){
	return this;
}
int c_Node23::p_Remove(){
	gc_assign(m__succ->m__pred,m__pred);
	gc_assign(m__pred->m__succ,m__succ);
	return 0;
}
void c_Node23::mark(){
	Object::mark();
	gc_mark_q(m__succ);
	gc_mark_q(m__pred);
	gc_mark_q(m__data);
}
c_HeadNode11::c_HeadNode11(){
}
c_HeadNode11* c_HeadNode11::m_new(){
	c_Node23::m_new2();
	gc_assign(m__succ,(this));
	gc_assign(m__pred,(this));
	return this;
}
void c_HeadNode11::mark(){
	c_Node23::mark();
}
c_Enumerator4::c_Enumerator4(){
	m__list=0;
	m__curr=0;
}
c_Enumerator4* c_Enumerator4::m_new(c_List11* t_list){
	gc_assign(m__list,t_list);
	gc_assign(m__curr,t_list->m__head->m__succ);
	return this;
}
c_Enumerator4* c_Enumerator4::m_new2(){
	return this;
}
bool c_Enumerator4::p_HasNext(){
	while(m__curr->m__succ->m__pred!=m__curr){
		gc_assign(m__curr,m__curr->m__succ);
	}
	return m__curr!=m__list->m__head;
}
c_Enemy* c_Enumerator4::p_NextObject(){
	c_Enemy* t_data=m__curr->m__data;
	gc_assign(m__curr,m__curr->m__succ);
	return t_data;
}
void c_Enumerator4::mark(){
	Object::mark();
	gc_mark_q(m__list);
	gc_mark_q(m__curr);
}
c_Enumerator5::c_Enumerator5(){
	m__list=0;
	m__curr=0;
}
c_Enumerator5* c_Enumerator5::m_new(c_List2* t_list){
	gc_assign(m__list,t_list);
	gc_assign(m__curr,t_list->m__head->m__succ);
	return this;
}
c_Enumerator5* c_Enumerator5::m_new2(){
	return this;
}
bool c_Enumerator5::p_HasNext(){
	while(m__curr->m__succ->m__pred!=m__curr){
		gc_assign(m__curr,m__curr->m__succ);
	}
	return m__curr!=m__list->m__head;
}
c_RenderableObject* c_Enumerator5::p_NextObject(){
	c_RenderableObject* t_data=m__curr->m__data;
	gc_assign(m__curr,m__curr->m__succ);
	return t_data;
}
void c_Enumerator5::mark(){
	Object::mark();
	gc_mark_q(m__list);
	gc_mark_q(m__curr);
}
c_ReplayData::c_ReplayData(){
	m_randSeed=0;
	m_cameraHeight=0;
	m_cameraWidth=0;
}
void c_ReplayData::mark(){
	Object::mark();
}
c_Node24::c_Node24(){
	m__data=0;
}
c_ReplayData* c_Node24::p_Value(){
	return m__data;
}
void c_Node24::mark(){
	Object::mark();
	gc_mark_q(m__data);
}
c_IntStack::c_IntStack(){
}
c_IntStack* c_IntStack::m_new(Array<int > t_data){
	c_Stack2::m_new2(t_data);
	return this;
}
c_IntStack* c_IntStack::m_new2(){
	c_Stack2::m_new();
	return this;
}
bool c_IntStack::p_Equals2(int t_lhs,int t_rhs){
	return t_lhs==t_rhs;
}
void c_IntStack::mark(){
	c_Stack2::mark();
}
c_Enumerator6::c_Enumerator6(){
	m_stack=0;
	m_index=0;
}
c_Enumerator6* c_Enumerator6::m_new(c_Stack2* t_stack){
	gc_assign(this->m_stack,t_stack);
	return this;
}
c_Enumerator6* c_Enumerator6::m_new2(){
	return this;
}
bool c_Enumerator6::p_HasNext(){
	return m_index<m_stack->p_Length();
}
int c_Enumerator6::p_NextObject(){
	m_index+=1;
	return m_stack->m_data[m_index-1];
}
void c_Enumerator6::mark(){
	Object::mark();
	gc_mark_q(m_stack);
}
int bb_controller_game_lastEnemyMoveBeat;
c_Tile::c_Tile(){
	m_textLabel=0;
	m_textLabel2=0;
	m_textLabelText=String();
	m_type=0;
	m_trigger=0;
	m_tilesetOverride=-1;
	m_hasBeenSeen=false;
	m_lightValueFrameNum=-1;
	m_lightValueCached=FLOAT(-1.0);
	m_image=0;
	m_metalDoorOpenedBeat=-1;
	m_tarAnimCounter=0;
	m_tarAnimDelay=0;
	m_image1HasBeenLoadedWithFloor=false;
	m_torchDir=0;
	m_health=1;
	m_unbreakable=false;
	m_image2=0;
	m_hasResource=0;
	m_isStone=false;
	m_imageWireSilhouette=0;
	m_imageWire=0;
	m_imageWireFlash=0;
	m_wireFlashAnimDelay=-1;
	m_wireFlashDelay=-1;
	m_xImage=0;
	m_TORCH_LIGHT_MIN=0;
	m_TORCH_LIGHT_MAX=3;
	m_torchImage=0;
	m_torchOffX=0;
	m_torchOffY=0;
	m_animateTorch=false;
	m_triggerDoor=0;
	m_magicBarrier=false;
	m_triggerDig=0;
	m_wireMask=0;
	m_isCracked=false;
	m_flyawayText=String();
	m_cachedLOS=false;
	m_cachedLOSFrame=-1;
	m_cachedTrueLOS=false;
	m_cachedTrueLOSFrame=-1;
	m_constAlpha=FLOAT(.0);
	m_nextEruptionBeat=0;
	m_playerWasOnTileAtBeat=-1;
	m_playerWasOnTileLastFrame=false;
	m_triggerPlayer=0;
	m_torchFlickerNext=0;
	m_wasInLOS=false;
	m_grassValue=FLOAT(.0);
	m_constLightValueCached=FLOAT(-1.0);
	m_activatedConductorWire=false;
}
c_List12* c_Tile::m_floorRisingList;
c_List12* c_Tile::m_floorRecededList;
int c_Tile::m_totalTilesCreatedOrDestroyed;
void c_Tile::p_ClearTextLabel(){
	if((this->m_textLabel)!=0){
		this->m_textLabel->p_DiscardTempImage();
		this->m_textLabel=0;
	}
	if((this->m_textLabel2)!=0){
		this->m_textLabel2->p_Discard();
		this->m_textLabel2=0;
	}
	this->m_textLabelText=String();
}
void c_Tile::p_Die(){
	m_floorRisingList->p_RemoveEach6(this);
	m_floorRecededList->p_RemoveEach6(this);
	if(!this->m_dead){
		m_totalTilesCreatedOrDestroyed+=1;
		this->m_collides=false;
		this->p_ClearTextLabel();
		c_RenderableObject::p_Die();
	}
}
int c_Tile::p_GetType(){
	return this->m_type;
}
int c_Tile::p_CalcTileset(){
	if(this->m_type==14){
		return 5;
	}
	if(bb_controller_game_currentLevel==4 || bb_controller_game_currentLevel==5 || bb_controller_game_currentLevel>=-500 && bb_controller_game_currentLevel<=-490){
		if(c_Level::m_bossNumber==9){
			return 0;
		}
		return 5;
	}
	int t_13=bb_controller_game_currentZone;
	if(t_13==2){
		return 1;
	}else{
		if(t_13==3){
			if(Float(this->m_x)*c_Level::m_zone3DividingLineX-Float(this->m_y)*c_Level::m_zone3DividingLineY>FLOAT(0.0)){
				return 3;
			}
			return 2;
		}else{
			if(t_13==4){
				return 4;
			}else{
				if(t_13==5){
					return 6;
				}
			}
		}
	}
	return 0;
}
bool c_Tile::p_IsMetalDoorOpen(){
	return this->m_metalDoorOpenedBeat!=-1;
}
bool c_Tile::p_IsFloor(){
	if(this->m_type==111 && this->p_IsMetalDoorOpen()){
		return true;
	}
	return 0<=this->m_type && this->m_type<=24;
}
int c_Tile::p_GetTileset(){
	return this->m_tilesetOverride;
}
c_Sprite* c_Tile::p_LoadFloor(){
	this->m_image1HasBeenLoadedWithFloor=true;
	int t_25=this->p_GetTileset();
	if(t_25==1){
		if(c_Util::m_RndBool(false)){
			return (new c_Sprite)->m_new(String(L"level/zone2_floorA.png",22),26,26,12,6);
		}else{
			return (new c_Sprite)->m_new(String(L"level/zone2_floorB.png",22),26,26,12,6);
		}
	}else{
		if(t_25==2){
			return (new c_Sprite)->m_new(String(L"level/zone3_floor.png",21),26,26,6,6);
		}else{
			if(t_25==3){
				return (new c_Sprite)->m_new(String(L"level/zone3_floorB.png",22),26,26,6,6);
			}else{
				if(t_25==4){
					return (new c_Sprite)->m_new(String(L"level/zone4_floor.png",21),26,26,6,6);
				}else{
					if(t_25==5){
						if(c_Level::m_isConductorLevel){
							return (new c_Sprite)->m_new(String(L"level/boss_floor_conductor.png",30),26,26,6,6);
						}else{
							return (new c_Sprite)->m_new(String(L"level/boss_floor_A.png",22),26,26,6,6);
						}
					}else{
						if(t_25==6){
							return (new c_Sprite)->m_new(String(L"level/zone5_floor.png",21),26,26,6,6);
						}else{
							if(c_Util::m_RndBool(false)){
								return (new c_Sprite)->m_new(String(L"level/floor_dirt1.png",21),26,26,12,6);
							}else{
								return (new c_Sprite)->m_new(String(L"level/floor_dirt2.png",21),26,26,12,6);
							}
						}
					}
				}
			}
		}
	}
}
bool c_Tile::p_IsShopWall(){
	int t_19=this->m_type;
	if(t_19==110 || t_19==104){
		return true;
	}
	return false;
}
bool c_Tile::p_HasTorch(){
	return this->m_torchDir!=0;
}
bool c_Tile::p_IsDoor(){
	int t_15=this->m_type;
	if(t_15==118 || t_15==103 || t_15==106){
		return true;
	}else{
		if(t_15==111){
			return !this->p_IsMetalDoorOpen();
		}
	}
	return false;
}
bool c_Tile::p_IsWall(bool t_nonCorridor,bool t_destructibleOnly,bool t_forVision,bool t_torchlessOnly){
	if(t_destructibleOnly){
		int t_21=this->m_type;
		if(t_21==102 || t_21==103 || t_21==118 || t_21==106 || t_21==111){
			return false;
		}else{
			if(this->p_IsShopWall()){
				return false;
			}
		}
	}
	if(t_nonCorridor && this->m_type==101){
		return false;
	}
	if(t_torchlessOnly){
		if(this->p_HasTorch() || this->p_IsDoor() || ((c_Trap::m_GetTrapAt(this->m_x,this->m_y))!=0)){
			return false;
		}
	}
	if(t_forVision){
		int t_22=this->m_type;
		if(t_22==112 || t_22==113 || t_22==114){
			return false;
		}
	}
	if(this->m_type==111 && this->p_IsMetalDoorOpen()){
		return false;
	}
	return 100<=this->m_type && this->m_type<=123;
}
bool c_Tile::p_IsWall2(){
	return this->p_IsWall(false,false,false,false);
}
void c_Tile::p_BecomeStone(){
	this->m_hasResource=0;
	int t_12=this->p_GetTileset();
	if(t_12==6){
		if(c_Util::m_RndBool(false)){
			gc_assign(this->m_image,(new c_Sprite)->m_new2(String(L"level/zone5_wall_stone_A.png",28),1,c_Image::m_DefaultFlags));
		}else{
			gc_assign(this->m_image,(new c_Sprite)->m_new2(String(L"level/zone5_wall_stone_B.png",28),1,c_Image::m_DefaultFlags));
		}
	}else{
		if(t_12==5){
			if(c_Level::m_IsFinalBoss()){
				gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/necrodancer_wall.png",26),24,48,5,c_Image::m_DefaultFlags));
			}else{
				gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/boss_wall.png",19),24,48,5,c_Image::m_DefaultFlags));
			}
			int t_frame=c_Util::m_RndIntRangeFromZero(4,false);
			this->m_image->p_SetFrame(t_frame);
			this->m_unbreakable=true;
		}else{
			if(t_12==4){
				gc_assign(this->m_image,(new c_Sprite)->m_new2(String(L"level/zone4_wall_rock_A.png",27),1,c_Image::m_DefaultFlags));
			}else{
				if(t_12==3){
					gc_assign(this->m_image,(new c_Sprite)->m_new2(String(L"level/zone3_wall_stone_cold.png",31),1,c_Image::m_DefaultFlags));
				}else{
					if(t_12==2){
						gc_assign(this->m_image,(new c_Sprite)->m_new2(String(L"level/zone3_wall_stone_hot.png",30),1,c_Image::m_DefaultFlags));
					}else{
						if(t_12==1){
							gc_assign(this->m_image,(new c_Sprite)->m_new2(String(L"level/zone2_wall_stone.png",26),1,c_Image::m_DefaultFlags));
						}else{
							gc_assign(this->m_image,(new c_Sprite)->m_new2(String(L"level/wall_stone_crypt.png",26),1,c_Image::m_DefaultFlags));
						}
					}
				}
			}
		}
	}
	this->m_image->p_SetAlphaValue(FLOAT(0.0));
	this->m_health=2;
	this->m_isStone=true;
	this->m_type=107;
	if(this->p_IsWall2()){
		this->m_image->p_SetZOff(FLOAT(8.0));
	}
}
void c_Tile::p_BecomeHarderStone(){
	this->m_hasResource=0;
	int t_11=this->p_GetTileset();
	if(t_11==4){
		if(c_Util::m_RndBool(false)){
			gc_assign(this->m_image,(new c_Sprite)->m_new2(String(L"level/zone4_wall_catacomb_A.png",31),1,c_Image::m_DefaultFlags));
		}else{
			gc_assign(this->m_image,(new c_Sprite)->m_new2(String(L"level/zone4_wall_catacomb_B.png",31),1,c_Image::m_DefaultFlags));
		}
	}else{
		if(t_11==6){
			gc_assign(this->m_image,(new c_Sprite)->m_new2(String(L"level/zone5_wall_catacomb.png",29),4,c_Image::m_DefaultFlags));
		}else{
			if(c_Util::m_RndBool(false)){
				gc_assign(this->m_image,(new c_Sprite)->m_new2(String(L"level/wall_catacomb_crypt1.png",30),1,c_Image::m_DefaultFlags));
			}else{
				gc_assign(this->m_image,(new c_Sprite)->m_new2(String(L"level/wall_catacomb_crypt2.png",30),1,c_Image::m_DefaultFlags));
			}
		}
	}
	this->m_image->p_SetAlphaValue(FLOAT(0.0));
	this->m_health=3;
	this->m_isStone=true;
	this->m_type=108;
	if(this->p_IsWall2()){
		this->m_image->p_SetZOff(FLOAT(8.0));
	}
}
c_Sprite* c_Tile::p_GetZone5Wall(){
	c_Sprite* t_zone5Wall=(new c_Sprite)->m_new(String(L"level/zone5_wall_dirt.png",25),24,48,13,c_Image::m_DefaultFlags);
	int t_frame=0;
	int t_frameRoll=c_Util::m_RndIntRangeFromZero(100,false);
	if(t_frameRoll<=34){
		t_frame=c_Util::m_RndIntRange(3,12,false,-1);
	}else{
		t_frame=c_Util::m_RndIntRangeFromZero(2,false);
	}
	t_zone5Wall->p_SetFrame(t_frame);
	return t_zone5Wall;
}
c_Sprite* c_Tile::p_GetZone4Wall(){
	c_Sprite* t_zone4Wall=(new c_Sprite)->m_new(String(L"level/zone4_wall_dirt.png",25),24,48,8,c_Image::m_DefaultFlags);
	int t_frameRoll=c_Util::m_RndIntRangeFromZero(100,false);
	int t_frame=0;
	if(t_frameRoll<=34){
		t_frame=c_Util::m_RndIntRangeFromZero(7,false);
	}else{
		t_frame=7;
		if(c_Util::m_RndBool(false)){
			t_frame=0;
		}
	}
	t_zone4Wall->p_SetFrame(t_frame);
	return t_zone4Wall;
}
bool c_Tile::p_IsTileset(int t_t){
	return this->p_GetTileset()==t_t;
}
c_Sprite* c_Tile::p_GetZone3Wall(){
	c_Sprite* t_wall=0;
	if(this->p_IsTileset(2)){
		t_wall=(new c_Sprite)->m_new(String(L"level/zone3_wall_dirt_hot.png",29),24,48,8,c_Image::m_DefaultFlags);
	}else{
		t_wall=(new c_Sprite)->m_new(String(L"level/zone3_wall_dirt_cold.png",30),24,48,8,c_Image::m_DefaultFlags);
	}
	int t_frame=c_Util::m_RndIntRangeFromZero(7,false);
	t_wall->p_SetFrame(t_frame);
	return t_wall;
}
c_Sprite* c_Tile::p_GetZone2Wall(){
	c_Sprite* t_image=(new c_Sprite)->m_new(String(L"level/wall_zone2.png",20),24,48,8,c_Image::m_DefaultFlags);
	int t_frameRoll=c_Util::m_RndIntRangeFromZero(100,false);
	if(t_frameRoll<=34){
		int t_frame=c_Util::m_RndIntRangeFromZero(7,false);
		t_image->p_SetFrame(t_frame);
	}else{
		if(c_Util::m_RndBool(false)){
			t_image->p_SetFrame(3);
		}else{
			t_image->p_SetFrame(7);
		}
	}
	return t_image;
}
c_Sprite* c_Tile::p_GetZone1Wall(){
	c_Sprite* t_image=(new c_Sprite)->m_new(String(L"level/wall_dirt_crypt.png",25),24,48,16,c_Image::m_DefaultFlags);
	int t_frame=c_Util::m_RndIntRangeFromZero(15,false);
	t_image->p_SetFrame(t_frame);
	int t_randomValue=c_Util::m_RndIntRangeFromZero(10,false);
	if(t_randomValue<=7){
		t_frame=c_Util::m_RndIntRangeFromZero(1,false);
		t_image->p_SetFrame(t_frame);
	}
	return t_image;
}
void c_Tile::p_BecomeDirt(){
	this->m_hasResource=0;
	c_Sprite* t_wall=0;
	int t_10=this->p_GetTileset();
	if(t_10==6){
		gc_assign(this->m_image,this->p_GetZone5Wall());
	}else{
		if(t_10==4){
			gc_assign(this->m_image,this->p_GetZone4Wall());
		}else{
			if(t_10==3 || t_10==2){
				gc_assign(this->m_image,this->p_GetZone3Wall());
			}else{
				if(t_10==1){
					gc_assign(this->m_image,this->p_GetZone2Wall());
				}else{
					gc_assign(this->m_image,this->p_GetZone1Wall());
				}
			}
		}
	}
	this->m_image->p_SetAlphaValue(FLOAT(0.0));
	this->m_health=1;
	this->m_isStone=false;
	this->m_unbreakable=false;
	if(this->p_IsWall2()){
		this->m_image->p_SetZOff(FLOAT(8.0));
	}
}
bool c_Tile::p_IsNecrodancerPlatform(){
	int t_17=this->m_type;
	if(t_17==112 || t_17==113 || t_17==114 || t_17==115 || t_17==116 || t_17==117){
		return true;
	}
	return false;
}
bool c_Tile::p_IsWire(){
	int t_23=this->m_type;
	if(t_23==20 || t_23==118){
		return true;
	}
	return false;
}
void c_Tile::p_LoadWireImages(String t_mainImage,int t_conductorPhase){
	int t_26=t_conductorPhase;
	if(t_26==0){
		gc_assign(this->m_imageWireSilhouette,(new c_Sprite)->m_new(String(L"level/wire_silhouette.png",25),24,24,16,c_Image::m_DefaultFlags));
		this->m_imageWireSilhouette->p_SetZ(FLOAT(-1000.0));
		gc_assign(this->m_imageWire,(new c_Sprite)->m_new(t_mainImage,24,24,128,c_Image::m_DefaultFlags));
		int t_27=c_Util::m_RndIntRangeFromZero(2,false);
		if(t_27==0){
			gc_assign(this->m_imageWireFlash,(new c_Sprite)->m_new(String(L"level/elec_flash_1.png",22),16,10,6,c_Image::m_DefaultFlags));
		}else{
			if(t_27==1){
				gc_assign(this->m_imageWireFlash,(new c_Sprite)->m_new(String(L"level/elec_flash_2.png",22),13,12,6,c_Image::m_DefaultFlags));
			}else{
				if(t_27==2){
					gc_assign(this->m_imageWireFlash,(new c_Sprite)->m_new(String(L"level/elec_flash_3.png",22),12,13,6,c_Image::m_DefaultFlags));
				}
			}
		}
		this->m_imageWireFlash->p_SetZ(FLOAT(-998.0));
		this->m_wireFlashAnimDelay=3;
		this->m_wireFlashDelay=c_Util::m_RndIntRangeFromZero(1800,false);
	}else{
		if(t_26==1){
			gc_assign(this->m_imageWire,(new c_Sprite)->m_new(t_mainImage,24,24,35,c_Image::m_DefaultFlags));
		}else{
			if(t_26==2){
				gc_assign(this->m_imageWire,(new c_Sprite)->m_new(t_mainImage,24,24,15,c_Image::m_DefaultFlags));
			}
		}
	}
	this->m_imageWire->p_SetAlphaValue(FLOAT(0.0));
	this->m_imageWire->p_SetZ(FLOAT(-999.0));
}
c_List12* c_Tile::m_pendingTilesList;
c_Tile* c_Tile::m_new(int t_xVal,int t_yVal,int t_typeVal,bool t_pending,int t_tilesetOvrd){
	c_RenderableObject::m_new();
	m_totalTilesCreatedOrDestroyed+=1;
	if(t_typeVal==8){
		c_Level::m_isAnyTar=true;
	}
	int t_existingTileType=-1;
	if(!t_pending){
		c_Tile* t_existingTile=c_Level::m_GetTileAt(t_xVal,t_yVal);
		if(t_existingTile!=0){
			t_existingTileType=t_existingTile->p_GetType();
			t_existingTile->p_Die();
		}
	}
	this->m_x=t_xVal;
	this->m_y=t_yVal;
	this->m_type=t_typeVal;
	this->m_tilesetOverride=t_tilesetOvrd;
	if(t_tilesetOvrd==-1){
		this->m_tilesetOverride=this->p_CalcTileset();
	}
	if(this->p_IsFloor()){
		int t_1=this->m_type;
		if(t_1==2){
			gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/stairs.png",16),0,0,1,c_Image::m_DefaultFlags));
		}else{
			if(t_1==6){
				gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/stairs_locked.png",23),0,0,1,c_Image::m_DefaultFlags));
			}else{
				if(t_1==15){
					gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/stairs_locked_diamond3.png",32),0,0,1,c_Image::m_DefaultFlags));
				}else{
					if(t_1==16){
						gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/stairs_locked_diamond9.png",32),0,0,1,c_Image::m_DefaultFlags));
					}else{
						if(t_1==9){
							gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/stairs_locked_miniboss.png",32),0,0,1,c_Image::m_DefaultFlags));
						}else{
							if(t_1==3){
								gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/TEMP_shop_floor.png",25),0,0,3,6));
							}else{
								if(t_1==4 || t_1==5){
									gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/TEMP_floor_water.png",26),0,0,3,6));
								}else{
									if(t_1==10){
										gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/TEMP_floor_hotcoal.png",28),0,0,3,6));
									}else{
										if(t_1==11){
											gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/TEMP_floor_ice.png",24),0,0,3,6));
										}else{
											if(t_1==12){
												gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/TEMP_floor_crystal.png",28),26,26,6,6));
											}else{
												if(t_1==17){
													gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/TEMP_floor_magnetic.png",29),26,26,3,6));
												}else{
													if(t_1==18){
														gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/floor_lava.png",20),26,26,15,6));
														this->m_tarAnimCounter=c_Util::m_RndIntRangeFromZero(10000,false);
														this->m_tarAnimDelay=c_Util::m_RndIntRangeFromZero(200,false);
													}else{
														if(t_1==13){
															gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/TEMP_floor_geyser.png",27),0,0,3,6));
														}else{
															if(t_1==8){
																gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/floor_tar.png",19),26,26,18,6));
																this->m_tarAnimCounter=c_Util::m_RndIntRangeFromZero(10000,false);
																this->m_tarAnimDelay=c_Util::m_RndIntRangeFromZero(200,false);
															}else{
																if(t_1==7){
																	gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/TEMP_npc_floor.png",24),0,0,3,6));
																}else{
																	if(t_1==21){
																		gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/floor_rising.png",22),0,0,3,6));
																		m_floorRisingList->p_AddLast12(this);
																	}else{
																		if(t_1==22){
																			gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/floor_receded.png",23),0,0,3,6));
																			m_floorRecededList->p_AddLast12(this);
																		}else{
																			gc_assign(this->m_image,this->p_LoadFloor());
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		this->m_image->p_SetZ(FLOAT(-1001.0));
	}else{
		if(this->p_IsWall2()){
			int t_2=this->m_type;
			if(t_2==104){
				gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/wall_shop_crypt.png",25),0,0,1,c_Image::m_DefaultFlags));
				this->m_health=4;
			}else{
				if(t_2==110){
					gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/wall_shop_crypt_cracked.png",33),0,0,1,c_Image::m_DefaultFlags));
					this->m_health=4;
				}else{
					if(t_2==109){
						if(c_Level::m_IsFinalBoss()){
							if(c_Level::m_isConductorLevel){
								gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/conductor_wall.png",24),24,48,5,c_Image::m_DefaultFlags));
							}else{
								gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/necrodancer_wall.png",26),24,48,5,c_Image::m_DefaultFlags));
							}
						}else{
							gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/boss_wall.png",19),24,48,5,c_Image::m_DefaultFlags));
						}
						int t_frame=c_Util::m_RndIntRangeFromZero(4,false);
						this->m_image->p_SetFrame(t_frame);
						this->m_unbreakable=true;
					}else{
						if(t_2==105){
							gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/wall_shop_crypt.png",25),0,0,1,c_Image::m_DefaultFlags));
							this->m_unbreakable=true;
						}else{
							if(t_2==102){
								gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/end_of_world.png",22),24,48,8,c_Image::m_DefaultFlags));
								int t_frame2=c_Util::m_RndIntRangeFromZero(7,false);
								this->m_image->p_SetFrame(t_frame2);
								this->m_unbreakable=true;
							}else{
								if(t_2==120){
									gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/conductor_wall_pipe1.png",30),24,79,1,c_Image::m_DefaultFlags));
									this->m_unbreakable=true;
								}else{
									if(t_2==121){
										gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/conductor_wall_pipe2.png",30),24,79,1,c_Image::m_DefaultFlags));
										this->m_unbreakable=true;
									}else{
										if(t_2==122){
											gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/conductor_wall_pipe3.png",30),24,79,1,c_Image::m_DefaultFlags));
											this->m_unbreakable=true;
										}else{
											if(t_2==123){
												gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/conductor_wall_pipe4.png",30),24,79,1,c_Image::m_DefaultFlags));
												this->m_unbreakable=true;
											}else{
												if(t_2==103 || t_2==118){
													gc_assign(this->m_image,this->p_LoadFloor());
													if(c_Level::m_IsWallAt(this->m_x-1,this->m_y,false,false) || c_Level::m_IsWallAt(this->m_x+1,this->m_y,false,false)){
														gc_assign(this->m_image2,(new c_Sprite)->m_new(String(L"level/door_front.png",20),0,0,1,c_Image::m_DefaultFlags));
													}else{
														gc_assign(this->m_image2,(new c_Sprite)->m_new(String(L"level/door_side.png",19),0,0,1,c_Image::m_DefaultFlags));
													}
													this->m_health=0;
												}else{
													if(t_2==106){
														gc_assign(this->m_image,this->p_LoadFloor());
														if(c_Level::m_IsWallAt(this->m_x-1,this->m_y,false,false) || c_Level::m_IsWallAt(this->m_x+1,this->m_y,false,false)){
															gc_assign(this->m_image2,(new c_Sprite)->m_new(String(L"level/door_locked_front.png",27),0,0,1,c_Image::m_DefaultFlags));
														}else{
															gc_assign(this->m_image2,(new c_Sprite)->m_new(String(L"level/door_locked_side.png",26),0,0,1,c_Image::m_DefaultFlags));
														}
														this->m_health=100;
													}else{
														if(t_2==111){
															gc_assign(this->m_image,this->p_LoadFloor());
															if(c_Level::m_IsWallAt(this->m_x-1,this->m_y,false,false) || c_Level::m_IsWallAt(this->m_x+1,this->m_y,false,false)){
																gc_assign(this->m_image2,(new c_Sprite)->m_new(String(L"level/door_metal_front.png",26),24,29,4,c_Image::m_DefaultFlags));
															}else{
																gc_assign(this->m_image2,(new c_Sprite)->m_new(String(L"level/door_metal_side.png",25),11,39,2,c_Image::m_DefaultFlags));
															}
															this->m_health=0;
														}else{
															if(t_2==107){
																this->p_BecomeStone();
															}else{
																if(t_2==108){
																	this->p_BecomeHarderStone();
																}else{
																	if(t_2==119){
																		this->p_BecomeDirt();
																		this->m_health=0;
																	}else{
																		if(t_2==101){
																			this->p_BecomeDirt();
																			int t_3=t_existingTileType;
																			if(t_3==107){
																				this->p_BecomeStone();
																			}else{
																				if(t_3==108){
																					this->p_BecomeHarderStone();
																				}
																			}
																		}else{
																			if(this->p_IsNecrodancerPlatform()){
																				gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"level/necrodancer_stage.png",27),24,61,6,c_Image::m_DefaultFlags));
																				m_image->p_SetFrame(this->m_type-112);
																				this->m_health=4;
																			}else{
																				this->p_BecomeDirt();
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			if(!t_pending){
				this->m_collides=true;
			}
		}
	}
	if(this->m_image!=0){
		this->m_image->p_SetAlphaValue(FLOAT(0.0));
	}
	if(this->m_image2!=0){
		this->m_image2->p_SetAlphaValue(FLOAT(0.0));
	}
	if(this->p_IsWire()){
		this->p_LoadWireImages(String(L"level/wire.png",14),0);
	}else{
		int t_4=this->m_type;
		if(t_4==23){
			this->p_LoadWireImages(String(L"level/wire_phase1_conductor.png",31),1);
		}else{
			if(t_4==24){
				this->p_LoadWireImages(String(L"level/wire_phase2_conductor.png",31),2);
			}
		}
	}
	if(this->p_IsDoor()){
		this->m_image->p_SetZ(FLOAT(-1001.0));
		this->m_image2->p_SetZOff(FLOAT(8.0));
	}else{
		if(this->p_IsWall2()){
			this->m_image->p_SetZOff(FLOAT(8.0));
		}
	}
	gc_assign(this->m_xImage,(new c_Sprite)->m_new(String(L"level/floor_x.png",17),0,0,1,c_Image::m_DefaultFlags));
	this->m_xImage->p_SetZ(FLOAT(-901.0));
	c_IntMap7* t_tiles=c_Level::m_tiles;
	if(t_pending){
		t_tiles=c_Level::m_pendingTiles;
		m_pendingTilesList->p_AddLast12(this);
	}
	if(!t_tiles->p_Contains(this->m_x)){
		t_tiles->p_Set14(this->m_x,(new c_IntMap6)->m_new());
	}
	t_tiles->p_Get2(this->m_x)->p_Set13(this->m_y,this);
	return this;
}
c_Tile* c_Tile::m_new2(){
	c_RenderableObject::m_new();
	return this;
}
void c_Tile::p_AddTorch(){
	this->m_lightSourceMin=Float(this->m_TORCH_LIGHT_MIN);
	this->m_lightSourceMax=Float(this->m_TORCH_LIGHT_MAX);
	this->m_torchDir=3;
	this->m_lightSource=true;
	this->m_lightSourceBrightness=FLOAT(1.0);
	c_RenderableObject::m_lightSourceList->p_AddLast2(this);
	int t_tileset=this->p_GetTileset();
	if(t_tileset==1){
		gc_assign(this->m_torchImage,(new c_Sprite)->m_new(String(L"entities/mushroom_light.png",27),24,24,4,c_Image::m_DefaultFlags));
		this->m_torchOffX=c_Util::m_RndIntRange(-2,2,false,-1);
		this->m_torchOffY=c_Util::m_RndIntRange(-2,2,false,-1)-7;
		if(c_Util::m_RndBool(false)){
			this->m_torchImage->p_SetFrame(1);
		}
	}else{
		if(t_tileset==6 || c_Level::m_isConductorLevel){
			gc_assign(m_torchImage,(new c_Sprite)->m_new(String(L"level/light_bulb.png",20),15,24,1,c_Image::m_DefaultFlags));
			this->m_torchOffX=4;
			this->m_torchOffY=-8;
			this->m_animateTorch=false;
		}else{
			gc_assign(this->m_torchImage,(new c_Sprite)->m_new(String(L"level/wall_torch.png",20),0,0,4,c_Image::m_DefaultFlags));
			this->m_torchOffX=5;
			this->m_torchOffY=-12;
			this->m_animateTorch=true;
		}
	}
	if(c_Util::m_RndBool(false)){
		this->m_torchImage->p_FlipX(true,true);
	}
	this->m_torchImage->p_SetAlphaValue(FLOAT(0.0));
	this->m_torchImage->p_SetZOff(FLOAT(24.0));
}
void c_Tile::p_AddTextLabel(String t_filename,int t_tmpXOff,int t_tmpYOff,Float t_displayD,bool t_flash,bool t_textString){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Tile.AddTextLabel(String, Int, Int, Float, Bool, Bool)",54));
}
void c_Tile::p_SetDoorTrigger(int t_triggerVal){
	this->m_triggerDoor=t_triggerVal;
}
void c_Tile::p_SetTrigger(int t_triggerVal){
	this->m_trigger=t_triggerVal;
}
void c_Tile::p_SetDigTrigger(int t_triggerVal){
	this->m_triggerDig=t_triggerVal;
}
Float c_Tile::p_GetCurrentAlpha(){
	return this->m_image->p_GetAlphaValue();
}
void c_Tile::p_BecomeCracked(){
	Float t_alpha=this->p_GetCurrentAlpha();
	int t_5=this->m_type;
	if(t_5==100 || t_5==101 || t_5==119){
		int t_6=this->p_GetTileset();
		if(t_6==0){
			gc_assign(this->m_image,(new c_Sprite)->m_new2(String(L"level/zone1_wall_dirt_cracked.png",33),1,c_Image::m_DefaultFlags));
		}else{
			if(t_6==1){
				gc_assign(this->m_image,(new c_Sprite)->m_new2(String(L"level/zone2_wall_dirt_crack.png",31),1,c_Image::m_DefaultFlags));
			}else{
				if(t_6==2){
					gc_assign(this->m_image,(new c_Sprite)->m_new2(String(L"level/zone3_wall_dirt_hot_crack.png",35),1,c_Image::m_DefaultFlags));
				}else{
					if(t_6==3){
						gc_assign(this->m_image,(new c_Sprite)->m_new2(String(L"level/zone3_wall_dirt_cold_crack.png",36),1,c_Image::m_DefaultFlags));
					}else{
						if(t_6==4){
							gc_assign(this->m_image,(new c_Sprite)->m_new2(String(L"level/zone4_wall_dirt_crack.png",31),1,c_Image::m_DefaultFlags));
						}else{
							if(t_6==6){
								gc_assign(this->m_image,(new c_Sprite)->m_new2(String(L"level/zone5_wall_dirt_crack.png",31),1,c_Image::m_DefaultFlags));
							}
						}
					}
				}
			}
		}
	}else{
		if(t_5==104){
			gc_assign(this->m_image,(new c_Sprite)->m_new2(String(L"level/wall_shop_crypt_cracked.png",33),1,c_Image::m_DefaultFlags));
		}else{
			if(t_5==107){
				int t_7=this->p_GetTileset();
				if(t_7==0){
					gc_assign(this->m_image,(new c_Sprite)->m_new2(String(L"level/zone1_wall_stone_cracked.png",34),1,c_Image::m_DefaultFlags));
				}else{
					if(t_7==1){
						gc_assign(this->m_image,(new c_Sprite)->m_new2(String(L"level/zone2_wall_stone_crack.png",32),1,c_Image::m_DefaultFlags));
					}else{
						if(t_7==2){
							gc_assign(this->m_image,(new c_Sprite)->m_new2(String(L"level/zone3_wall_stone_hot_cracked.png",38),1,c_Image::m_DefaultFlags));
						}else{
							if(t_7==3){
								gc_assign(this->m_image,(new c_Sprite)->m_new2(String(L"level/zone3_wall_stone_cold_cracked.png",39),1,c_Image::m_DefaultFlags));
							}else{
								if(t_7==4){
									gc_assign(this->m_image,(new c_Sprite)->m_new2(String(L"level/zone4_wall_rock_A_crack.png",33),1,c_Image::m_DefaultFlags));
								}else{
									if(t_7==6){
										gc_assign(this->m_image,(new c_Sprite)->m_new2(String(L"level/zone5_wall_stone_crack.png",32),1,c_Image::m_DefaultFlags));
									}
								}
							}
						}
					}
				}
			}else{
				if(t_5==108){
					int t_8=this->p_GetTileset();
					if(t_8==4){
						gc_assign(this->m_image,(new c_Sprite)->m_new2(String(L"level/zone4_wall_catacomb_A_crack.png",37),1,c_Image::m_DefaultFlags));
					}else{
						if(t_8==6){
							gc_assign(this->m_image,(new c_Sprite)->m_new2(String(L"level/zone5_wall_catacomb_crack.png",35),1,c_Image::m_DefaultFlags));
						}else{
							gc_assign(this->m_image,(new c_Sprite)->m_new2(String(L"level/zone1_catacomb_cracked.png",32),1,c_Image::m_DefaultFlags));
						}
					}
				}
			}
		}
	}
	this->m_image->p_SetAlphaValue(t_alpha);
	if(this->p_IsWall2()){
		this->m_image->p_SetZOff(FLOAT(8.0));
	}
	this->m_isCracked=true;
}
bool c_Tile::p_IsExit(){
	int t_16=this->m_type;
	if(t_16==6 || t_16==2 || t_16==9 || t_16==15 || t_16==16){
		return true;
	}
	return false;
}
void c_Tile::p_AddWireConnection(int t_dir){
	if(0<=t_dir && t_dir<=3){
		this->m_wireMask|=1<<t_dir;
	}
}
void c_Tile::m_GenerateWireConnections(){
	c_NodeEnumerator* t_=c_Level::m_tiles->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Node25* t_tilesOnXNode=t_->p_NextObject();
		c_NodeEnumerator2* t_2=t_tilesOnXNode->p_Value()->p_ObjectEnumerator();
		while(t_2->p_HasNext()){
			c_Node26* t_tileNode=t_2->p_NextObject();
			c_Tile* t_tile=t_tileNode->p_Value();
			if(t_tile->p_IsWire()){
				t_tile->m_wireMask=0;
				for(int t_i=0;t_i<=4;t_i=t_i+1){
					c_Point* t_adjacentLocation=t_tile->p_GetLocation()->p_Add5(c_Util::m_GetPointFromDir(t_i));
					c_Tile* t_adjacentTile=c_Level::m_GetTileAt(t_adjacentLocation->m_x,t_adjacentLocation->m_y);
					if((t_adjacentTile)!=0){
						int t_adjacentTileType=t_adjacentTile->p_GetType();
						if(t_adjacentTileType==20 || t_adjacentTileType==118 || t_adjacentTile->p_IsExit()){
							t_tile->p_AddWireConnection(t_i);
						}
					}
				}
			}
		}
	}
}
void c_Tile::p_AddFloorOverlayImage(String t_imageName){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Tile.AddFloorOverlayImage(String)",33));
}
void c_Tile::p_BecomeDarkShopWall(String t_spritePath){
	this->m_hasResource=0;
	this->m_health=4;
	gc_assign(this->m_image,(new c_Sprite)->m_new2(t_spritePath,1,c_Image::m_DefaultFlags));
	this->m_image->p_SetAlphaValue(FLOAT(0.0));
	if(this->p_IsWall2()){
		this->m_image->p_SetZOff(FLOAT(8.0));
	}
}
void c_Tile::p_DarkenShopWall(){
	int t_14=this->p_GetType();
	if(t_14==104){
		this->p_BecomeDarkShopWall(String(L"level/wall_shop_crypt_dark.png",30));
	}else{
		if(t_14==110){
			this->p_BecomeDarkShopWall(String(L"level/wall_shop_crypt_dark_cracked.png",38));
		}
	}
}
c_Sprite* c_Tile::p_LoadDiamond(){
	this->m_hasResource=1;
	int t_24=this->p_GetTileset();
	if(t_24==1){
		int t_index=c_Util::m_RndIntRangeFromZero(3,false);
		return (new c_Sprite)->m_new2(String(L"level/wall_dirt_zone2_diamond",29)+String(t_index+1)+String(L".png",4),3,c_Image::m_DefaultFlags);
	}else{
		if(t_24==2){
			int t_index2=c_Util::m_RndIntRangeFromZero(3,false);
			return (new c_Sprite)->m_new2(String(L"level/wall_dirt_zone3HOT_diamond",32)+String(t_index2+1)+String(L".png",4),3,c_Image::m_DefaultFlags);
		}else{
			if(t_24==3){
				int t_index3=c_Util::m_RndIntRangeFromZero(3,false);
				return (new c_Sprite)->m_new2(String(L"level/wall_dirt_zone3cold_diamond",33)+String(t_index3+1)+String(L".png",4),3,c_Image::m_DefaultFlags);
			}else{
				if(t_24==4){
					int t_index4=c_Util::m_RndIntRangeFromZero(3,false);
					return (new c_Sprite)->m_new2(String(L"level/wall_dirt_zone4_diamond",29)+String(t_index4+1)+String(L".png",4),3,c_Image::m_DefaultFlags);
				}else{
					if(t_24==6){
						int t_index5=c_Util::m_RndIntRangeFromZero(3,false);
						return (new c_Sprite)->m_new2(String(L"level/wall_dirt_zone5_diamond",29)+String(t_index5+1)+String(L".png",4),3,c_Image::m_DefaultFlags);
					}
				}
			}
		}
	}
	int t_index6=c_Util::m_RndIntRangeFromZero(3,false);
	return (new c_Sprite)->m_new2(String(L"level/wall_dirt_crypt_diamond",29)+String(t_index6+1)+String(L".png",4),3,c_Image::m_DefaultFlags);
}
void c_Tile::p_BecomeDiamond(){
	gc_assign(this->m_image,this->p_LoadDiamond());
	this->m_image->p_SetAlphaValue(FLOAT(0.0));
	if(c_Level::m_isHardcoreMode){
		gc_assign(this->m_image2,(new c_Sprite)->m_new(String(L"items/resource_hoard_gold.png",29),24,24,2,c_Image::m_DefaultFlags));
	}else{
		int t_9=bb_controller_game_currentZone;
		if(t_9==1){
			gc_assign(this->m_image2,(new c_Sprite)->m_new(String(L"items/resource_diamond.png",26),24,24,2,c_Image::m_DefaultFlags));
		}else{
			if(t_9==2){
				gc_assign(this->m_image2,(new c_Sprite)->m_new(String(L"items/resource_diamond2.png",27),24,24,2,c_Image::m_DefaultFlags));
			}else{
				if(t_9==3){
					gc_assign(this->m_image2,(new c_Sprite)->m_new(String(L"items/resource_diamond3.png",27),24,24,2,c_Image::m_DefaultFlags));
				}else{
					gc_assign(this->m_image2,(new c_Sprite)->m_new(String(L"items/resource_diamond4.png",27),24,24,2,c_Image::m_DefaultFlags));
				}
			}
		}
	}
	this->m_image2->p_SetZOff(FLOAT(24.0));
	this->m_health=1;
	this->m_isStone=false;
	if(this->p_IsWall2()){
		this->m_image->p_SetZOff(FLOAT(8.0));
	}
}
void c_Tile::m_CleanUpPendingTiles(){
	while(m_pendingTilesList->p_Count()>0){
		m_pendingTilesList->p_RemoveFirst()->p_Die();
	}
}
void c_Tile::p_AddTorch2(){
	this->m_TORCH_LIGHT_MAX=int(Float(this->m_TORCH_LIGHT_MAX)*FLOAT(1.6));
	this->p_AddTorch();
}
bool c_Tile::p_IsNormalFloor(){
	int t_18=this->m_type;
	if(t_18==0 || t_18==1 || t_18==14 || t_18==19 || t_18==3){
		return true;
	}else{
		if(t_18==111){
			return this->p_IsMetalDoorOpen();
		}
	}
	return false;
}
int c_Tile::m_anyPlayerHaveRingOfShadowsCachedFrame;
int c_Tile::m_anyPlayerHaveCompassCachedFrame;
int c_Tile::m_anyPlayerHaveZoneMapCachedFrame;
int c_Tile::m_anyPlayerHaveMonocleCachedFrame;
int c_Tile::m_anyPlayerHaveRingOfLuckCachedFrame;
int c_Tile::m_anyPlayerHaveSunglassesCachedFrame;
bool c_Tile::m_IsNearNightmare(int t_xVal,int t_yVal){
	if(c_Nightmare::m_nightmare==0){
		return false;
	}
	return c_Nightmare::m_nightmare->m_NIGHTMARE_DARKNESS_RADIUS>c_Util::m_GetDist(t_xVal,t_yVal,c_Nightmare::m_nightmare->m_x,c_Nightmare::m_nightmare->m_y);
}
bool c_Tile::p_IsNearNightmare(){
	return m_IsNearNightmare(this->m_x,this->m_y);
}
bool c_Tile::m_anyPlayerHaveMonocleCached;
bool c_Tile::m_AnyPlayerHaveMonocle(){
	if(m_anyPlayerHaveMonocleCachedFrame!=bb_necrodancergame_globalFrameCounter){
		m_anyPlayerHaveMonocleCachedFrame=bb_necrodancergame_globalFrameCounter;
		m_anyPlayerHaveMonocleCached=c_Player::m_DoesAnyPlayerHaveItemOfType(String(L"head_monocle",12),false);
	}
	return m_anyPlayerHaveMonocleCached;
}
bool c_Tile::m_anyPlayerHaveRingOfShadowsCached;
bool c_Tile::m_CheckRingOfShadows(){
	if(m_anyPlayerHaveRingOfShadowsCachedFrame!=bb_necrodancergame_globalFrameCounter){
		m_anyPlayerHaveRingOfShadowsCachedFrame=bb_necrodancergame_globalFrameCounter;
		m_anyPlayerHaveRingOfShadowsCached=c_Player::m_DoesAnyPlayerHaveItemOfType(String(L"ring_shadows",12),false);
	}
	return m_anyPlayerHaveRingOfShadowsCached;
}
bool c_Tile::p_IsInAnyPlayerTrueLineOfSight(){
	c_Level::m_RefreshLineOfSightTiles();
	return this->m_cachedTrueLOS;
}
bool c_Tile::p_IsInAnyPlayerLineOfSight(){
	if(this->m_hasResource==1 && m_AnyPlayerHaveMonocle() || this->m_isCracked && c_Level::m_secretAtX==this->m_x && c_Level::m_secretAtY==this->m_y){
		return true;
	}
	bool t_hasRingOfShadows=m_CheckRingOfShadows();
	for(int t_i=0;t_i<bb_controller_game_numPlayers;t_i=t_i+1){
		c_Player* t_player=bb_controller_game_players[t_i];
		if(!t_player->p_Perished()){
			Float t_minVisibilitySq=FLOAT(6.25);
			if(!t_hasRingOfShadows){
				Float t_minVisibility=t_player->p_GetMinVisibility();
				t_minVisibilitySq=t_minVisibility*t_minVisibility;
			}
			if(c_Util::m_GetDistSqFromObject(this->m_x,this->m_y,(t_player))<=t_minVisibilitySq){
				this->m_cachedLOS=true;
				this->m_cachedLOSFrame=bb_necrodancergame_globalFrameCounter;
				return true;
			}
		}
	}
	if(!t_hasRingOfShadows){
		bool t_isInAnyPlayerTrueLineOfSight=this->p_IsInAnyPlayerTrueLineOfSight();
		this->m_cachedLOS=t_isInAnyPlayerTrueLineOfSight;
		this->m_cachedLOSFrame=bb_necrodancergame_globalFrameCounter;
		return t_isInAnyPlayerTrueLineOfSight;
	}
	return false;
}
void c_Tile::m_MoveAll(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Tile.MoveAll()",14));
}
bool c_Tile::p_IsVisible(){
	if(bb_controller_game_DEBUG_ALL_TILES_VISIBLE){
		return true;
	}
	if(c_Level::m_isLevelEditor){
		return true;
	}
	if(this->p_IsNecrodancerPlatform()){
		return true;
	}
	if(this->m_hasResource==1 && m_AnyPlayerHaveMonocle()){
		return true;
	}
	if(this->m_isCracked && m_AnyPlayerHaveMonocle() && c_Level::m_secretAtX==this->m_x && c_Level::m_secretAtY==this->m_y){
		return true;
	}
	return this->m_constAlpha>FLOAT(0.3);
}
bool c_Tile::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Tile.Hit(String, Int, Int, Entity, Bool, Int)",45));
	return false;
}
Float c_Tile::p_CalculateTileLightValue(bool t_forVision){
	if(this->m_lightValueFrameNum!=bb_necrodancergame_globalFrameCounter){
		this->m_lightValueFrameNum=bb_necrodancergame_globalFrameCounter;
		this->m_constLightValueCached=c_Level::m_GetMapTileLightValue(this->m_x,this->m_y,true);
		this->m_lightValueCached=c_Level::m_GetMapTileLightValue(this->m_x,this->m_y,false);
	}
	if(t_forVision){
		return this->m_constLightValueCached;
	}
	return this->m_lightValueCached;
}
bool c_Tile::m_anyPlayerHaveZoneMapCached;
bool c_Tile::m_AnyPlayerHaveZoneMap(){
	if(m_anyPlayerHaveZoneMapCachedFrame!=bb_necrodancergame_globalFrameCounter){
		m_anyPlayerHaveZoneMapCachedFrame=bb_necrodancergame_globalFrameCounter;
		m_anyPlayerHaveZoneMapCached=c_Player::m_DoesAnyPlayerHaveItemOfType(String(L"misc_map",8),false);
	}
	return m_anyPlayerHaveZoneMapCached;
}
bool c_Tile::m_anyPlayerHaveCompassCached;
bool c_Tile::m_AnyPlayerHaveCompass(){
	if(m_anyPlayerHaveCompassCachedFrame!=bb_necrodancergame_globalFrameCounter){
		m_anyPlayerHaveCompassCachedFrame=bb_necrodancergame_globalFrameCounter;
		m_anyPlayerHaveCompassCached=c_Player::m_DoesAnyPlayerHaveItemOfType(String(L"misc_compass",12),false);
	}
	return m_anyPlayerHaveCompassCached;
}
bool c_Tile::p_HasTileBeenSeen(){
	if(m_AnyPlayerHaveZoneMap()){
		return true;
	}
	if(c_Player::m_AnyPlayerTemporaryMapSight()){
		return true;
	}
	if(this->p_IsWall2() && c_Entity::m_AnyPlayerHaveWallsTorch() && this->m_type!=102){
		return true;
	}
	if(this->m_type==2 && m_AnyPlayerHaveCompass()){
		return true;
	}
	return this->m_hasBeenSeen;
}
Float c_Tile::p_CalculateTileAlpha(){
	if(bb_controller_game_DEBUG_ALL_TILES_VISIBLE){
		return FLOAT(1.0);
	}
	if(c_Level::m_isLevelEditor){
		return FLOAT(1.0);
	}
	if(this->p_IsNecrodancerPlatform()){
		return FLOAT(1.0);
	}
	if(this->m_hasResource==1 && m_AnyPlayerHaveMonocle()){
		return FLOAT(1.0);
	}
	if(this->m_isCracked && m_AnyPlayerHaveMonocle() && c_Level::m_secretAtX==this->m_x && c_Level::m_secretAtY==this->m_y){
		return FLOAT(1.0);
	}
	Float t_alpha=FLOAT(0.36);
	if(this->p_IsNearNightmare()){
		t_alpha=FLOAT(0.1);
	}
	if(!this->p_IsInAnyPlayerLineOfSight()){
		if(m_CheckRingOfShadows() || !this->p_HasTileBeenSeen()){
			return FLOAT(0.0);
		}
		return t_alpha;
	}
	Float t_lightValue=this->p_CalculateTileLightValue(false);
	this->m_constAlpha=this->p_CalculateTileLightValue(true);
	t_lightValue=bb_math_Min2(FLOAT(1.0),t_lightValue);
	if(t_lightValue>=FLOAT(0.36)){
		this->m_hasBeenSeen=true;
		c_Minimap::m_AddDirty2(this->m_x,this->m_y);
	}
	if(t_alpha>t_lightValue && this->p_HasTileBeenSeen()){
		return t_alpha;
	}
	return t_lightValue;
}
int c_Tile::p_SelectWireFrame(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Tile.SelectWireFrame()",22));
	return 0;
}
bool c_Tile::p_SelectWireFlip(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Tile.SelectWireFlip()",21));
	return false;
}
void c_Tile::p_Update(){
	Float t_lightValue=FLOAT(.0);
	int t_28=this->m_type;
	if(t_28==9){
		if(c_Enemy::m_GetNumStairLockingMinibosses()==0 || c_Level::m_pacifismModeOn){
			if(c_Sarcophagus::m_sarcophagi->p_Count()>0){
				if(!c_Util::m_IsCharacterActive(2) && !c_Util::m_IsCharacterActive(7)){
					this->m_flyawayText=String(L"|180|DESTROY THE SARCOPHAGUS!|",30);
				}else{
					c_Level::m_RemoveExit(this->m_x,this->m_y);
					c_Level::m_AddExit(this->m_x,this->m_y,-3,bb_controller_game_currentZone);
					gc_assign(this->m_image,(new c_Sprite)->m_new2(String(L"level/stairs.png",16),1,c_Image::m_DefaultFlags));
					this->m_image->p_SetZ(FLOAT(-1001.0));
					this->m_image->p_SetAlphaValue(FLOAT(0.0));
					c_Audio::m_PlayGameSoundAt(String(L"mini",4),this->m_x,this->m_y,false,-1,false);
					c_Camera::m_overlayWhiteDuration=5;
					c_Camera::m_Shake(1,this->m_x,this->m_y);
					c_Player* t_player1=bb_controller_game_players[bb_controller_game_player1];
					c_Flyaway* t_exitStairsUnlockedFlyaway=(new c_Flyaway)->m_new(String(L"|234|EXIT STAIRS UNLOCKED!|",27),t_player1->m_x,t_player1->m_y,0,-6,true,FLOAT(0.0),FLOAT(0.2),true,120);
					t_exitStairsUnlockedFlyaway->p_CenterX();
				}
			}
		}
	}else{
		if(t_28==13){
			if(this->m_nextEruptionBeat<=c_Audio::m_GetClosestBeatNum(true)){
				t_lightValue=FLOAT(24.0)*(Float(this->m_x)+FLOAT(0.5));
				Float t_particleSystemY=FLOAT(24.0)*(Float(this->m_y)+FLOAT(0.75));
				(new c_ParticleSystem)->m_new(int(t_lightValue),int(t_particleSystemY),c_ParticleSystemData::m_GEYSER,-1,String());
				c_RenderableObject::m_HitTile(String(L"geyser",6),this->m_x,this->m_y,2,-1,0,false,false,false,false,false);
				this->m_nextEruptionBeat=c_Audio::m_GetClosestBeatNum(true)+4;
			}
		}else{
			if(t_28==111){
				if(this->p_IsMetalDoorOpen() && this->m_metalDoorOpenedBeat+2<bb_controller_game_lastEnemyMoveBeat && !c_Util::m_IsGlobalCollisionAt2(this->m_x,this->m_y,false,false,false,false) && !c_Util::m_IsAnyPlayerAt(this->m_x,this->m_y) && !c_Familiar::m_IsAnyAt(this->m_x,this->m_y)){
					this->m_metalDoorOpenedBeat=-1;
					this->m_collides=true;
					m_totalTilesCreatedOrDestroyed+=1;
					c_Audio::m_PlayGameSoundAt(String(L"metalDoorClose",14),this->m_x,this->m_y,false,-1,false);
				}
			}
		}
	}
	if(c_Shrine::m_noReturnShrineActive || this->m_type==12){
		if(c_Shrine::m_noReturnShrinePlayer!=0 && c_Shrine::m_noReturnShrinePlayer->m_x==this->m_x && c_Shrine::m_noReturnShrinePlayer->m_y==this->m_y){
			if(this->m_playerWasOnTileAtBeat==c_Audio::m_GetClosestBeatNum(true)-1 && !this->m_playerWasOnTileLastFrame && ((this->m_playerWasOnTileLastFrame)?1:0)>0 && c_Shrine::m_noReturnShrineActive){
				c_Shrine::m_noReturnShrinePlayer->p_Hit(String(L"SHRINE OF NO RETURN",19),1,-1,0,false,0);
				c_Shrine::m_noReturnShrineActive=false;
			}
			this->m_playerWasOnTileAtBeat=c_Audio::m_GetClosestBeatNum(true);
			this->m_playerWasOnTileLastFrame=true;
		}else{
			this->m_playerWasOnTileLastFrame=false;
		}
	}
	if(c_Level::m_isNoReturnMode){
		c_List39* t_playersAt=c_Util::m_GetPlayersAt2(this->m_x,this->m_y);
		c_Enumerator34* t_=t_playersAt->p_ObjectEnumerator();
		while(t_->p_HasNext()){
			c_Player* t_player=t_->p_NextObject();
			if(this->m_playerWasOnTileAtBeat==c_Audio::m_GetClosestBeatNum(true)-1 && !this->m_playerWasOnTileLastFrame && ((this->m_playerWasOnTileLastFrame)?1:0)>0 && c_Shrine::m_noReturnShrineActive){
				c_Shrine::m_noReturnShrinePlayer->p_Hit(String(L"NO RETURN MODE",14),1,-1,0,false,0);
				c_Shrine::m_noReturnShrineActive=false;
			}
		}
		if(!t_playersAt->p_IsEmpty()){
			this->m_playerWasOnTileAtBeat=c_Audio::m_GetClosestBeatNum(true);
			this->m_playerWasOnTileLastFrame=true;
		}else{
			this->m_playerWasOnTileLastFrame=false;
		}
	}
	if(this->m_trigger!=0){
		c_List39* t_playersAt2=c_Util::m_GetPlayersAt2(this->m_x,this->m_y);
		c_Enumerator34* t_2=t_playersAt2->p_ObjectEnumerator();
		while(t_2->p_HasNext()){
			c_Player* t_player2=t_2->p_NextObject();
			if(t_player2!=this->m_triggerPlayer){
				c_Level::m_ActivateTrigger(this->m_trigger,(t_player2),0);
			}
			gc_assign(this->m_triggerPlayer,t_player2);
		}
		if(t_playersAt2->p_IsEmpty()){
			this->m_triggerPlayer=0;
		}
	}
	if(this->m_torchDir!=0){
		if(this->m_animateTorch){
			this->m_torchImage->p_SetFrame(c_Audio::m_GetBeatAnimFrame4());
		}
		if(c_Shrine::m_darknessShrineActive){
			this->m_lightSourceMin=FLOAT(0.01);
			this->m_lightSourceMax=FLOAT(0.01);
		}else{
			if(m_CheckRingOfShadows()){
				this->m_lightSourceMin=FLOAT(0.01);
				this->m_lightSourceMax=FLOAT(0.01);
			}else{
				if(this->m_torchFlickerNext>bb_necrodancergame_globalFrameCounter){
					return;
				}
				int t_flickerRandom=c_Util::m_RndIntRangeFromZero(11,false);
				this->m_torchFlickerNext=bb_necrodancergame_globalFrameCounter+t_flickerRandom+8;
				Float t_lightSourceBrightnessRandom=c_Util::m_RndFloatRange(FLOAT(0.0),FLOAT(0.4),false);
				this->m_lightSourceBrightness=t_lightSourceBrightnessRandom+FLOAT(0.8);
				this->m_lightSourceBrightness=bb_math_Min2(FLOAT(1.0),this->m_lightSourceBrightness);
				this->m_lightSourceMin=Float(this->m_TORCH_LIGHT_MIN);
				Float t_lightSourceMaxRandom=c_Util::m_RndFloatRange(FLOAT(0.0),FLOAT(2.5),false);
				this->m_lightSourceMax=t_lightSourceMaxRandom+Float(this->m_TORCH_LIGHT_MAX);
				t_lightValue=Float(this->m_TORCH_LIGHT_MAX)+FLOAT(1.25);
				this->m_constLightSourceMax=t_lightValue;
			}
		}
	}
	if(this->p_IsTileset(1) && this->m_image1HasBeenLoadedWithFloor){
		if(this->m_wasInLOS || !this->p_IsInAnyPlayerLineOfSight()){
			if(this->p_IsInAnyPlayerLineOfSight()){
				Float t_grassValueBase=FLOAT(1.0)*this->m_grassValue;
				this->p_CalculateTileLightValue(false);
				t_lightValue=FLOAT(1.0001)*t_grassValueBase;
				this->m_grassValue=t_lightValue;
			}
		}else{
			this->p_CalculateTileLightValue(false);
			this->m_grassValue=t_lightValue;
		}
	}
	this->m_wasInLOS=this->p_IsInAnyPlayerLineOfSight();
	this->p_CalculateTileAlpha();
	Float t_finalAlpha=t_lightValue;
	if(this->p_IsNearNightmare() && this->p_IsWall2() && this->m_hasBeenSeen){
		t_finalAlpha=FLOAT(0.36);
	}
	this->m_image->p_SetAlphaTweenFromCurrent(t_finalAlpha,10);
	if(this->m_image2!=0){
		this->m_image2->p_SetAlphaTweenFromCurrent(t_finalAlpha,10);
	}
	if(this->m_imageWire!=0){
		int t_wireFrame=this->p_SelectWireFrame();
		if(this->m_imageWireSilhouette!=0){
			this->m_imageWireSilhouette->p_SetFrame(t_wireFrame);
		}
		if(this->m_imageWireFlash!=0){
			this->m_wireFlashDelay-=1;
			if(this->m_wireFlashDelay<=0){
				this->m_wireFlashAnimDelay-=1;
				if(this->m_wireFlashAnimDelay<=0){
					this->m_wireFlashAnimDelay=3;
					int t_nextFrame=this->m_imageWireFlash->p_GetFrame()+1;
					if(t_nextFrame<this->m_imageWireFlash->p_GetNumFrames()){
						this->m_imageWireFlash->p_SetFrame(t_nextFrame);
					}else{
						this->m_imageWireFlash->p_SetFrame(0);
						this->m_wireFlashDelay=c_Util::m_RndIntRange(1800,3600,false,-1);
					}
				}
			}
		}
		int t_imageWireFrameFactor=1;
		int t_29=c_Audio::m_GetBeatAnimFrame4();
		if(t_29==1){
			t_imageWireFrameFactor=2;
		}else{
			if(t_29==2){
				t_imageWireFrameFactor=3;
			}else{
				if(t_29==3){
					t_imageWireFrameFactor=0;
				}
			}
		}
		int t_imageWireFrame=16*t_imageWireFrameFactor+t_wireFrame;
		int t_30=this->m_type;
		if(t_30==23){
			t_imageWireFrame=28+t_wireFrame;
			if(this->m_activatedConductorWire){
				t_imageWireFrame=7*t_imageWireFrameFactor+t_wireFrame;
			}
			bool t_wireFlip=this->p_SelectWireFlip();
			this->m_imageWire->p_FlipX(t_wireFlip,true);
		}else{
			if(t_30==24){
				t_imageWireFrame=3*t_imageWireFrameFactor+t_imageWireFrameFactor;
			}
		}
		this->m_imageWire->p_SetFrame(t_imageWireFrame);
		this->m_imageWire->p_SetAlphaTweenFromCurrent(t_finalAlpha,10);
	}
	if(this->m_torchDir!=0){
		this->m_torchImage->p_SetAlphaTweenFromCurrent(t_lightValue,10);
	}
}
void c_Tile::mark(){
	c_RenderableObject::mark();
	gc_mark_q(m_textLabel);
	gc_mark_q(m_textLabel2);
	gc_mark_q(m_image);
	gc_mark_q(m_image2);
	gc_mark_q(m_imageWireSilhouette);
	gc_mark_q(m_imageWire);
	gc_mark_q(m_imageWireFlash);
	gc_mark_q(m_xImage);
	gc_mark_q(m_torchImage);
	gc_mark_q(m_triggerPlayer);
}
c_Map13::c_Map13(){
	m_root=0;
}
c_Node26* c_Map13::p_FirstNode(){
	if(!((m_root)!=0)){
		return 0;
	}
	c_Node26* t_node=m_root;
	while((t_node->m_left)!=0){
		t_node=t_node->m_left;
	}
	return t_node;
}
c_NodeEnumerator2* c_Map13::p_ObjectEnumerator(){
	return (new c_NodeEnumerator2)->m_new(p_FirstNode());
}
c_Node26* c_Map13::p_FindNode(int t_key){
	c_Node26* t_node=m_root;
	while((t_node)!=0){
		int t_cmp=p_Compare(t_key,t_node->m_key);
		if(t_cmp>0){
			t_node=t_node->m_right;
		}else{
			if(t_cmp<0){
				t_node=t_node->m_left;
			}else{
				return t_node;
			}
		}
	}
	return t_node;
}
bool c_Map13::p_Contains(int t_key){
	return p_FindNode(t_key)!=0;
}
c_Tile* c_Map13::p_Get2(int t_key){
	c_Node26* t_node=p_FindNode(t_key);
	if((t_node)!=0){
		return t_node->m_value;
	}
	return 0;
}
c_Map13* c_Map13::m_new(){
	return this;
}
int c_Map13::p_RotateLeft12(c_Node26* t_node){
	c_Node26* t_child=t_node->m_right;
	gc_assign(t_node->m_right,t_child->m_left);
	if((t_child->m_left)!=0){
		gc_assign(t_child->m_left->m_parent,t_node);
	}
	gc_assign(t_child->m_parent,t_node->m_parent);
	if((t_node->m_parent)!=0){
		if(t_node==t_node->m_parent->m_left){
			gc_assign(t_node->m_parent->m_left,t_child);
		}else{
			gc_assign(t_node->m_parent->m_right,t_child);
		}
	}else{
		gc_assign(m_root,t_child);
	}
	gc_assign(t_child->m_left,t_node);
	gc_assign(t_node->m_parent,t_child);
	return 0;
}
int c_Map13::p_RotateRight12(c_Node26* t_node){
	c_Node26* t_child=t_node->m_left;
	gc_assign(t_node->m_left,t_child->m_right);
	if((t_child->m_right)!=0){
		gc_assign(t_child->m_right->m_parent,t_node);
	}
	gc_assign(t_child->m_parent,t_node->m_parent);
	if((t_node->m_parent)!=0){
		if(t_node==t_node->m_parent->m_right){
			gc_assign(t_node->m_parent->m_right,t_child);
		}else{
			gc_assign(t_node->m_parent->m_left,t_child);
		}
	}else{
		gc_assign(m_root,t_child);
	}
	gc_assign(t_child->m_right,t_node);
	gc_assign(t_node->m_parent,t_child);
	return 0;
}
int c_Map13::p_InsertFixup12(c_Node26* t_node){
	while(((t_node->m_parent)!=0) && t_node->m_parent->m_color==-1 && ((t_node->m_parent->m_parent)!=0)){
		if(t_node->m_parent==t_node->m_parent->m_parent->m_left){
			c_Node26* t_uncle=t_node->m_parent->m_parent->m_right;
			if(((t_uncle)!=0) && t_uncle->m_color==-1){
				t_node->m_parent->m_color=1;
				t_uncle->m_color=1;
				t_uncle->m_parent->m_color=-1;
				t_node=t_uncle->m_parent;
			}else{
				if(t_node==t_node->m_parent->m_right){
					t_node=t_node->m_parent;
					p_RotateLeft12(t_node);
				}
				t_node->m_parent->m_color=1;
				t_node->m_parent->m_parent->m_color=-1;
				p_RotateRight12(t_node->m_parent->m_parent);
			}
		}else{
			c_Node26* t_uncle2=t_node->m_parent->m_parent->m_left;
			if(((t_uncle2)!=0) && t_uncle2->m_color==-1){
				t_node->m_parent->m_color=1;
				t_uncle2->m_color=1;
				t_uncle2->m_parent->m_color=-1;
				t_node=t_uncle2->m_parent;
			}else{
				if(t_node==t_node->m_parent->m_left){
					t_node=t_node->m_parent;
					p_RotateRight12(t_node);
				}
				t_node->m_parent->m_color=1;
				t_node->m_parent->m_parent->m_color=-1;
				p_RotateLeft12(t_node->m_parent->m_parent);
			}
		}
	}
	m_root->m_color=1;
	return 0;
}
bool c_Map13::p_Set13(int t_key,c_Tile* t_value){
	c_Node26* t_node=m_root;
	c_Node26* t_parent=0;
	int t_cmp=0;
	while((t_node)!=0){
		t_parent=t_node;
		t_cmp=p_Compare(t_key,t_node->m_key);
		if(t_cmp>0){
			t_node=t_node->m_right;
		}else{
			if(t_cmp<0){
				t_node=t_node->m_left;
			}else{
				gc_assign(t_node->m_value,t_value);
				return false;
			}
		}
	}
	t_node=(new c_Node26)->m_new(t_key,t_value,-1,t_parent);
	if((t_parent)!=0){
		if(t_cmp>0){
			gc_assign(t_parent->m_right,t_node);
		}else{
			gc_assign(t_parent->m_left,t_node);
		}
		p_InsertFixup12(t_node);
	}else{
		gc_assign(m_root,t_node);
	}
	return true;
}
int c_Map13::p_Count(){
	if((m_root)!=0){
		return m_root->p_Count2(0);
	}
	return 0;
}
void c_Map13::mark(){
	Object::mark();
	gc_mark_q(m_root);
}
c_IntMap6::c_IntMap6(){
}
c_IntMap6* c_IntMap6::m_new(){
	c_Map13::m_new();
	return this;
}
int c_IntMap6::p_Compare(int t_lhs,int t_rhs){
	return t_lhs-t_rhs;
}
void c_IntMap6::mark(){
	c_Map13::mark();
}
c_Map14::c_Map14(){
	m_root=0;
}
c_Map14* c_Map14::m_new(){
	return this;
}
c_Node25* c_Map14::p_FirstNode(){
	if(!((m_root)!=0)){
		return 0;
	}
	c_Node25* t_node=m_root;
	while((t_node->m_left)!=0){
		t_node=t_node->m_left;
	}
	return t_node;
}
c_NodeEnumerator* c_Map14::p_ObjectEnumerator(){
	return (new c_NodeEnumerator)->m_new(p_FirstNode());
}
int c_Map14::p_Clear(){
	m_root=0;
	return 0;
}
c_Node25* c_Map14::p_FindNode(int t_key){
	c_Node25* t_node=m_root;
	while((t_node)!=0){
		int t_cmp=p_Compare(t_key,t_node->m_key);
		if(t_cmp>0){
			t_node=t_node->m_right;
		}else{
			if(t_cmp<0){
				t_node=t_node->m_left;
			}else{
				return t_node;
			}
		}
	}
	return t_node;
}
bool c_Map14::p_Contains(int t_key){
	return p_FindNode(t_key)!=0;
}
c_IntMap6* c_Map14::p_Get2(int t_key){
	c_Node25* t_node=p_FindNode(t_key);
	if((t_node)!=0){
		return t_node->m_value;
	}
	return 0;
}
int c_Map14::p_RotateLeft13(c_Node25* t_node){
	c_Node25* t_child=t_node->m_right;
	gc_assign(t_node->m_right,t_child->m_left);
	if((t_child->m_left)!=0){
		gc_assign(t_child->m_left->m_parent,t_node);
	}
	gc_assign(t_child->m_parent,t_node->m_parent);
	if((t_node->m_parent)!=0){
		if(t_node==t_node->m_parent->m_left){
			gc_assign(t_node->m_parent->m_left,t_child);
		}else{
			gc_assign(t_node->m_parent->m_right,t_child);
		}
	}else{
		gc_assign(m_root,t_child);
	}
	gc_assign(t_child->m_left,t_node);
	gc_assign(t_node->m_parent,t_child);
	return 0;
}
int c_Map14::p_RotateRight13(c_Node25* t_node){
	c_Node25* t_child=t_node->m_left;
	gc_assign(t_node->m_left,t_child->m_right);
	if((t_child->m_right)!=0){
		gc_assign(t_child->m_right->m_parent,t_node);
	}
	gc_assign(t_child->m_parent,t_node->m_parent);
	if((t_node->m_parent)!=0){
		if(t_node==t_node->m_parent->m_right){
			gc_assign(t_node->m_parent->m_right,t_child);
		}else{
			gc_assign(t_node->m_parent->m_left,t_child);
		}
	}else{
		gc_assign(m_root,t_child);
	}
	gc_assign(t_child->m_right,t_node);
	gc_assign(t_node->m_parent,t_child);
	return 0;
}
int c_Map14::p_InsertFixup13(c_Node25* t_node){
	while(((t_node->m_parent)!=0) && t_node->m_parent->m_color==-1 && ((t_node->m_parent->m_parent)!=0)){
		if(t_node->m_parent==t_node->m_parent->m_parent->m_left){
			c_Node25* t_uncle=t_node->m_parent->m_parent->m_right;
			if(((t_uncle)!=0) && t_uncle->m_color==-1){
				t_node->m_parent->m_color=1;
				t_uncle->m_color=1;
				t_uncle->m_parent->m_color=-1;
				t_node=t_uncle->m_parent;
			}else{
				if(t_node==t_node->m_parent->m_right){
					t_node=t_node->m_parent;
					p_RotateLeft13(t_node);
				}
				t_node->m_parent->m_color=1;
				t_node->m_parent->m_parent->m_color=-1;
				p_RotateRight13(t_node->m_parent->m_parent);
			}
		}else{
			c_Node25* t_uncle2=t_node->m_parent->m_parent->m_left;
			if(((t_uncle2)!=0) && t_uncle2->m_color==-1){
				t_node->m_parent->m_color=1;
				t_uncle2->m_color=1;
				t_uncle2->m_parent->m_color=-1;
				t_node=t_uncle2->m_parent;
			}else{
				if(t_node==t_node->m_parent->m_left){
					t_node=t_node->m_parent;
					p_RotateRight13(t_node);
				}
				t_node->m_parent->m_color=1;
				t_node->m_parent->m_parent->m_color=-1;
				p_RotateLeft13(t_node->m_parent->m_parent);
			}
		}
	}
	m_root->m_color=1;
	return 0;
}
bool c_Map14::p_Set14(int t_key,c_IntMap6* t_value){
	c_Node25* t_node=m_root;
	c_Node25* t_parent=0;
	int t_cmp=0;
	while((t_node)!=0){
		t_parent=t_node;
		t_cmp=p_Compare(t_key,t_node->m_key);
		if(t_cmp>0){
			t_node=t_node->m_right;
		}else{
			if(t_cmp<0){
				t_node=t_node->m_left;
			}else{
				gc_assign(t_node->m_value,t_value);
				return false;
			}
		}
	}
	t_node=(new c_Node25)->m_new(t_key,t_value,-1,t_parent);
	if((t_parent)!=0){
		if(t_cmp>0){
			gc_assign(t_parent->m_right,t_node);
		}else{
			gc_assign(t_parent->m_left,t_node);
		}
		p_InsertFixup13(t_node);
	}else{
		gc_assign(m_root,t_node);
	}
	return true;
}
int c_Map14::p_Count(){
	if((m_root)!=0){
		return m_root->p_Count2(0);
	}
	return 0;
}
void c_Map14::mark(){
	Object::mark();
	gc_mark_q(m_root);
}
c_IntMap7::c_IntMap7(){
}
c_IntMap7* c_IntMap7::m_new(){
	c_Map14::m_new();
	return this;
}
int c_IntMap7::p_Compare(int t_lhs,int t_rhs){
	return t_lhs-t_rhs;
}
void c_IntMap7::mark(){
	c_Map14::mark();
}
c_NodeEnumerator::c_NodeEnumerator(){
	m_node=0;
}
c_NodeEnumerator* c_NodeEnumerator::m_new(c_Node25* t_node){
	gc_assign(this->m_node,t_node);
	return this;
}
c_NodeEnumerator* c_NodeEnumerator::m_new2(){
	return this;
}
bool c_NodeEnumerator::p_HasNext(){
	return m_node!=0;
}
c_Node25* c_NodeEnumerator::p_NextObject(){
	c_Node25* t_t=m_node;
	gc_assign(m_node,m_node->p_NextNode());
	return t_t;
}
void c_NodeEnumerator::mark(){
	Object::mark();
	gc_mark_q(m_node);
}
c_Node25::c_Node25(){
	m_left=0;
	m_right=0;
	m_parent=0;
	m_value=0;
	m_key=0;
	m_color=0;
}
c_Node25* c_Node25::p_NextNode(){
	c_Node25* t_node=0;
	if((m_right)!=0){
		t_node=m_right;
		while((t_node->m_left)!=0){
			t_node=t_node->m_left;
		}
		return t_node;
	}
	t_node=this;
	c_Node25* t_parent=this->m_parent;
	while(((t_parent)!=0) && t_node==t_parent->m_right){
		t_node=t_parent;
		t_parent=t_parent->m_parent;
	}
	return t_parent;
}
c_IntMap6* c_Node25::p_Value(){
	return m_value;
}
c_Node25* c_Node25::m_new(int t_key,c_IntMap6* t_value,int t_color,c_Node25* t_parent){
	this->m_key=t_key;
	gc_assign(this->m_value,t_value);
	this->m_color=t_color;
	gc_assign(this->m_parent,t_parent);
	return this;
}
c_Node25* c_Node25::m_new2(){
	return this;
}
int c_Node25::p_Key(){
	return m_key;
}
int c_Node25::p_Count2(int t_n){
	if((m_left)!=0){
		t_n=m_left->p_Count2(t_n);
	}
	if((m_right)!=0){
		t_n=m_right->p_Count2(t_n);
	}
	return t_n+1;
}
void c_Node25::mark(){
	Object::mark();
	gc_mark_q(m_left);
	gc_mark_q(m_right);
	gc_mark_q(m_parent);
	gc_mark_q(m_value);
}
c_NodeEnumerator2::c_NodeEnumerator2(){
	m_node=0;
}
c_NodeEnumerator2* c_NodeEnumerator2::m_new(c_Node26* t_node){
	gc_assign(this->m_node,t_node);
	return this;
}
c_NodeEnumerator2* c_NodeEnumerator2::m_new2(){
	return this;
}
bool c_NodeEnumerator2::p_HasNext(){
	return m_node!=0;
}
c_Node26* c_NodeEnumerator2::p_NextObject(){
	c_Node26* t_t=m_node;
	gc_assign(m_node,m_node->p_NextNode());
	return t_t;
}
void c_NodeEnumerator2::mark(){
	Object::mark();
	gc_mark_q(m_node);
}
c_Node26::c_Node26(){
	m_left=0;
	m_right=0;
	m_parent=0;
	m_value=0;
	m_key=0;
	m_color=0;
}
c_Node26* c_Node26::p_NextNode(){
	c_Node26* t_node=0;
	if((m_right)!=0){
		t_node=m_right;
		while((t_node->m_left)!=0){
			t_node=t_node->m_left;
		}
		return t_node;
	}
	t_node=this;
	c_Node26* t_parent=this->m_parent;
	while(((t_parent)!=0) && t_node==t_parent->m_right){
		t_node=t_parent;
		t_parent=t_parent->m_parent;
	}
	return t_parent;
}
c_Tile* c_Node26::p_Value(){
	return m_value;
}
c_Node26* c_Node26::m_new(int t_key,c_Tile* t_value,int t_color,c_Node26* t_parent){
	this->m_key=t_key;
	gc_assign(this->m_value,t_value);
	this->m_color=t_color;
	gc_assign(this->m_parent,t_parent);
	return this;
}
c_Node26* c_Node26::m_new2(){
	return this;
}
int c_Node26::p_Key(){
	return m_key;
}
int c_Node26::p_Count2(int t_n){
	if((m_left)!=0){
		t_n=m_left->p_Count2(t_n);
	}
	if((m_right)!=0){
		t_n=m_right->p_Count2(t_n);
	}
	return t_n+1;
}
void c_Node26::mark(){
	Object::mark();
	gc_mark_q(m_left);
	gc_mark_q(m_right);
	gc_mark_q(m_parent);
	gc_mark_q(m_value);
}
c_List12::c_List12(){
	m__head=((new c_HeadNode12)->m_new());
}
c_List12* c_List12::m_new(){
	return this;
}
c_Node27* c_List12::p_AddLast12(c_Tile* t_data){
	return (new c_Node27)->m_new(m__head,m__head->m__pred,t_data);
}
c_List12* c_List12::m_new2(Array<c_Tile* > t_data){
	Array<c_Tile* > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		c_Tile* t_t=t_[t_2];
		t_2=t_2+1;
		p_AddLast12(t_t);
	}
	return this;
}
bool c_List12::p_Equals10(c_Tile* t_lhs,c_Tile* t_rhs){
	return t_lhs==t_rhs;
}
int c_List12::p_RemoveEach6(c_Tile* t_value){
	c_Node27* t_node=m__head->m__succ;
	while(t_node!=m__head){
		c_Node27* t_succ=t_node->m__succ;
		if(p_Equals10(t_node->m__data,t_value)){
			t_node->p_Remove();
		}
		t_node=t_succ;
	}
	return 0;
}
int c_List12::p_Count(){
	int t_n=0;
	c_Node27* t_node=m__head->m__succ;
	while(t_node!=m__head){
		t_node=t_node->m__succ;
		t_n+=1;
	}
	return t_n;
}
c_Tile* c_List12::p_RemoveFirst(){
	c_Tile* t_data=m__head->m__succ->m__data;
	m__head->m__succ->p_Remove();
	return t_data;
}
c_Node27* c_List12::p_Find5(c_Tile* t_value,c_Node27* t_start){
	while(t_start!=m__head){
		if(p_Equals10(t_value,t_start->m__data)){
			return t_start;
		}
		t_start=t_start->m__succ;
	}
	return 0;
}
c_Node27* c_List12::p_Find6(c_Tile* t_value){
	return p_Find5(t_value,m__head->m__succ);
}
void c_List12::p_RemoveFirst4(c_Tile* t_value){
	c_Node27* t_node=p_Find6(t_value);
	if((t_node)!=0){
		t_node->p_Remove();
	}
}
void c_List12::mark(){
	Object::mark();
	gc_mark_q(m__head);
}
c_Node27::c_Node27(){
	m__succ=0;
	m__pred=0;
	m__data=0;
}
c_Node27* c_Node27::m_new(c_Node27* t_succ,c_Node27* t_pred,c_Tile* t_data){
	gc_assign(m__succ,t_succ);
	gc_assign(m__pred,t_pred);
	gc_assign(m__succ->m__pred,this);
	gc_assign(m__pred->m__succ,this);
	gc_assign(m__data,t_data);
	return this;
}
c_Node27* c_Node27::m_new2(){
	return this;
}
int c_Node27::p_Remove(){
	gc_assign(m__succ->m__pred,m__pred);
	gc_assign(m__pred->m__succ,m__succ);
	return 0;
}
void c_Node27::mark(){
	Object::mark();
	gc_mark_q(m__succ);
	gc_mark_q(m__pred);
	gc_mark_q(m__data);
}
c_HeadNode12::c_HeadNode12(){
}
c_HeadNode12* c_HeadNode12::m_new(){
	c_Node27::m_new2();
	gc_assign(m__succ,(this));
	gc_assign(m__pred,(this));
	return this;
}
void c_HeadNode12::mark(){
	c_Node27::mark();
}
c_MinibossTileData::c_MinibossTileData(){
	m_x=0;
	m_y=0;
	m_type=0;
	m_wireMask=0;
}
c_MinibossTileData* c_MinibossTileData::m_new(){
	return this;
}
void c_MinibossTileData::mark(){
	Object::mark();
}
c_List13::c_List13(){
	m__head=((new c_HeadNode13)->m_new());
}
c_List13* c_List13::m_new(){
	return this;
}
c_Node28* c_List13::p_AddLast13(c_MinibossTileData* t_data){
	return (new c_Node28)->m_new(m__head,m__head->m__pred,t_data);
}
c_List13* c_List13::m_new2(Array<c_MinibossTileData* > t_data){
	Array<c_MinibossTileData* > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		c_MinibossTileData* t_t=t_[t_2];
		t_2=t_2+1;
		p_AddLast13(t_t);
	}
	return this;
}
int c_List13::p_Clear(){
	gc_assign(m__head->m__succ,m__head);
	gc_assign(m__head->m__pred,m__head);
	return 0;
}
c_Enumerator9* c_List13::p_ObjectEnumerator(){
	return (new c_Enumerator9)->m_new(this);
}
void c_List13::mark(){
	Object::mark();
	gc_mark_q(m__head);
}
c_Node28::c_Node28(){
	m__succ=0;
	m__pred=0;
	m__data=0;
}
c_Node28* c_Node28::m_new(c_Node28* t_succ,c_Node28* t_pred,c_MinibossTileData* t_data){
	gc_assign(m__succ,t_succ);
	gc_assign(m__pred,t_pred);
	gc_assign(m__succ->m__pred,this);
	gc_assign(m__pred->m__succ,this);
	gc_assign(m__data,t_data);
	return this;
}
c_Node28* c_Node28::m_new2(){
	return this;
}
void c_Node28::mark(){
	Object::mark();
	gc_mark_q(m__succ);
	gc_mark_q(m__pred);
	gc_mark_q(m__data);
}
c_HeadNode13::c_HeadNode13(){
}
c_HeadNode13* c_HeadNode13::m_new(){
	c_Node28::m_new2();
	gc_assign(m__succ,(this));
	gc_assign(m__pred,(this));
	return this;
}
void c_HeadNode13::mark(){
	c_Node28::mark();
}
c_RoomData::c_RoomData(){
	m_x=0;
	m_y=0;
	m_w=0;
	m_h=0;
	m_type=0;
	m_hasExit=false;
}
c_RoomData* c_RoomData::m_new(int t_xVal,int t_yVal,int t_wVal,int t_hVal,int t_type,bool t_hasExit){
	this->m_x=t_xVal;
	this->m_y=t_yVal;
	this->m_w=t_wVal;
	this->m_h=t_hVal;
	this->m_type=t_type;
	this->m_hasExit=t_hasExit;
	return this;
}
c_RoomData* c_RoomData::m_new2(){
	return this;
}
c_Rect* c_RoomData::p_GetBounds(){
	return (new c_Rect)->m_new(this->m_x,this->m_y,this->m_w,this->m_h);
}
c_Point* c_RoomData::p_GetLocation(){
	return (new c_Point)->m_new(this->m_x,this->m_y);
}
c_Point* c_RoomData::p_GetSize(){
	return (new c_Point)->m_new(this->m_w,this->m_h);
}
String c_RoomData::p_ToString(){
	return this->p_GetBounds()->p_ToString();
}
void c_RoomData::mark(){
	Object::mark();
}
c_List14::c_List14(){
	m__head=((new c_HeadNode14)->m_new());
}
c_List14* c_List14::m_new(){
	return this;
}
c_Node29* c_List14::p_AddLast14(c_RoomData* t_data){
	return (new c_Node29)->m_new(m__head,m__head->m__pred,t_data);
}
c_List14* c_List14::m_new2(Array<c_RoomData* > t_data){
	Array<c_RoomData* > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		c_RoomData* t_t=t_[t_2];
		t_2=t_2+1;
		p_AddLast14(t_t);
	}
	return this;
}
int c_List14::p_Clear(){
	gc_assign(m__head->m__succ,m__head);
	gc_assign(m__head->m__pred,m__head);
	return 0;
}
c_RoomData* c_List14::p_Last2(){
	return m__head->m__pred->m__data;
}
c_Enumerator26* c_List14::p_ObjectEnumerator(){
	return (new c_Enumerator26)->m_new(this);
}
int c_List14::p_Count(){
	int t_n=0;
	c_Node29* t_node=m__head->m__succ;
	while(t_node!=m__head){
		t_node=t_node->m__succ;
		t_n+=1;
	}
	return t_n;
}
Array<c_RoomData* > c_List14::p_ToArray(){
	Array<c_RoomData* > t_arr=Array<c_RoomData* >(p_Count());
	int t_i=0;
	c_Enumerator26* t_=this->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_RoomData* t_t=t_->p_NextObject();
		gc_assign(t_arr[t_i],t_t);
		t_i+=1;
	}
	return t_arr;
}
c_RoomData* c_List14::p_RemoveFirst(){
	c_RoomData* t_data=m__head->m__succ->m__data;
	m__head->m__succ->p_Remove();
	return t_data;
}
bool c_List14::p_Equals11(c_RoomData* t_lhs,c_RoomData* t_rhs){
	return t_lhs==t_rhs;
}
c_Node29* c_List14::p_Find7(c_RoomData* t_value,c_Node29* t_start){
	while(t_start!=m__head){
		if(p_Equals11(t_value,t_start->m__data)){
			return t_start;
		}
		t_start=t_start->m__succ;
	}
	return 0;
}
c_Node29* c_List14::p_Find8(c_RoomData* t_value){
	return p_Find7(t_value,m__head->m__succ);
}
void c_List14::p_RemoveFirst5(c_RoomData* t_value){
	c_Node29* t_node=p_Find8(t_value);
	if((t_node)!=0){
		t_node->p_Remove();
	}
}
void c_List14::mark(){
	Object::mark();
	gc_mark_q(m__head);
}
c_Node29::c_Node29(){
	m__succ=0;
	m__pred=0;
	m__data=0;
}
c_Node29* c_Node29::m_new(c_Node29* t_succ,c_Node29* t_pred,c_RoomData* t_data){
	gc_assign(m__succ,t_succ);
	gc_assign(m__pred,t_pred);
	gc_assign(m__succ->m__pred,this);
	gc_assign(m__pred->m__succ,this);
	gc_assign(m__data,t_data);
	return this;
}
c_Node29* c_Node29::m_new2(){
	return this;
}
int c_Node29::p_Remove(){
	gc_assign(m__succ->m__pred,m__pred);
	gc_assign(m__pred->m__succ,m__succ);
	return 0;
}
void c_Node29::mark(){
	Object::mark();
	gc_mark_q(m__succ);
	gc_mark_q(m__pred);
	gc_mark_q(m__data);
}
c_HeadNode14::c_HeadNode14(){
}
c_HeadNode14* c_HeadNode14::m_new(){
	c_Node29::m_new2();
	gc_assign(m__succ,(this));
	gc_assign(m__pred,(this));
	return this;
}
void c_HeadNode14::mark(){
	c_Node29::mark();
}
c_Trap::c_Trap(){
	m_trapType=0;
	m_isRune=false;
	m_canBeReplacedByTempoTrap=true;
	m_triggeredOn=0;
	m_indestructible=false;
}
c_TrapList* c_Trap::m_trapList;
c_Trap* c_Trap::m_GetTrapAt(int t_xVal,int t_yVal){
	c_Enumerator7* t_=m_trapList->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Trap* t_trap=t_->p_NextObject();
		if(t_trap->m_x==t_xVal && t_trap->m_y==t_yVal){
			return t_trap;
		}
	}
	return 0;
}
c_Trap* c_Trap::m_new(int t_xVal,int t_yVal,int t_type){
	c_Entity::m_new();
	this->m_x=t_xVal;
	this->m_y=t_yVal;
	this->m_trapType=t_type;
	this->m_isTrap=true;
	m_trapList->p_AddLast15(this);
	String t_displayName=c_TrapType::m_ToDisplayName(this->m_trapType);
	bb_logger_Debug->p_WriteLine2(String(L"Placed ",7)+t_displayName+String(L" at ",4)+((new c_Point)->m_new(this->m_x,this->m_y))->p_ToString());
	return this;
}
c_Trap* c_Trap::m_new2(){
	c_Entity::m_new();
	return this;
}
int c_Trap::m_GetTrapTypeAt(int t_xVal,int t_yVal){
	c_Trap* t_trap=m_GetTrapAt(t_xVal,t_yVal);
	if(t_trap!=0){
		return t_trap->m_trapType;
	}
	return 0;
}
c_Trap* c_Trap::m_FindRandomTrap(){
	if(m_trapList->p_Count()<1){
		return 0;
	}
	int t_trapIndex=c_Util::m_RndIntRangeFromZero(m_trapList->p_Count()-1,true);
	Array<c_Trap* > t_trapArray=m_trapList->p_ToArray();
	return t_trapArray[t_trapIndex];
}
void c_Trap::p_Die(){
	if(!this->m_dead){
		m_trapList->p_RemoveEach7(this);
		c_Entity::p_Die();
	}
}
bool c_Trap::p_IsLive(){
	return this->m_triggeredOn==0;
}
bool c_Trap::m_IsLiveTrapAt(int t_xVal,int t_yVal){
	c_Trap* t_trap=m_GetTrapAt(t_xVal,t_yVal);
	if(t_trap!=0){
		return t_trap->p_IsLive();
	}
	return false;
}
void c_Trap::m_MoveAll(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Trap.MoveAll()",14));
}
bool c_Trap::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Trap.Hit(String, Int, Int, Entity, Bool, Int)",45));
	return false;
}
void c_Trap::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Trap.Update()",13));
}
void c_Trap::mark(){
	c_Entity::mark();
	gc_mark_q(m_triggeredOn);
}
c_List15::c_List15(){
	m__head=((new c_HeadNode15)->m_new());
}
c_List15* c_List15::m_new(){
	return this;
}
c_Node30* c_List15::p_AddLast15(c_Trap* t_data){
	return (new c_Node30)->m_new(m__head,m__head->m__pred,t_data);
}
c_List15* c_List15::m_new2(Array<c_Trap* > t_data){
	Array<c_Trap* > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		c_Trap* t_t=t_[t_2];
		t_2=t_2+1;
		p_AddLast15(t_t);
	}
	return this;
}
int c_List15::p_Clear(){
	gc_assign(m__head->m__succ,m__head);
	gc_assign(m__head->m__pred,m__head);
	return 0;
}
c_Enumerator7* c_List15::p_ObjectEnumerator(){
	return (new c_Enumerator7)->m_new(this);
}
int c_List15::p_Count(){
	int t_n=0;
	c_Node30* t_node=m__head->m__succ;
	while(t_node!=m__head){
		t_node=t_node->m__succ;
		t_n+=1;
	}
	return t_n;
}
Array<c_Trap* > c_List15::p_ToArray(){
	Array<c_Trap* > t_arr=Array<c_Trap* >(p_Count());
	int t_i=0;
	c_Enumerator7* t_=this->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Trap* t_t=t_->p_NextObject();
		gc_assign(t_arr[t_i],t_t);
		t_i+=1;
	}
	return t_arr;
}
bool c_List15::p_Equals12(c_Trap* t_lhs,c_Trap* t_rhs){
	return t_lhs==t_rhs;
}
int c_List15::p_RemoveEach7(c_Trap* t_value){
	c_Node30* t_node=m__head->m__succ;
	while(t_node!=m__head){
		c_Node30* t_succ=t_node->m__succ;
		if(p_Equals12(t_node->m__data,t_value)){
			t_node->p_Remove();
		}
		t_node=t_succ;
	}
	return 0;
}
void c_List15::mark(){
	Object::mark();
	gc_mark_q(m__head);
}
c_TrapList::c_TrapList(){
}
c_TrapList* c_TrapList::m_new(){
	c_List15::m_new();
	return this;
}
void c_TrapList::mark(){
	c_List15::mark();
}
c_Node30::c_Node30(){
	m__succ=0;
	m__pred=0;
	m__data=0;
}
c_Node30* c_Node30::m_new(c_Node30* t_succ,c_Node30* t_pred,c_Trap* t_data){
	gc_assign(m__succ,t_succ);
	gc_assign(m__pred,t_pred);
	gc_assign(m__succ->m__pred,this);
	gc_assign(m__pred->m__succ,this);
	gc_assign(m__data,t_data);
	return this;
}
c_Node30* c_Node30::m_new2(){
	return this;
}
int c_Node30::p_Remove(){
	gc_assign(m__succ->m__pred,m__pred);
	gc_assign(m__pred->m__succ,m__succ);
	return 0;
}
void c_Node30::mark(){
	Object::mark();
	gc_mark_q(m__succ);
	gc_mark_q(m__pred);
	gc_mark_q(m__data);
}
c_HeadNode15::c_HeadNode15(){
}
c_HeadNode15* c_HeadNode15::m_new(){
	c_Node30::m_new2();
	gc_assign(m__succ,(this));
	gc_assign(m__pred,(this));
	return this;
}
void c_HeadNode15::mark(){
	c_Node30::mark();
}
c_List16::c_List16(){
	m__head=((new c_HeadNode16)->m_new());
}
c_List16* c_List16::m_new(){
	return this;
}
c_Node31* c_List16::p_AddLast16(c_ParticleSystem* t_data){
	return (new c_Node31)->m_new(m__head,m__head->m__pred,t_data);
}
c_List16* c_List16::m_new2(Array<c_ParticleSystem* > t_data){
	Array<c_ParticleSystem* > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		c_ParticleSystem* t_t=t_[t_2];
		t_2=t_2+1;
		p_AddLast16(t_t);
	}
	return this;
}
int c_List16::p_Clear(){
	gc_assign(m__head->m__succ,m__head);
	gc_assign(m__head->m__pred,m__head);
	return 0;
}
c_Enumerator33* c_List16::p_ObjectEnumerator(){
	return (new c_Enumerator33)->m_new(this);
}
bool c_List16::p_Equals13(c_ParticleSystem* t_lhs,c_ParticleSystem* t_rhs){
	return t_lhs==t_rhs;
}
int c_List16::p_RemoveEach8(c_ParticleSystem* t_value){
	c_Node31* t_node=m__head->m__succ;
	while(t_node!=m__head){
		c_Node31* t_succ=t_node->m__succ;
		if(p_Equals13(t_node->m__data,t_value)){
			t_node->p_Remove();
		}
		t_node=t_succ;
	}
	return 0;
}
void c_List16::p_Remove3(c_ParticleSystem* t_value){
	p_RemoveEach8(t_value);
}
void c_List16::mark(){
	Object::mark();
	gc_mark_q(m__head);
}
c_Node31::c_Node31(){
	m__succ=0;
	m__pred=0;
	m__data=0;
}
c_Node31* c_Node31::m_new(c_Node31* t_succ,c_Node31* t_pred,c_ParticleSystem* t_data){
	gc_assign(m__succ,t_succ);
	gc_assign(m__pred,t_pred);
	gc_assign(m__succ->m__pred,this);
	gc_assign(m__pred->m__succ,this);
	gc_assign(m__data,t_data);
	return this;
}
c_Node31* c_Node31::m_new2(){
	return this;
}
int c_Node31::p_Remove(){
	gc_assign(m__succ->m__pred,m__pred);
	gc_assign(m__pred->m__succ,m__succ);
	return 0;
}
void c_Node31::mark(){
	Object::mark();
	gc_mark_q(m__succ);
	gc_mark_q(m__pred);
	gc_mark_q(m__data);
}
c_HeadNode16::c_HeadNode16(){
}
c_HeadNode16* c_HeadNode16::m_new(){
	c_Node31::m_new2();
	gc_assign(m__succ,(this));
	gc_assign(m__pred,(this));
	return this;
}
void c_HeadNode16::mark(){
	c_Node31::mark();
}
c_List17::c_List17(){
	m__head=((new c_HeadNode17)->m_new());
}
c_List17* c_List17::m_new(){
	return this;
}
c_Node32* c_List17::p_AddLast17(int t_data){
	return (new c_Node32)->m_new(m__head,m__head->m__pred,t_data);
}
c_List17* c_List17::m_new2(Array<int > t_data){
	Array<int > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		int t_t=t_[t_2];
		t_2=t_2+1;
		p_AddLast17(t_t);
	}
	return this;
}
int c_List17::p_Clear(){
	gc_assign(m__head->m__succ,m__head);
	gc_assign(m__head->m__pred,m__head);
	return 0;
}
void c_List17::mark(){
	Object::mark();
	gc_mark_q(m__head);
}
c_IntList::c_IntList(){
}
c_IntList* c_IntList::m_new(Array<int > t_data){
	c_List17::m_new2(t_data);
	return this;
}
c_IntList* c_IntList::m_new2(){
	c_List17::m_new();
	return this;
}
void c_IntList::mark(){
	c_List17::mark();
}
c_Node32::c_Node32(){
	m__succ=0;
	m__pred=0;
	m__data=0;
}
c_Node32* c_Node32::m_new(c_Node32* t_succ,c_Node32* t_pred,int t_data){
	gc_assign(m__succ,t_succ);
	gc_assign(m__pred,t_pred);
	gc_assign(m__succ->m__pred,this);
	gc_assign(m__pred->m__succ,this);
	m__data=t_data;
	return this;
}
c_Node32* c_Node32::m_new2(){
	return this;
}
void c_Node32::mark(){
	Object::mark();
	gc_mark_q(m__succ);
	gc_mark_q(m__pred);
}
c_HeadNode17::c_HeadNode17(){
}
c_HeadNode17* c_HeadNode17::m_new(){
	c_Node32::m_new2();
	gc_assign(m__succ,(this));
	gc_assign(m__pred,(this));
	return this;
}
void c_HeadNode17::mark(){
	c_Node32::mark();
}
c_NPC::c_NPC(){
	m_captive=false;
	m_wasCaptive=false;
	m_glassCage=false;
	m_cageFrontImage=0;
	m_cageBackImage=0;
	m_isMainShopkeeper=false;
}
c_NPC* c_NPC::m_new(){
	c_Enemy::m_new();
	this->m_isNPC=true;
	return this;
}
c_List22* c_NPC::m_npcList;
void c_NPC::p_NPCInit(int t_xVal,int t_yVal,int t_l,String t_name,bool t_captv,bool t_glCage){
	this->m_captive=t_captv;
	this->m_wasCaptive=t_captv;
	this->m_glassCage=t_glCage;
	if(t_captv){
		if(t_glCage){
			gc_assign(this->m_cageFrontImage,(new c_Sprite)->m_new2(String(L"level/cage_glass_front.png",26),1,c_Image::m_DefaultFlags));
		}else{
			gc_assign(this->m_cageFrontImage,(new c_Sprite)->m_new2(String(L"level/cage_front.png",20),1,c_Image::m_DefaultFlags));
		}
		gc_assign(this->m_cageBackImage,(new c_Sprite)->m_new2(String(L"level/cage_back.png",19),1,c_Image::m_DefaultFlags));
	}
	this->p_Init3(t_xVal,t_yVal,t_l,t_name,String(),-1,-1);
	m_npcList->p_AddLast22(this);
}
Float c_NPC::m_GetDistFromClosestNPC(int t_xVal,int t_yVal){
	Float t_closestDist=FLOAT(99999.0);
	c_Enumerator29* t_=m_npcList->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_NPC* t_npc=t_->p_NextObject();
		if(t_npc->m_dead){
			continue;
		}
		c_Point* t_location=t_npc->p_GetLocation();
		Float t_dist=c_Util::m_GetDist(t_location->m_x,t_location->m_y,t_xVal,t_yVal);
		t_closestDist=bb_math_Min2(t_closestDist,t_dist);
	}
	return t_closestDist;
}
void c_NPC::p_Delete(){
	if(!this->m_dead){
		m_npcList->p_RemoveEach11(this);
		c_Enemy::p_Delete();
	}
}
void c_NPC::p_Die(){
	if(!this->m_dead){
		m_npcList->p_RemoveEach11(this);
		c_Enemy::p_Die();
	}
}
void c_NPC::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"NPC.Update()",12));
}
void c_NPC::mark(){
	c_Enemy::mark();
	gc_mark_q(m_cageFrontImage);
	gc_mark_q(m_cageBackImage);
}
c_Transmogrifier::c_Transmogrifier(){
	m_actionCost=10;
	m_speechX=0;
	m_speechY=0;
}
void c_Transmogrifier::p_DisplayCost(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Transmogrifier.DisplayCost()",28));
}
c_Transmogrifier* c_Transmogrifier::m_new(int t_xVal,int t_yVal,int t_l,bool t_captv){
	c_NPC::m_new();
	this->p_NPCInit(t_xVal,t_yVal,t_l,String(L"transmogrifier",14),t_captv,false);
	for(int t_i=0;t_i<bb_controller_game_numPlayers;t_i=t_i+1){
		c_Player* t_player=bb_controller_game_players[t_i];
		int t_1=t_player->m_characterID;
		if(t_1==5 || t_1==6 || t_1==7){
			this->m_actionCost=0;
			break;
		}
	}
	this->m_speechX=t_xVal;
	this->m_speechY=t_yVal-1;
	c_Tile* t_tile=c_Level::m_GetTileAt(t_xVal,t_yVal-2);
	t_tile->p_AddTextLabel(String(L"|121|TRANSMOGRIFY ONE OF YOUR ITEMS?|",37),0,16,FLOAT(0.0),false,true);
	this->p_DisplayCost();
	return this;
}
c_Transmogrifier* c_Transmogrifier::m_new2(){
	c_NPC::m_new();
	return this;
}
void c_Transmogrifier::p_Die(){
	if(!this->m_dead){
		if(!this->m_falling){
			(new c_Item)->m_new(this->m_x,this->m_y,String(L"scroll_transmute",16),false,-1,false);
		}
		c_NPC::p_Die();
	}
}
bool c_Transmogrifier::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Transmogrifier.Hit(String, Int, Int, Entity, Bool, Int)",55));
	return false;
}
void c_Transmogrifier::mark(){
	c_NPC::mark();
}
c_Conjurer::c_Conjurer(){
	m_actionCost=40;
	m_speechX=0;
	m_speechY=0;
	m_box=0;
}
void c_Conjurer::p_DisplayCost(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Conjurer.DisplayCost()",22));
}
c_Conjurer* c_Conjurer::m_new(int t_xVal,int t_yVal,int t_l,bool t_captv){
	c_NPC::m_new();
	this->p_NPCInit(t_xVal,t_yVal,t_l,String(L"conjurer",8),t_captv,false);
	for(int t_i=0;t_i<bb_controller_game_numPlayers;t_i=t_i+1){
		c_Player* t_player=bb_controller_game_players[t_i];
		int t_1=t_player->m_characterID;
		if(t_1==5 || t_1==6 || t_1==7){
			this->m_actionCost=0;
			break;
		}
	}
	this->m_speechX=t_xVal+1;
	this->m_speechY=t_yVal+2;
	c_Tile* t_tile=c_Level::m_GetTileAt(t_xVal+1,t_yVal+1);
	t_tile->p_AddTextLabel(String(L"|121|TRANSMOGRIFY ONE OF YOUR ITEMS?|",37),0,16,FLOAT(0.0),false,true);
	this->p_DisplayCost();
	gc_assign(this->m_box,(new c_Thing)->m_new(this->m_x+1,this->m_y,true));
	return this;
}
c_Conjurer* c_Conjurer::m_new2(){
	c_NPC::m_new();
	return this;
}
void c_Conjurer::p_Die(){
	c_Tile* t_speechTile2=c_Level::m_GetTileAt(this->m_speechX,this->m_speechY-1);
	if(t_speechTile2!=0){
		t_speechTile2->p_ClearTextLabel();
	}
	c_Tile* t_speechTile=c_Level::m_GetTileAt(this->m_speechX,this->m_speechY-1);
	if(t_speechTile!=0){
		t_speechTile->p_ClearTextLabel();
	}
	if(!this->m_dead){
		if(!this->m_falling){
			c_XMLNode* t_bagOfHoldingNode=c_Item::m_GetItemXML(String(L"bag_holding",11));
			if(c_Item::m_IsValidItemForCurrentChars(t_bagOfHoldingNode)){
				(new c_Item)->m_new(this->m_x,this->m_y,String(L"bag_holding",11),false,-1,false);
			}else{
				(new c_Item)->m_new(this->m_x,this->m_y,String(L"food_2",6),false,-1,false);
			}
		}
		this->m_box->p_Die();
		c_NPC::p_Die();
	}
}
void c_Conjurer::mark(){
	c_NPC::mark();
	gc_mark_q(m_box);
}
c_Shriner::c_Shriner(){
	m_speechX=0;
	m_speechY=0;
	m_shrine1=0;
	m_shrine2=0;
	m_shrine3=0;
}
c_Shriner* c_Shriner::m_new(int t_xVal,int t_yVal,int t_l,bool t_captv){
	c_NPC::m_new();
	this->p_NPCInit(t_xVal,t_yVal,t_l,String(L"shriner",7),t_captv,false);
	this->m_speechX=t_xVal;
	this->m_speechY=t_yVal-1;
	c_Tile* t_tile=c_Level::m_GetTileAt(t_xVal,t_yVal-1);
	t_tile->p_AddTextLabel(String(L"|123|USE A SHRINE?|",19),0,16,FLOAT(0.0),false,true);
	return this;
}
c_Shriner* c_Shriner::m_new2(){
	c_NPC::m_new();
	return this;
}
void c_Shriner::p_Die(){
	this->m_shrine1->m_cost=0;
	this->m_shrine1->p_SetCost();
	this->m_shrine2->m_cost=0;
	this->m_shrine2->p_SetCost();
	this->m_shrine3->m_cost=0;
	this->m_shrine3->p_SetCost();
	c_NPC::p_Die();
}
bool c_Shriner::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Shriner.Hit(String, Int, Int, Entity, Bool, Int)",48));
	return false;
}
void c_Shriner::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Shriner.Update()",16));
}
void c_Shriner::mark(){
	c_NPC::mark();
	gc_mark_q(m_shrine1);
	gc_mark_q(m_shrine2);
	gc_mark_q(m_shrine3);
}
c_Pawnbroker::c_Pawnbroker(){
}
c_Pawnbroker* c_Pawnbroker::m_new(int t_xVal,int t_yVal,int t_l,bool t_captv){
	c_NPC::m_new();
	this->p_NPCInit(t_xVal,t_yVal,t_l,String(L"pawnbroker",10),t_captv,false);
	return this;
}
c_Pawnbroker* c_Pawnbroker::m_new2(){
	c_NPC::m_new();
	return this;
}
void c_Pawnbroker::p_Die(){
	if(!this->m_dead){
		if(!this->m_falling){
			(new c_Item)->m_new(this->m_x,this->m_y,String(L"misc_coupon",11),false,-1,false);
		}
		c_NPC::p_Die();
	}
}
bool c_Pawnbroker::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Pawnbroker.Hit(String, Int, Int, Entity, Bool, Int)",51));
	return false;
}
void c_Pawnbroker::mark(){
	c_NPC::mark();
}
c_Map15::c_Map15(){
	m_root=0;
}
c_Map15* c_Map15::m_new(){
	return this;
}
int c_Map15::p_Clear(){
	m_root=0;
	return 0;
}
c_Node33* c_Map15::p_FirstNode(){
	if(!((m_root)!=0)){
		return 0;
	}
	c_Node33* t_node=m_root;
	while((t_node->m_left)!=0){
		t_node=t_node->m_left;
	}
	return t_node;
}
c_NodeEnumerator3* c_Map15::p_ObjectEnumerator(){
	return (new c_NodeEnumerator3)->m_new(p_FirstNode());
}
int c_Map15::p_RotateLeft14(c_Node33* t_node){
	c_Node33* t_child=t_node->m_right;
	gc_assign(t_node->m_right,t_child->m_left);
	if((t_child->m_left)!=0){
		gc_assign(t_child->m_left->m_parent,t_node);
	}
	gc_assign(t_child->m_parent,t_node->m_parent);
	if((t_node->m_parent)!=0){
		if(t_node==t_node->m_parent->m_left){
			gc_assign(t_node->m_parent->m_left,t_child);
		}else{
			gc_assign(t_node->m_parent->m_right,t_child);
		}
	}else{
		gc_assign(m_root,t_child);
	}
	gc_assign(t_child->m_left,t_node);
	gc_assign(t_node->m_parent,t_child);
	return 0;
}
int c_Map15::p_RotateRight14(c_Node33* t_node){
	c_Node33* t_child=t_node->m_left;
	gc_assign(t_node->m_left,t_child->m_right);
	if((t_child->m_right)!=0){
		gc_assign(t_child->m_right->m_parent,t_node);
	}
	gc_assign(t_child->m_parent,t_node->m_parent);
	if((t_node->m_parent)!=0){
		if(t_node==t_node->m_parent->m_right){
			gc_assign(t_node->m_parent->m_right,t_child);
		}else{
			gc_assign(t_node->m_parent->m_left,t_child);
		}
	}else{
		gc_assign(m_root,t_child);
	}
	gc_assign(t_child->m_right,t_node);
	gc_assign(t_node->m_parent,t_child);
	return 0;
}
int c_Map15::p_InsertFixup14(c_Node33* t_node){
	while(((t_node->m_parent)!=0) && t_node->m_parent->m_color==-1 && ((t_node->m_parent->m_parent)!=0)){
		if(t_node->m_parent==t_node->m_parent->m_parent->m_left){
			c_Node33* t_uncle=t_node->m_parent->m_parent->m_right;
			if(((t_uncle)!=0) && t_uncle->m_color==-1){
				t_node->m_parent->m_color=1;
				t_uncle->m_color=1;
				t_uncle->m_parent->m_color=-1;
				t_node=t_uncle->m_parent;
			}else{
				if(t_node==t_node->m_parent->m_right){
					t_node=t_node->m_parent;
					p_RotateLeft14(t_node);
				}
				t_node->m_parent->m_color=1;
				t_node->m_parent->m_parent->m_color=-1;
				p_RotateRight14(t_node->m_parent->m_parent);
			}
		}else{
			c_Node33* t_uncle2=t_node->m_parent->m_parent->m_left;
			if(((t_uncle2)!=0) && t_uncle2->m_color==-1){
				t_node->m_parent->m_color=1;
				t_uncle2->m_color=1;
				t_uncle2->m_parent->m_color=-1;
				t_node=t_uncle2->m_parent;
			}else{
				if(t_node==t_node->m_parent->m_left){
					t_node=t_node->m_parent;
					p_RotateRight14(t_node);
				}
				t_node->m_parent->m_color=1;
				t_node->m_parent->m_parent->m_color=-1;
				p_RotateLeft14(t_node->m_parent->m_parent);
			}
		}
	}
	m_root->m_color=1;
	return 0;
}
bool c_Map15::p_Set15(c_Point* t_key,c_Point* t_value){
	c_Node33* t_node=m_root;
	c_Node33* t_parent=0;
	int t_cmp=0;
	while((t_node)!=0){
		t_parent=t_node;
		t_cmp=p_Compare3(t_key,t_node->m_key);
		if(t_cmp>0){
			t_node=t_node->m_right;
		}else{
			if(t_cmp<0){
				t_node=t_node->m_left;
			}else{
				gc_assign(t_node->m_value,t_value);
				return false;
			}
		}
	}
	t_node=(new c_Node33)->m_new(t_key,t_value,-1,t_parent);
	if((t_parent)!=0){
		if(t_cmp>0){
			gc_assign(t_parent->m_right,t_node);
		}else{
			gc_assign(t_parent->m_left,t_node);
		}
		p_InsertFixup14(t_node);
	}else{
		gc_assign(m_root,t_node);
	}
	return true;
}
bool c_Map15::p_Add6(c_Point* t_key,c_Point* t_value){
	c_Node33* t_node=m_root;
	c_Node33* t_parent=0;
	int t_cmp=0;
	while((t_node)!=0){
		t_parent=t_node;
		t_cmp=p_Compare3(t_key,t_node->m_key);
		if(t_cmp>0){
			t_node=t_node->m_right;
		}else{
			if(t_cmp<0){
				t_node=t_node->m_left;
			}else{
				return false;
			}
		}
	}
	t_node=(new c_Node33)->m_new(t_key,t_value,-1,t_parent);
	if((t_parent)!=0){
		if(t_cmp>0){
			gc_assign(t_parent->m_right,t_node);
		}else{
			gc_assign(t_parent->m_left,t_node);
		}
		p_InsertFixup14(t_node);
	}else{
		gc_assign(m_root,t_node);
	}
	return true;
}
c_Node33* c_Map15::p_FindNode3(c_Point* t_key){
	c_Node33* t_node=m_root;
	while((t_node)!=0){
		int t_cmp=p_Compare3(t_key,t_node->m_key);
		if(t_cmp>0){
			t_node=t_node->m_right;
		}else{
			if(t_cmp<0){
				t_node=t_node->m_left;
			}else{
				return t_node;
			}
		}
	}
	return t_node;
}
bool c_Map15::p_Contains5(c_Point* t_key){
	return p_FindNode3(t_key)!=0;
}
c_Point* c_Map15::p_Get4(c_Point* t_key){
	c_Node33* t_node=p_FindNode3(t_key);
	if((t_node)!=0){
		return t_node->m_value;
	}
	return 0;
}
int c_Map15::p_DeleteFixup(c_Node33* t_node,c_Node33* t_parent){
	while(t_node!=m_root && (!((t_node)!=0) || t_node->m_color==1)){
		if(t_node==t_parent->m_left){
			c_Node33* t_sib=t_parent->m_right;
			if(t_sib->m_color==-1){
				t_sib->m_color=1;
				t_parent->m_color=-1;
				p_RotateLeft14(t_parent);
				t_sib=t_parent->m_right;
			}
			if((!((t_sib->m_left)!=0) || t_sib->m_left->m_color==1) && (!((t_sib->m_right)!=0) || t_sib->m_right->m_color==1)){
				t_sib->m_color=-1;
				t_node=t_parent;
				t_parent=t_parent->m_parent;
			}else{
				if(!((t_sib->m_right)!=0) || t_sib->m_right->m_color==1){
					t_sib->m_left->m_color=1;
					t_sib->m_color=-1;
					p_RotateRight14(t_sib);
					t_sib=t_parent->m_right;
				}
				t_sib->m_color=t_parent->m_color;
				t_parent->m_color=1;
				t_sib->m_right->m_color=1;
				p_RotateLeft14(t_parent);
				t_node=m_root;
			}
		}else{
			c_Node33* t_sib2=t_parent->m_left;
			if(t_sib2->m_color==-1){
				t_sib2->m_color=1;
				t_parent->m_color=-1;
				p_RotateRight14(t_parent);
				t_sib2=t_parent->m_left;
			}
			if((!((t_sib2->m_right)!=0) || t_sib2->m_right->m_color==1) && (!((t_sib2->m_left)!=0) || t_sib2->m_left->m_color==1)){
				t_sib2->m_color=-1;
				t_node=t_parent;
				t_parent=t_parent->m_parent;
			}else{
				if(!((t_sib2->m_left)!=0) || t_sib2->m_left->m_color==1){
					t_sib2->m_right->m_color=1;
					t_sib2->m_color=-1;
					p_RotateLeft14(t_sib2);
					t_sib2=t_parent->m_left;
				}
				t_sib2->m_color=t_parent->m_color;
				t_parent->m_color=1;
				t_sib2->m_left->m_color=1;
				p_RotateRight14(t_parent);
				t_node=m_root;
			}
		}
	}
	if((t_node)!=0){
		t_node->m_color=1;
	}
	return 0;
}
int c_Map15::p_RemoveNode(c_Node33* t_node){
	c_Node33* t_splice=0;
	c_Node33* t_child=0;
	if(!((t_node->m_left)!=0)){
		t_splice=t_node;
		t_child=t_node->m_right;
	}else{
		if(!((t_node->m_right)!=0)){
			t_splice=t_node;
			t_child=t_node->m_left;
		}else{
			t_splice=t_node->m_left;
			while((t_splice->m_right)!=0){
				t_splice=t_splice->m_right;
			}
			t_child=t_splice->m_left;
			gc_assign(t_node->m_key,t_splice->m_key);
			gc_assign(t_node->m_value,t_splice->m_value);
		}
	}
	c_Node33* t_parent=t_splice->m_parent;
	if((t_child)!=0){
		gc_assign(t_child->m_parent,t_parent);
	}
	if(!((t_parent)!=0)){
		gc_assign(m_root,t_child);
		return 0;
	}
	if(t_splice==t_parent->m_left){
		gc_assign(t_parent->m_left,t_child);
	}else{
		gc_assign(t_parent->m_right,t_child);
	}
	if(t_splice->m_color==1){
		p_DeleteFixup(t_child,t_parent);
	}
	return 0;
}
int c_Map15::p_Remove4(c_Point* t_key){
	c_Node33* t_node=p_FindNode3(t_key);
	if(!((t_node)!=0)){
		return 0;
	}
	p_RemoveNode(t_node);
	return 1;
}
void c_Map15::mark(){
	Object::mark();
	gc_mark_q(m_root);
}
c_ExitMap::c_ExitMap(){
}
c_ExitMap* c_ExitMap::m_new(){
	c_Map15::m_new();
	return this;
}
int c_ExitMap::p_Compare3(c_Point* t_lhs,c_Point* t_rhs){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ExitMap.Compare()",17));
	return 0;
}
void c_ExitMap::mark(){
	c_Map15::mark();
}
c_Node33::c_Node33(){
	m_left=0;
	m_right=0;
	m_parent=0;
	m_key=0;
	m_value=0;
	m_color=0;
}
c_Node33* c_Node33::p_NextNode(){
	c_Node33* t_node=0;
	if((m_right)!=0){
		t_node=m_right;
		while((t_node->m_left)!=0){
			t_node=t_node->m_left;
		}
		return t_node;
	}
	t_node=this;
	c_Node33* t_parent=this->m_parent;
	while(((t_parent)!=0) && t_node==t_parent->m_right){
		t_node=t_parent;
		t_parent=t_parent->m_parent;
	}
	return t_parent;
}
c_Point* c_Node33::p_Key(){
	return m_key;
}
c_Point* c_Node33::p_Value(){
	return m_value;
}
c_Node33* c_Node33::m_new(c_Point* t_key,c_Point* t_value,int t_color,c_Node33* t_parent){
	gc_assign(this->m_key,t_key);
	gc_assign(this->m_value,t_value);
	this->m_color=t_color;
	gc_assign(this->m_parent,t_parent);
	return this;
}
c_Node33* c_Node33::m_new2(){
	return this;
}
void c_Node33::mark(){
	Object::mark();
	gc_mark_q(m_left);
	gc_mark_q(m_right);
	gc_mark_q(m_parent);
	gc_mark_q(m_key);
	gc_mark_q(m_value);
}
c_TilesetType::c_TilesetType(){
}
void c_TilesetType::mark(){
	Object::mark();
}
c_RoomType::c_RoomType(){
}
void c_RoomType::mark(){
	Object::mark();
}
c_TileType::c_TileType(){
}
void c_TileType::mark(){
	Object::mark();
}
c_TileData::c_TileData(){
	m_x=0;
	m_y=0;
	m_type=0;
}
c_TileData* c_TileData::m_new(int t_xVal,int t_yVal,int t_type){
	this->m_x=t_xVal;
	this->m_y=t_yVal;
	this->m_type=t_type;
	return this;
}
c_TileData* c_TileData::m_new2(){
	return this;
}
void c_TileData::mark(){
	Object::mark();
}
c_List18::c_List18(){
	m__head=((new c_HeadNode18)->m_new());
}
c_List18* c_List18::m_new(){
	return this;
}
c_Node34* c_List18::p_AddLast18(c_TileData* t_data){
	return (new c_Node34)->m_new(m__head,m__head->m__pred,t_data);
}
c_List18* c_List18::m_new2(Array<c_TileData* > t_data){
	Array<c_TileData* > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		c_TileData* t_t=t_[t_2];
		t_2=t_2+1;
		p_AddLast18(t_t);
	}
	return this;
}
c_Enumerator8* c_List18::p_ObjectEnumerator(){
	return (new c_Enumerator8)->m_new(this);
}
void c_List18::mark(){
	Object::mark();
	gc_mark_q(m__head);
}
c_Node34::c_Node34(){
	m__succ=0;
	m__pred=0;
	m__data=0;
}
c_Node34* c_Node34::m_new(c_Node34* t_succ,c_Node34* t_pred,c_TileData* t_data){
	gc_assign(m__succ,t_succ);
	gc_assign(m__pred,t_pred);
	gc_assign(m__succ->m__pred,this);
	gc_assign(m__pred->m__succ,this);
	gc_assign(m__data,t_data);
	return this;
}
c_Node34* c_Node34::m_new2(){
	return this;
}
void c_Node34::mark(){
	Object::mark();
	gc_mark_q(m__succ);
	gc_mark_q(m__pred);
	gc_mark_q(m__data);
}
c_HeadNode18::c_HeadNode18(){
}
c_HeadNode18* c_HeadNode18::m_new(){
	c_Node34::m_new2();
	gc_assign(m__succ,(this));
	gc_assign(m__pred,(this));
	return this;
}
void c_HeadNode18::mark(){
	c_Node34::mark();
}
c_Enumerator7::c_Enumerator7(){
	m__list=0;
	m__curr=0;
}
c_Enumerator7* c_Enumerator7::m_new(c_List15* t_list){
	gc_assign(m__list,t_list);
	gc_assign(m__curr,t_list->m__head->m__succ);
	return this;
}
c_Enumerator7* c_Enumerator7::m_new2(){
	return this;
}
bool c_Enumerator7::p_HasNext(){
	while(m__curr->m__succ->m__pred!=m__curr){
		gc_assign(m__curr,m__curr->m__succ);
	}
	return m__curr!=m__list->m__head;
}
c_Trap* c_Enumerator7::p_NextObject(){
	c_Trap* t_data=m__curr->m__data;
	gc_assign(m__curr,m__curr->m__succ);
	return t_data;
}
void c_Enumerator7::mark(){
	Object::mark();
	gc_mark_q(m__list);
	gc_mark_q(m__curr);
}
c_Enumerator8::c_Enumerator8(){
	m__list=0;
	m__curr=0;
}
c_Enumerator8* c_Enumerator8::m_new(c_List18* t_list){
	gc_assign(m__list,t_list);
	gc_assign(m__curr,t_list->m__head->m__succ);
	return this;
}
c_Enumerator8* c_Enumerator8::m_new2(){
	return this;
}
bool c_Enumerator8::p_HasNext(){
	while(m__curr->m__succ->m__pred!=m__curr){
		gc_assign(m__curr,m__curr->m__succ);
	}
	return m__curr!=m__list->m__head;
}
c_TileData* c_Enumerator8::p_NextObject(){
	c_TileData* t_data=m__curr->m__data;
	gc_assign(m__curr,m__curr->m__succ);
	return t_data;
}
void c_Enumerator8::mark(){
	Object::mark();
	gc_mark_q(m__list);
	gc_mark_q(m__curr);
}
c_Stack3::c_Stack3(){
	m_data=Array<String >();
	m_length=0;
}
c_Stack3* c_Stack3::m_new(){
	return this;
}
c_Stack3* c_Stack3::m_new2(Array<String > t_data){
	gc_assign(this->m_data,t_data.Slice(0));
	this->m_length=t_data.Length();
	return this;
}
void c_Stack3::p_Push7(String t_value){
	if(m_length==m_data.Length()){
		gc_assign(m_data,m_data.Resize(m_length*2+10));
	}
	m_data[m_length]=t_value;
	m_length+=1;
}
void c_Stack3::p_Push8(Array<String > t_values,int t_offset,int t_count){
	for(int t_i=0;t_i<t_count;t_i=t_i+1){
		p_Push7(t_values[t_offset+t_i]);
	}
}
void c_Stack3::p_Push9(Array<String > t_values,int t_offset){
	p_Push8(t_values,t_offset,t_values.Length()-t_offset);
}
Array<String > c_Stack3::p_ToArray(){
	Array<String > t_t=Array<String >(m_length);
	for(int t_i=0;t_i<m_length;t_i=t_i+1){
		t_t[t_i]=m_data[t_i];
	}
	return t_t;
}
String c_Stack3::m_NIL;
void c_Stack3::p_Clear(){
	for(int t_i=0;t_i<m_length;t_i=t_i+1){
		m_data[t_i]=m_NIL;
	}
	m_length=0;
}
c_Enumerator12* c_Stack3::p_ObjectEnumerator(){
	return (new c_Enumerator12)->m_new(this);
}
void c_Stack3::p_Length2(int t_newlength){
	if(t_newlength<m_length){
		for(int t_i=t_newlength;t_i<m_length;t_i=t_i+1){
			m_data[t_i]=m_NIL;
		}
	}else{
		if(t_newlength>m_data.Length()){
			gc_assign(m_data,m_data.Resize(bb_math_Max(m_length*2+10,t_newlength)));
		}
	}
	m_length=t_newlength;
}
int c_Stack3::p_Length(){
	return m_length;
}
String c_Stack3::p_Pop(){
	m_length-=1;
	String t_v=m_data[m_length];
	m_data[m_length]=m_NIL;
	return t_v;
}
String c_Stack3::p_Get2(int t_index){
	return m_data[t_index];
}
void c_Stack3::mark(){
	Object::mark();
	gc_mark_q(m_data);
}
c_StringStack::c_StringStack(){
}
c_StringStack* c_StringStack::m_new(Array<String > t_data){
	c_Stack3::m_new2(t_data);
	return this;
}
c_StringStack* c_StringStack::m_new2(){
	c_Stack3::m_new();
	return this;
}
void c_StringStack::mark(){
	c_Stack3::mark();
}
c_NodeEnumerator3::c_NodeEnumerator3(){
	m_node=0;
}
c_NodeEnumerator3* c_NodeEnumerator3::m_new(c_Node33* t_node){
	gc_assign(this->m_node,t_node);
	return this;
}
c_NodeEnumerator3* c_NodeEnumerator3::m_new2(){
	return this;
}
bool c_NodeEnumerator3::p_HasNext(){
	return m_node!=0;
}
c_Node33* c_NodeEnumerator3::p_NextObject(){
	c_Node33* t_t=m_node;
	gc_assign(m_node,m_node->p_NextNode());
	return t_t;
}
void c_NodeEnumerator3::mark(){
	Object::mark();
	gc_mark_q(m_node);
}
c_Sarcophagus::c_Sarcophagus(){
	m_numEnemiesSpawned=0;
}
c_List19* c_Sarcophagus::m_sarcophagi;
c_Sarcophagus* c_Sarcophagus::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	if(c_Shrine::m_warShrineActive){
		t_l=3;
	}
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"sarcophagus",11));
	m_sarcophagi->p_AddLast19(this);
	this->m_overrideHitSound=String(L"sarcophagusHit",14);
	this->m_overrideDeathSound=String(L"sarcophagusDeath",16);
	return this;
}
c_Sarcophagus* c_Sarcophagus::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_Sarcophagus::p_Delete(){
	m_sarcophagi->p_RemoveEach9(this);
	c_Enemy::p_Delete();
}
void c_Sarcophagus::p_Die(){
	if(this->m_coinsToDrop>0){
		if(this->m_numEnemiesSpawned<=1){
			this->m_coinsToDrop=5*this->m_level+15;
		}else{
			if(this->m_numEnemiesSpawned==2){
				this->m_coinsToDrop=2*this->m_level+6;
			}else{
				this->m_coinsToDrop=1*this->m_level+4;
			}
		}
	}
	m_sarcophagi->p_RemoveEach9(this);
	c_Enemy::p_Die();
}
void c_Sarcophagus::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Sarcophagus.Update()",20));
}
void c_Sarcophagus::mark(){
	c_Enemy::mark();
}
c_BeatAnimationData::c_BeatAnimationData(){
	m_frame=0;
	m_onFraction=FLOAT(.0);
	m_offFraction=FLOAT(.0);
	m_singleFrame=false;
}
c_BeatAnimationData* c_BeatAnimationData::m_new(int t_frame,Float t_onFraction,Float t_offFraction,bool t_singleFrame){
	this->m_frame=t_frame;
	this->m_onFraction=t_onFraction;
	this->m_offFraction=t_offFraction;
	this->m_singleFrame=t_singleFrame;
	return this;
}
c_BeatAnimationData* c_BeatAnimationData::m_new2(){
	return this;
}
void c_BeatAnimationData::mark(){
	Object::mark();
}
c_Map16::c_Map16(){
	m_root=0;
}
c_Map16* c_Map16::m_new(){
	return this;
}
int c_Map16::p_Clear(){
	m_root=0;
	return 0;
}
int c_Map16::p_RotateLeft15(c_Node35* t_node){
	c_Node35* t_child=t_node->m_right;
	gc_assign(t_node->m_right,t_child->m_left);
	if((t_child->m_left)!=0){
		gc_assign(t_child->m_left->m_parent,t_node);
	}
	gc_assign(t_child->m_parent,t_node->m_parent);
	if((t_node->m_parent)!=0){
		if(t_node==t_node->m_parent->m_left){
			gc_assign(t_node->m_parent->m_left,t_child);
		}else{
			gc_assign(t_node->m_parent->m_right,t_child);
		}
	}else{
		gc_assign(m_root,t_child);
	}
	gc_assign(t_child->m_left,t_node);
	gc_assign(t_node->m_parent,t_child);
	return 0;
}
int c_Map16::p_RotateRight15(c_Node35* t_node){
	c_Node35* t_child=t_node->m_left;
	gc_assign(t_node->m_left,t_child->m_right);
	if((t_child->m_right)!=0){
		gc_assign(t_child->m_right->m_parent,t_node);
	}
	gc_assign(t_child->m_parent,t_node->m_parent);
	if((t_node->m_parent)!=0){
		if(t_node==t_node->m_parent->m_right){
			gc_assign(t_node->m_parent->m_right,t_child);
		}else{
			gc_assign(t_node->m_parent->m_left,t_child);
		}
	}else{
		gc_assign(m_root,t_child);
	}
	gc_assign(t_child->m_right,t_node);
	gc_assign(t_node->m_parent,t_child);
	return 0;
}
int c_Map16::p_InsertFixup15(c_Node35* t_node){
	while(((t_node->m_parent)!=0) && t_node->m_parent->m_color==-1 && ((t_node->m_parent->m_parent)!=0)){
		if(t_node->m_parent==t_node->m_parent->m_parent->m_left){
			c_Node35* t_uncle=t_node->m_parent->m_parent->m_right;
			if(((t_uncle)!=0) && t_uncle->m_color==-1){
				t_node->m_parent->m_color=1;
				t_uncle->m_color=1;
				t_uncle->m_parent->m_color=-1;
				t_node=t_uncle->m_parent;
			}else{
				if(t_node==t_node->m_parent->m_right){
					t_node=t_node->m_parent;
					p_RotateLeft15(t_node);
				}
				t_node->m_parent->m_color=1;
				t_node->m_parent->m_parent->m_color=-1;
				p_RotateRight15(t_node->m_parent->m_parent);
			}
		}else{
			c_Node35* t_uncle2=t_node->m_parent->m_parent->m_left;
			if(((t_uncle2)!=0) && t_uncle2->m_color==-1){
				t_node->m_parent->m_color=1;
				t_uncle2->m_color=1;
				t_uncle2->m_parent->m_color=-1;
				t_node=t_uncle2->m_parent;
			}else{
				if(t_node==t_node->m_parent->m_left){
					t_node=t_node->m_parent;
					p_RotateRight15(t_node);
				}
				t_node->m_parent->m_color=1;
				t_node->m_parent->m_parent->m_color=-1;
				p_RotateLeft15(t_node->m_parent->m_parent);
			}
		}
	}
	m_root->m_color=1;
	return 0;
}
bool c_Map16::p_Set16(int t_key,c_BeatAnimationData* t_value){
	c_Node35* t_node=m_root;
	c_Node35* t_parent=0;
	int t_cmp=0;
	while((t_node)!=0){
		t_parent=t_node;
		t_cmp=p_Compare(t_key,t_node->m_key);
		if(t_cmp>0){
			t_node=t_node->m_right;
		}else{
			if(t_cmp<0){
				t_node=t_node->m_left;
			}else{
				gc_assign(t_node->m_value,t_value);
				return false;
			}
		}
	}
	t_node=(new c_Node35)->m_new(t_key,t_value,-1,t_parent);
	if((t_parent)!=0){
		if(t_cmp>0){
			gc_assign(t_parent->m_right,t_node);
		}else{
			gc_assign(t_parent->m_left,t_node);
		}
		p_InsertFixup15(t_node);
	}else{
		gc_assign(m_root,t_node);
	}
	return true;
}
bool c_Map16::p_IsEmpty(){
	return m_root==0;
}
void c_Map16::mark(){
	Object::mark();
	gc_mark_q(m_root);
}
c_IntMap8::c_IntMap8(){
}
c_IntMap8* c_IntMap8::m_new(){
	c_Map16::m_new();
	return this;
}
int c_IntMap8::p_Compare(int t_lhs,int t_rhs){
	return t_lhs-t_rhs;
}
void c_IntMap8::mark(){
	c_Map16::mark();
}
c_Node35::c_Node35(){
	m_key=0;
	m_right=0;
	m_left=0;
	m_value=0;
	m_color=0;
	m_parent=0;
}
c_Node35* c_Node35::m_new(int t_key,c_BeatAnimationData* t_value,int t_color,c_Node35* t_parent){
	this->m_key=t_key;
	gc_assign(this->m_value,t_value);
	this->m_color=t_color;
	gc_assign(this->m_parent,t_parent);
	return this;
}
c_Node35* c_Node35::m_new2(){
	return this;
}
void c_Node35::mark(){
	Object::mark();
	gc_mark_q(m_right);
	gc_mark_q(m_left);
	gc_mark_q(m_value);
	gc_mark_q(m_parent);
}
c_List19::c_List19(){
	m__head=((new c_HeadNode19)->m_new());
}
c_List19* c_List19::m_new(){
	return this;
}
c_Node36* c_List19::p_AddLast19(c_Sarcophagus* t_data){
	return (new c_Node36)->m_new(m__head,m__head->m__pred,t_data);
}
c_List19* c_List19::m_new2(Array<c_Sarcophagus* > t_data){
	Array<c_Sarcophagus* > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		c_Sarcophagus* t_t=t_[t_2];
		t_2=t_2+1;
		p_AddLast19(t_t);
	}
	return this;
}
int c_List19::p_Count(){
	int t_n=0;
	c_Node36* t_node=m__head->m__succ;
	while(t_node!=m__head){
		t_node=t_node->m__succ;
		t_n+=1;
	}
	return t_n;
}
bool c_List19::p_Equals14(c_Sarcophagus* t_lhs,c_Sarcophagus* t_rhs){
	return t_lhs==t_rhs;
}
int c_List19::p_RemoveEach9(c_Sarcophagus* t_value){
	c_Node36* t_node=m__head->m__succ;
	while(t_node!=m__head){
		c_Node36* t_succ=t_node->m__succ;
		if(p_Equals14(t_node->m__data,t_value)){
			t_node->p_Remove();
		}
		t_node=t_succ;
	}
	return 0;
}
void c_List19::mark(){
	Object::mark();
	gc_mark_q(m__head);
}
c_Node36::c_Node36(){
	m__succ=0;
	m__pred=0;
	m__data=0;
}
c_Node36* c_Node36::m_new(c_Node36* t_succ,c_Node36* t_pred,c_Sarcophagus* t_data){
	gc_assign(m__succ,t_succ);
	gc_assign(m__pred,t_pred);
	gc_assign(m__succ->m__pred,this);
	gc_assign(m__pred->m__succ,this);
	gc_assign(m__data,t_data);
	return this;
}
c_Node36* c_Node36::m_new2(){
	return this;
}
int c_Node36::p_Remove(){
	gc_assign(m__succ->m__pred,m__pred);
	gc_assign(m__pred->m__succ,m__succ);
	return 0;
}
void c_Node36::mark(){
	Object::mark();
	gc_mark_q(m__succ);
	gc_mark_q(m__pred);
	gc_mark_q(m__data);
}
c_HeadNode19::c_HeadNode19(){
}
c_HeadNode19* c_HeadNode19::m_new(){
	c_Node36::m_new2();
	gc_assign(m__succ,(this));
	gc_assign(m__pred,(this));
	return this;
}
void c_HeadNode19::mark(){
	c_Node36::mark();
}
c_KingConga::c_KingConga(){
	m_initX=0;
	m_initY=0;
	m_initialXOff=-1;
	m_image2=0;
	m_zombieFriends=(new c_List11)->m_new();
}
c_KingConga* c_KingConga::m_theKing;
c_KingConga* c_KingConga::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"king_conga",10));
	this->m_initX=t_xVal;
	this->m_initY=t_yVal;
	gc_assign(m_theKing,this);
	this->m_overrideAttackSound=String(L"kingCongaAttack",15);
	this->m_overrideHitSound=String(L"kingCongaHit",12);
	this->m_overrideDeathSound=String(L"kingCongaDeath",14);
	this->m_initialXOff=int(this->m_xOff);
	gc_assign(this->m_image2,(new c_Sprite)->m_new2(String(L"entities/king_conga_throne.png",30),1,c_Image::m_DefaultFlags));
	this->m_image2->p_SetZOff(FLOAT(40.0));
	int t_healthMaxBonus=bb_controller_game_currentDepth-1;
	if(c_Shrine::m_warShrineActive){
		t_healthMaxBonus=4;
	}
	this->m_healthMax+=t_healthMaxBonus;
	this->m_health=this->m_healthMax;
	if(c_Util::m_IsCharacterActive(5) || c_Util::m_IsCharacterActive(7)){
		this->m_coinsToDrop=1;
	}
	return this;
}
c_KingConga* c_KingConga::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_KingConga::p_AddZombieFriend(c_Enemy* t_z){
	this->m_zombieFriends->p_AddLast11(t_z);
}
void c_KingConga::p_Die(){
	c_Enemy::m_SetEnemiesToDropNoCoinsOverride();
	c_Level::m_PlaceTileRemovingExistingTiles2(this->m_initX,this->m_initY,0);
	m_theKing=0;
	c_Enemy::p_Die();
	c_Enemy::m_KillAllEnemies();
}
bool c_KingConga::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"KingConga.Hit(String, Int, Int, Entity, Bool, Int)",50));
	return false;
}
void c_KingConga::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"KingConga.Update()",18));
}
void c_KingConga::mark(){
	c_Enemy::mark();
	gc_mark_q(m_image2);
	gc_mark_q(m_zombieFriends);
}
c_ZombieSnake::c_ZombieSnake(){
	m_zsChild=0;
	m_zsParent=0;
}
c_ZombieSnake* c_ZombieSnake::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"zombie_snake",12));
	this->m_movesRegardlessOfDistance=true;
	this->m_wasSeekingX=false;
	this->p_ActivateLight(FLOAT(0.01),FLOAT(0.02));
	return this;
}
c_ZombieSnake* c_ZombieSnake::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_ZombieSnake::p_SetChild(c_ZombieSnake* t_zs){
	gc_assign(this->m_zsChild,t_zs);
}
void c_ZombieSnake::p_SetParent(c_ZombieSnake* t_zs){
	gc_assign(this->m_zsParent,t_zs);
	this->m_movePriority=t_zs->m_movePriority-1;
}
bool c_ZombieSnake::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ZombieSnake.Hit(String, Int, Int, Entity, Bool, Int)",52));
	return false;
}
void c_ZombieSnake::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ZombieSnake.Update()",20));
}
void c_ZombieSnake::mark(){
	c_Enemy::mark();
	gc_mark_q(m_zsChild);
	gc_mark_q(m_zsParent);
}
c_Ghost::c_Ghost(){
	m_lastDist=Array<Float >(4);
}
c_Ghost* c_Ghost::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	this->p_Init3(t_xVal,t_yVal,t_l,String(L"ghost",5),String(),-1,-1);
	this->m_image->p_SetAlphaTweenFromCurrent(FLOAT(0.4),5);
	for(int t_i=0;t_i<this->m_lastDist.Length();t_i=t_i+1){
		this->m_lastDist[t_i]=FLOAT(9999.0);
	}
	this->m_overrideAttackSound=String(L"ghostAttack",11);
	this->m_overrideDeathSound=String(L"ghostDeath",10);
	return this;
}
c_Ghost* c_Ghost::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_Ghost::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Ghost.Update()",14));
}
void c_Ghost::mark(){
	c_Enemy::mark();
	gc_mark_q(m_lastDist);
}
c_Bat::c_Bat(){
}
c_Bat* c_Bat::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	int t_1=t_l;
	if(t_1==1){
		if(c_Shrine::m_warShrineActive){
			t_l=2;
		}
	}else{
		if(t_1==2 || t_1==4){
			if(c_Util::m_IsCharacterActive(8) || c_Util::m_AreAriaOrCodaActive()){
				if(!c_Level::m_isBeastmaster && bb_controller_game_currentLevel!=-3000){
					t_l=1;
				}else{
					if(t_l==2 && !c_Level::m_isTrainingMode && !c_Level::m_isHardcoreMode && bb_controller_game_currentLevel!=-3000 && c_ControllerLevelEditor::m_playingLevel==-1){
						t_l=1;
					}
				}
			}
		}
	}
	this->p_Init3(t_xVal,t_yVal,t_l,String(L"bat",3),String(),-1,-1);
	this->m_overrideAttackSound=String(L"batAttack",9);
	this->m_overrideHitSound=String(L"batHit",6);
	this->m_overrideDeathSound=String(L"batDeath",8);
	return this;
}
c_Bat* c_Bat::m_new2(){
	c_Enemy::m_new();
	return this;
}
bool c_Bat::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Bat.Hit(String, Int, Int, Entity, Bool, Int)",44));
	return false;
}
void c_Bat::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Bat.Update()",12));
}
void c_Bat::mark(){
	c_Enemy::mark();
}
c_SkeletonMage::c_SkeletonMage(){
	m_gustImage=0;
}
c_SkeletonMage* c_SkeletonMage::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	if(c_Shrine::m_warShrineActive){
		t_l=3;
	}
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"skeletonmage",12));
	gc_assign(this->m_gustImage,(new c_Sprite)->m_new2(String(L"particles/wind_gust.png",23),7,1));
	this->m_overrideHitSound=String(L"skeletonHit",11);
	this->m_overrideDeathSound=String(L"skeletonDeath",13);
	this->m_overrideAttackSound=String(L"skeletonAttack",14);
	return this;
}
c_SkeletonMage* c_SkeletonMage::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_SkeletonMage::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"SkeletonMage.Update()",21));
}
void c_SkeletonMage::mark(){
	c_Enemy::mark();
	gc_mark_q(m_gustImage);
}
c_Armadillo::c_Armadillo(){
}
c_Armadillo* c_Armadillo::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	if(c_Shrine::m_warShrineActive && t_l==1){
		t_l=2;
	}
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"armadillo",9));
	this->m_overrideHitSound=String(L"armadilloHit",12);
	this->m_overrideAttackSound=String(L"armadilloAttack",15);
	this->m_overrideDeathSound=String(L"armadilloDeath",14);
	return this;
}
c_Armadillo* c_Armadillo::m_new2(){
	c_Enemy::m_new();
	return this;
}
bool c_Armadillo::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Armadillo.Hit(String, Int, Int, Entity, Bool, Int)",50));
	return false;
}
void c_Armadillo::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Armadillo.Update()",18));
}
void c_Armadillo::mark(){
	c_Enemy::mark();
}
c_Hellhound::c_Hellhound(){
}
c_Hellhound* c_Hellhound::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"hellhound",9));
	this->m_overrideAttackSound=String(L"hellhoundAttack",15);
	this->m_overrideDeathSound=String(L"hellhoundDeath",14);
	this->m_swarmCulprit=true;
	return this;
}
c_Hellhound* c_Hellhound::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_Hellhound::p_Die(){
	if(this->m_enableDeathEffects && this->m_falling){
		c_Level::m_PlaceHotCoalTileAt(this->m_x,this->m_y);
	}
	c_Enemy::p_Die();
}
void c_Hellhound::mark(){
	c_Enemy::mark();
}
c_Yeti::c_Yeti(){
}
c_Yeti* c_Yeti::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"yeti",4));
	this->m_overrideAttackSound=String(L"yetiAttack",10);
	this->m_overrideDeathSound=String(L"yetiDeath",9);
	this->m_swarmCulprit=true;
	return this;
}
c_Yeti* c_Yeti::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_Yeti::p_Die(){
	if(this->m_enableDeathEffects){
		c_Level::m_PlaceIceTileAt(this->m_x,this->m_y);
	}
	c_Enemy::p_Die();
}
void c_Yeti::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Yeti.Update()",13));
}
void c_Yeti::mark(){
	c_Enemy::mark();
}
c_Goblin::c_Goblin(){
	m_lastDist=Array<Float >(4);
}
c_Goblin* c_Goblin::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	if(c_Shrine::m_warShrineActive){
		t_l=2;
	}
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"goblin",6));
	for(int t_i=0;t_i<this->m_lastDist.Length();t_i=t_i+1){
		this->m_lastDist[t_i]=FLOAT(9999.0);
	}
	this->m_overrideAttackSound=String(L"goblinAttack",12);
	this->m_overrideDeathSound=String(L"goblinDeath",11);
	this->m_overrideHitSound=String(L"goblinHit",9);
	this->m_swarmCulprit=true;
	return this;
}
c_Goblin* c_Goblin::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_Goblin::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Goblin.Update()",15));
}
void c_Goblin::mark(){
	c_Enemy::mark();
	gc_mark_q(m_lastDist);
}
c_ElementalBase::c_ElementalBase(){
}
c_ElementalBase* c_ElementalBase::m_new(){
	c_Enemy::m_new();
	return this;
}
void c_ElementalBase::mark(){
	c_Enemy::mark();
}
c_IceElemental::c_IceElemental(){
}
c_IceElemental* c_IceElemental::m_new(int t_xVal,int t_yVal,int t_l){
	c_ElementalBase::m_new();
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"iceelemental",12));
	this->m_overrideAttackSound=String(L"elementalIceAttack",18);
	this->m_overrideHitSound=String(L"elementalIceHit",15);
	this->m_overrideDeathSound=String(L"elementalIceDeath",17);
	return this;
}
c_IceElemental* c_IceElemental::m_new2(){
	c_ElementalBase::m_new();
	return this;
}
void c_IceElemental::mark(){
	c_ElementalBase::mark();
}
c_FireElemental::c_FireElemental(){
}
c_FireElemental* c_FireElemental::m_new(int t_xVal,int t_yVal,int t_l){
	c_ElementalBase::m_new();
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"fireelemental",13));
	this->m_overrideAttackSound=String(L"elementalFireAttack",19);
	this->m_overrideHitSound=String(L"elementalFireHit",16);
	this->m_overrideDeathSound=String(L"elementalFireDeath",18);
	return this;
}
c_FireElemental* c_FireElemental::m_new2(){
	c_ElementalBase::m_new();
	return this;
}
void c_FireElemental::mark(){
	c_ElementalBase::mark();
}
c_Blademaster::c_Blademaster(){
}
c_Blademaster* c_Blademaster::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	if(c_Shrine::m_warShrineActive){
		if(t_l==1){
			t_l=2;
		}
	}
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"blademaster",11));
	this->m_overrideHitSound=String(L"blademasterHit",14);
	this->m_overrideAttackSound=String(L"blademasterAttackNear",21);
	this->m_overrideDeathSound=String(L"blademasterDeath",16);
	return this;
}
c_Blademaster* c_Blademaster::m_new2(){
	c_Enemy::m_new();
	return this;
}
bool c_Blademaster::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Blademaster.Hit(String, Int, Int, Entity, Bool, Int)",52));
	return false;
}
void c_Blademaster::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Blademaster.Update()",20));
}
void c_Blademaster::mark(){
	c_Enemy::mark();
}
c_Harpy::c_Harpy(){
}
c_Harpy* c_Harpy::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"harpy",5));
	this->m_movesRegardlessOfDistance=true;
	this->m_overrideHitSound=String(L"harpyHit",8);
	this->m_overrideDeathSound=String(L"harpyDeath",10);
	this->m_overrideAttackSound=String(L"harpyAttack",11);
	return this;
}
c_Harpy* c_Harpy::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_Harpy::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Harpy.Update()",14));
}
void c_Harpy::mark(){
	c_Enemy::mark();
}
c_Warlock::c_Warlock(){
}
c_Warlock* c_Warlock::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	if(c_Shrine::m_warShrineActive){
		if(t_l==1){
			t_l=2;
		}
	}
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"warlock",7));
	this->m_overrideHitSound=String(L"warlockHit",10);
	this->m_overrideDeathSound=String(L"warlockDeath",12);
	this->m_overrideAttackSound=String(L"warlockAttack",13);
	return this;
}
c_Warlock* c_Warlock::m_new2(){
	c_Enemy::m_new();
	return this;
}
bool c_Warlock::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Warlock.Hit(String, Int, Int, Entity, Bool, Int)",48));
	return false;
}
void c_Warlock::mark(){
	c_Enemy::mark();
}
c_GoblinBomber::c_GoblinBomber(){
	m_dropBomb=true;
}
c_GoblinBomber* c_GoblinBomber::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"goblin_bomber",13));
	this->m_isGentle=true;
	this->m_overrideAttackSound=String(L"goblinAttack",12);
	this->m_overrideDeathSound=String(L"goblinDeath",11);
	return this;
}
c_GoblinBomber* c_GoblinBomber::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_GoblinBomber::p_Die(){
	c_Enemy::p_Die();
	if(this->m_dropBomb){
		if(this->m_health<=0){
			(new c_Bomb)->m_new(this->m_x,this->m_y,0,true,false,String(L"bomb",4));
		}
	}
}
void c_GoblinBomber::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"GoblinBomber.Update()",21));
}
void c_GoblinBomber::mark(){
	c_Enemy::mark();
}
c_ElectricMage::c_ElectricMage(){
}
c_ElectricMage* c_ElectricMage::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	if(c_Shrine::m_warShrineActive){
		t_l=3;
	}
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"electric_mage",13));
	this->m_overrideHitSound=String(L"elecmageHit",11);
	this->m_overrideDeathSound=String(L"elecmageDeath",13);
	this->m_overrideAttackSound=String(L"elecmageAttackMelee",19);
	return this;
}
c_ElectricMage* c_ElectricMage::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_ElectricMage::mark(){
	c_Enemy::mark();
}
c_Devil::c_Devil(){
}
c_Devil* c_Devil::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	if(c_Shrine::m_warShrineActive){
		t_l=2;
	}
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"devil",5));
	this->m_allowDiagonalFlip=true;
	this->m_overrideAttackSound=String(L"devilAttack",11);
	this->m_overrideHitSound=String(L"devilHit",8);
	this->m_overrideDeathSound=String(L"devilDeath",10);
	return this;
}
c_Devil* c_Devil::m_new2(){
	c_Enemy::m_new();
	return this;
}
bool c_Devil::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Devil.Hit(String, Int, Int, Entity, Bool, Int)",46));
	return false;
}
void c_Devil::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Devil.Update()",14));
}
void c_Devil::mark(){
	c_Enemy::mark();
}
c_EvilEye::c_EvilEye(){
}
c_EvilEye* c_EvilEye::m_new(int t_x_,int t_y_,int t_l){
	c_Enemy::m_new();
	if(c_Shrine::m_warShrineActive){
		t_l=2;
	}
	this->p_Init5(t_x_,t_y_,t_l,String(L"evileye",7));
	this->m_image->p_FlipX(false,true);
	if(c_Util::m_RndBool(false)){
		this->m_image->p_FlipX(true,true);
	}
	this->m_overrideAttackSound=String(L"evileyeAttack",13);
	this->m_overrideHitSound=String(L"evileyeHit",10);
	this->m_overrideDeathSound=String(L"evileyeDeath",12);
	return this;
}
c_EvilEye* c_EvilEye::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_EvilEye::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"EvilEye.Update()",16));
}
void c_EvilEye::mark(){
	c_Enemy::mark();
}
c_SpikeTrap::c_SpikeTrap(){
}
c_SpikeTrap* c_SpikeTrap::m_new(int t_xVal,int t_yVal){
	c_Trap::m_new(t_xVal,t_yVal,2);
	this->m_xOff=FLOAT(-4.0);
	this->m_yOff=FLOAT(11.0);
	gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"traps/spiketrap.png",19),34,20,6,c_Image::m_DefaultFlags));
	this->m_image->p_SetZ(FLOAT(-995.0));
	return this;
}
c_SpikeTrap* c_SpikeTrap::m_new2(){
	c_Trap::m_new2();
	return this;
}
void c_SpikeTrap::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"SpikeTrap.Update()",18));
}
void c_SpikeTrap::mark(){
	c_Trap::mark();
}
c_TrapType::c_TrapType(){
}
String c_TrapType::m_ToDisplayName(int t_type){
	int t_1=t_type;
	if(t_1==1){
		return String(L"Bounce Trap",11);
	}else{
		if(t_1==2){
			return String(L"Spike Trap",10);
		}else{
			if(t_1==3){
				return String(L"Trap Door",9);
			}else{
				if(t_1==4){
					return String(L"Confuse Trap",12);
				}else{
					if(t_1==5){
						return String(L"Teleport Trap",13);
					}else{
						if(t_1==6){
							return String(L"Slow Down Trap",14);
						}else{
							if(t_1==7){
								return String(L"Speed Up Trap",13);
							}else{
								if(t_1==8){
									return String(L"Travel Rune",11);
								}else{
									if(t_1==9){
										return String(L"Bomb Trap",9);
									}else{
										if(t_1==10){
											return String(L"Wall Pig",8);
										}else{
											if(t_1==11){
												return String(L"AB Teleport Trap",16);
											}else{
												if(t_1==12){
													return String(L"Switch",6);
												}else{
													if(t_1==13){
														return String(L"Decorative Fire Trap",20);
													}else{
														if(t_1==14){
															return String(L"Scatter Trap",12);
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return String(L"Unknown trap (",14)+String(t_type)+String(L")",1);
}
void c_TrapType::mark(){
	Object::mark();
}
c_SpeedUpTrap::c_SpeedUpTrap(){
}
c_SpeedUpTrap* c_SpeedUpTrap::m_new(int t_xVal,int t_yVal){
	c_Trap::m_new(t_xVal,t_yVal,7);
	this->m_xOff=FLOAT(5.0);
	this->m_yOff=FLOAT(15.0);
	gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"traps/speeduptrap.png",21),14,16,4,c_Image::m_DefaultFlags));
	this->m_image->p_SetZ(FLOAT(-995.0));
	return this;
}
c_SpeedUpTrap* c_SpeedUpTrap::m_new2(){
	c_Trap::m_new2();
	return this;
}
void c_SpeedUpTrap::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"SpeedUpTrap.Update()",20));
}
void c_SpeedUpTrap::mark(){
	c_Trap::mark();
}
c_ConfuseTrap::c_ConfuseTrap(){
}
c_ConfuseTrap* c_ConfuseTrap::m_new(int t_xVal,int t_yVal){
	c_Trap::m_new(t_xVal,t_yVal,4);
	this->m_xOff=FLOAT(5.0);
	this->m_yOff=FLOAT(15.0);
	gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"traps/confusetrap.png",21),14,16,4,c_Image::m_DefaultFlags));
	this->m_image->p_SetZOff(FLOAT(-995.0));
	return this;
}
c_ConfuseTrap* c_ConfuseTrap::m_new2(){
	c_Trap::m_new2();
	return this;
}
void c_ConfuseTrap::mark(){
	c_Trap::mark();
}
c_DeathMetal::c_DeathMetal(){
}
c_DeathMetal* c_DeathMetal::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"deathmetal",10));
	this->m_animOverride=0;
	this->m_overrideHitSound=String(L"deathMetal_hit",14);
	this->m_overrideDeathSound=String(L"deathMetal_death",16);
	this->m_overrideAttackSound=String(L"deathMetal_attack",17);
	if(c_Util::m_IsCharacterActive(5) || c_Util::m_IsCharacterActive(7)){
		this->m_coinsToDrop=1;
	}
	return this;
}
c_DeathMetal* c_DeathMetal::m_new2(){
	c_Enemy::m_new();
	return this;
}
bool c_DeathMetal::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"DeathMetal.Hit(String, Int, Int, Entity, Bool, Int)",51));
	return false;
}
void c_DeathMetal::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"DeathMetal.Update()",19));
}
void c_DeathMetal::mark(){
	c_Enemy::mark();
}
c_EnemyType::c_EnemyType(){
}
void c_EnemyType::mark(){
	Object::mark();
}
c_Slime::c_Slime(){
	m_moveCount=0;
}
c_Slime* c_Slime::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	if(t_l==1 && c_Shrine::m_warShrineActive){
		t_l=c_Util::m_RndIntRange(2,3,false,-1);
	}
	this->p_Init3(t_xVal,t_yVal,t_l,String(L"slime",5),String(),-1,-1);
	this->m_moveCount=c_Util::m_RndIntRangeFromZero(3,true);
	if(m_level==3){
		if(c_Level::m_IsWallAt2(t_xVal+1,t_yVal) || c_Level::m_IsWallAt2(t_xVal+1,t_yVal+1)){
			if(c_Level::m_IsWallAt2(t_xVal,t_yVal-1) || c_Level::m_IsWallAt2(t_xVal+1,t_yVal-1)){
				if(c_Level::m_IsWallAt2(t_xVal-1,t_yVal) || c_Level::m_IsWallAt2(t_xVal-1,t_yVal-1)){
					if(!c_Level::m_IsWallAt2(t_xVal,t_yVal+1) && !c_Level::m_IsWallAt2(t_xVal-1,t_yVal+1)){
						this->m_moveCount=1;
					}
				}else{
					this->m_moveCount=2;
				}
			}else{
				this->m_moveCount=3;
			}
		}else{
			this->m_moveCount=0;
		}
	}else{
		if(!c_Level::m_IsWallAt2(t_xVal,t_yVal+1)){
			this->m_moveCount=1;
		}
		if(!c_Level::m_IsWallAt2(t_xVal,t_yVal-1)){
			this->m_moveCount=0;
		}
	}
	if(this->m_level==2){
		this->m_image->p_FlipX(false,true);
		if(c_Util::m_RndBool(false)){
			this->m_image->p_FlipX(true,true);
		}
	}
	this->m_movesRegardlessOfDistance=true;
	this->m_overrideHitSound=String(L"slimeHit",8);
	this->m_overrideAttackSound=String(L"slimeAttack",11);
	this->m_overrideDeathSound=String(L"slimeDeath",10);
	return this;
}
c_Slime* c_Slime::m_new2(){
	c_Enemy::m_new();
	return this;
}
bool c_Slime::p_CanBeLord(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Slime.CanBeLord()",17));
	return false;
}
void c_Slime::p_Die(){
	if(this->m_enableDeathEffects){
		if(!this->m_falling){
			int t_1=this->m_level;
			if(t_1==4){
				c_Level::m_PlaceIceTileAt(this->m_x,this->m_y);
			}else{
				if(t_1==5){
					c_Level::m_PlaceHotCoalTileAt(this->m_x,this->m_y);
				}
			}
		}
	}
	c_Enemy::p_Die();
}
void c_Slime::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Slime.Update()",14));
}
void c_Slime::mark(){
	c_Enemy::mark();
}
c_Skeleton::c_Skeleton(){
}
c_Skeleton* c_Skeleton::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	if(c_Shrine::m_warShrineActive){
		t_l=bb_math_Max(t_l,3);
	}
	this->p_Init3(t_xVal,t_yVal,t_l,String(L"skeleton",8),String(),-1,-1);
	this->m_overrideHitSound=String(L"skeletonHit",11);
	this->m_overrideDeathSound=String(L"skeletonDeath",13);
	this->m_overrideAttackSound=String(L"skeletonAttack",14);
	if(c_Audio::m_debugEnablePlaceholders && t_l==4){
		this->m_overrideDeathSound=String(L"iceBreak",8);
	}
	if(this->m_isFormationDancer){
		this->m_beatsPerMove=4;
		this->m_currentMoveDelay=4;
	}
	return this;
}
c_Skeleton* c_Skeleton::m_new2(){
	c_Enemy::m_new();
	return this;
}
bool c_Skeleton::p_CanBeLord(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Skeleton.CanBeLord()",20));
	return false;
}
bool c_Skeleton::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Skeleton.Hit(String, Int, Int, Entity, Bool, Int)",49));
	return false;
}
void c_Skeleton::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Skeleton.Update()",17));
}
void c_Skeleton::mark(){
	c_Enemy::mark();
}
c_EnemyClamper::c_EnemyClamper(){
}
c_EnemyClamper* c_EnemyClamper::m_new(){
	c_Enemy::m_new();
	return this;
}
void c_EnemyClamper::mark(){
	c_Enemy::mark();
}
c_Monkey::c_Monkey(){
	m_startingHealth=0;
	m_startingCoinsToDrop=0;
	m_clampedOnto=0;
}
void c_Monkey::p_Die(){
	if(this->m_clampedOnto!=0 && this->m_clampedOnto->m_clampedEnemy==(this)){
		this->m_clampedOnto->m_clampedEnemy=0;
	}
	c_Enemy::p_Die();
}
c_Monkey* c_Monkey::m_new(int t_xVal,int t_yVal,int t_l){
	c_EnemyClamper::m_new();
	if(c_Shrine::m_warShrineActive){
		int t_1=t_l;
		if(t_1==1){
			t_l=2;
		}else{
			if(t_1==3){
				t_l=4;
			}
		}
	}
	this->p_Init3(t_xVal,t_yVal,t_l,String(L"monkey",6),String(),-1,-1);
	this->m_overrideDeathSound=String(L"monkeyDeath",11);
	if(t_l==4){
		this->m_overrideDeathSound=String(L"magicMonkeyDeath",16);
	}
	this->m_startingHealth=this->m_healthMax;
	this->m_startingCoinsToDrop=this->m_coinsToDrop;
	if(c_Util::m_IsCharacterActive(6) || c_Util::m_AreAriaOrCodaActive() && bb_controller_game_currentZone==4){
		this->m_coinsToDrop=0;
		this->p_Die();
	}
	return this;
}
c_Monkey* c_Monkey::m_new2(){
	c_EnemyClamper::m_new();
	return this;
}
bool c_Monkey::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Monkey.Hit(String, Int, Int, Entity, Bool, Int)",47));
	return false;
}
void c_Monkey::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Monkey.Update()",15));
}
void c_Monkey::mark(){
	c_EnemyClamper::mark();
	gc_mark_q(m_clampedOnto);
}
Array<int > bb_controller_game_beatData;
c_Enumerator9::c_Enumerator9(){
	m__list=0;
	m__curr=0;
}
c_Enumerator9* c_Enumerator9::m_new(c_List13* t_list){
	gc_assign(m__list,t_list);
	gc_assign(m__curr,t_list->m__head->m__succ);
	return this;
}
c_Enumerator9* c_Enumerator9::m_new2(){
	return this;
}
bool c_Enumerator9::p_HasNext(){
	while(m__curr->m__succ->m__pred!=m__curr){
		gc_assign(m__curr,m__curr->m__succ);
	}
	return m__curr!=m__list->m__head;
}
c_MinibossTileData* c_Enumerator9::p_NextObject(){
	c_MinibossTileData* t_data=m__curr->m__data;
	gc_assign(m__curr,m__curr->m__succ);
	return t_data;
}
void c_Enumerator9::mark(){
	Object::mark();
	gc_mark_q(m__list);
	gc_mark_q(m__curr);
}
String bb_item_GetResourceCoinType(int t_amount){
	return String(L"resource_coin",13)+String(bb_math_Clamp(t_amount,1,10));
}
c_List20::c_List20(){
	m__head=((new c_HeadNode20)->m_new());
}
c_List20* c_List20::m_new(){
	return this;
}
c_Node37* c_List20::p_AddLast20(c_Item* t_data){
	return (new c_Node37)->m_new(m__head,m__head->m__pred,t_data);
}
c_List20* c_List20::m_new2(Array<c_Item* > t_data){
	Array<c_Item* > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		c_Item* t_t=t_[t_2];
		t_2=t_2+1;
		p_AddLast20(t_t);
	}
	return this;
}
c_Enumerator10* c_List20::p_ObjectEnumerator(){
	return (new c_Enumerator10)->m_new(this);
}
bool c_List20::p_Equals15(c_Item* t_lhs,c_Item* t_rhs){
	return t_lhs==t_rhs;
}
int c_List20::p_RemoveEach10(c_Item* t_value){
	c_Node37* t_node=m__head->m__succ;
	while(t_node!=m__head){
		c_Node37* t_succ=t_node->m__succ;
		if(p_Equals15(t_node->m__data,t_value)){
			t_node->p_Remove();
		}
		t_node=t_succ;
	}
	return 0;
}
void c_List20::mark(){
	Object::mark();
	gc_mark_q(m__head);
}
c_Node37::c_Node37(){
	m__succ=0;
	m__pred=0;
	m__data=0;
}
c_Node37* c_Node37::m_new(c_Node37* t_succ,c_Node37* t_pred,c_Item* t_data){
	gc_assign(m__succ,t_succ);
	gc_assign(m__pred,t_pred);
	gc_assign(m__succ->m__pred,this);
	gc_assign(m__pred->m__succ,this);
	gc_assign(m__data,t_data);
	return this;
}
c_Node37* c_Node37::m_new2(){
	return this;
}
int c_Node37::p_Remove(){
	gc_assign(m__succ->m__pred,m__pred);
	gc_assign(m__pred->m__succ,m__succ);
	return 0;
}
void c_Node37::mark(){
	Object::mark();
	gc_mark_q(m__succ);
	gc_mark_q(m__pred);
	gc_mark_q(m__data);
}
c_HeadNode20::c_HeadNode20(){
}
c_HeadNode20* c_HeadNode20::m_new(){
	c_Node37::m_new2();
	gc_assign(m__succ,(this));
	gc_assign(m__pred,(this));
	return this;
}
void c_HeadNode20::mark(){
	c_Node37::mark();
}
c_Enumerator10::c_Enumerator10(){
	m__list=0;
	m__curr=0;
}
c_Enumerator10* c_Enumerator10::m_new(c_List20* t_list){
	gc_assign(m__list,t_list);
	gc_assign(m__curr,t_list->m__head->m__succ);
	return this;
}
c_Enumerator10* c_Enumerator10::m_new2(){
	return this;
}
bool c_Enumerator10::p_HasNext(){
	while(m__curr->m__succ->m__pred!=m__curr){
		gc_assign(m__curr,m__curr->m__succ);
	}
	return m__curr!=m__list->m__head;
}
c_Item* c_Enumerator10::p_NextObject(){
	c_Item* t_data=m__curr->m__data;
	gc_assign(m__curr,m__curr->m__succ);
	return t_data;
}
void c_Enumerator10::mark(){
	Object::mark();
	gc_mark_q(m__list);
	gc_mark_q(m__curr);
}
c_Bomb::c_Bomb(){
	m_player=0;
	m_isBig=false;
	m_beatsUntilExplosion=-1;
	m_damageSource=String(L"bomb",4);
	m_explosionImg=0;
}
c_List40* c_Bomb::m_bombList;
c_Bomb* c_Bomb::m_new(int t_xVal,int t_yVal,c_Player* t_dropper,bool t_playLitSound,bool t_big,String t_dmgSource){
	c_Item::m_new(t_xVal,t_yVal,String(L"bomb",4),false,-1,false);
	this->m_pickupable=false;
	gc_assign(this->m_player,t_dropper);
	this->m_isBig=t_big;
	this->m_beatsUntilExplosion=3;
	this->m_damageSource=t_dmgSource;
	gc_assign(this->m_explosionImg,(new c_Sprite)->m_new2(String(L"items/3x3_explosion.png",23),8,c_Image::m_DefaultFlags));
	this->m_explosionImg->p_SetZOff(FLOAT(1000.0));
	if(t_playLitSound){
		bb_logger_Debug->p_TraceNotImplemented(String(L"Bomb.New(Int, Int, Player, Bool, Bool, String) (Audio)",54));
	}
	m_bombList->p_AddLast40(this);
	return this;
}
c_Bomb* c_Bomb::m_new2(){
	c_Item::m_new2();
	return this;
}
void c_Bomb::p_Die(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Bomb.Die()",10));
}
bool c_Bomb::p_IsVisible(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Bomb.IsVisible()",16));
	return false;
}
void c_Bomb::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Bomb.Update()",13));
}
void c_Bomb::mark(){
	c_Item::mark();
	gc_mark_q(m_player);
	gc_mark_q(m_explosionImg);
}
c_List21::c_List21(){
	m__head=((new c_HeadNode21)->m_new());
}
c_List21* c_List21::m_new(){
	return this;
}
c_Node38* c_List21::p_AddLast21(c_Sprite* t_data){
	return (new c_Node38)->m_new(m__head,m__head->m__pred,t_data);
}
c_List21* c_List21::m_new2(Array<c_Sprite* > t_data){
	Array<c_Sprite* > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		c_Sprite* t_t=t_[t_2];
		t_2=t_2+1;
		p_AddLast21(t_t);
	}
	return this;
}
c_Enumerator11* c_List21::p_ObjectEnumerator(){
	return (new c_Enumerator11)->m_new(this);
}
void c_List21::mark(){
	Object::mark();
	gc_mark_q(m__head);
}
c_Node38::c_Node38(){
	m__succ=0;
	m__pred=0;
	m__data=0;
}
c_Node38* c_Node38::m_new(c_Node38* t_succ,c_Node38* t_pred,c_Sprite* t_data){
	gc_assign(m__succ,t_succ);
	gc_assign(m__pred,t_pred);
	gc_assign(m__succ->m__pred,this);
	gc_assign(m__pred->m__succ,this);
	gc_assign(m__data,t_data);
	return this;
}
c_Node38* c_Node38::m_new2(){
	return this;
}
void c_Node38::mark(){
	Object::mark();
	gc_mark_q(m__succ);
	gc_mark_q(m__pred);
	gc_mark_q(m__data);
}
c_HeadNode21::c_HeadNode21(){
}
c_HeadNode21* c_HeadNode21::m_new(){
	c_Node38::m_new2();
	gc_assign(m__succ,(this));
	gc_assign(m__pred,(this));
	return this;
}
void c_HeadNode21::mark(){
	c_Node38::mark();
}
c_Enumerator11::c_Enumerator11(){
	m__list=0;
	m__curr=0;
}
c_Enumerator11* c_Enumerator11::m_new(c_List21* t_list){
	gc_assign(m__list,t_list);
	gc_assign(m__curr,t_list->m__head->m__succ);
	return this;
}
c_Enumerator11* c_Enumerator11::m_new2(){
	return this;
}
bool c_Enumerator11::p_HasNext(){
	while(m__curr->m__succ->m__pred!=m__curr){
		gc_assign(m__curr,m__curr->m__succ);
	}
	return m__curr!=m__list->m__head;
}
c_Sprite* c_Enumerator11::p_NextObject(){
	c_Sprite* t_data=m__curr->m__data;
	gc_assign(m__curr,m__curr->m__succ);
	return t_data;
}
void c_Enumerator11::mark(){
	Object::mark();
	gc_mark_q(m__list);
	gc_mark_q(m__curr);
}
c_Zombie::c_Zombie(){
	m_facing=-1;
}
c_Zombie* c_Zombie::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	this->p_Init3(t_xVal,t_yVal,t_l,String(L"zombie",6),String(),-1,-1);
	this->m_movesRegardlessOfDistance=true;
	this->m_facing=c_Util::m_RndIntRangeFromZero(3,true);
	this->m_overrideAttackSound=String(L"zombieAttack",12);
	this->m_overrideDeathSound=String(L"zombieDeath",11);
	return this;
}
c_Zombie* c_Zombie::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_Zombie::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Zombie.Update()",15));
}
void c_Zombie::mark(){
	c_Enemy::mark();
}
c_Wraith::c_Wraith(){
	m_crySound=String();
}
c_Wraith* c_Wraith::m_theCursedWraith;
void c_Wraith::p_Die(){
	if(m_theCursedWraith==this){
		m_theCursedWraith=0;
	}
	c_Enemy::p_Die();
}
c_Wraith* c_Wraith::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	this->p_Init3(t_xVal,t_yVal,t_l,String(L"wraith",6),String(),-1,-1);
	if(t_l==2){
		this->m_isGentle=true;
	}
	this->m_invisible=true;
	this->m_collides=false;
	this->m_blink_MIN=120;
	this->m_blink_MAX=240;
	this->m_blink_DUR=10;
	int t_1=t_l;
	if(t_1==1){
		this->m_overrideAttackSound=String(L"wraithAttack",12);
		this->m_overrideDeathSound=String(L"wraithDeath",11);
		this->m_crySound=String(L"wraithCry",9);
	}else{
		this->m_overrideDeathSound=String(L"cursewraithDeath",16);
		this->m_crySound=String(L"cursewraithCry",14);
	}
	this->m_image->p_SetZOff(FLOAT(18.0));
	this->m_isWraithLike=true;
	if(t_l==2){
		gc_assign(m_theCursedWraith,this);
	}
	if(c_Util::m_IsCharacterActive(4)){
		this->m_coinsToDrop=0;
		this->p_Die();
	}
	return this;
}
c_Wraith* c_Wraith::m_new2(){
	c_Enemy::m_new();
	return this;
}
bool c_Wraith::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Wraith.Hit(String, Int, Int, Entity, Bool, Int)",47));
	return false;
}
void c_Wraith::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Wraith.Update()",15));
}
void c_Wraith::mark(){
	c_Enemy::mark();
}
c_TrapChest::c_TrapChest(){
	m_contents=String(L"no_item",7);
	m_itemDropped=false;
}
void c_TrapChest::p_DetermineContents(){
	if(this->m_contents==String(L"no_item",7)){
		if(this->m_level>=6){
			this->m_contents=c_Item::m_GetRandomItemInClass(String(),bb_controller_game_currentLevel,String(L"urnChance",9),0,false,String(),false);
		}else{
			if(this->m_level>=4){
				this->m_contents=String(L"bomb",4);
			}else{
				if(this->m_level>=2){
					this->m_contents=c_Item::m_GetRandomItemInClass(String(),bb_controller_game_currentLevel+1,String(L"lockedChestChance",17),0,false,String(),false);
				}else{
					this->m_contents=c_Item::m_GetRandomItemInClass(String(),bb_controller_game_currentLevel+1,String(L"chestChance",11),0,false,String(),false);
				}
			}
		}
	}
}
c_TrapChest* c_TrapChest::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"trapchest",9));
	this->m_stealth=true;
	this->m_containsItem=true;
	this->m_overrideAttackSound=String(L"mimicAttack",11);
	this->m_overrideDeathSound=String(L"mimicDeath",10);
	this->m_overrideMoveSound=String(L"mimicChase",10);
	if(c_Level::m_randSeed!=-1){
		this->p_DetermineContents();
	}
	return this;
}
c_TrapChest* c_TrapChest::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_TrapChest::p_DropItem(){
	if(!this->m_itemDropped){
		if(!c_Level::m_isTrainingMode){
			this->p_DetermineContents();
			if(this->m_contents!=String(L"no_item",7)){
				(new c_Item)->m_new(this->m_x,this->m_y,this->m_contents,false,-1,false);
			}
		}
		this->m_itemDropped=true;
	}
}
void c_TrapChest::p_Die(){
	if(!this->m_dead){
		this->p_DropItem();
		c_Enemy::p_Die();
	}
}
bool c_TrapChest::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"TrapChest.Hit(String, Int, Int, Entity, Bool, Int)",50));
	return false;
}
void c_TrapChest::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"TrapChest.Update()",18));
}
void c_TrapChest::mark(){
	c_Enemy::mark();
}
c_StandardItemPredicate::c_StandardItemPredicate(){
	m_itemClass=String();
	m_chestColor=0;
	m_itemSlot=String();
}
c_StandardItemPredicate* c_StandardItemPredicate::m_new(String t_itemClass_,int t_chestColor_,String t_itemSlot_){
	this->m_itemClass=t_itemClass_;
	this->m_chestColor=t_chestColor_;
	this->m_itemSlot=t_itemSlot_;
	return this;
}
c_StandardItemPredicate* c_StandardItemPredicate::m_new2(){
	return this;
}
bool c_StandardItemPredicate::p_Call(c_XMLNode* t_n){
	if(this->m_itemClass!=String()){
		if(!c_Item::m_IsItemOfClass(t_n,this->m_itemClass)){
			return false;
		}
	}
	if(this->m_itemSlot!=String()){
		String t_slot=t_n->p_GetAttribute5(String(L"slot",4),String());
		if(t_slot.ToUpper()!=this->m_itemSlot.ToUpper()){
			return false;
		}
	}
	if(this->m_chestColor!=0){
		String t_name=t_n->p_GetAttribute5(String(L"name",4),String());
		if(!c_Chest::m_IsItemAppropriateForChestColor(t_name,this->m_chestColor)){
			return false;
		}
	}
	return true;
}
void c_StandardItemPredicate::mark(){
	Object::mark();
}
c_ArmoredSkeleton::c_ArmoredSkeleton(){
}
c_ArmoredSkeleton* c_ArmoredSkeleton::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	if(c_Shrine::m_warShrineActive){
		t_l=bb_math_Min(3,t_l);
	}
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"armoredskeleton",15));
	this->m_animOverride=0;
	this->m_overrideHitSound=String(L"skeletonHit",11);
	this->m_overrideDeathSound=String(L"skeletonDeath",13);
	this->m_overrideAttackSound=String(L"skeletonAttack",14);
	if(c_Audio::m_debugEnablePlaceholders && t_l==4){
		this->m_overrideDeathSound=String(L"iceBreak",8);
	}
	if(this->m_isFormationDancer){
		this->m_beatsPerMove=4;
		this->m_currentMoveDelay=4;
	}
	return this;
}
c_ArmoredSkeleton* c_ArmoredSkeleton::m_new2(){
	c_Enemy::m_new();
	return this;
}
bool c_ArmoredSkeleton::p_CanBeLord(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ArmoredSkeleton.CanBeLord()",27));
	return false;
}
bool c_ArmoredSkeleton::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ArmoredSkeleton.Hit(String, Int, Int, Entity, Bool, Int)",56));
	return false;
}
void c_ArmoredSkeleton::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ArmoredSkeleton.Update()",24));
}
void c_ArmoredSkeleton::mark(){
	c_Enemy::mark();
}
c_Mushroom::c_Mushroom(){
}
c_Mushroom* c_Mushroom::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	if(c_Shrine::m_warShrineActive){
		t_l=2;
	}
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"mushroom",8));
	this->m_overrideHitSound=String(L"mushroomHit",11);
	this->m_overrideDeathSound=String(L"mushroomDeath",13);
	return this;
}
c_Mushroom* c_Mushroom::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_Mushroom::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Mushroom.Update()",17));
}
void c_Mushroom::mark(){
	c_Enemy::mark();
}
c_Golem::c_Golem(){
}
c_Golem* c_Golem::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	if(c_Shrine::m_warShrineActive && t_l==1){
		t_l=2;
	}
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"golem",5));
	this->m_overrideAttackSound=String(L"golemAttack",11);
	this->m_overrideHitSound=String(L"golemHit",8);
	this->m_overrideDeathSound=String(L"golemDeath",10);
	this->m_overrideMoveSound=String(L"golemChase",10);
	return this;
}
c_Golem* c_Golem::m_new2(){
	c_Enemy::m_new();
	return this;
}
bool c_Golem::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Golem.Hit(String, Int, Int, Entity, Bool, Int)",46));
	return false;
}
void c_Golem::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Golem.Update()",14));
}
void c_Golem::mark(){
	c_Enemy::mark();
}
c_Clone::c_Clone(){
}
c_Clone* c_Clone::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	int t_1=bb_controller_game_players[0]->m_characterID;
	if(t_1==2){
		this->p_Init4(t_xVal,t_yVal,t_l,String(L"clone",5),String(L"entities/clone_aria.png",23));
	}else{
		if(t_1==9){
			this->p_Init4(t_xVal,t_yVal,t_l,String(L"clone",5),String(L"entities/clone_bard.png",23));
		}else{
			if(t_1==5){
				this->p_Init4(t_xVal,t_yVal,t_l,String(L"clone",5),String(L"entities/clone_monk.png",23));
			}else{
				if(t_1==8){
					this->p_Init4(t_xVal,t_yVal,t_l,String(L"clone",5),String(L"entities/clone_bolt.png",23));
				}else{
					if(t_1==1){
						this->p_Init3(t_xVal,t_yVal,t_l,String(L"clone",5),String(L"entities/clone_melody.png",25),19,23);
					}else{
						if(t_1==4){
							this->p_Init3(t_xVal,t_yVal,t_l,String(L"clone",5),String(L"entities/clone_eli.png",22),26,26);
						}else{
							if(t_1==3){
								this->p_Init3(t_xVal,t_yVal,t_l,String(L"clone",5),String(L"entities/clone_dorian.png",25),25,26);
							}else{
								if(t_1==6){
									this->p_Init3(t_xVal,t_yVal,t_l,String(L"clone",5),String(L"entities/clone_dove.png",23),20,27);
								}else{
									if(t_1==7){
										this->p_Init3(t_xVal,t_yVal,t_l,String(L"clone",5),String(L"entities/clone_coda.png",23),26,29);
									}else{
										if(t_1==10){
											this->p_Init3(t_xVal,t_yVal,t_l,String(L"clone",5),String(L"entities/clone_nocturna.png",27),21,26);
										}else{
											if(t_1==11){
												this->p_Init3(t_xVal,t_yVal,t_l,String(L"clone",5),String(L"entities/clone_diamond.png",26),24,25);
											}else{
												if(t_1==14){
													this->p_Init3(t_xVal,t_yVal,t_l,String(L"clone",5),String(L"entities/clone_reaper.png",25),19,25);
												}else{
													if(t_1==13){
														this->p_Init3(t_xVal,t_yVal,t_l,String(L"clone",5),String(L"entities/clone_tempo.png",24),19,24);
													}else{
														if(t_1==12){
															this->p_Init3(t_xVal,t_yVal,t_l,String(L"clone",5),String(L"entities/clone_mary.png",23),19,25);
														}else{
															this->p_Init5(t_xVal,t_yVal,t_l,String(L"clone",5));
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	this->m_overrideAttackSound=String(L"cloneAttack",11);
	this->m_overrideDeathSound=String(L"cloneDeath",10);
	return this;
}
c_Clone* c_Clone::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_Clone::mark(){
	c_Enemy::mark();
}
c_TarMonster::c_TarMonster(){
	m_image2=0;
	m_homeX=0;
	m_homeY=0;
	m_startingCoinsToDrop=0;
	m_clampedOnto=0;
}
c_TarMonster* c_TarMonster::m_new(int t_xVal,int t_yVal,int t_l){
	c_EnemyClamper::m_new();
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"tarmonster",10));
	this->m_stealth=true;
	c_XMLNode* t_tarMonsterNode=c_Enemy::m_GetEnemyXML(String(L"tarmonster",10),t_l);
	c_XMLNode* t_spritesheetNode=t_tarMonsterNode->p_GetChild2(String(L"spritesheet",11),false);
	String t_path=t_spritesheetNode->p_value();
	int t_frameW=t_spritesheetNode->p_GetAttribute3(String(L"frameW",6),0);
	int t_frameH=t_spritesheetNode->p_GetAttribute3(String(L"frameH",6),0);
	int t_numFrames=t_spritesheetNode->p_GetAttribute3(String(L"numFrames",9),1);
	gc_assign(this->m_image2,(new c_Sprite)->m_new(t_path,t_frameW,t_frameH,t_numFrames,c_Image::m_DefaultFlags));
	this->m_image2->p_SetFrame(2);
	this->m_homeX=t_xVal;
	this->m_homeY=t_yVal;
	this->m_overrideAttackSound=String(L"tarMonsterAttack",16);
	this->m_overrideDeathSound=String(L"tarMonsterDeath",15);
	this->m_overrideMoveSound=String(L"tarMonsterChase",15);
	this->m_startingCoinsToDrop=this->m_coinsToDrop;
	return this;
}
c_TarMonster* c_TarMonster::m_new2(){
	c_EnemyClamper::m_new();
	return this;
}
void c_TarMonster::p_Die(){
	if(this->m_clampedOnto!=0 && this->m_clampedOnto->m_clampedEnemy==(this)){
		this->m_clampedOnto->m_clampedEnemy=0;
	}
	if(this->m_enableDeathEffects){
		c_Point* t_exitValue=c_Level::m_GetExitValue(this->m_x,this->m_y);
		if(t_exitValue->m_x==-4){
			if(c_Level::m_IsFloorAt(this->m_x,this->m_y)){
				c_Level::m_PlaceTileRemovingExistingTiles(this->m_x,this->m_y,8,false,-1,false);
				c_Trap* t_trapAtDeath=c_Trap::m_GetTrapAt(this->m_x,this->m_y);
				if(t_trapAtDeath!=0 && !t_trapAtDeath->m_indestructible){
					t_trapAtDeath->p_Die();
				}
			}
		}
	}
	c_Enemy::p_Die();
}
void c_TarMonster::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"TarMonster.Update()",19));
}
void c_TarMonster::mark(){
	c_EnemyClamper::mark();
	gc_mark_q(m_image2);
	gc_mark_q(m_clampedOnto);
}
c_Mole::c_Mole(){
	m_currentDirt=0;
}
void c_Mole::p_UnoccupyDirt(){
	if(this->m_currentDirt!=0){
		this->m_currentDirt->p_Unoccupy();
		this->m_currentDirt=0;
	}
}
void c_Mole::p_PutDirt(){
	if(this->m_currentDirt==0 || this->m_x!=this->m_currentDirt->m_x || this->m_y!=this->m_currentDirt->m_y){
		this->p_UnoccupyDirt();
		gc_assign(this->m_currentDirt,(new c_MoleDirt)->m_new(this->m_x,this->m_y));
	}
}
c_Mole* c_Mole::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"mole",4));
	this->m_animOverride=0;
	this->m_overrideAttackSound=String(L"moleAttack",10);
	this->m_overrideDeathSound=String(L"moleDeath",9);
	if(!c_Level::m_isLevelEditor){
		this->p_PutDirt();
	}
	if(c_Util::m_IsCharacterActive(4)){
		this->m_coinsToDrop=0;
		this->p_Die();
	}
	return this;
}
c_Mole* c_Mole::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_Mole::p_Delete(){
	this->p_UnoccupyDirt();
	c_Enemy::p_Delete();
}
bool c_Mole::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Mole.Hit(String, Int, Int, Entity, Bool, Int)",45));
	return false;
}
void c_Mole::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Mole.Update()",13));
}
void c_Mole::mark(){
	c_Enemy::mark();
	gc_mark_q(m_currentDirt);
}
c_MoleDirt::c_MoleDirt(){
	m_occupied=true;
}
void c_MoleDirt::p_Unoccupy(){
	this->m_occupied=false;
}
c_MoleDirt* c_MoleDirt::m_new(int t_xVal,int t_yVal){
	c_Entity::m_new();
	this->m_x=t_xVal;
	this->m_y=t_yVal;
	gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"entities/mole_dirt.png",22),24,24,2,c_Image::m_DefaultFlags));
	this->m_image->p_SetZ(FLOAT(-997.0));
	int t_particleSystemX=this->m_x*24+12;
	int t_particleSystemY=this->m_y*24+24;
	(new c_ParticleSystem)->m_new(t_particleSystemX,t_particleSystemY,c_ParticleSystemData::m_MOLE_DIG,-1,String());
	return this;
}
c_MoleDirt* c_MoleDirt::m_new2(){
	c_Entity::m_new();
	return this;
}
bool c_MoleDirt::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"MoleDirt.Hit(String, Int, Int, Entity, Bool, Int)",49));
	return false;
}
void c_MoleDirt::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"MoleDirt.Update()",17));
}
void c_MoleDirt::mark(){
	c_Entity::mark();
}
c_ParticleSystemData::c_ParticleSystemData(){
}
c_ParticleSystemData* c_ParticleSystemData::m_MOLE_DIG;
c_ParticleSystemData* c_ParticleSystemData::m_WATER_SPLASH_IN;
c_ParticleSystemData* c_ParticleSystemData::m_TAR_SPLASH_IN;
c_ParticleSystemData* c_ParticleSystemData::m_GEYSER;
void c_ParticleSystemData::mark(){
	Object::mark();
}
c_Wight::c_Wight(){
}
c_Wight* c_Wight::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"wight",5));
	this->m_invisible=true;
	this->m_collides=false;
	this->m_blink_MIN=120;
	this->m_blink_MAX=240;
	this->m_blink_DUR=10;
	this->m_overrideAttackSound=String(L"wightAttack",11);
	this->m_overrideDeathSound=String(L"wightDeath",10);
	this->m_image->p_SetZOff(FLOAT(18.0));
	this->m_isWraithLike=true;
	if(c_Util::m_IsCharacterActive(4)){
		this->m_coinsToDrop=0;
		this->p_Die();
	}
	return this;
}
c_Wight* c_Wight::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_Wight::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Wight.Update()",14));
}
void c_Wight::mark(){
	c_Enemy::mark();
}
c_FakeWall::c_FakeWall(){
	m_goldDropped=false;
}
c_FakeWall* c_FakeWall::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"fakewall",8));
	this->m_stealth=true;
	if(this->m_level==2){
		this->m_containsItem=true;
	}
	this->m_overrideMoveSound=String(L"wallMonsterChase",16);
	this->m_overrideDeathSound=String(L"wallMonsterDeath",16);
	this->m_overrideHitSound=String(L"wallMonsterHit",14);
	this->m_overrideAttackSound=String(L"wallMonsterAttack",17);
	return this;
}
c_FakeWall* c_FakeWall::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_FakeWall::p_DropItem(){
	if(!c_Level::m_isTrainingMode || this->m_level==2 && !this->m_goldDropped){
		this->m_goldDropped=true;
		(new c_Item)->m_new(this->m_x,this->m_y,String(L"resource_coin10",15),false,-1,false);
	}
}
void c_FakeWall::p_Die(){
	this->p_DropItem();
	c_Enemy::p_Die();
}
void c_FakeWall::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"FakeWall.Update()",17));
}
void c_FakeWall::mark(){
	c_Enemy::mark();
}
c_MushroomLight::c_MushroomLight(){
	m_isExploding=false;
	m_explosionImg=0;
}
void c_MushroomLight::p_InitMushroom(int t_xVal,int t_yVal,int t_l,bool t_forceNonExploding,bool t_forceExploding){
	int t_explodingRoll=c_Util::m_RndIntRangeFromZero(25,true);
	if(t_explodingRoll==0){
		this->m_isExploding=true;
	}
	if(t_forceExploding){
		this->m_isExploding=true;
	}
	if(bb_controller_game_currentLevel>2){
		int t_explodingRoll2=c_Util::m_RndIntRangeFromZero(25,true);
		if(t_explodingRoll2==0){
			this->m_isExploding=true;
		}
	}
	if(t_forceNonExploding){
		this->m_isExploding=false;
	}
	if(this->m_isExploding){
		this->p_Init3(t_xVal,t_yVal,t_l,String(L"mushroom_exploding",18),String(),-1,-1);
	}else{
		this->p_Init3(t_xVal,t_yVal,t_l,String(L"mushroom_light",14),String(),-1,-1);
	}
	bool t_flipXRoll=c_Util::m_RndBool(true);
	if(t_flipXRoll){
		this->m_image->p_FlipX(true,true);
	}
	bool t_animOverrideRoll=c_Util::m_RndBool(true);
	if(t_animOverrideRoll){
		this->m_animOverride=1;
	}
	this->p_ActivateLight(FLOAT(0.5),FLOAT(3.0));
	this->m_overrideDeathSound=String(L"mushroomLightHit",16);
	gc_assign(this->m_explosionImg,(new c_Sprite)->m_new2(String(L"items/3x3_explosion.png",23),8,c_Image::m_DefaultFlags));
	this->m_explosionImg->p_SetZOff(FLOAT(1000.0));
	if(c_Util::m_IsCharacterActive(5) || c_Util::m_IsCharacterActive(7)){
		this->m_coinsToDrop=1;
	}
}
c_MushroomLight* c_MushroomLight::m_new(int t_xVal,int t_yVal,int t_l,bool t_forceNonExploding,bool t_forceExploding){
	c_Enemy::m_new();
	this->p_InitMushroom(t_xVal,t_yVal,t_l,t_forceNonExploding,t_forceExploding);
	return this;
}
c_MushroomLight* c_MushroomLight::m_new2(int t_xVal,int t_yVal,int t_l,bool t_forceNonExploding){
	c_Enemy::m_new();
	this->p_InitMushroom(t_xVal,t_yVal,t_l,t_forceNonExploding,false);
	return this;
}
c_MushroomLight* c_MushroomLight::m_new3(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	this->p_InitMushroom(t_xVal,t_yVal,t_l,false,false);
	return this;
}
c_MushroomLight* c_MushroomLight::m_new4(){
	c_Enemy::m_new();
	return this;
}
bool c_MushroomLight::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"MushroomLight.Hit(String, Int, Int, Entity, Bool, Int)",54));
	return false;
}
void c_MushroomLight::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"MushroomLight.Update()",22));
}
void c_MushroomLight::mark(){
	c_Enemy::mark();
	gc_mark_q(m_explosionImg);
}
c_SkeletonKnight::c_SkeletonKnight(){
}
c_SkeletonKnight* c_SkeletonKnight::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	if(c_Shrine::m_warShrineActive){
		t_l=bb_math_Max(3,t_l);
	}
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"skeletonknight",14));
	this->m_enableTell=false;
	this->m_swarmCulprit=true;
	this->m_overrideHitSound=String(L"skeletonKnightDeath",19);
	this->m_overrideDeathSound=String(L"skeletonKnightDeath",19);
	this->m_overrideAttackSound=String(L"skeletonKnightAttack",20);
	return this;
}
c_SkeletonKnight* c_SkeletonKnight::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_SkeletonKnight::p_Die(){
	if(this->m_level==4){
		(new c_CrystalShards)->m_new(this->m_x,this->m_y);
	}
	c_Enemy::p_Die();
}
bool c_SkeletonKnight::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"SkeletonKnight.Hit(String, Int, Int, Entity, Bool, Int)",55));
	return false;
}
void c_SkeletonKnight::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"SkeletonKnight.Update()",23));
}
void c_SkeletonKnight::mark(){
	c_Enemy::mark();
}
c_Beetle::c_Beetle(){
}
c_Beetle* c_Beetle::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"beetle",6));
	this->m_overrideHitSound=String(L"beetleHit",9);
	this->m_overrideAttackSound=String(L"beetleAttack",12);
	this->m_overrideDeathSound=String(L"beetleDeath",11);
	this->m_swarmCulprit=true;
	return this;
}
c_Beetle* c_Beetle::m_new2(){
	c_Enemy::m_new();
	return this;
}
bool c_Beetle::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Beetle.Hit(String, Int, Int, Entity, Bool, Int)",47));
	return false;
}
void c_Beetle::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Beetle.Update()",15));
}
void c_Beetle::mark(){
	c_Enemy::mark();
}
c_ShoveMonster::c_ShoveMonster(){
}
c_ShoveMonster* c_ShoveMonster::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	if(c_Shrine::m_warShrineActive){
		t_l=bb_math_Max(2,t_l);
	}
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"shovemonster",12));
	this->m_overrideDeathSound=String(L"shovemonsterDeath",17);
	this->m_isGentle=true;
	this->m_swarmCulprit=true;
	return this;
}
c_ShoveMonster* c_ShoveMonster::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_ShoveMonster::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ShoveMonster.Update()",21));
}
void c_ShoveMonster::mark(){
	c_Enemy::mark();
}
c_Ghast::c_Ghast(){
}
c_Ghast* c_Ghast::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"ghast",5));
	this->m_invisible=true;
	this->m_collides=false;
	this->m_blink_MIN=120;
	this->m_blink_MAX=240;
	this->m_blink_DUR=10;
	this->m_overrideAttackSound=String(L"ghastAttack",11);
	this->m_overrideDeathSound=String(L"ghastDeath",10);
	this->m_image->p_SetZOff(FLOAT(18.0));
	this->m_isWraithLike=true;
	if(c_Util::m_IsCharacterActive(4)){
		this->m_coinsToDrop=0;
		this->p_Die();
	}
	return this;
}
c_Ghast* c_Ghast::m_new2(){
	c_Enemy::m_new();
	return this;
}
bool c_Ghast::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Ghast.Hit(String, Int, Int, Entity, Bool, Int)",46));
	return false;
}
void c_Ghast::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Ghast.Update()",14));
}
void c_Ghast::mark(){
	c_Enemy::mark();
}
c_TrapCauldron::c_TrapCauldron(){
}
c_TrapCauldron* c_TrapCauldron::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"trapcauldron",12));
	this->m_overrideAttackSound=String(L"mimicAttack",11);
	this->m_overrideDeathSound=String(L"mimicDeath",10);
	this->m_overrideMoveSound=String(L"mimicChase",10);
	return this;
}
c_TrapCauldron* c_TrapCauldron::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_TrapCauldron::p_Die(){
	if(!this->m_dead){
		if(this->m_level==2){
			c_Level::m_PlaceIceTileAt(this->m_x,this->m_y);
		}else{
			c_Level::m_PlaceHotCoalTileAt(this->m_x,this->m_y);
		}
		c_Enemy::p_Die();
	}
}
void c_TrapCauldron::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"TrapCauldron.Update()",21));
}
void c_TrapCauldron::mark(){
	c_Enemy::mark();
}
c_Cauldron::c_Cauldron(){
}
c_Cauldron* c_Cauldron::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"cauldron",8));
	this->p_ActivateLight(FLOAT(0.5),FLOAT(3.0));
	bool t_flipXRoll=c_Util::m_RndBool(true);
	if(t_flipXRoll){
		this->m_image->p_FlipX(true,true);
	}
	this->m_overrideDeathSound=String(L"cauldronHit",11);
	if(c_Util::m_IsCharacterActive(5) || c_Util::m_IsCharacterActive(7)){
		this->m_coinsToDrop=1;
	}
	return this;
}
c_Cauldron* c_Cauldron::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_Cauldron::p_Die(){
	int t_1=this->m_level;
	if(t_1==2){
		c_Level::m_PlaceIceTileAt(this->m_x,this->m_y);
	}else{
		c_Level::m_PlaceHotCoalTileAt(this->m_x,this->m_y);
	}
	c_Enemy::p_Die();
}
void c_Cauldron::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Cauldron.Update()",17));
}
void c_Cauldron::mark(){
	c_Enemy::mark();
}
c_SleepingGoblin::c_SleepingGoblin(){
}
c_SleepingGoblin* c_SleepingGoblin::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"sleeping_goblin",15));
	this->m_animOverride=4;
	this->m_overrideAttackSound=String(L"goblinAttack",12);
	this->m_overrideDeathSound=String(L"goblinDeath",11);
	this->m_overrideHitSound=String(L"goblinHit",9);
	return this;
}
c_SleepingGoblin* c_SleepingGoblin::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_SleepingGoblin::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"SleepingGoblin.Update()",23));
}
void c_SleepingGoblin::mark(){
	c_Enemy::mark();
}
c_Ghoul::c_Ghoul(){
}
c_Ghoul* c_Ghoul::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	bb_logger_Debug->p_TraceNotImplemented(String(L"Ghoul.New(Int, Int, Int)",24));
	return this;
}
c_Ghoul* c_Ghoul::m_new2(){
	c_Enemy::m_new();
	return this;
}
bool c_Ghoul::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Ghoul.Hit(String, Int, Int, Entity, Bool, Int)",46));
	return false;
}
void c_Ghoul::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Ghoul.Update()",14));
}
void c_Ghoul::mark(){
	c_Enemy::mark();
}
c_Lich::c_Lich(){
	m_gustImage=0;
}
c_Lich* c_Lich::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	if(c_Shrine::m_warShrineActive){
		t_l=3;
	}
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"lich",4));
	gc_assign(this->m_gustImage,(new c_Sprite)->m_new2(String(L"particles/wind_gust.png",23),7,1));
	this->m_overrideHitSound=String(L"skeletonHit",11);
	this->m_overrideDeathSound=String(L"skeletonDeath",13);
	this->m_overrideAttackSound=String(L"skeletonAttack",14);
	return this;
}
c_Lich* c_Lich::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_Lich::mark(){
	c_Enemy::mark();
	gc_mark_q(m_gustImage);
}
c_Pixie::c_Pixie(){
	m_explosionImg=0;
}
c_Pixie* c_Pixie::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"pixie",5));
	this->m_hasSilhouette=false;
	this->m_canMoveOntoPlayer=true;
	gc_assign(this->m_explosionImg,(new c_Sprite)->m_new2(String(L"items/3x3_explosion.png",23),8,c_Image::m_DefaultFlags));
	this->m_explosionImg->p_SetZOff(FLOAT(1000.0));
	this->m_overrideHitSound=String(L"pixieAttack",11);
	this->p_ActivateLight(FLOAT(0.01),FLOAT(1.5));
	return this;
}
c_Pixie* c_Pixie::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_Pixie::p_Die(){
	if(!c_Level::m_isReplaying && c_ControllerLevelEditor::m_playingLevel==-1){
		c_GameData::m_SetKilledEnemy(this->m_xmlName,this->m_level,true);
	}
	c_Enemy::p_Die();
}
bool c_Pixie::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Pixie.Hit(String, Int, Int, Entity, Bool, Int)",46));
	return false;
}
void c_Pixie::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Pixie.Update()",14));
}
void c_Pixie::mark(){
	c_Enemy::mark();
	gc_mark_q(m_explosionImg);
}
c_Spider::c_Spider(){
}
c_Spider* c_Spider::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"spider",6));
	this->m_overrideDeathSound=String(L"spiderDeath",11);
	this->m_overrideAttackSound=String(L"spiderAttack",12);
	this->m_image->p_SetZOff(FLOAT(18.0));
	if(c_Util::m_IsCharacterActive(2) || c_Util::m_IsCharacterActive(7)){
		if(bb_controller_game_currentZone>=2){
			this->m_coinsToDrop=0;
			this->p_Die();
		}
	}
	return this;
}
c_Spider* c_Spider::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_Spider::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Spider.Update()",15));
}
void c_Spider::mark(){
	c_Enemy::mark();
}
c_Mummy::c_Mummy(){
}
c_Mummy* c_Mummy::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"mummy",5));
	this->m_movesRegardlessOfDistance=true;
	this->m_overrideAttackSound=String(L"mummyAttack",11);
	this->m_overrideDeathSound=String(L"mummyDeath",10);
	int t_particleSystemX=this->m_x*24+12;
	int t_particleSystemY=this->m_y*24+24;
	(new c_ParticleSystem)->m_new(t_particleSystemX,t_particleSystemY,c_ParticleSystemData::m_MOLE_DIG,-1,String());
	return this;
}
c_Mummy* c_Mummy::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_Mummy::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Mummy.Update()",14));
}
void c_Mummy::mark(){
	c_Enemy::mark();
}
c_Necrodancer::c_Necrodancer(){
	m_iceBlast=0;
	m_shieldImage=0;
	m_origXOff=-1;
	m_actionTime=12;
	m_theLute=0;
	m_saidLutePhrase=false;
}
c_Necrodancer* c_Necrodancer::m_necrodancer;
int c_Necrodancer::m_wallsStep;
c_Necrodancer* c_Necrodancer::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"necrodancer",11));
	this->m_isNecroDancer=true;
	gc_assign(m_necrodancer,this);
	gc_assign(this->m_iceBlast,(new c_Sprite)->m_new2(String(L"spells/ice_blast.png",20),8,1));
	this->m_iceBlast->p_SetHandle2(-2,59);
	this->m_iceBlast->p_SetZOff(FLOAT(1000.0));
	gc_assign(this->m_shieldImage,(new c_Sprite)->m_new2(String(L"entities/necroshield.png",24),1,c_Image::m_DefaultFlags));
	this->m_shieldImage->p_SetZOff(Float(this->m_storedZOff+10));
	m_wallsStep=0;
	this->m_origXOff=int(this->m_xOff);
	int t_1=this->m_level;
	if(t_1==1){
		this->p_MakeDancer();
	}else{
		if(t_1==2){
			this->m_actionTime=10;
		}
	}
	this->m_overrideHitSound=String(L"necrodancerHit",14);
	this->m_overrideDeathSound=String(L"necrodancerDeath",16);
	this->m_overrideAttackSound=String(L"necrodancerAttack",17);
	return this;
}
c_Necrodancer* c_Necrodancer::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_Necrodancer::p_Die(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Necrodancer.Die()",17));
}
bool c_Necrodancer::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Necrodancer.Hit(String, Int, Int, Entity, Bool, Int)",52));
	return false;
}
void c_Necrodancer::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Necrodancer.Update()",20));
}
void c_Necrodancer::mark(){
	c_Enemy::mark();
	gc_mark_q(m_iceBlast);
	gc_mark_q(m_shieldImage);
	gc_mark_q(m_theLute);
}
c_BatMiniboss::c_BatMiniboss(){
}
c_BatMiniboss* c_BatMiniboss::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	if(c_Shrine::m_warShrineActive){
		t_l=2;
	}
	this->p_Init3(t_xVal,t_yVal,t_l,String(L"bat_miniboss",12),String(),-1,-1);
	this->m_overrideAttackSound=String(L"vampbatAttack",13);
	this->m_overrideHitSound=String(L"vampbatHit",10);
	this->m_overrideDeathSound=String(L"vampbatDeath",12);
	return this;
}
c_BatMiniboss* c_BatMiniboss::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_BatMiniboss::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"BatMiniboss.Update()",20));
}
void c_BatMiniboss::mark(){
	c_Enemy::mark();
}
c_Dragon::c_Dragon(){
	m_iceBlast=0;
	m_seekDistance=7;
}
c_Dragon* c_Dragon::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	if(c_Shrine::m_warShrineActive && t_l==1){
		t_l=c_Util::m_RndIntRange(2,3,false,-1);
	}
	this->p_Init3(t_xVal,t_yVal,t_l,String(L"dragon",6),String(),-1,-1);
	this->m_overrideAttackSound=String(L"dragonAttack",12);
	this->m_overrideDeathSound=String(L"dragonDeath",11);
	this->m_overrideHitSound=String(L"dragonHit",9);
	if(t_l==3){
		gc_assign(this->m_iceBlast,(new c_Sprite)->m_new2(String(L"spells/ice_blast.png",20),8,1));
		this->m_iceBlast->p_SetHandle2(-2,59);
		this->m_iceBlast->p_SetZOff(FLOAT(1000.0));
	}
	return this;
}
c_Dragon* c_Dragon::m_new2(){
	c_Enemy::m_new();
	return this;
}
bool c_Dragon::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Dragon.Hit(String, Int, Int, Entity, Bool, Int)",47));
	return false;
}
void c_Dragon::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Dragon.Update()",15));
}
void c_Dragon::mark(){
	c_Enemy::mark();
	gc_mark_q(m_iceBlast);
}
c_Banshee::c_Banshee(){
}
c_Banshee* c_Banshee::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	if(c_Shrine::m_warShrineActive){
		t_l=2;
	}
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"banshee",7));
	this->m_overrideAttackSound=String(L"bansheeAttack",13);
	this->m_overrideDeathSound=String(L"bansheeDeath",12);
	this->m_overrideHitSound=String(L"bansheeHit",10);
	this->m_overrideCrySound=String(L"bansheeCry",10);
	return this;
}
c_Banshee* c_Banshee::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_Banshee::p_Die(){
	c_Enemy::p_Die();
}
bool c_Banshee::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Banshee.Hit(String, Int, Int, Entity, Bool, Int)",48));
	return false;
}
void c_Banshee::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Banshee.Update()",16));
}
void c_Banshee::mark(){
	c_Enemy::mark();
}
c_Minotaur::c_Minotaur(){
	m_initalYOff=0;
}
c_Minotaur* c_Minotaur::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	if(c_Shrine::m_warShrineActive){
		t_l=2;
	}
	this->p_Init3(t_xVal,t_yVal,t_l,String(L"minotaur",8),String(),-1,-1);
	this->m_overrideHitSound=String(L"minotaurHit",11);
	this->m_overrideAttackSound=String(L"minotaurAttack",14);
	this->m_overrideDeathSound=String(L"minotaurDeath",13);
	this->m_initalYOff=int(this->m_yOff);
	return this;
}
c_Minotaur* c_Minotaur::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_Minotaur::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Minotaur.Update()",17));
}
void c_Minotaur::mark(){
	c_Enemy::mark();
}
c_Nightmare::c_Nightmare(){
	m_NIGHTMARE_DARKNESS_RADIUS=FLOAT(2.5);
}
c_Nightmare* c_Nightmare::m_nightmare;
c_Nightmare* c_Nightmare::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	if(c_Shrine::m_warShrineActive){
		t_l=2;
	}
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"nightmare",9));
	if(t_l>1){
		this->m_NIGHTMARE_DARKNESS_RADIUS=FLOAT(3.5);
	}
	this->p_ActivateLight(FLOAT(0.1),this->m_NIGHTMARE_DARKNESS_RADIUS);
	this->m_lightSourceBrightness=FLOAT(-15.0);
	gc_assign(m_nightmare,this);
	this->m_overrideAttackSound=String(L"nightmareAttack",15);
	this->m_overrideDeathSound=String(L"nightmareDeath",14);
	this->m_overrideHitSound=String(L"nightmareHit",12);
	this->m_overrideCrySound=String(L"nightmareCry",12);
	return this;
}
c_Nightmare* c_Nightmare::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_Nightmare::p_Die(){
	c_Enemy::p_Die();
	m_nightmare=0;
}
bool c_Nightmare::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Nightmare.Hit(String, Int, Int, Entity, Bool, Int)",50));
	return false;
}
bool c_Nightmare::p_IsVisible(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Nightmare.IsVisible()",21));
	return false;
}
void c_Nightmare::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Nightmare.Update()",18));
}
void c_Nightmare::mark(){
	c_Enemy::mark();
}
c_Mommy::c_Mommy(){
}
c_Mommy* c_Mommy::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"mommy",5));
	this->m_overrideHitSound=String(L"mommyHit",8);
	this->m_overrideDeathSound=String(L"mommyDeath",10);
	this->m_overrideCrySound=String(L"mommyCry",8);
	return this;
}
c_Mommy* c_Mommy::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_Mommy::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Mommy.Update()",14));
}
void c_Mommy::mark(){
	c_Enemy::mark();
}
c_Ogre::c_Ogre(){
	m_imageStandard=0;
	m_imageSmashLeft=0;
	m_imageSmashDown=0;
	m_imageSmashUp=0;
}
c_Ogre* c_Ogre::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"ogre",4));
	gc_assign(this->m_imageStandard,this->m_image);
	gc_assign(this->m_imageSmashLeft,(new c_Sprite)->m_new(String(L"entities/ogre_left.png",22),124,72,16,c_Image::m_DefaultFlags));
	gc_assign(this->m_imageSmashDown,(new c_Sprite)->m_new(String(L"entities/ogre_down.png",22),46,142,16,c_Image::m_DefaultFlags));
	gc_assign(this->m_imageSmashUp,(new c_Sprite)->m_new(String(L"entities/ogre_up.png",20),47,100,16,c_Image::m_DefaultFlags));
	this->m_overrideAttackSound=String(L"ogreAttack",10);
	this->m_overrideHitSound=String(L"ogreHit",7);
	this->m_overrideDeathSound=String(L"ogreDeath",9);
	return this;
}
c_Ogre* c_Ogre::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_Ogre::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Ogre.Update()",13));
}
void c_Ogre::mark(){
	c_Enemy::mark();
	gc_mark_q(m_imageStandard);
	gc_mark_q(m_imageSmashLeft);
	gc_mark_q(m_imageSmashDown);
	gc_mark_q(m_imageSmashUp);
}
c_MetroGnome::c_MetroGnome(){
	m_hasOrigin=false;
	m_originX=0;
	m_originY=0;
}
c_MetroGnome* c_MetroGnome::m_new(int t_x_,int t_y_,int t_l){
	c_Enemy::m_new();
	if(c_Shrine::m_warShrineActive){
		t_l=2;
	}
	this->p_Init3(t_x_,t_y_,t_l,String(L"metrognome",10),String(),-1,-1);
	this->m_overrideAttackSound=String(L"metrognomeAttack",16);
	this->m_overrideHitSound=String(L"metrognomeHit",13);
	this->m_overrideDeathSound=String(L"metrognomeDeath",15);
	this->m_overrideCrySound=String(L"metrognomeCry",13);
	bool t_flipX=c_Util::m_RndBool(false);
	this->m_image->p_FlipX(t_flipX,true);
	this->m_hasOrigin=true;
	this->m_originX=this->m_x;
	this->m_originY=this->m_y;
	return this;
}
c_MetroGnome* c_MetroGnome::m_new2(){
	c_Enemy::m_new();
	return this;
}
bool c_MetroGnome::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"MetroGnome.Hit(String, Int, Int, Entity, Bool, Int)",51));
	return false;
}
void c_MetroGnome::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"MetroGnome.Update()",19));
}
void c_MetroGnome::mark(){
	c_Enemy::mark();
}
c_Shopkeeper::c_Shopkeeper(){
}
int c_Shopkeeper::m_shopkeeperStartX;
int c_Shopkeeper::m_shopkeeperStartY;
bool c_Shopkeeper::m_isMonstrous;
c_Shopkeeper* c_Shopkeeper::m_new(int t_xVal,int t_yVal,int t_l,bool t_captv){
	c_NPC::m_new();
	if(t_l<=4 && c_GameData::m_GetDaoustVocals()){
		this->p_NPCInit(t_xVal,t_yVal,t_l+5,String(L"shopkeeper",10),t_captv,false);
	}else{
		this->p_NPCInit(t_xVal,t_yVal,t_l,String(L"shopkeeper",10),t_captv,false);
	}
	this->m_level=t_l;
	if(t_l==1 || t_l==5){
		this->m_isMainShopkeeper=true;
		m_shopkeeperStartX=t_xVal;
		m_shopkeeperStartY=t_yVal;
	}
	this->m_overrideHitSound=String(L"shopkeeperHit",13);
	this->m_overrideDeathSound=String(L"shopkeeperDeath",15);
	if(t_l==1){
		m_isMonstrous=false;
	}else{
		if(t_l==5){
			m_isMonstrous=true;
			this->m_overrideAttackSound=String(L"shopkeeperMonstrousAttack",25);
			this->m_overrideHitSound=String(L"shopkeeperMonstrousHit",22);
			this->m_overrideDeathSound=String(L"shopkeeperMonstrousDeath",24);
		}
	}
	return this;
}
c_Shopkeeper* c_Shopkeeper::m_new2(){
	c_NPC::m_new();
	return this;
}
void c_Shopkeeper::p_Die(){
	if(!this->m_dead){
		if(!this->m_falling){
			String t_itemName=String();
			int t_1=this->m_level;
			if(t_1==4){
				t_itemName=String(L"charm_gluttony",14);
			}else{
				if(t_1==3){
					t_itemName=String(L"head_glass_jaw",14);
				}else{
					if(t_1==2){
						t_itemName=String(L"blood_drum",10);
					}else{
						t_itemName=String(L"head_crown_of_greed",19);
					}
				}
			}
			(new c_Item)->m_new(this->m_x,this->m_y,t_itemName,false,-1,false);
		}
		c_NPC::p_Die();
		if(this->m_health<=0 && this->m_level<=1){
			c_Level::m_shopkeeperDead=true;
			if(c_Level::m_isHardcoreMode){
				if(bb_controller_game_currentDepth>=5){
					c_Level::m_shopkeeperGhostDepth=bb_controller_game_currentDepth;
					c_Level::m_shopkeeperGhostLevel=bb_controller_game_currentLevel+1;
				}else{
					c_Level::m_shopkeeperGhostDepth=bb_controller_game_currentDepth+1;
					c_Level::m_shopkeeperGhostLevel=bb_controller_game_currentLevel;
				}
			}else{
				c_Level::m_shopkeeperGhostDepth=bb_controller_game_currentDepth;
				c_Level::m_shopkeeperGhostLevel=3;
			}
		}
		m_isMonstrous=false;
	}
}
bool c_Shopkeeper::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Shopkeeper.Hit(String, Int, Int, Entity, Bool, Int)",51));
	return false;
}
void c_Shopkeeper::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Shopkeeper.Update()",19));
}
void c_Shopkeeper::mark(){
	c_NPC::mark();
}
c_List22::c_List22(){
	m__head=((new c_HeadNode22)->m_new());
}
c_List22* c_List22::m_new(){
	return this;
}
c_Node39* c_List22::p_AddLast22(c_NPC* t_data){
	return (new c_Node39)->m_new(m__head,m__head->m__pred,t_data);
}
c_List22* c_List22::m_new2(Array<c_NPC* > t_data){
	Array<c_NPC* > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		c_NPC* t_t=t_[t_2];
		t_2=t_2+1;
		p_AddLast22(t_t);
	}
	return this;
}
c_Enumerator29* c_List22::p_ObjectEnumerator(){
	return (new c_Enumerator29)->m_new(this);
}
bool c_List22::p_Equals16(c_NPC* t_lhs,c_NPC* t_rhs){
	return t_lhs==t_rhs;
}
int c_List22::p_RemoveEach11(c_NPC* t_value){
	c_Node39* t_node=m__head->m__succ;
	while(t_node!=m__head){
		c_Node39* t_succ=t_node->m__succ;
		if(p_Equals16(t_node->m__data,t_value)){
			t_node->p_Remove();
		}
		t_node=t_succ;
	}
	return 0;
}
void c_List22::mark(){
	Object::mark();
	gc_mark_q(m__head);
}
c_Node39::c_Node39(){
	m__succ=0;
	m__pred=0;
	m__data=0;
}
c_Node39* c_Node39::m_new(c_Node39* t_succ,c_Node39* t_pred,c_NPC* t_data){
	gc_assign(m__succ,t_succ);
	gc_assign(m__pred,t_pred);
	gc_assign(m__succ->m__pred,this);
	gc_assign(m__pred->m__succ,this);
	gc_assign(m__data,t_data);
	return this;
}
c_Node39* c_Node39::m_new2(){
	return this;
}
int c_Node39::p_Remove(){
	gc_assign(m__succ->m__pred,m__pred);
	gc_assign(m__pred->m__succ,m__succ);
	return 0;
}
void c_Node39::mark(){
	Object::mark();
	gc_mark_q(m__succ);
	gc_mark_q(m__pred);
	gc_mark_q(m__data);
}
c_HeadNode22::c_HeadNode22(){
}
c_HeadNode22* c_HeadNode22::m_new(){
	c_Node39::m_new2();
	gc_assign(m__succ,(this));
	gc_assign(m__pred,(this));
	return this;
}
void c_HeadNode22::mark(){
	c_Node39::mark();
}
c_ShopkeeperGhost::c_ShopkeeperGhost(){
}
c_ShopkeeperGhost* c_ShopkeeperGhost::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	bb_logger_Debug->p_TraceNotImplemented(String(L"ShopkeeperGhost.New(Int, Int, Int)",34));
	return this;
}
c_ShopkeeperGhost* c_ShopkeeperGhost::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_ShopkeeperGhost::p_Die(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ShopkeeperGhost.Die()",21));
}
bool c_ShopkeeperGhost::p_IsVisible(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ShopkeeperGhost.IsVisible()",27));
	return false;
}
void c_ShopkeeperGhost::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ShopkeeperGhost.Update()",24));
}
void c_ShopkeeperGhost::mark(){
	c_Enemy::mark();
}
c_Skull::c_Skull(){
}
c_Skull* c_Skull::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	if(c_Shrine::m_warShrineActive){
		t_l=bb_math_Min(3,t_l);
	}
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"skull",5));
	this->m_overrideHitSound=String(L"skullHit",8);
	this->m_overrideDeathSound=String(L"skullDeath",10);
	this->m_overrideAttackSound=String(L"skullAttack",11);
	return this;
}
c_Skull* c_Skull::m_new2(){
	c_Enemy::m_new();
	return this;
}
bool c_Skull::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Skull.Hit(String, Int, Int, Entity, Bool, Int)",46));
	return false;
}
void c_Skull::mark(){
	c_Enemy::mark();
}
c_Fortissimole::c_Fortissimole(){
	m_yOffOffstage=0;
	m_yOffOnstage=0;
	m_paceDir=2;
	m_currentDirt=0;
}
c_Fortissimole* c_Fortissimole::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"fortissimole",12));
	this->m_yOffOffstage=int(this->m_yOff);
	this->m_yOffOnstage=int(this->m_yOff-FLOAT(8.0));
	this->m_overrideHitSound=String(L"fortissimoleVoHit",17);
	this->m_overrideDeathSound=String(L"fortissimoleVoDeath",19);
	this->p_ActivateLight(FLOAT(0.01),FLOAT(0.02));
	this->m_paceDir=0;
	if(c_Util::m_RndBool(true)){
		this->m_paceDir=2;
	}
	int t_healthBonus=bb_controller_game_currentDepth-1;
	if(c_Shrine::m_warShrineActive){
		t_healthBonus=4;
	}
	this->m_healthMax+=t_healthBonus;
	this->m_health=this->m_healthMax;
	return this;
}
c_Fortissimole* c_Fortissimole::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_Fortissimole::m_SpawnFans(){
	int t_skeletonLevel=1;
	if(bb_controller_game_currentDepth>=2){
		t_skeletonLevel+=1;
	}
	if(bb_controller_game_currentDepth>=3){
		t_skeletonLevel+=1;
	}
	for(int t_x=-3;t_x<=3;t_x=t_x+1){
		for(int t_y=-14;t_y<=-13;t_y=t_y+1){
			if(c_Util::m_IsGlobalCollisionAt2(t_x,t_y,false,false,false,false)){
				continue;
			}
			if(c_Util::m_IsAnyPlayerAt(t_x,t_y)){
				continue;
			}
			c_Skeleton* t_skeleton=(new c_Skeleton)->m_new(t_x,t_y,t_skeletonLevel);
			t_skeleton->m_isMosh=true;
			t_skeleton->p_ActivateLight(FLOAT(0.01),FLOAT(0.02));
		}
	}
}
void c_Fortissimole::p_UnoccupyDirt(){
	if(this->m_currentDirt!=0){
		this->m_currentDirt->p_Unoccupy();
		this->m_currentDirt=0;
	}
}
void c_Fortissimole::p_Die(){
	this->p_UnoccupyDirt();
	c_Enemy::m_SetEnemiesToDropNoCoinsOverride();
	c_Enemy::p_Die();
	c_Enemy::m_KillAllEnemies();
}
bool c_Fortissimole::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Fortissimole.Hit(String, Int, Int, Entity, Bool, Int)",53));
	return false;
}
void c_Fortissimole::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Fortissimole.Update()",21));
}
void c_Fortissimole::mark(){
	c_Enemy::mark();
	gc_mark_q(m_currentDirt);
}
c_Pawn::c_Pawn(){
}
c_Pawn* c_Pawn::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	if(c_Shrine::m_warShrineActive){
		t_l=2;
	}
	this->p_Init3(t_xVal,t_yVal,t_l,String(L"pawn",4),String(),-1,-1);
	this->p_ActivateLight(FLOAT(0.01),FLOAT(0.02));
	this->m_overrideAttackSound=String(L"chessAttack",11);
	this->m_overrideDeathSound=String(L"chessDeath",10);
	if(c_Util::m_IsCharacterActive(5) || c_Util::m_IsCharacterActive(7)){
		this->m_coinsToDrop=1;
	}
	return this;
}
c_Pawn* c_Pawn::m_new2(){
	c_Enemy::m_new();
	return this;
}
bool c_Pawn::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Pawn.Hit(String, Int, Int, Entity, Bool, Int)",45));
	return false;
}
void c_Pawn::mark(){
	c_Enemy::mark();
}
c_Knight::c_Knight(){
	m_customAttackSwipe=0;
}
c_Knight* c_Knight::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	if(c_Shrine::m_warShrineActive){
		t_l=2;
	}
	this->p_Init3(t_xVal,t_yVal,t_l,String(L"knight",6),String(),-1,-1);
	this->p_ActivateLight(FLOAT(0.01),FLOAT(0.02));
	this->m_overrideAttackSwipe=true;
	String t_swipePath=String(L"swipes/swipe_knight.png",23);
	if(t_l==2){
		t_swipePath=String(L"swipes/swipe_knight_red.png",27);
	}
	gc_assign(this->m_customAttackSwipe,(new c_Sprite)->m_new2(t_swipePath,1,c_Image::m_DefaultFlags));
	this->m_customAttackSwipe->p_SetZOff(FLOAT(1000.0));
	this->m_customAttackSwipe->p_SetHandle2(12,36);
	this->m_hitTween=0;
	this->m_hitShadowTween=0;
	this->m_overrideAttackSound=String(L"chessAttack",11);
	this->m_overrideDeathSound=String(L"chessDeath",10);
	if(c_Util::m_IsCharacterActive(5) || c_Util::m_IsCharacterActive(7)){
		this->m_coinsToDrop=1;
	}
	return this;
}
c_Knight* c_Knight::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_Knight::mark(){
	c_Enemy::mark();
	gc_mark_q(m_customAttackSwipe);
}
c_Bishop::c_Bishop(){
}
c_Bishop* c_Bishop::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	if(c_Shrine::m_warShrineActive){
		t_l=2;
	}
	this->p_Init3(t_xVal,t_yVal,t_l,String(L"bishop",6),String(),-1,-1);
	this->p_ActivateLight(FLOAT(0.01),FLOAT(0.02));
	this->m_overrideAttackSound=String(L"chessAttack",11);
	this->m_overrideDeathSound=String(L"chessDeath",10);
	if(c_Util::m_IsCharacterActive(5) || c_Util::m_IsCharacterActive(7)){
		this->m_coinsToDrop=1;
	}
	return this;
}
c_Bishop* c_Bishop::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_Bishop::mark(){
	c_Enemy::mark();
}
c_Rook::c_Rook(){
	m_castleNextMove=false;
}
c_Rook* c_Rook::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	if(c_Shrine::m_warShrineActive){
		t_l=2;
	}
	this->p_Init3(t_xVal,t_yVal,t_l,String(L"rook",4),String(),-1,-1);
	this->p_ActivateLight(FLOAT(0.01),FLOAT(0.02));
	this->m_overrideAttackSound=String(L"chessAttack",11);
	this->m_overrideDeathSound=String(L"chessDeath",10);
	if(c_Util::m_IsCharacterActive(5) || c_Util::m_IsCharacterActive(7)){
		this->m_coinsToDrop=1;
	}
	return this;
}
c_Rook* c_Rook::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_Rook::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Rook.Update()",13));
}
void c_Rook::mark(){
	c_Enemy::mark();
}
c_Queen::c_Queen(){
	m_initialYOff=0;
}
c_Queen* c_Queen::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	if(c_Shrine::m_warShrineActive){
		t_l=2;
	}
	this->p_Init3(t_xVal,t_yVal,t_l,String(L"queen",5),String(),-1,-1);
	this->m_initialYOff=int(this->m_yOff);
	this->p_ActivateLight(FLOAT(0.01),FLOAT(0.02));
	this->m_overrideAttackSound=String(L"queenAttack",11);
	this->m_overrideDeathSound=String(L"queenDeath",10);
	if(c_Util::m_IsCharacterActive(5) || c_Util::m_IsCharacterActive(7)){
		this->m_coinsToDrop=1;
	}
	return this;
}
c_Queen* c_Queen::m_new2(){
	c_Enemy::m_new();
	return this;
}
bool c_Queen::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Queen.Hit(String, Int, Int, Entity, Bool, Int)",46));
	return false;
}
void c_Queen::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Queen.Update()",14));
}
void c_Queen::mark(){
	c_Enemy::mark();
}
c_WaterBall::c_WaterBall(){
}
c_WaterBall* c_WaterBall::m_new(int t_x_,int t_y_,int t_l){
	c_Enemy::m_new();
	this->p_Init5(t_x_,t_y_,t_l,String(L"water_ball",10));
	this->m_isGentle=true;
	if(this->m_level==1){
		this->m_overrideDeathSound=String(L"waterballDeath",14);
		this->m_overrideCrySound=String(L"waterballCry",12);
	}else{
		if(c_Audio::m_debugEnablePlaceholders){
			this->m_overrideAttackSound=String(L"tarOut",6);
			this->m_overrideDeathSound=String(L"tarIn",5);
		}
	}
	return this;
}
c_WaterBall* c_WaterBall::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_WaterBall::p_PlaceTileAt(int t_tileX,int t_tileY){
	int t_1=this->m_level;
	if(t_1==1){
		c_Level::m_PlaceTileTypeAt(this->m_x,this->m_y,4);
	}else{
		c_Level::m_PlaceTileTypeAt(this->m_x,this->m_y,8);
	}
}
void c_WaterBall::p_Die(){
	c_Enemy::p_Die();
	c_ConductorBattery::m_WaterBallDeath(this);
	if(this->m_enableDeathEffects){
		this->p_PlaceTileAt(this->m_x,this->m_y);
	}
}
void c_WaterBall::mark(){
	c_Enemy::mark();
}
c_Gorgon::c_Gorgon(){
	m_statueFlashFrames=0;
}
c_Gorgon* c_Gorgon::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	if(c_Shrine::m_warShrineActive){
		t_l=2;
	}
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"gorgon",6));
	this->m_isGentle=true;
	this->m_overrideHitSound=String(L"gorgonHit",9);
	this->m_overrideDeathSound=String(L"gorgonDeath",11);
	return this;
}
c_Gorgon* c_Gorgon::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_Gorgon::p_Die(){
	bool t_flipX=this->m_image->m_flipX;
	c_Enemy::p_Die();
	if(this->m_enableDeathEffects && !this->m_falling && !c_Util::m_IsGlobalCollisionAt2(this->m_x,this->m_y,false,false,false,false) && !c_Util::m_IsAnyPlayerAt(this->m_x,this->m_y)){
		int t_type=3;
		if(this->m_level==2){
			t_type=4;
		}
		c_Crate* t_crate=(new c_Crate)->m_new(this->m_x,this->m_y,t_type,String(L"no_item",7));
		t_crate->m_gorgonFlipX=t_flipX;
		t_crate->m_gorgonFlashFrames=this->m_statueFlashFrames;
	}
}
void c_Gorgon::mark(){
	c_Enemy::mark();
}
c_ZombieElectric::c_ZombieElectric(){
	m_facing=-1;
}
int c_ZombieElectric::p_GetMovementDir(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ZombieElectric.GetMovementDir()",31));
	return 0;
}
c_ZombieElectric* c_ZombieElectric::m_new(int t_x_,int t_y_,int t_l){
	c_Enemy::m_new();
	this->p_Init5(t_x_,t_y_,t_l,String(L"zombie_electric",15));
	this->m_facing=c_Util::m_RndIntRangeFromZero(3,true);
	int t_movementDir=this->p_GetMovementDir();
	this->m_movesRegardlessOfDistance=true;
	this->m_facing=t_movementDir;
	this->m_overrideAttackSound=String(L"eleczombieAttack",16);
	this->m_overrideDeathSound=String(L"eleczombieDeath",15);
	return this;
}
c_ZombieElectric* c_ZombieElectric::m_new2(){
	c_Enemy::m_new();
	return this;
}
bool c_ZombieElectric::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ZombieElectric.Hit(String, Int, Int, Entity, Bool, Int)",55));
	return false;
}
void c_ZombieElectric::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ZombieElectric.Update()",23));
}
void c_ZombieElectric::mark(){
	c_Enemy::mark();
}
c_Orc::c_Orc(){
	m_facing=-1;
}
c_Orc* c_Orc::m_new(int t_x_,int t_y_,int t_l){
	c_Enemy::m_new();
	if(c_Shrine::m_warShrineActive){
		t_l=3;
	}
	this->p_Init5(t_x_,t_y_,t_l,String(L"orc",3));
	this->m_facing=c_Util::m_RndIntRangeFromZero(3,true);
	this->m_overrideAttackSound=String(L"orcAttack",9);
	this->m_overrideHitSound=String(L"orcHit",6);
	this->m_overrideDeathSound=String(L"orcDeath",8);
	return this;
}
c_Orc* c_Orc::m_new2(){
	c_Enemy::m_new();
	return this;
}
bool c_Orc::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Orc.Hit(String, Int, Int, Entity, Bool, Int)",44));
	return false;
}
void c_Orc::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Orc.Update()",12));
}
void c_Orc::mark(){
	c_Enemy::mark();
}
c_BounceTrap::c_BounceTrap(){
	m_bounceDir=0;
	m_isRotatingCW=false;
	m_isRotatingCCW=false;
	m_originalDir=0;
}
c_BounceTrap* c_BounceTrap::m_new(int t_xVal,int t_yVal,int t_d){
	c_Trap::m_new(t_xVal,t_yVal,1);
	this->m_xOff=FLOAT(12.0);
	this->m_yOff=FLOAT(18.0);
	int t_1=t_d;
	if(t_1==-1){
		for(int t_i=499;t_i>0;t_i=t_i+-1){
			this->m_bounceDir=c_Util::m_RndIntRangeFromZero(3,true);
			int t_2=this->m_bounceDir;
			if(t_2==0){
				if(!c_Level::m_IsWallAt(t_xVal+1,t_yVal,false,false)){
					break;
				}
			}else{
				if(t_2==1){
					if(!c_Level::m_IsWallAt(t_xVal-1,t_yVal,false,false)){
						break;
					}
				}else{
					if(t_2==2){
						if(!c_Level::m_IsWallAt(t_xVal,t_yVal+1,false,false)){
							break;
						}
					}else{
						if(t_2==3){
							if(!c_Level::m_IsWallAt(t_xVal,t_yVal-1,false,false)){
								break;
							}
						}
					}
				}
			}
		}
	}else{
		if(t_1==9){
			this->m_bounceDir=c_Util::m_RndIntRangeFromZero(3,true);
			if(c_Util::m_RndBool(true)){
				this->m_isRotatingCW=true;
			}else{
				this->m_isRotatingCCW=true;
			}
		}else{
			this->m_bounceDir=t_d;
		}
	}
	int t_3=this->m_bounceDir;
	if(t_3==8){
		gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"traps/bouncetrap_omni.png",25),14,16,12,1));
	}else{
		if(t_3==7 || t_3==6 || t_3==5 || t_3==4){
			gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"traps/diagonal_bouncetrap.png",29),14,16,16,1));
		}else{
			gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"traps/bouncetrap.png",20),14,16,12,1));
		}
	}
	this->m_image->p_SetZ(FLOAT(-995.0));
	this->m_originalDir=this->m_bounceDir;
	int t_debugBounceDir=this->m_bounceDir;
	if(t_d==9){
		t_debugBounceDir=9;
	}
	bb_logger_Debug->p_WriteLine2(String(L"    Direction: ",15)+c_BounceTrapDirection::m_ToString(t_debugBounceDir));
	return this;
}
c_BounceTrap* c_BounceTrap::m_new2(){
	c_Trap::m_new2();
	return this;
}
void c_BounceTrap::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"BounceTrap.Update()",19));
}
void c_BounceTrap::mark(){
	c_Trap::mark();
}
c_BounceTrapDirection::c_BounceTrapDirection(){
}
String c_BounceTrapDirection::m_ToString(int t_dir){
	int t_4=t_dir;
	if(t_4==0){
		return String(L"Right",5);
	}else{
		if(t_4==1){
			return String(L"Left",4);
		}else{
			if(t_4==2){
				return String(L"Down",4);
			}else{
				if(t_4==3){
					return String(L"Up",2);
				}else{
					if(t_4==4){
						return String(L"Down Right",10);
					}else{
						if(t_4==5){
							return String(L"Down Left",9);
						}else{
							if(t_4==6){
								return String(L"Up Left",7);
							}else{
								if(t_4==7){
									return String(L"Up Right",8);
								}else{
									if(t_4==8){
										return String(L"Omni",4);
									}else{
										if(t_4==9){
											return String(L"Spin",4);
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return String(L"None",4);
}
void c_BounceTrapDirection::mark(){
	Object::mark();
}
c_King::c_King(){
	m_initialYOff=0;
}
c_King* c_King::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	if(c_Shrine::m_warShrineActive){
		t_l=2;
	}
	this->p_Init3(t_xVal,t_yVal,t_l,String(L"king",4),String(),-1,-1);
	this->m_initialYOff=int(this->m_yOff);
	this->p_ActivateLight(FLOAT(0.01),FLOAT(0.02));
	this->m_overrideAttackSound=String(L"kingAttack",10);
	this->m_overrideDeathSound=String(L"kingDeath",9);
	this->m_overrideHitSound=String(L"kingHit",7);
	if(c_Util::m_IsCharacterActive(5) || c_Util::m_IsCharacterActive(7)){
		this->m_coinsToDrop=1;
	}
	return this;
}
c_King* c_King::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_King::p_Die(){
	c_Enemy::m_SetEnemiesToDropNoCoinsOverride();
	c_Enemy::p_Die();
	c_Enemy::m_KillAllEnemies();
}
bool c_King::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"King.Hit(String, Int, Int, Entity, Bool, Int)",45));
	return false;
}
void c_King::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"King.Update()",13));
}
void c_King::mark(){
	c_Enemy::mark();
}
c_Octoboss::c_Octoboss(){
	m_initXOff=0;
	m_tentacle3=0;
	m_tentacle7=0;
	m_tentacle5=0;
	m_tentacle1=0;
	m_tentacle2=0;
	m_tentacle6=0;
	m_tentacle8=0;
	m_tentacle4=0;
	m_phaseOrder=(new c_List17)->m_new();
}
c_Octoboss* c_Octoboss::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"coralriff",9));
	this->m_initXOff=int(this->m_xOff);
	int t_currentDepth=bb_controller_game_currentDepth;
	if(c_Shrine::m_warShrineActive){
		t_currentDepth=5;
	}
	this->m_healthMax+=t_currentDepth-1;
	this->m_health=this->m_healthMax;
	int t_hornsLevel=2;
	int t_stringsLevel=3;
	int t_keytarLevel=4;
	if(t_currentDepth>=2){
		t_hornsLevel=6;
	}
	if(t_currentDepth>=3){
		t_stringsLevel=7;
	}
	if(t_currentDepth>=4){
		t_keytarLevel=8;
	}
	gc_assign(this->m_tentacle3,(new c_Tentacle)->m_new(t_xVal-5,t_yVal+2,5));
	gc_assign(this->m_tentacle7,(new c_Tentacle)->m_new(t_xVal-4,t_yVal+1,t_hornsLevel));
	gc_assign(this->m_tentacle5,(new c_Tentacle)->m_new(t_xVal-3,t_yVal+1,t_stringsLevel));
	gc_assign(this->m_tentacle1,(new c_Tentacle)->m_new(t_xVal-2,t_yVal,t_keytarLevel));
	gc_assign(this->m_tentacle2,(new c_Tentacle)->m_new(t_xVal+2,t_yVal,t_keytarLevel));
	gc_assign(this->m_tentacle6,(new c_Tentacle)->m_new(t_xVal+3,t_yVal+1,t_stringsLevel));
	gc_assign(this->m_tentacle8,(new c_Tentacle)->m_new(t_xVal+4,t_yVal+1,t_hornsLevel));
	gc_assign(this->m_tentacle4,(new c_Tentacle)->m_new(t_xVal+5,t_yVal+2,5));
	gc_assign(this->m_tentacle1->m_boss,this);
	gc_assign(this->m_tentacle2->m_boss,this);
	gc_assign(this->m_tentacle3->m_boss,this);
	gc_assign(this->m_tentacle4->m_boss,this);
	gc_assign(this->m_tentacle5->m_boss,this);
	gc_assign(this->m_tentacle6->m_boss,this);
	gc_assign(this->m_tentacle7->m_boss,this);
	gc_assign(this->m_tentacle8->m_boss,this);
	this->m_tentacle1->p_ActivateLight(FLOAT(0.01),FLOAT(0.02));
	this->m_tentacle2->p_ActivateLight(FLOAT(0.01),FLOAT(0.02));
	this->m_tentacle3->p_ActivateLight(FLOAT(0.01),FLOAT(0.02));
	this->m_tentacle4->p_ActivateLight(FLOAT(0.01),FLOAT(0.02));
	this->m_tentacle5->p_ActivateLight(FLOAT(0.01),FLOAT(0.02));
	this->m_tentacle6->p_ActivateLight(FLOAT(0.01),FLOAT(0.02));
	this->m_tentacle7->p_ActivateLight(FLOAT(0.01),FLOAT(0.02));
	this->m_tentacle8->p_ActivateLight(FLOAT(0.01),FLOAT(0.02));
	this->m_tentacle3->m_tentacleNum=1;
	this->m_tentacle7->m_tentacleNum=2;
	this->m_tentacle5->m_tentacleNum=3;
	this->m_tentacle1->m_tentacleNum=4;
	this->m_tentacle2->m_tentacleNum=5;
	this->m_tentacle6->m_tentacleNum=6;
	this->m_tentacle8->m_tentacleNum=7;
	this->m_tentacle4->m_tentacleNum=8;
	this->m_phaseOrder->p_AddLast17(0);
	int t_phase1=0;
	int t_phase2=0;
	int t_phase3=0;
	int t_phase4=0;
	t_phase1=c_Util::m_RndIntRange(1,4,true,-1);
	do{
		t_phase2=c_Util::m_RndIntRange(1,4,true,-1);
	}while(!(t_phase2!=t_phase1));
	do{
		t_phase3=c_Util::m_RndIntRange(1,4,true,-1);
	}while(!(t_phase3!=t_phase2 && t_phase3!=t_phase1));
	do{
		t_phase4=c_Util::m_RndIntRange(1,4,true,-1);
	}while(!(t_phase4!=t_phase3 && t_phase4!=t_phase2 && t_phase4!=t_phase1));
	this->m_phaseOrder->p_AddLast17(t_phase1);
	this->m_phaseOrder->p_AddLast17(t_phase2);
	this->m_phaseOrder->p_AddLast17(t_phase3);
	this->m_phaseOrder->p_AddLast17(t_phase4);
	int t_phase5Roll=c_Util::m_RndIntRangeFromZero(1,true);
	if(t_phase5Roll==0){
		this->m_phaseOrder->p_AddLast17(5);
		this->m_phaseOrder->p_AddLast17(6);
	}else{
		this->m_phaseOrder->p_AddLast17(6);
		this->m_phaseOrder->p_AddLast17(5);
	}
	this->m_phaseOrder->p_AddLast17(7);
	this->m_overrideAttackSound=String(L"coralriffAttack",15);
	this->m_overrideHitSound=String(L"coralriffHit",12);
	this->m_overrideDeathSound=String(L"coralriffDeath",14);
	if(c_Util::m_IsCharacterActive(5) || c_Util::m_IsCharacterActive(7)){
		this->m_coinsToDrop=1;
	}
	return this;
}
c_Octoboss* c_Octoboss::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_Octoboss::p_Die(){
	c_Enemy::m_SetEnemiesToDropNoCoinsOverride();
	c_Level::m_DryUpAllWater(14);
	c_Enemy::p_Die();
	c_Enemy::m_KillAllEnemies();
}
bool c_Octoboss::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Octoboss.Hit(String, Int, Int, Entity, Bool, Int)",49));
	return false;
}
void c_Octoboss::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Octoboss.Update()",17));
}
void c_Octoboss::mark(){
	c_Enemy::mark();
	gc_mark_q(m_tentacle3);
	gc_mark_q(m_tentacle7);
	gc_mark_q(m_tentacle5);
	gc_mark_q(m_tentacle1);
	gc_mark_q(m_tentacle2);
	gc_mark_q(m_tentacle6);
	gc_mark_q(m_tentacle8);
	gc_mark_q(m_tentacle4);
	gc_mark_q(m_phaseOrder);
}
c_Tentacle::c_Tentacle(){
	m_initX=0;
	m_initY=0;
	m_initialXOff=-1;
	m_image2=0;
	m_nextX=0;
	m_nextY=0;
	m_boss=0;
	m_tentacleNum=-1;
}
c_Tentacle* c_Tentacle::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	this->m_initX=t_xVal;
	this->m_initY=t_yVal;
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"tentacle",8));
	this->m_initialXOff=int(this->m_xOff);
	gc_assign(this->m_image2,(new c_Sprite)->m_new2(String(L"entities/tentacle_tell.png",26),1,c_Image::m_DefaultFlags));
	this->m_image2->p_SetZ(FLOAT(-991.0));
	this->m_nextX=this->m_x;
	this->m_nextY=this->m_y;
	this->m_overrideAttackSound=String(L"tentacleAttack",14);
	this->m_overrideHitSound=String(L"tentacleHit",11);
	this->m_overrideDeathSound=String(L"tentacleDeath",13);
	return this;
}
c_Tentacle* c_Tentacle::m_new2(){
	c_Enemy::m_new();
	return this;
}
bool c_Tentacle::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Tentacle.Hit(String, Int, Int, Entity, Bool, Int)",49));
	return false;
}
void c_Tentacle::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Tentacle.Update()",17));
}
void c_Tentacle::mark(){
	c_Enemy::mark();
	gc_mark_q(m_image2);
	gc_mark_q(m_boss);
}
c_Bell::c_Bell(){
	m_bellNum=-1;
	m_isBig=false;
}
c_List23* c_Bell::m_bells;
c_Bell* c_Bell::m_new(int t_xVal,int t_yVal,int t_num){
	c_Enemy::m_new();
	this->m_bellNum=t_num;
	int t_l=1;
	if(t_num==5){
		t_l=2;
		this->m_isBig=true;
	}
	this->m_isCrate=true;
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"bell",4));
	this->m_overrideDeathSound=String(L"deadRingerBell",14)+String(this->m_bellNum);
	m_bells->p_AddLast23(this);
	return this;
}
c_Bell* c_Bell::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_Bell::p_Die(){
	if(!this->m_dead){
		m_bells->p_RemoveEach12(this);
		c_Enemy::p_Die();
		if(this->m_isBig){
			c_Enemy::m_KillAllEnemies();
		}
	}
}
bool c_Bell::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Bell.Hit(String, Int, Int, Entity, Bool, Int)",45));
	return false;
}
void c_Bell::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Bell.Update()",13));
}
void c_Bell::mark(){
	c_Enemy::mark();
}
c_List23::c_List23(){
	m__head=((new c_HeadNode23)->m_new());
}
c_List23* c_List23::m_new(){
	return this;
}
c_Node40* c_List23::p_AddLast23(c_Bell* t_data){
	return (new c_Node40)->m_new(m__head,m__head->m__pred,t_data);
}
c_List23* c_List23::m_new2(Array<c_Bell* > t_data){
	Array<c_Bell* > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		c_Bell* t_t=t_[t_2];
		t_2=t_2+1;
		p_AddLast23(t_t);
	}
	return this;
}
bool c_List23::p_Equals17(c_Bell* t_lhs,c_Bell* t_rhs){
	return t_lhs==t_rhs;
}
int c_List23::p_RemoveEach12(c_Bell* t_value){
	c_Node40* t_node=m__head->m__succ;
	while(t_node!=m__head){
		c_Node40* t_succ=t_node->m__succ;
		if(p_Equals17(t_node->m__data,t_value)){
			t_node->p_Remove();
		}
		t_node=t_succ;
	}
	return 0;
}
void c_List23::mark(){
	Object::mark();
	gc_mark_q(m__head);
}
c_Node40::c_Node40(){
	m__succ=0;
	m__pred=0;
	m__data=0;
}
c_Node40* c_Node40::m_new(c_Node40* t_succ,c_Node40* t_pred,c_Bell* t_data){
	gc_assign(m__succ,t_succ);
	gc_assign(m__pred,t_pred);
	gc_assign(m__succ->m__pred,this);
	gc_assign(m__pred->m__succ,this);
	gc_assign(m__data,t_data);
	return this;
}
c_Node40* c_Node40::m_new2(){
	return this;
}
int c_Node40::p_Remove(){
	gc_assign(m__succ->m__pred,m__pred);
	gc_assign(m__pred->m__succ,m__succ);
	return 0;
}
void c_Node40::mark(){
	Object::mark();
	gc_mark_q(m__succ);
	gc_mark_q(m__pred);
	gc_mark_q(m__data);
}
c_HeadNode23::c_HeadNode23(){
}
c_HeadNode23* c_HeadNode23::m_new(){
	c_Node40::m_new2();
	gc_assign(m__succ,(this));
	gc_assign(m__pred,(this));
	return this;
}
void c_HeadNode23::mark(){
	c_Node40::mark();
}
c_DeadRinger::c_DeadRinger(){
	m_seekingBell=0;
	m_bells=Array<c_Bell* >(5);
	m_imageStandard=0;
	m_imageSmash=0;
	m_imageCharge=0;
	m_imageChargeSwipe=0;
}
c_DeadRinger* c_DeadRinger::m_new(int t_xVal,int t_yVal,int t_l,c_Bell* t_b1,c_Bell* t_b2,c_Bell* t_b3,c_Bell* t_b4){
	c_Enemy::m_new();
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"dead_ringer",11));
	this->m_overrideHitSound=String(L"deadRingerHit",13);
	this->m_overrideDeathSound=String(L"deadRingerDeath",15);
	if(t_xVal>0){
		this->m_seekingBell=1;
	}
	gc_assign(this->m_bells[0],t_b1);
	gc_assign(this->m_bells[1],t_b2);
	gc_assign(this->m_bells[2],t_b3);
	gc_assign(this->m_bells[3],t_b4);
	gc_assign(this->m_imageStandard,this->m_image);
	gc_assign(this->m_imageSmash,(new c_Sprite)->m_new(String(L"entities/dead_ringer_hammer.png",31),35,54,28,c_Image::m_DefaultFlags));
	gc_assign(this->m_imageCharge,(new c_Sprite)->m_new(String(L"entities/dead_ringer_charge.png",31),50,43,6,c_Image::m_DefaultFlags));
	gc_assign(this->m_imageChargeSwipe,(new c_Sprite)->m_new(String(L"swipes/swipe_dead_ringer.png",28),24,20,4,1));
	return this;
}
c_DeadRinger* c_DeadRinger::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_DeadRinger::p_Die(){
	if(!this->m_dead){
		c_Enemy::m_SetEnemiesToDropNoCoinsOverride();
		if(!c_RenderableObject::m_deletingAll){
			c_Audio::m_PlayGameSoundAt(String(L"deadRingerDeath",15),this->m_x,this->m_y,false,-1,false);
		}
		c_Enemy::p_Die();
		c_Enemy::m_KillAllEnemies();
		c_Bell* t_bigBell=this->m_bells[4];
		if(t_bigBell!=0){
			t_bigBell->p_Die();
		}
	}
}
bool c_DeadRinger::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"DeadRinger.Hit(String, Int, Int, Entity, Bool, Int)",51));
	return false;
}
void c_DeadRinger::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"DeadRinger.Update()",19));
}
void c_DeadRinger::mark(){
	c_Enemy::mark();
	gc_mark_q(m_bells);
	gc_mark_q(m_imageStandard);
	gc_mark_q(m_imageSmash);
	gc_mark_q(m_imageCharge);
	gc_mark_q(m_imageChargeSwipe);
}
c_Rect::c_Rect(){
	m_x=0;
	m_y=0;
	m_w=0;
	m_h=0;
}
c_Rect* c_Rect::m_new(int t_xVal,int t_yVal,int t_wVal,int t_hVal){
	this->m_x=t_xVal;
	this->m_y=t_yVal;
	this->m_w=t_wVal;
	this->m_h=t_hVal;
	return this;
}
c_Rect* c_Rect::m_new2(){
	return this;
}
int c_Rect::p_GetRight(){
	return this->m_x+this->m_w;
}
int c_Rect::p_GetBottom(){
	return this->m_y+this->m_h;
}
String c_Rect::p_ToString(){
	return String(L"[",1)+String(this->m_x)+String(L", ",2)+String(this->p_GetRight())+String(L"]",1)+String(L" x ",3)+String(L"[",1)+String(this->m_y)+String(L", ",2)+String(this->p_GetBottom())+String(L"]",1);
}
c_Rect* c_Rect::m_MakeBounds(int t_minX,int t_minY,int t_maxX,int t_maxY){
	return (new c_Rect)->m_new(t_minX,t_minY,t_maxX-t_minX,t_maxY-t_minY);
}
bool c_Rect::p_Contains6(c_Rect* t_other){
	if(this->m_x>t_other->m_x){
		return false;
	}
	if(this->p_GetRight()<t_other->p_GetRight()){
		return false;
	}
	if(this->m_y>t_other->m_y){
		return false;
	}
	if(this->p_GetBottom()<t_other->p_GetBottom()){
		return false;
	}
	return true;
}
bool c_Rect::p_Contains7(int t_px,int t_py){
	return this->p_Contains5((new c_Point)->m_new(t_px,t_py));
}
bool c_Rect::p_Contains5(c_Point* t_other){
	return this->p_Contains6((new c_Rect)->m_new(t_other->m_x,t_other->m_y,0,0));
}
c_Point* c_Rect::p_GetCenter(){
	int t_centerX=this->m_x+this->m_w/2;
	int t_centerY=this->m_y+this->m_h/2;
	return (new c_Point)->m_new(t_centerX,t_centerY);
}
c_Point* c_Rect::p_RandomPoint(){
	int t_x=c_Util::m_RndIntRange(this->m_x,this->m_x+this->m_w,false,-1);
	int t_y=c_Util::m_RndIntRange(this->m_y,this->m_y+this->m_h,false,-1);
	return (new c_Point)->m_new(t_x,t_y);
}
c_Stack4* c_Rect::p_GetPoints(){
	c_Stack4* t_points=(new c_Stack4)->m_new();
	int t_xMax=this->m_x+this->m_w;
	int t_yMax=this->m_y+this->m_h;
	for(int t_x=this->m_x;t_x<=t_xMax;t_x=t_x+1){
		for(int t_y=this->m_y;t_y<=t_yMax;t_y=t_y+1){
			t_points->p_Push10((new c_Point)->m_new(t_x,t_y));
		}
	}
	return t_points;
}
int c_Rect::p_GetLeft(){
	return this->m_x;
}
int c_Rect::p_GetTop(){
	return this->m_y;
}
bool c_Rect::p_OnBorder(int t_px,int t_py){
	if(!this->p_Contains7(t_px,t_py)){
		return false;
	}
	if(t_px==this->m_x){
		return true;
	}
	if(t_py==this->m_y){
		return true;
	}
	if(t_px==this->m_x+this->m_w){
		return true;
	}
	if(t_py==this->m_y+this->m_h){
		return true;
	}
	return false;
}
int c_Rect::p_GetL1Dist(c_Point* t_other){
	int t_xDiff=0;
	if(t_other->m_x<this->m_x){
		t_xDiff=this->m_x-t_other->m_x;
	}else{
		if(t_other->m_x>this->p_GetRight()){
			t_xDiff=t_other->m_x-this->p_GetRight();
		}
	}
	int t_yDiff=0;
	if(t_other->m_y<this->m_y){
		t_yDiff=this->m_y-t_other->m_y;
	}else{
		if(t_other->m_y>this->p_GetBottom()){
			t_yDiff=t_other->m_y-this->p_GetBottom();
		}
	}
	return t_xDiff+t_yDiff;
}
c_Stack4* c_Rect::p_GetCorners(){
	c_Stack4* t_corners=(new c_Stack4)->m_new();
	t_corners->p_Push10((new c_Point)->m_new(this->p_GetLeft(),this->p_GetTop()));
	t_corners->p_Push10((new c_Point)->m_new(this->p_GetLeft(),this->p_GetBottom()));
	t_corners->p_Push10((new c_Point)->m_new(this->p_GetRight(),this->p_GetTop()));
	t_corners->p_Push10((new c_Point)->m_new(this->p_GetRight(),this->p_GetBottom()));
	return t_corners;
}
int c_Rect::p_GetL1Dist2(c_Rect* t_other){
	int t_l1Dist=999999;
	c_Enumerator24* t_=this->p_GetCorners()->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Point* t_corner=t_->p_NextObject();
		t_l1Dist=bb_math_Min(t_l1Dist,t_other->p_GetL1Dist(t_corner));
	}
	c_Enumerator24* t_2=t_other->p_GetCorners()->p_ObjectEnumerator();
	while(t_2->p_HasNext()){
		c_Point* t_otherCorner=t_2->p_NextObject();
		t_l1Dist=bb_math_Min(t_l1Dist,this->p_GetL1Dist(t_otherCorner));
	}
	return t_l1Dist;
}
bool c_Rect::p_ContainsNoCorners(c_Rect* t_other){
	c_Enumerator24* t_=this->p_GetCorners()->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Point* t_corner=t_->p_NextObject();
		if(t_other->p_Contains7(t_corner->m_x,t_corner->m_y)){
			return false;
		}
	}
	return this->p_Contains6(t_other);
}
c_Rect* c_Rect::p_Copy(){
	return (new c_Rect)->m_new(this->m_x,this->m_y,this->m_w,this->m_h);
}
void c_Rect::mark(){
	Object::mark();
}
c_Stack4::c_Stack4(){
	m_data=Array<c_Point* >();
	m_length=0;
}
c_Stack4* c_Stack4::m_new(){
	return this;
}
c_Stack4* c_Stack4::m_new2(Array<c_Point* > t_data){
	gc_assign(this->m_data,t_data.Slice(0));
	this->m_length=t_data.Length();
	return this;
}
void c_Stack4::p_Push10(c_Point* t_value){
	if(m_length==m_data.Length()){
		gc_assign(m_data,m_data.Resize(m_length*2+10));
	}
	gc_assign(m_data[m_length],t_value);
	m_length+=1;
}
void c_Stack4::p_Push11(Array<c_Point* > t_values,int t_offset,int t_count){
	for(int t_i=0;t_i<t_count;t_i=t_i+1){
		p_Push10(t_values[t_offset+t_i]);
	}
}
void c_Stack4::p_Push12(Array<c_Point* > t_values,int t_offset){
	p_Push11(t_values,t_offset,t_values.Length()-t_offset);
}
c_Point* c_Stack4::p_Get2(int t_index){
	return m_data[t_index];
}
c_Enumerator24* c_Stack4::p_ObjectEnumerator(){
	return (new c_Enumerator24)->m_new(this);
}
c_Point* c_Stack4::m_NIL;
void c_Stack4::p_Length2(int t_newlength){
	if(t_newlength<m_length){
		for(int t_i=t_newlength;t_i<m_length;t_i=t_i+1){
			gc_assign(m_data[t_i],m_NIL);
		}
	}else{
		if(t_newlength>m_data.Length()){
			gc_assign(m_data,m_data.Resize(bb_math_Max(m_length*2+10,t_newlength)));
		}
	}
	m_length=t_newlength;
}
int c_Stack4::p_Length(){
	return m_length;
}
void c_Stack4::p_Set17(int t_index,c_Point* t_value){
	gc_assign(m_data[t_index],t_value);
}
void c_Stack4::p_Remove2(int t_index){
	for(int t_i=t_index;t_i<m_length-1;t_i=t_i+1){
		gc_assign(m_data[t_i],m_data[t_i+1]);
	}
	m_length-=1;
	gc_assign(m_data[m_length],m_NIL);
}
c_Point* c_Stack4::p_Pop(){
	m_length-=1;
	c_Point* t_v=m_data[m_length];
	gc_assign(m_data[m_length],m_NIL);
	return t_v;
}
void c_Stack4::mark(){
	Object::mark();
	gc_mark_q(m_data);
}
c_StackEx2::c_StackEx2(){
}
c_StackEx2* c_StackEx2::m_new(){
	c_Stack4::m_new();
	return this;
}
c_Point* c_StackEx2::p_ChooseRandom(bool t_useSeed){
	int t_randomIndex=c_Util::m_RndIntRangeFromZero(this->p_Length()-1,t_useSeed);
	return this->p_Get2(t_randomIndex);
}
void c_StackEx2::p_Shuffle(bool t_useSeed){
	for(int t_i=1;t_i<this->p_Length();t_i=t_i+1){
		int t_randomValue=c_Util::m_RndIntRangeFromZero(t_i,t_useSeed);
		if(t_i!=t_randomValue){
			c_Point* t_value_at_i=this->p_Get2(t_i);
			c_Point* t_value_at_randomValue=this->p_Get2(t_randomValue);
			this->p_Set17(t_i,t_value_at_randomValue);
			this->p_Set17(t_randomValue,t_value_at_i);
		}
	}
}
void c_StackEx2::mark(){
	c_Stack4::mark();
}
c_IntPointStack::c_IntPointStack(){
}
c_IntPointStack* c_IntPointStack::m_new(){
	c_StackEx2::m_new();
	return this;
}
void c_IntPointStack::mark(){
	c_StackEx2::mark();
}
c_Stack5::c_Stack5(){
	m_data=Array<c_XMLNode* >();
	m_length=0;
}
c_Stack5* c_Stack5::m_new(){
	return this;
}
c_Stack5* c_Stack5::m_new2(Array<c_XMLNode* > t_data){
	gc_assign(this->m_data,t_data.Slice(0));
	this->m_length=t_data.Length();
	return this;
}
c_XMLNode* c_Stack5::m_NIL;
void c_Stack5::p_Clear(){
	for(int t_i=0;t_i<m_length;t_i=t_i+1){
		gc_assign(m_data[t_i],m_NIL);
	}
	m_length=0;
}
void c_Stack5::p_Push13(c_XMLNode* t_value){
	if(m_length==m_data.Length()){
		gc_assign(m_data,m_data.Resize(m_length*2+10));
	}
	gc_assign(m_data[m_length],t_value);
	m_length+=1;
}
void c_Stack5::p_Push14(Array<c_XMLNode* > t_values,int t_offset,int t_count){
	for(int t_i=0;t_i<t_count;t_i=t_i+1){
		p_Push13(t_values[t_offset+t_i]);
	}
}
void c_Stack5::p_Push15(Array<c_XMLNode* > t_values,int t_offset){
	p_Push14(t_values,t_offset,t_values.Length()-t_offset);
}
bool c_Stack5::p_IsEmpty(){
	return m_length==0;
}
c_XMLNode* c_Stack5::p_Get2(int t_index){
	return m_data[t_index];
}
void c_Stack5::p_Remove2(int t_index){
	for(int t_i=t_index;t_i<m_length-1;t_i=t_i+1){
		gc_assign(m_data[t_i],m_data[t_i+1]);
	}
	m_length-=1;
	gc_assign(m_data[m_length],m_NIL);
}
c_Enumerator13* c_Stack5::p_ObjectEnumerator(){
	return (new c_Enumerator13)->m_new(this);
}
void c_Stack5::p_Length2(int t_newlength){
	if(t_newlength<m_length){
		for(int t_i=t_newlength;t_i<m_length;t_i=t_i+1){
			gc_assign(m_data[t_i],m_NIL);
		}
	}else{
		if(t_newlength>m_data.Length()){
			gc_assign(m_data,m_data.Resize(bb_math_Max(m_length*2+10,t_newlength)));
		}
	}
	m_length=t_newlength;
}
int c_Stack5::p_Length(){
	return m_length;
}
void c_Stack5::mark(){
	Object::mark();
	gc_mark_q(m_data);
}
c_Enumerator12::c_Enumerator12(){
	m_stack=0;
	m_index=0;
}
c_Enumerator12* c_Enumerator12::m_new(c_Stack3* t_stack){
	gc_assign(this->m_stack,t_stack);
	return this;
}
c_Enumerator12* c_Enumerator12::m_new2(){
	return this;
}
bool c_Enumerator12::p_HasNext(){
	return m_index<m_stack->p_Length();
}
String c_Enumerator12::p_NextObject(){
	m_index+=1;
	return m_stack->m_data[m_index-1];
}
void c_Enumerator12::mark(){
	Object::mark();
	gc_mark_q(m_stack);
}
c_Enumerator13::c_Enumerator13(){
	m_stack=0;
	m_index=0;
}
c_Enumerator13* c_Enumerator13::m_new(c_Stack5* t_stack){
	gc_assign(this->m_stack,t_stack);
	return this;
}
c_Enumerator13* c_Enumerator13::m_new2(){
	return this;
}
bool c_Enumerator13::p_HasNext(){
	return m_index<m_stack->p_Length();
}
c_XMLNode* c_Enumerator13::p_NextObject(){
	m_index+=1;
	return m_stack->m_data[m_index-1];
}
void c_Enumerator13::mark(){
	Object::mark();
	gc_mark_q(m_stack);
}
bool bb_controller_game_debugEnablePrototypes;
c_TileObject::c_TileObject(){
	m_x=0;
	m_y=0;
	m_type=0;
	m_zone=0;
	m_cracked=false;
	m_torch=false;
}
void c_TileObject::mark(){
	Object::mark();
}
c_List24::c_List24(){
	m__head=((new c_HeadNode24)->m_new());
}
c_List24* c_List24::m_new(){
	return this;
}
c_Node41* c_List24::p_AddLast24(c_TileObject* t_data){
	return (new c_Node41)->m_new(m__head,m__head->m__pred,t_data);
}
c_List24* c_List24::m_new2(Array<c_TileObject* > t_data){
	Array<c_TileObject* > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		c_TileObject* t_t=t_[t_2];
		t_2=t_2+1;
		p_AddLast24(t_t);
	}
	return this;
}
c_Enumerator14* c_List24::p_ObjectEnumerator(){
	return (new c_Enumerator14)->m_new(this);
}
void c_List24::mark(){
	Object::mark();
	gc_mark_q(m__head);
}
c_Node41::c_Node41(){
	m__succ=0;
	m__pred=0;
	m__data=0;
}
c_Node41* c_Node41::m_new(c_Node41* t_succ,c_Node41* t_pred,c_TileObject* t_data){
	gc_assign(m__succ,t_succ);
	gc_assign(m__pred,t_pred);
	gc_assign(m__succ->m__pred,this);
	gc_assign(m__pred->m__succ,this);
	gc_assign(m__data,t_data);
	return this;
}
c_Node41* c_Node41::m_new2(){
	return this;
}
void c_Node41::mark(){
	Object::mark();
	gc_mark_q(m__succ);
	gc_mark_q(m__pred);
	gc_mark_q(m__data);
}
c_HeadNode24::c_HeadNode24(){
}
c_HeadNode24* c_HeadNode24::m_new(){
	c_Node41::m_new2();
	gc_assign(m__succ,(this));
	gc_assign(m__pred,(this));
	return this;
}
void c_HeadNode24::mark(){
	c_Node41::mark();
}
c_Enumerator14::c_Enumerator14(){
	m__list=0;
	m__curr=0;
}
c_Enumerator14* c_Enumerator14::m_new(c_List24* t_list){
	gc_assign(m__list,t_list);
	gc_assign(m__curr,t_list->m__head->m__succ);
	return this;
}
c_Enumerator14* c_Enumerator14::m_new2(){
	return this;
}
bool c_Enumerator14::p_HasNext(){
	while(m__curr->m__succ->m__pred!=m__curr){
		gc_assign(m__curr,m__curr->m__succ);
	}
	return m__curr!=m__list->m__head;
}
c_TileObject* c_Enumerator14::p_NextObject(){
	c_TileObject* t_data=m__curr->m__data;
	gc_assign(m__curr,m__curr->m__succ);
	return t_data;
}
void c_Enumerator14::mark(){
	Object::mark();
	gc_mark_q(m__list);
	gc_mark_q(m__curr);
}
c_Direction::c_Direction(){
}
void c_Direction::mark(){
	Object::mark();
}
c_TrapObject::c_TrapObject(){
	m_type=0;
	m_x=0;
	m_y=0;
	m_subtype=-1;
}
void c_TrapObject::mark(){
	Object::mark();
}
c_List25::c_List25(){
	m__head=((new c_HeadNode25)->m_new());
}
c_List25* c_List25::m_new(){
	return this;
}
c_Node42* c_List25::p_AddLast25(c_TrapObject* t_data){
	return (new c_Node42)->m_new(m__head,m__head->m__pred,t_data);
}
c_List25* c_List25::m_new2(Array<c_TrapObject* > t_data){
	Array<c_TrapObject* > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		c_TrapObject* t_t=t_[t_2];
		t_2=t_2+1;
		p_AddLast25(t_t);
	}
	return this;
}
c_Enumerator15* c_List25::p_ObjectEnumerator(){
	return (new c_Enumerator15)->m_new(this);
}
void c_List25::mark(){
	Object::mark();
	gc_mark_q(m__head);
}
c_Node42::c_Node42(){
	m__succ=0;
	m__pred=0;
	m__data=0;
}
c_Node42* c_Node42::m_new(c_Node42* t_succ,c_Node42* t_pred,c_TrapObject* t_data){
	gc_assign(m__succ,t_succ);
	gc_assign(m__pred,t_pred);
	gc_assign(m__succ->m__pred,this);
	gc_assign(m__pred->m__succ,this);
	gc_assign(m__data,t_data);
	return this;
}
c_Node42* c_Node42::m_new2(){
	return this;
}
void c_Node42::mark(){
	Object::mark();
	gc_mark_q(m__succ);
	gc_mark_q(m__pred);
	gc_mark_q(m__data);
}
c_HeadNode25::c_HeadNode25(){
}
c_HeadNode25* c_HeadNode25::m_new(){
	c_Node42::m_new2();
	gc_assign(m__succ,(this));
	gc_assign(m__pred,(this));
	return this;
}
void c_HeadNode25::mark(){
	c_Node42::mark();
}
c_Enumerator15::c_Enumerator15(){
	m__list=0;
	m__curr=0;
}
c_Enumerator15* c_Enumerator15::m_new(c_List25* t_list){
	gc_assign(m__list,t_list);
	gc_assign(m__curr,t_list->m__head->m__succ);
	return this;
}
c_Enumerator15* c_Enumerator15::m_new2(){
	return this;
}
bool c_Enumerator15::p_HasNext(){
	while(m__curr->m__succ->m__pred!=m__curr){
		gc_assign(m__curr,m__curr->m__succ);
	}
	return m__curr!=m__list->m__head;
}
c_TrapObject* c_Enumerator15::p_NextObject(){
	c_TrapObject* t_data=m__curr->m__data;
	gc_assign(m__curr,m__curr->m__succ);
	return t_data;
}
void c_Enumerator15::mark(){
	Object::mark();
	gc_mark_q(m__list);
	gc_mark_q(m__curr);
}
c_TrapDoor::c_TrapDoor(){
}
c_TrapDoor* c_TrapDoor::m_new(int t_xVal,int t_yVal){
	c_Trap::m_new(t_xVal,t_yVal,3);
	this->m_xOff=FLOAT(0.0);
	this->m_yOff=FLOAT(15.0);
	gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"traps/trapdoor.png",18),25,20,4,c_Image::m_DefaultFlags));
	this->m_image->p_SetZ(FLOAT(-995.0));
	return this;
}
c_TrapDoor* c_TrapDoor::m_new2(){
	c_Trap::m_new2();
	return this;
}
void c_TrapDoor::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"TrapDoor.Update()",17));
}
void c_TrapDoor::mark(){
	c_Trap::mark();
}
c_TeleportTrap::c_TeleportTrap(){
}
c_TeleportTrap* c_TeleportTrap::m_new(int t_xVal,int t_yVal){
	c_Trap::m_new(t_xVal,t_yVal,5);
	this->m_xOff=FLOAT(5.0);
	this->m_yOff=FLOAT(15.0);
	gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"traps/teleporttrap.png",22),14,16,4,c_Image::m_DefaultFlags));
	this->m_image->p_SetZ(FLOAT(-995.0));
	return this;
}
c_TeleportTrap* c_TeleportTrap::m_new2(){
	c_Trap::m_new2();
	return this;
}
void c_TeleportTrap::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"TeleportTrap.Update()",21));
}
void c_TeleportTrap::mark(){
	c_Trap::mark();
}
c_SlowDownTrap::c_SlowDownTrap(){
}
c_SlowDownTrap* c_SlowDownTrap::m_new(int t_xVal,int t_yVal){
	c_Trap::m_new(t_xVal,t_yVal,6);
	this->m_xOff=FLOAT(5.0);
	this->m_yOff=FLOAT(15.0);
	gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"traps/slowdowntrap.png",22),14,16,4,c_Image::m_DefaultFlags));
	this->m_image->p_SetZOff(FLOAT(-995.0));
	return this;
}
c_SlowDownTrap* c_SlowDownTrap::m_new2(){
	c_Trap::m_new2();
	return this;
}
void c_SlowDownTrap::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"SlowDownTrap.Update()",21));
}
void c_SlowDownTrap::mark(){
	c_Trap::mark();
}
c_BombTrap::c_BombTrap(){
}
c_BombTrap* c_BombTrap::m_new(int t_xVal,int t_yVal){
	c_Trap::m_new(t_xVal,t_yVal,9);
	this->m_xOff=FLOAT(5.0);
	this->m_yOff=FLOAT(15.0);
	gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"traps/bombtrap.png",18),14,16,4,c_Image::m_DefaultFlags));
	this->m_image->p_SetZ(FLOAT(-995.0));
	return this;
}
c_BombTrap* c_BombTrap::m_new2(){
	c_Trap::m_new2();
	return this;
}
void c_BombTrap::mark(){
	c_Trap::mark();
}
c_ScatterTrap::c_ScatterTrap(){
}
c_ScatterTrap* c_ScatterTrap::m_new(int t_xVal,int t_yVal){
	c_Trap::m_new(t_xVal,t_yVal,14);
	this->m_xOff=FLOAT(5.0);
	this->m_yOff=FLOAT(15.0);
	gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"traps/scattertrap.png",21),14,16,4,c_Image::m_DefaultFlags));
	this->m_image->p_SetZ(FLOAT(-995.0));
	return this;
}
c_ScatterTrap* c_ScatterTrap::m_new2(){
	c_Trap::m_new2();
	return this;
}
void c_ScatterTrap::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ScatterTrap.Update()",20));
}
void c_ScatterTrap::mark(){
	c_Trap::mark();
}
c_FireTrap::c_FireTrap(){
	m_fireDir=0;
	m_manual=false;
}
c_FireTrap* c_FireTrap::m_new(int t_xVal,int t_yVal,int t_d,bool t_m){
	c_Trap::m_new(t_xVal,t_yVal,10);
	this->m_xOff=FLOAT(12.0);
	this->m_yOff=FLOAT(7.0);
	this->m_fireDir=t_d;
	gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"traps/firetrap.png",18),34,23,6,1));
	this->m_image->p_SetZOff(FLOAT(10.0));
	this->m_manual=t_m;
	return this;
}
c_FireTrap* c_FireTrap::m_new2(){
	c_Trap::m_new2();
	return this;
}
bool c_FireTrap::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"FireTrap.Hit(String, Int, Int, Entity, Bool, Int)",49));
	return false;
}
void c_FireTrap::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"FireTrap.Update()",17));
}
void c_FireTrap::mark(){
	c_Trap::mark();
}
c_List26::c_List26(){
	m__head=((new c_HeadNode26)->m_new());
}
c_List26* c_List26::m_new(){
	return this;
}
c_Node43* c_List26::p_AddLast26(c_Point* t_data){
	return (new c_Node43)->m_new(m__head,m__head->m__pred,t_data);
}
c_List26* c_List26::m_new2(Array<c_Point* > t_data){
	Array<c_Point* > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		c_Point* t_t=t_[t_2];
		t_2=t_2+1;
		p_AddLast26(t_t);
	}
	return this;
}
int c_List26::p_Count(){
	int t_n=0;
	c_Node43* t_node=m__head->m__succ;
	while(t_node!=m__head){
		t_node=t_node->m__succ;
		t_n+=1;
	}
	return t_n;
}
c_Enumerator16* c_List26::p_ObjectEnumerator(){
	return (new c_Enumerator16)->m_new(this);
}
Array<c_Point* > c_List26::p_ToArray(){
	Array<c_Point* > t_arr=Array<c_Point* >(p_Count());
	int t_i=0;
	c_Enumerator16* t_=this->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Point* t_t=t_->p_NextObject();
		gc_assign(t_arr[t_i],t_t);
		t_i+=1;
	}
	return t_arr;
}
c_Point* c_List26::p_RemoveFirst(){
	c_Point* t_data=m__head->m__succ->m__data;
	m__head->m__succ->p_Remove();
	return t_data;
}
bool c_List26::p_Equals18(c_Point* t_lhs,c_Point* t_rhs){
	return t_lhs==t_rhs;
}
c_Node43* c_List26::p_Find9(c_Point* t_value,c_Node43* t_start){
	while(t_start!=m__head){
		if(p_Equals18(t_value,t_start->m__data)){
			return t_start;
		}
		t_start=t_start->m__succ;
	}
	return 0;
}
c_Node43* c_List26::p_Find10(c_Point* t_value){
	return p_Find9(t_value,m__head->m__succ);
}
void c_List26::p_RemoveFirst6(c_Point* t_value){
	c_Node43* t_node=p_Find10(t_value);
	if((t_node)!=0){
		t_node->p_Remove();
	}
}
int c_List26::p_Clear(){
	gc_assign(m__head->m__succ,m__head);
	gc_assign(m__head->m__pred,m__head);
	return 0;
}
int c_List26::p_RemoveEach13(c_Point* t_value){
	c_Node43* t_node=m__head->m__succ;
	while(t_node!=m__head){
		c_Node43* t_succ=t_node->m__succ;
		if(p_Equals18(t_node->m__data,t_value)){
			t_node->p_Remove();
		}
		t_node=t_succ;
	}
	return 0;
}
bool c_List26::p_IsEmpty(){
	return m__head->m__succ==m__head;
}
void c_List26::mark(){
	Object::mark();
	gc_mark_q(m__head);
}
c_IntPointList::c_IntPointList(){
}
c_IntPointList* c_IntPointList::m_new(){
	c_List26::m_new();
	return this;
}
bool c_IntPointList::p_Equals18(c_Point* t_a,c_Point* t_b){
	return t_a->m_x==t_b->m_x && t_a->m_y==t_b->m_y;
}
void c_IntPointList::mark(){
	c_List26::mark();
}
c_Node43::c_Node43(){
	m__succ=0;
	m__pred=0;
	m__data=0;
}
c_Node43* c_Node43::m_new(c_Node43* t_succ,c_Node43* t_pred,c_Point* t_data){
	gc_assign(m__succ,t_succ);
	gc_assign(m__pred,t_pred);
	gc_assign(m__succ->m__pred,this);
	gc_assign(m__pred->m__succ,this);
	gc_assign(m__data,t_data);
	return this;
}
c_Node43* c_Node43::m_new2(){
	return this;
}
int c_Node43::p_Remove(){
	gc_assign(m__succ->m__pred,m__pred);
	gc_assign(m__pred->m__succ,m__succ);
	return 0;
}
void c_Node43::mark(){
	Object::mark();
	gc_mark_q(m__succ);
	gc_mark_q(m__pred);
	gc_mark_q(m__data);
}
c_HeadNode26::c_HeadNode26(){
}
c_HeadNode26* c_HeadNode26::m_new(){
	c_Node43::m_new2();
	gc_assign(m__succ,(this));
	gc_assign(m__pred,(this));
	return this;
}
void c_HeadNode26::mark(){
	c_Node43::mark();
}
c_Enumerator16::c_Enumerator16(){
	m__list=0;
	m__curr=0;
}
c_Enumerator16* c_Enumerator16::m_new(c_List26* t_list){
	gc_assign(m__list,t_list);
	gc_assign(m__curr,t_list->m__head->m__succ);
	return this;
}
c_Enumerator16* c_Enumerator16::m_new2(){
	return this;
}
bool c_Enumerator16::p_HasNext(){
	while(m__curr->m__succ->m__pred!=m__curr){
		gc_assign(m__curr,m__curr->m__succ);
	}
	return m__curr!=m__list->m__head;
}
c_Point* c_Enumerator16::p_NextObject(){
	c_Point* t_data=m__curr->m__data;
	gc_assign(m__curr,m__curr->m__succ);
	return t_data;
}
void c_Enumerator16::mark(){
	Object::mark();
	gc_mark_q(m__list);
	gc_mark_q(m__curr);
}
c_SpecialRoomType::c_SpecialRoomType(){
}
void c_SpecialRoomType::mark(){
	Object::mark();
}
c_TravelRune::c_TravelRune(){
	m_runeType=1;
	m_travelToX=0;
	m_travelToY=0;
}
c_TravelRune* c_TravelRune::m_new(int t_xVal,int t_yVal,int t_toX,int t_toY,int t_runeNum){
	c_Trap::m_new(t_xVal,t_yVal,8);
	this->m_xOff=FLOAT(-1.0);
	this->m_yOff=FLOAT(12.0);
	this->m_isRune=true;
	this->m_runeType=t_runeNum;
	this->m_travelToX=t_toX;
	this->m_travelToY=t_toY;
	gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"traps/travelrune.png",20),24,24,4,c_Image::m_DefaultFlags));
	this->m_image->p_SetZ(FLOAT(-995.0));
	return this;
}
c_TravelRune* c_TravelRune::m_new2(){
	c_Trap::m_new2();
	return this;
}
void c_TravelRune::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"TravelRune.Update()",19));
}
void c_TravelRune::mark(){
	c_Trap::mark();
}
c_TravelRuneType::c_TravelRuneType(){
}
void c_TravelRuneType::mark(){
	Object::mark();
}
c_Medic::c_Medic(){
}
c_Medic* c_Medic::m_new(int t_xVal,int t_yVal,int t_l,bool t_captv){
	c_NPC::m_new();
	this->p_NPCInit(t_xVal,t_yVal,t_l,String(L"medic",5),t_captv,false);
	return this;
}
c_Medic* c_Medic::m_new2(){
	c_NPC::m_new();
	return this;
}
void c_Medic::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Medic.Update()",14));
}
void c_Medic::mark(){
	c_NPC::mark();
}
c_List27::c_List27(){
	m__head=((new c_HeadNode27)->m_new());
}
c_List27* c_List27::m_new(){
	return this;
}
c_Node44* c_List27::p_AddLast27(c_SaleItem* t_data){
	return (new c_Node44)->m_new(m__head,m__head->m__pred,t_data);
}
c_List27* c_List27::m_new2(Array<c_SaleItem* > t_data){
	Array<c_SaleItem* > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		c_SaleItem* t_t=t_[t_2];
		t_2=t_2+1;
		p_AddLast27(t_t);
	}
	return this;
}
bool c_List27::p_Equals19(c_SaleItem* t_lhs,c_SaleItem* t_rhs){
	return t_lhs==t_rhs;
}
int c_List27::p_RemoveEach14(c_SaleItem* t_value){
	c_Node44* t_node=m__head->m__succ;
	while(t_node!=m__head){
		c_Node44* t_succ=t_node->m__succ;
		if(p_Equals19(t_node->m__data,t_value)){
			t_node->p_Remove();
		}
		t_node=t_succ;
	}
	return 0;
}
c_Enumerator30* c_List27::p_ObjectEnumerator(){
	return (new c_Enumerator30)->m_new(this);
}
void c_List27::mark(){
	Object::mark();
	gc_mark_q(m__head);
}
c_Node44::c_Node44(){
	m__succ=0;
	m__pred=0;
	m__data=0;
}
c_Node44* c_Node44::m_new(c_Node44* t_succ,c_Node44* t_pred,c_SaleItem* t_data){
	gc_assign(m__succ,t_succ);
	gc_assign(m__pred,t_pred);
	gc_assign(m__succ->m__pred,this);
	gc_assign(m__pred->m__succ,this);
	gc_assign(m__data,t_data);
	return this;
}
c_Node44* c_Node44::m_new2(){
	return this;
}
int c_Node44::p_Remove(){
	gc_assign(m__succ->m__pred,m__pred);
	gc_assign(m__pred->m__succ,m__succ);
	return 0;
}
void c_Node44::mark(){
	Object::mark();
	gc_mark_q(m__succ);
	gc_mark_q(m__pred);
	gc_mark_q(m__data);
}
c_HeadNode27::c_HeadNode27(){
}
c_HeadNode27* c_HeadNode27::m_new(){
	c_Node44::m_new2();
	gc_assign(m__succ,(this));
	gc_assign(m__pred,(this));
	return this;
}
void c_HeadNode27::mark(){
	c_Node44::mark();
}
c_Thing::c_Thing(){
}
c_Thing* c_Thing::m_new(int t_xVal,int t_yVal,bool t_collides){
	c_Entity::m_new();
	this->m_x=t_xVal;
	this->m_y=t_yVal;
	this->m_collides=t_collides;
	return this;
}
c_Thing* c_Thing::m_new2(){
	c_Entity::m_new();
	return this;
}
bool c_Thing::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Thing.Hit(String, Int, Int, Entity, Bool, Int)",46));
	return false;
}
void c_Thing::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Thing.Update()",14));
}
void c_Thing::mark(){
	c_Entity::mark();
}
c_WeightedPicker::c_WeightedPicker(){
	m_weights=(new c_Stack2)->m_new();
	m_enabled=(new c_Stack6)->m_new();
}
c_WeightedPicker* c_WeightedPicker::m_new(){
	return this;
}
void c_WeightedPicker::p_Push4(int t_weight){
	this->m_weights->p_Push4(t_weight);
	this->m_enabled->p_Push16(true);
}
int c_WeightedPicker::p__IndexOfEnabled(int t_startIndex){
	int t_i=t_startIndex;
	do{
		t_i+=1;
		bb_logger_Debug->p_Assert(t_i<this->m_weights->p_Length(),String());
	}while(!(this->m_enabled->p_Get2(t_i)));
	return t_i;
}
int c_WeightedPicker::p_PickRandom(bool t_useSeed){
	bb_logger_Debug->p_Assert(this->m_weights->p_Length()==this->m_enabled->p_Length(),String());
	int t_totalWeight=0;
	for(int t_i=0;t_i<this->m_weights->p_Length();t_i=t_i+1){
		if(this->m_enabled->p_Get2(t_i)){
			t_totalWeight+=this->m_weights->p_Get2(t_i);
		}
	}
	bb_logger_Debug->p_Assert(t_totalWeight>0,String());
	int t_rnd=c_Util::m_RndIntRangeFromZero(t_totalWeight-1,t_useSeed);
	int t_rndIndex=this->p__IndexOfEnabled(-1);
	while(t_rnd>=this->m_weights->p_Get2(t_rndIndex)){
		t_rnd-=this->m_weights->p_Get2(t_rndIndex);
		t_rndIndex=this->p__IndexOfEnabled(t_rndIndex);
	}
	bb_logger_Debug->p_Assert(t_rnd<this->m_weights->p_Get2(t_rndIndex),String());
	return t_rndIndex;
}
int c_WeightedPicker::p_Length(){
	return this->m_weights->p_Length();
}
void c_WeightedPicker::p_SetEnabled(int t_i,bool t_en){
	this->m_enabled->p_Set18(t_i,t_en);
}
void c_WeightedPicker::mark(){
	Object::mark();
	gc_mark_q(m_weights);
	gc_mark_q(m_enabled);
}
c_Stack6::c_Stack6(){
	m_data=Array<bool >();
	m_length=0;
}
c_Stack6* c_Stack6::m_new(){
	return this;
}
c_Stack6* c_Stack6::m_new2(Array<bool > t_data){
	gc_assign(this->m_data,t_data.Slice(0));
	this->m_length=t_data.Length();
	return this;
}
void c_Stack6::p_Push16(bool t_value){
	if(m_length==m_data.Length()){
		gc_assign(m_data,m_data.Resize(m_length*2+10));
	}
	m_data[m_length]=t_value;
	m_length+=1;
}
void c_Stack6::p_Push17(Array<bool > t_values,int t_offset,int t_count){
	for(int t_i=0;t_i<t_count;t_i=t_i+1){
		p_Push16(t_values[t_offset+t_i]);
	}
}
void c_Stack6::p_Push18(Array<bool > t_values,int t_offset){
	p_Push17(t_values,t_offset,t_values.Length()-t_offset);
}
bool c_Stack6::m_NIL;
void c_Stack6::p_Length2(int t_newlength){
	if(t_newlength<m_length){
		for(int t_i=t_newlength;t_i<m_length;t_i=t_i+1){
			m_data[t_i]=m_NIL;
		}
	}else{
		if(t_newlength>m_data.Length()){
			gc_assign(m_data,m_data.Resize(bb_math_Max(m_length*2+10,t_newlength)));
		}
	}
	m_length=t_newlength;
}
int c_Stack6::p_Length(){
	return m_length;
}
bool c_Stack6::p_Get2(int t_index){
	return m_data[t_index];
}
void c_Stack6::p_Set18(int t_index,bool t_value){
	m_data[t_index]=t_value;
}
void c_Stack6::mark(){
	Object::mark();
	gc_mark_q(m_data);
}
c_UncertaintyWeaponPredicate::c_UncertaintyWeaponPredicate(){
}
c_UncertaintyWeaponPredicate* c_UncertaintyWeaponPredicate::m_new(){
	return this;
}
bool c_UncertaintyWeaponPredicate::p_Call(c_XMLNode* t_n){
	if(c_Item::m_IsItemOfClass(t_n,String(L"isObsidian",10)) || c_Item::m_IsItemOfClass(t_n,String(L"isTitanium",10))){
		return !c_Item::m_IsItemOfClass(t_n,String(L"isDagger",8)) && !c_Item::m_IsItemOfClass(t_n,String(L"isSpear",7)) && !c_Item::m_IsItemOfClass(t_n,String(L"isCrossbow",10));
	}
	return false;
}
void c_UncertaintyWeaponPredicate::mark(){
	Object::mark();
}
c_UncertaintyRingPredicate::c_UncertaintyRingPredicate(){
}
c_UncertaintyRingPredicate* c_UncertaintyRingPredicate::m_new(){
	return this;
}
bool c_UncertaintyRingPredicate::p_Call(c_XMLNode* t_n){
	String t_name=t_n->p_name();
	String t_6=t_name;
	if(t_6==String(L"ring_peace",10) || t_6==String(L"ring_gold",9) || t_6==String(L"ring_charisma",13) || t_6==String(L"ring_regeneration",17) || t_6==String(L"ring_courage",12) || t_6==String(L"ring_might",10) || t_6==String(L"ring_war",8) || t_6==String(L"ring_frost",10)){
		return true;
	}
	return false;
}
void c_UncertaintyRingPredicate::mark(){
	Object::mark();
}
c_List28::c_List28(){
	m__head=((new c_HeadNode28)->m_new());
}
c_List28* c_List28::m_new(){
	return this;
}
c_Node45* c_List28::p_AddLast28(c_Shrine* t_data){
	return (new c_Node45)->m_new(m__head,m__head->m__pred,t_data);
}
c_List28* c_List28::m_new2(Array<c_Shrine* > t_data){
	Array<c_Shrine* > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		c_Shrine* t_t=t_[t_2];
		t_2=t_2+1;
		p_AddLast28(t_t);
	}
	return this;
}
c_Enumerator28* c_List28::p_ObjectEnumerator(){
	return (new c_Enumerator28)->m_new(this);
}
bool c_List28::p_Equals20(c_Shrine* t_lhs,c_Shrine* t_rhs){
	return t_lhs==t_rhs;
}
int c_List28::p_RemoveEach15(c_Shrine* t_value){
	c_Node45* t_node=m__head->m__succ;
	while(t_node!=m__head){
		c_Node45* t_succ=t_node->m__succ;
		if(p_Equals20(t_node->m__data,t_value)){
			t_node->p_Remove();
		}
		t_node=t_succ;
	}
	return 0;
}
void c_List28::mark(){
	Object::mark();
	gc_mark_q(m__head);
}
c_Node45::c_Node45(){
	m__succ=0;
	m__pred=0;
	m__data=0;
}
c_Node45* c_Node45::m_new(c_Node45* t_succ,c_Node45* t_pred,c_Shrine* t_data){
	gc_assign(m__succ,t_succ);
	gc_assign(m__pred,t_pred);
	gc_assign(m__succ->m__pred,this);
	gc_assign(m__pred->m__succ,this);
	gc_assign(m__data,t_data);
	return this;
}
c_Node45* c_Node45::m_new2(){
	return this;
}
int c_Node45::p_Remove(){
	gc_assign(m__succ->m__pred,m__pred);
	gc_assign(m__pred->m__succ,m__succ);
	return 0;
}
void c_Node45::mark(){
	Object::mark();
	gc_mark_q(m__succ);
	gc_mark_q(m__pred);
	gc_mark_q(m__data);
}
c_HeadNode28::c_HeadNode28(){
}
c_HeadNode28* c_HeadNode28::m_new(){
	c_Node45::m_new2();
	gc_assign(m__succ,(this));
	gc_assign(m__pred,(this));
	return this;
}
void c_HeadNode28::mark(){
	c_Node45::mark();
}
c_EnemyObject::c_EnemyObject(){
	m_x=0;
	m_y=0;
	m_type=0;
	m_beatDelay=-1;
	m_lord=false;
}
void c_EnemyObject::mark(){
	Object::mark();
}
c_List29::c_List29(){
	m__head=((new c_HeadNode29)->m_new());
}
c_List29* c_List29::m_new(){
	return this;
}
c_Node46* c_List29::p_AddLast29(c_EnemyObject* t_data){
	return (new c_Node46)->m_new(m__head,m__head->m__pred,t_data);
}
c_List29* c_List29::m_new2(Array<c_EnemyObject* > t_data){
	Array<c_EnemyObject* > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		c_EnemyObject* t_t=t_[t_2];
		t_2=t_2+1;
		p_AddLast29(t_t);
	}
	return this;
}
c_Enumerator17* c_List29::p_ObjectEnumerator(){
	return (new c_Enumerator17)->m_new(this);
}
void c_List29::mark(){
	Object::mark();
	gc_mark_q(m__head);
}
c_Node46::c_Node46(){
	m__succ=0;
	m__pred=0;
	m__data=0;
}
c_Node46* c_Node46::m_new(c_Node46* t_succ,c_Node46* t_pred,c_EnemyObject* t_data){
	gc_assign(m__succ,t_succ);
	gc_assign(m__pred,t_pred);
	gc_assign(m__succ->m__pred,this);
	gc_assign(m__pred->m__succ,this);
	gc_assign(m__data,t_data);
	return this;
}
c_Node46* c_Node46::m_new2(){
	return this;
}
void c_Node46::mark(){
	Object::mark();
	gc_mark_q(m__succ);
	gc_mark_q(m__pred);
	gc_mark_q(m__data);
}
c_HeadNode29::c_HeadNode29(){
}
c_HeadNode29* c_HeadNode29::m_new(){
	c_Node46::m_new2();
	gc_assign(m__succ,(this));
	gc_assign(m__pred,(this));
	return this;
}
void c_HeadNode29::mark(){
	c_Node46::mark();
}
c_Enumerator17::c_Enumerator17(){
	m__list=0;
	m__curr=0;
}
c_Enumerator17* c_Enumerator17::m_new(c_List29* t_list){
	gc_assign(m__list,t_list);
	gc_assign(m__curr,t_list->m__head->m__succ);
	return this;
}
c_Enumerator17* c_Enumerator17::m_new2(){
	return this;
}
bool c_Enumerator17::p_HasNext(){
	while(m__curr->m__succ->m__pred!=m__curr){
		gc_assign(m__curr,m__curr->m__succ);
	}
	return m__curr!=m__list->m__head;
}
c_EnemyObject* c_Enumerator17::p_NextObject(){
	c_EnemyObject* t_data=m__curr->m__data;
	gc_assign(m__curr,m__curr->m__succ);
	return t_data;
}
void c_Enumerator17::mark(){
	Object::mark();
	gc_mark_q(m__list);
	gc_mark_q(m__curr);
}
c_ItemObject::c_ItemObject(){
	m_bloodCost=FLOAT(.0);
	m_saleCost=0;
	m_x=0;
	m_y=0;
	m_type=String();
	m_singleChoice=false;
}
void c_ItemObject::mark(){
	Object::mark();
}
c_List30::c_List30(){
	m__head=((new c_HeadNode30)->m_new());
}
c_List30* c_List30::m_new(){
	return this;
}
c_Node47* c_List30::p_AddLast30(c_ItemObject* t_data){
	return (new c_Node47)->m_new(m__head,m__head->m__pred,t_data);
}
c_List30* c_List30::m_new2(Array<c_ItemObject* > t_data){
	Array<c_ItemObject* > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		c_ItemObject* t_t=t_[t_2];
		t_2=t_2+1;
		p_AddLast30(t_t);
	}
	return this;
}
c_Enumerator18* c_List30::p_ObjectEnumerator(){
	return (new c_Enumerator18)->m_new(this);
}
void c_List30::mark(){
	Object::mark();
	gc_mark_q(m__head);
}
c_Node47::c_Node47(){
	m__succ=0;
	m__pred=0;
	m__data=0;
}
c_Node47* c_Node47::m_new(c_Node47* t_succ,c_Node47* t_pred,c_ItemObject* t_data){
	gc_assign(m__succ,t_succ);
	gc_assign(m__pred,t_pred);
	gc_assign(m__succ->m__pred,this);
	gc_assign(m__pred->m__succ,this);
	gc_assign(m__data,t_data);
	return this;
}
c_Node47* c_Node47::m_new2(){
	return this;
}
void c_Node47::mark(){
	Object::mark();
	gc_mark_q(m__succ);
	gc_mark_q(m__pred);
	gc_mark_q(m__data);
}
c_HeadNode30::c_HeadNode30(){
}
c_HeadNode30* c_HeadNode30::m_new(){
	c_Node47::m_new2();
	gc_assign(m__succ,(this));
	gc_assign(m__pred,(this));
	return this;
}
void c_HeadNode30::mark(){
	c_Node47::mark();
}
c_Enumerator18::c_Enumerator18(){
	m__list=0;
	m__curr=0;
}
c_Enumerator18* c_Enumerator18::m_new(c_List30* t_list){
	gc_assign(m__list,t_list);
	gc_assign(m__curr,t_list->m__head->m__succ);
	return this;
}
c_Enumerator18* c_Enumerator18::m_new2(){
	return this;
}
bool c_Enumerator18::p_HasNext(){
	while(m__curr->m__succ->m__pred!=m__curr){
		gc_assign(m__curr,m__curr->m__succ);
	}
	return m__curr!=m__list->m__head;
}
c_ItemObject* c_Enumerator18::p_NextObject(){
	c_ItemObject* t_data=m__curr->m__data;
	gc_assign(m__curr,m__curr->m__succ);
	return t_data;
}
void c_Enumerator18::mark(){
	Object::mark();
	gc_mark_q(m__list);
	gc_mark_q(m__curr);
}
c_ChestObject::c_ChestObject(){
	m_saleCost=0;
	m_x=0;
	m_y=0;
	m_contents=String();
	m_hidden=false;
	m_color=0;
	m_singleChoice=false;
}
void c_ChestObject::mark(){
	Object::mark();
}
c_List31::c_List31(){
	m__head=((new c_HeadNode31)->m_new());
}
c_List31* c_List31::m_new(){
	return this;
}
c_Node48* c_List31::p_AddLast31(c_ChestObject* t_data){
	return (new c_Node48)->m_new(m__head,m__head->m__pred,t_data);
}
c_List31* c_List31::m_new2(Array<c_ChestObject* > t_data){
	Array<c_ChestObject* > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		c_ChestObject* t_t=t_[t_2];
		t_2=t_2+1;
		p_AddLast31(t_t);
	}
	return this;
}
c_Enumerator19* c_List31::p_ObjectEnumerator(){
	return (new c_Enumerator19)->m_new(this);
}
void c_List31::mark(){
	Object::mark();
	gc_mark_q(m__head);
}
c_Node48::c_Node48(){
	m__succ=0;
	m__pred=0;
	m__data=0;
}
c_Node48* c_Node48::m_new(c_Node48* t_succ,c_Node48* t_pred,c_ChestObject* t_data){
	gc_assign(m__succ,t_succ);
	gc_assign(m__pred,t_pred);
	gc_assign(m__succ->m__pred,this);
	gc_assign(m__pred->m__succ,this);
	gc_assign(m__data,t_data);
	return this;
}
c_Node48* c_Node48::m_new2(){
	return this;
}
void c_Node48::mark(){
	Object::mark();
	gc_mark_q(m__succ);
	gc_mark_q(m__pred);
	gc_mark_q(m__data);
}
c_HeadNode31::c_HeadNode31(){
}
c_HeadNode31* c_HeadNode31::m_new(){
	c_Node48::m_new2();
	gc_assign(m__succ,(this));
	gc_assign(m__pred,(this));
	return this;
}
void c_HeadNode31::mark(){
	c_Node48::mark();
}
c_Enumerator19::c_Enumerator19(){
	m__list=0;
	m__curr=0;
}
c_Enumerator19* c_Enumerator19::m_new(c_List31* t_list){
	gc_assign(m__list,t_list);
	gc_assign(m__curr,t_list->m__head->m__succ);
	return this;
}
c_Enumerator19* c_Enumerator19::m_new2(){
	return this;
}
bool c_Enumerator19::p_HasNext(){
	while(m__curr->m__succ->m__pred!=m__curr){
		gc_assign(m__curr,m__curr->m__succ);
	}
	return m__curr!=m__list->m__head;
}
c_ChestObject* c_Enumerator19::p_NextObject(){
	c_ChestObject* t_data=m__curr->m__data;
	gc_assign(m__curr,m__curr->m__succ);
	return t_data;
}
void c_Enumerator19::mark(){
	Object::mark();
	gc_mark_q(m__list);
	gc_mark_q(m__curr);
}
c_List32::c_List32(){
	m__head=((new c_HeadNode32)->m_new());
}
c_List32* c_List32::m_new(){
	return this;
}
c_Node49* c_List32::p_AddLast32(c_Chest* t_data){
	return (new c_Node49)->m_new(m__head,m__head->m__pred,t_data);
}
c_List32* c_List32::m_new2(Array<c_Chest* > t_data){
	Array<c_Chest* > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		c_Chest* t_t=t_[t_2];
		t_2=t_2+1;
		p_AddLast32(t_t);
	}
	return this;
}
c_Enumerator27* c_List32::p_ObjectEnumerator(){
	return (new c_Enumerator27)->m_new(this);
}
bool c_List32::p_Equals21(c_Chest* t_lhs,c_Chest* t_rhs){
	return t_lhs==t_rhs;
}
int c_List32::p_RemoveEach16(c_Chest* t_value){
	c_Node49* t_node=m__head->m__succ;
	while(t_node!=m__head){
		c_Node49* t_succ=t_node->m__succ;
		if(p_Equals21(t_node->m__data,t_value)){
			t_node->p_Remove();
		}
		t_node=t_succ;
	}
	return 0;
}
bool c_List32::p_IsEmpty(){
	return m__head->m__succ==m__head;
}
c_Chest* c_List32::p_First(){
	return m__head->m__succ->m__data;
}
void c_List32::mark(){
	Object::mark();
	gc_mark_q(m__head);
}
c_Node49::c_Node49(){
	m__succ=0;
	m__pred=0;
	m__data=0;
}
c_Node49* c_Node49::m_new(c_Node49* t_succ,c_Node49* t_pred,c_Chest* t_data){
	gc_assign(m__succ,t_succ);
	gc_assign(m__pred,t_pred);
	gc_assign(m__succ->m__pred,this);
	gc_assign(m__pred->m__succ,this);
	gc_assign(m__data,t_data);
	return this;
}
c_Node49* c_Node49::m_new2(){
	return this;
}
int c_Node49::p_Remove(){
	gc_assign(m__succ->m__pred,m__pred);
	gc_assign(m__pred->m__succ,m__succ);
	return 0;
}
void c_Node49::mark(){
	Object::mark();
	gc_mark_q(m__succ);
	gc_mark_q(m__pred);
	gc_mark_q(m__data);
}
c_HeadNode32::c_HeadNode32(){
}
c_HeadNode32* c_HeadNode32::m_new(){
	c_Node49::m_new2();
	gc_assign(m__succ,(this));
	gc_assign(m__pred,(this));
	return this;
}
void c_HeadNode32::mark(){
	c_Node49::mark();
}
c_ChestColor::c_ChestColor(){
}
String c_ChestColor::m_ToString(int t_color){
	int t_3=t_color;
	if(t_3==1){
		return String(L"Red",3);
	}else{
		if(t_3==2){
			return String(L"Black",5);
		}else{
			if(t_3==3){
				return String(L"Purple",6);
			}else{
				if(t_3==4){
					return String(L"Blue",4);
				}
			}
		}
	}
	return String(L"None",4);
}
void c_ChestColor::mark(){
	Object::mark();
}
c_SaleChest::c_SaleChest(){
	m_cost=999;
}
c_List33* c_SaleChest::m_currentSaleChests;
void c_SaleChest::p_SetCost(){
	int t_1=this->m_chestColor;
	if(t_1==4 || t_1==2){
		this->m_cost=40;
	}else{
		if(t_1==3){
			this->m_cost=30;
		}else{
			this->m_cost=20;
		}
	}
	if(c_Util::m_IsCharacterActive(5) || c_Util::m_IsCharacterActive(6) || c_Util::m_IsCharacterActive(7)){
		this->m_cost=0;
	}
	if(c_Player::m_DoesAnyPlayerHaveItemOfType(String(L"ring_charisma",13),false) || c_Player::m_DoesAnyPlayerHaveItemOfType(String(L"ring_wonder",11),false)){
		this->m_cost=int(Float(this->m_cost)*FLOAT(0.5));
	}
	if(c_Level::m_isHardcoreMode){
		this->m_cost=int(Float(this->m_cost)*(Float(bb_controller_game_currentDepth)*FLOAT(0.5)+FLOAT(2.0)));
	}
	bb_logger_Debug->p_TraceNotImplemented(String(L"SaleChest.SetCost() (digit sprites)",35));
}
c_SaleChest* c_SaleChest::m_new(int t_xVal,int t_yVal,String t_cont,bool t_invis,bool t_isLocked,bool t_isSecret,int t_tmpColor){
	c_Chest::m_new(t_xVal,t_yVal,t_cont,t_invis,t_isLocked,t_isSecret,t_tmpColor);
	this->m_saleChest=true;
	m_currentSaleChests->p_AddLast33(this);
	this->p_SetCost();
	return this;
}
c_SaleChest* c_SaleChest::m_new2(){
	c_Chest::m_new2();
	return this;
}
void c_SaleChest::p_Die(){
	m_currentSaleChests->p_RemoveEach17(this);
	c_Chest::p_Die();
}
bool c_SaleChest::p_Open(Object* t_player){
	bb_logger_Debug->p_TraceNotImplemented(String(L"SaleChest.Open(Object)",22));
	return false;
}
void c_SaleChest::mark(){
	c_Chest::mark();
}
c_List33::c_List33(){
	m__head=((new c_HeadNode33)->m_new());
}
c_List33* c_List33::m_new(){
	return this;
}
c_Node50* c_List33::p_AddLast33(c_SaleChest* t_data){
	return (new c_Node50)->m_new(m__head,m__head->m__pred,t_data);
}
c_List33* c_List33::m_new2(Array<c_SaleChest* > t_data){
	Array<c_SaleChest* > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		c_SaleChest* t_t=t_[t_2];
		t_2=t_2+1;
		p_AddLast33(t_t);
	}
	return this;
}
bool c_List33::p_Equals22(c_SaleChest* t_lhs,c_SaleChest* t_rhs){
	return t_lhs==t_rhs;
}
int c_List33::p_RemoveEach17(c_SaleChest* t_value){
	c_Node50* t_node=m__head->m__succ;
	while(t_node!=m__head){
		c_Node50* t_succ=t_node->m__succ;
		if(p_Equals22(t_node->m__data,t_value)){
			t_node->p_Remove();
		}
		t_node=t_succ;
	}
	return 0;
}
void c_List33::mark(){
	Object::mark();
	gc_mark_q(m__head);
}
c_Node50::c_Node50(){
	m__succ=0;
	m__pred=0;
	m__data=0;
}
c_Node50* c_Node50::m_new(c_Node50* t_succ,c_Node50* t_pred,c_SaleChest* t_data){
	gc_assign(m__succ,t_succ);
	gc_assign(m__pred,t_pred);
	gc_assign(m__succ->m__pred,this);
	gc_assign(m__pred->m__succ,this);
	gc_assign(m__data,t_data);
	return this;
}
c_Node50* c_Node50::m_new2(){
	return this;
}
int c_Node50::p_Remove(){
	gc_assign(m__succ->m__pred,m__pred);
	gc_assign(m__pred->m__succ,m__succ);
	return 0;
}
void c_Node50::mark(){
	Object::mark();
	gc_mark_q(m__succ);
	gc_mark_q(m__pred);
	gc_mark_q(m__data);
}
c_HeadNode33::c_HeadNode33(){
}
c_HeadNode33* c_HeadNode33::m_new(){
	c_Node50::m_new2();
	gc_assign(m__succ,(this));
	gc_assign(m__pred,(this));
	return this;
}
void c_HeadNode33::mark(){
	c_Node50::mark();
}
c_CrateObject::c_CrateObject(){
	m_x=0;
	m_y=0;
	m_type=0;
	m_contents=String();
}
void c_CrateObject::mark(){
	Object::mark();
}
c_List34::c_List34(){
	m__head=((new c_HeadNode34)->m_new());
}
c_List34* c_List34::m_new(){
	return this;
}
c_Node51* c_List34::p_AddLast34(c_CrateObject* t_data){
	return (new c_Node51)->m_new(m__head,m__head->m__pred,t_data);
}
c_List34* c_List34::m_new2(Array<c_CrateObject* > t_data){
	Array<c_CrateObject* > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		c_CrateObject* t_t=t_[t_2];
		t_2=t_2+1;
		p_AddLast34(t_t);
	}
	return this;
}
c_Enumerator20* c_List34::p_ObjectEnumerator(){
	return (new c_Enumerator20)->m_new(this);
}
void c_List34::mark(){
	Object::mark();
	gc_mark_q(m__head);
}
c_Node51::c_Node51(){
	m__succ=0;
	m__pred=0;
	m__data=0;
}
c_Node51* c_Node51::m_new(c_Node51* t_succ,c_Node51* t_pred,c_CrateObject* t_data){
	gc_assign(m__succ,t_succ);
	gc_assign(m__pred,t_pred);
	gc_assign(m__succ->m__pred,this);
	gc_assign(m__pred->m__succ,this);
	gc_assign(m__data,t_data);
	return this;
}
c_Node51* c_Node51::m_new2(){
	return this;
}
void c_Node51::mark(){
	Object::mark();
	gc_mark_q(m__succ);
	gc_mark_q(m__pred);
	gc_mark_q(m__data);
}
c_HeadNode34::c_HeadNode34(){
}
c_HeadNode34* c_HeadNode34::m_new(){
	c_Node51::m_new2();
	gc_assign(m__succ,(this));
	gc_assign(m__pred,(this));
	return this;
}
void c_HeadNode34::mark(){
	c_Node51::mark();
}
c_Enumerator20::c_Enumerator20(){
	m__list=0;
	m__curr=0;
}
c_Enumerator20* c_Enumerator20::m_new(c_List34* t_list){
	gc_assign(m__list,t_list);
	gc_assign(m__curr,t_list->m__head->m__succ);
	return this;
}
c_Enumerator20* c_Enumerator20::m_new2(){
	return this;
}
bool c_Enumerator20::p_HasNext(){
	while(m__curr->m__succ->m__pred!=m__curr){
		gc_assign(m__curr,m__curr->m__succ);
	}
	return m__curr!=m__list->m__head;
}
c_CrateObject* c_Enumerator20::p_NextObject(){
	c_CrateObject* t_data=m__curr->m__data;
	gc_assign(m__curr,m__curr->m__succ);
	return t_data;
}
void c_Enumerator20::mark(){
	Object::mark();
	gc_mark_q(m__list);
	gc_mark_q(m__curr);
}
c_ShrineObject::c_ShrineObject(){
	m_x=0;
	m_y=0;
	m_type=0;
}
void c_ShrineObject::mark(){
	Object::mark();
}
c_List35::c_List35(){
	m__head=((new c_HeadNode35)->m_new());
}
c_List35* c_List35::m_new(){
	return this;
}
c_Node52* c_List35::p_AddLast35(c_ShrineObject* t_data){
	return (new c_Node52)->m_new(m__head,m__head->m__pred,t_data);
}
c_List35* c_List35::m_new2(Array<c_ShrineObject* > t_data){
	Array<c_ShrineObject* > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		c_ShrineObject* t_t=t_[t_2];
		t_2=t_2+1;
		p_AddLast35(t_t);
	}
	return this;
}
c_Enumerator21* c_List35::p_ObjectEnumerator(){
	return (new c_Enumerator21)->m_new(this);
}
void c_List35::mark(){
	Object::mark();
	gc_mark_q(m__head);
}
c_Node52::c_Node52(){
	m__succ=0;
	m__pred=0;
	m__data=0;
}
c_Node52* c_Node52::m_new(c_Node52* t_succ,c_Node52* t_pred,c_ShrineObject* t_data){
	gc_assign(m__succ,t_succ);
	gc_assign(m__pred,t_pred);
	gc_assign(m__succ->m__pred,this);
	gc_assign(m__pred->m__succ,this);
	gc_assign(m__data,t_data);
	return this;
}
c_Node52* c_Node52::m_new2(){
	return this;
}
void c_Node52::mark(){
	Object::mark();
	gc_mark_q(m__succ);
	gc_mark_q(m__pred);
	gc_mark_q(m__data);
}
c_HeadNode35::c_HeadNode35(){
}
c_HeadNode35* c_HeadNode35::m_new(){
	c_Node52::m_new2();
	gc_assign(m__succ,(this));
	gc_assign(m__pred,(this));
	return this;
}
void c_HeadNode35::mark(){
	c_Node52::mark();
}
c_Enumerator21::c_Enumerator21(){
	m__list=0;
	m__curr=0;
}
c_Enumerator21* c_Enumerator21::m_new(c_List35* t_list){
	gc_assign(m__list,t_list);
	gc_assign(m__curr,t_list->m__head->m__succ);
	return this;
}
c_Enumerator21* c_Enumerator21::m_new2(){
	return this;
}
bool c_Enumerator21::p_HasNext(){
	while(m__curr->m__succ->m__pred!=m__curr){
		gc_assign(m__curr,m__curr->m__succ);
	}
	return m__curr!=m__list->m__head;
}
c_ShrineObject* c_Enumerator21::p_NextObject(){
	c_ShrineObject* t_data=m__curr->m__data;
	gc_assign(m__curr,m__curr->m__succ);
	return t_data;
}
void c_Enumerator21::mark(){
	Object::mark();
	gc_mark_q(m__list);
	gc_mark_q(m__curr);
}
c_SwarmSarcophagus::c_SwarmSarcophagus(){
}
c_SwarmSarcophagus* c_SwarmSarcophagus::m_new(int t_xVal,int t_yVal){
	c_Enemy::m_new();
	bb_logger_Debug->p_TraceNotImplemented(String(L"SwarmSarcophagus.New(Int, Int)",30));
	return this;
}
c_SwarmSarcophagus* c_SwarmSarcophagus::m_new2(){
	c_Enemy::m_new();
	return this;
}
void c_SwarmSarcophagus::p_Delete(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"SwarmSarcophagus.Delete()",25));
}
void c_SwarmSarcophagus::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"SwarmSarcophagus.Update()",25));
}
void c_SwarmSarcophagus::mark(){
	c_Enemy::mark();
}
c_RoomBase::c_RoomBase(){
}
c_RoomBase* c_RoomBase::m_new(){
	return this;
}
c_StackEx3* c_RoomBase::p_GetPortalSegs(){
	c_StackEx3* t_portalSegs=(new c_StackEx3)->m_new();
	c_Rect* t_bounds=this->p_GetBounds();
	c_PortalSeg* t_portalSeg=0;
	for(int t_y=t_bounds->m_y-1;t_y<=t_bounds->p_GetBottom()+1;t_y=t_y+1){
		for(int t_x=t_bounds->m_x-1;t_x<=t_bounds->p_GetRight()+1;t_x=t_x+1){
			if(this->p_IsWall3(t_x,t_y) && this->p_IsOutside(t_x,t_y-1) && this->p_IsFloor2(t_x,t_y+1)){
				if(t_portalSeg!=0){
					t_portalSeg->m_length+=1;
				}else{
					t_portalSeg=(new c_PortalSeg)->m_new(t_x,t_y,0,3);
				}
			}else{
				if(t_portalSeg!=0){
					t_portalSegs->p_Push22(t_portalSeg);
					t_portalSeg=0;
				}
			}
		}
	}
	for(int t_x2=t_bounds->m_x-1;t_x2<=t_bounds->p_GetRight()+1;t_x2=t_x2+1){
		for(int t_y2=t_bounds->m_y-1;t_y2<=t_bounds->p_GetBottom()+1;t_y2=t_y2+1){
			if(this->p_IsWall3(t_x2,t_y2) && this->p_IsOutside(t_x2+1,t_y2) && this->p_IsFloor2(t_x2-1,t_y2)){
				if(t_portalSeg!=0){
					t_portalSeg->m_length+=1;
				}else{
					t_portalSeg=(new c_PortalSeg)->m_new(t_x2,t_y2,1,0);
				}
			}else{
				if(t_portalSeg!=0){
					t_portalSegs->p_Push22(t_portalSeg);
					t_portalSeg=0;
				}
			}
		}
	}
	for(int t_y3=t_bounds->m_y-1;t_y3<=t_bounds->p_GetBottom()+1;t_y3=t_y3+1){
		for(int t_x3=t_bounds->m_x-1;t_x3<=t_bounds->p_GetRight()+1;t_x3=t_x3+1){
			if(this->p_IsWall3(t_x3,t_y3) && this->p_IsOutside(t_x3,t_y3+1) && this->p_IsFloor2(t_x3,t_y3-1)){
				if(t_portalSeg!=0){
					t_portalSeg->m_length+=1;
				}else{
					t_portalSeg=(new c_PortalSeg)->m_new(t_x3,t_y3,0,1);
				}
			}else{
				if(t_portalSeg!=0){
					t_portalSegs->p_Push22(t_portalSeg);
					t_portalSeg=0;
				}
			}
		}
	}
	for(int t_x4=t_bounds->m_x-1;t_x4<=t_bounds->p_GetRight()+1;t_x4=t_x4+1){
		for(int t_y4=t_bounds->m_y-1;t_y4<=t_bounds->p_GetBottom()+1;t_y4=t_y4+1){
			if(this->p_IsWall3(t_x4,t_y4) && this->p_IsOutside(t_x4-1,t_y4) && this->p_IsFloor2(t_x4+1,t_y4)){
				if(t_portalSeg!=0){
					t_portalSeg->m_length+=1;
				}else{
					t_portalSeg=(new c_PortalSeg)->m_new(t_x4,t_y4,1,2);
				}
			}else{
				if(t_portalSeg!=0){
					t_portalSegs->p_Push22(t_portalSeg);
					t_portalSeg=0;
				}
			}
		}
	}
	return t_portalSegs;
}
c_IntPointStack* c_RoomBase::p_GetFloor(){
	c_IntPointStack* t_floors=(new c_IntPointStack)->m_new();
	c_Rect* t_bounds=this->p_GetBounds();
	for(int t_x=t_bounds->m_x;t_x<=t_bounds->p_GetRight();t_x=t_x+1){
		for(int t_y=t_bounds->m_y;t_y<=t_bounds->p_GetBottom();t_y=t_y+1){
			if(this->p_IsFloor2(t_x,t_y)){
				t_floors->p_Push10((new c_Point)->m_new(t_x,t_y));
			}
		}
	}
	return t_floors;
}
c_Point* c_RoomBase::p_GetRandPoint(){
	return this->p_GetFloor()->p_ChooseRandom(true);
}
void c_RoomBase::mark(){
	Object::mark();
}
c_BlobRoom::c_BlobRoom(){
	m_footprint=(new c_IntPointSet)->m_new();
}
c_BlobRoom* c_BlobRoom::m_new(){
	c_RoomBase::m_new();
	return this;
}
void c_BlobRoom::p_FillRect(int t_x,int t_y,int t_w,int t_h){
	for(int t_a=t_x;t_a<=t_x+t_w;t_a=t_a+1){
		for(int t_b=t_y;t_b<=t_y+t_h;t_b=t_b+1){
			c_Point* t_tileLocation=(new c_Point)->m_new(t_a,t_b);
			if(!this->m_footprint->p_Contains5(t_tileLocation)){
				this->m_footprint->p_Insert9(t_tileLocation);
			}
		}
	}
}
void c_BlobRoom::p_ReflectHorizontallyAbout(int t_x){
	c_IntPointSet* t_footprint=(new c_IntPointSet)->m_new();
	c_KeyEnumerator* t_=this->m_footprint->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Point* t_tileLocation=t_->p_NextObject();
		c_Point* t_reflectedLocation=(new c_Point)->m_new(t_x+t_x-t_tileLocation->m_x,t_tileLocation->m_y);
		t_footprint->p_Insert9(t_reflectedLocation);
	}
	gc_assign(this->m_footprint,t_footprint);
}
void c_BlobRoom::p_RotateCWAbout(c_Point* t_origin){
	c_IntPointSet* t_footprint=(new c_IntPointSet)->m_new();
	c_KeyEnumerator* t_=this->m_footprint->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Point* t_tileLocation=t_->p_NextObject();
		c_Point* t_rotatedPoint=t_tileLocation->p_RotateCWAbout(t_origin);
		t_footprint->p_Insert9(t_rotatedPoint);
	}
	gc_assign(this->m_footprint,t_footprint);
}
void c_BlobRoom::p_TranslateBy(c_Point* t_shift){
	c_IntPointSet* t_footprint=(new c_IntPointSet)->m_new();
	c_KeyEnumerator* t_=this->m_footprint->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Point* t_tileLocation=t_->p_NextObject();
		int t_translatedX=t_tileLocation->m_x+t_shift->m_x;
		int t_translatedY=t_tileLocation->m_y+t_shift->m_y;
		c_Point* t_translatedPoint=(new c_Point)->m_new(t_translatedX,t_translatedY);
		t_footprint->p_Insert9(t_translatedPoint);
	}
	gc_assign(this->m_footprint,t_footprint);
}
bool c_BlobRoom::p_IsOutsidePoint(c_Point* t_p){
	return !this->m_footprint->p_Contains5(t_p);
}
bool c_BlobRoom::p_IsOutside(int t_x,int t_y){
	return this->p_IsOutsidePoint((new c_Point)->m_new(t_x,t_y));
}
bool c_BlobRoom::p_IsWall3(int t_x,int t_y){
	if(this->p_IsOutside(t_x,t_y)){
		return false;
	}
	for(int t_a=t_x-1;t_a<=t_x+1;t_a=t_a+1){
		for(int t_b=t_y-1;t_b<=t_y+1;t_b=t_b+1){
			if(this->p_IsOutside(t_a,t_b)){
				return true;
			}
		}
	}
	return false;
}
bool c_BlobRoom::p_IsWallPoint(c_Point* t_p){
	return this->p_IsWall3(t_p->m_x,t_p->m_y);
}
c_Stack7* c_BlobRoom::p_MakeTiles(){
	c_Stack7* t_tiles=(new c_Stack7)->m_new();
	c_KeyEnumerator* t_=this->m_footprint->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Point* t_tilePoint=t_->p_NextObject();
		int t_tileType=0;
		if(this->p_IsWallPoint(t_tilePoint)){
			t_tileType=100;
		}
		c_TileData* t_tileData=(new c_TileData)->m_new(t_tilePoint->m_x,t_tilePoint->m_y,t_tileType);
		t_tiles->p_Push19(t_tileData);
	}
	return t_tiles;
}
c_Rect* c_BlobRoom::p_GetBounds(){
	int t_x=999999999;
	int t_y=999999999;
	int t_xMax=-999999999;
	int t_yMax=-999999999;
	c_KeyEnumerator* t_=this->m_footprint->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Point* t_tileLocation=t_->p_NextObject();
		t_x=bb_math_Min(t_x,t_tileLocation->m_x);
		t_y=bb_math_Min(t_y,t_tileLocation->m_y);
		t_xMax=bb_math_Max(t_xMax,t_tileLocation->m_x);
		t_yMax=bb_math_Max(t_yMax,t_tileLocation->m_y);
	}
	return (new c_Rect)->m_new(t_x,t_y,t_xMax-t_x,t_yMax-t_y);
}
bool c_BlobRoom::p_IsFloorPoint(c_Point* t_p){
	return !this->p_IsOutsidePoint(t_p) && !this->p_IsWallPoint(t_p);
}
bool c_BlobRoom::p_IsFloor2(int t_x,int t_y){
	return this->p_IsFloorPoint((new c_Point)->m_new(t_x,t_y));
}
void c_BlobRoom::mark(){
	c_RoomBase::mark();
	gc_mark_q(m_footprint);
}
c_Set3::c_Set3(){
	m_map=0;
}
c_Set3* c_Set3::m_new(c_Map17* t_map){
	gc_assign(this->m_map,t_map);
	return this;
}
c_Set3* c_Set3::m_new2(){
	return this;
}
bool c_Set3::p_Contains5(c_Point* t_value){
	return m_map->p_Contains5(t_value);
}
int c_Set3::p_Insert9(c_Point* t_value){
	m_map->p_Insert10(t_value,0);
	return 0;
}
c_KeyEnumerator* c_Set3::p_ObjectEnumerator(){
	return m_map->p_Keys()->p_ObjectEnumerator();
}
void c_Set3::mark(){
	Object::mark();
	gc_mark_q(m_map);
}
c_IntPointSet::c_IntPointSet(){
}
c_IntPointSet* c_IntPointSet::m_new(){
	c_Set3::m_new((new c_IntPointMap)->m_new());
	return this;
}
void c_IntPointSet::mark(){
	c_Set3::mark();
}
c_Map17::c_Map17(){
	m_root=0;
}
c_Map17* c_Map17::m_new(){
	return this;
}
c_Node53* c_Map17::p_FindNode3(c_Point* t_key){
	c_Node53* t_node=m_root;
	while((t_node)!=0){
		int t_cmp=p_Compare3(t_key,t_node->m_key);
		if(t_cmp>0){
			t_node=t_node->m_right;
		}else{
			if(t_cmp<0){
				t_node=t_node->m_left;
			}else{
				return t_node;
			}
		}
	}
	return t_node;
}
bool c_Map17::p_Contains5(c_Point* t_key){
	return p_FindNode3(t_key)!=0;
}
int c_Map17::p_RotateLeft16(c_Node53* t_node){
	c_Node53* t_child=t_node->m_right;
	gc_assign(t_node->m_right,t_child->m_left);
	if((t_child->m_left)!=0){
		gc_assign(t_child->m_left->m_parent,t_node);
	}
	gc_assign(t_child->m_parent,t_node->m_parent);
	if((t_node->m_parent)!=0){
		if(t_node==t_node->m_parent->m_left){
			gc_assign(t_node->m_parent->m_left,t_child);
		}else{
			gc_assign(t_node->m_parent->m_right,t_child);
		}
	}else{
		gc_assign(m_root,t_child);
	}
	gc_assign(t_child->m_left,t_node);
	gc_assign(t_node->m_parent,t_child);
	return 0;
}
int c_Map17::p_RotateRight16(c_Node53* t_node){
	c_Node53* t_child=t_node->m_left;
	gc_assign(t_node->m_left,t_child->m_right);
	if((t_child->m_right)!=0){
		gc_assign(t_child->m_right->m_parent,t_node);
	}
	gc_assign(t_child->m_parent,t_node->m_parent);
	if((t_node->m_parent)!=0){
		if(t_node==t_node->m_parent->m_right){
			gc_assign(t_node->m_parent->m_right,t_child);
		}else{
			gc_assign(t_node->m_parent->m_left,t_child);
		}
	}else{
		gc_assign(m_root,t_child);
	}
	gc_assign(t_child->m_right,t_node);
	gc_assign(t_node->m_parent,t_child);
	return 0;
}
int c_Map17::p_InsertFixup16(c_Node53* t_node){
	while(((t_node->m_parent)!=0) && t_node->m_parent->m_color==-1 && ((t_node->m_parent->m_parent)!=0)){
		if(t_node->m_parent==t_node->m_parent->m_parent->m_left){
			c_Node53* t_uncle=t_node->m_parent->m_parent->m_right;
			if(((t_uncle)!=0) && t_uncle->m_color==-1){
				t_node->m_parent->m_color=1;
				t_uncle->m_color=1;
				t_uncle->m_parent->m_color=-1;
				t_node=t_uncle->m_parent;
			}else{
				if(t_node==t_node->m_parent->m_right){
					t_node=t_node->m_parent;
					p_RotateLeft16(t_node);
				}
				t_node->m_parent->m_color=1;
				t_node->m_parent->m_parent->m_color=-1;
				p_RotateRight16(t_node->m_parent->m_parent);
			}
		}else{
			c_Node53* t_uncle2=t_node->m_parent->m_parent->m_left;
			if(((t_uncle2)!=0) && t_uncle2->m_color==-1){
				t_node->m_parent->m_color=1;
				t_uncle2->m_color=1;
				t_uncle2->m_parent->m_color=-1;
				t_node=t_uncle2->m_parent;
			}else{
				if(t_node==t_node->m_parent->m_left){
					t_node=t_node->m_parent;
					p_RotateRight16(t_node);
				}
				t_node->m_parent->m_color=1;
				t_node->m_parent->m_parent->m_color=-1;
				p_RotateLeft16(t_node->m_parent->m_parent);
			}
		}
	}
	m_root->m_color=1;
	return 0;
}
bool c_Map17::p_Set19(c_Point* t_key,Object* t_value){
	c_Node53* t_node=m_root;
	c_Node53* t_parent=0;
	int t_cmp=0;
	while((t_node)!=0){
		t_parent=t_node;
		t_cmp=p_Compare3(t_key,t_node->m_key);
		if(t_cmp>0){
			t_node=t_node->m_right;
		}else{
			if(t_cmp<0){
				t_node=t_node->m_left;
			}else{
				gc_assign(t_node->m_value,t_value);
				return false;
			}
		}
	}
	t_node=(new c_Node53)->m_new(t_key,t_value,-1,t_parent);
	if((t_parent)!=0){
		if(t_cmp>0){
			gc_assign(t_parent->m_right,t_node);
		}else{
			gc_assign(t_parent->m_left,t_node);
		}
		p_InsertFixup16(t_node);
	}else{
		gc_assign(m_root,t_node);
	}
	return true;
}
bool c_Map17::p_Insert10(c_Point* t_key,Object* t_value){
	return p_Set19(t_key,t_value);
}
c_MapKeys* c_Map17::p_Keys(){
	return (new c_MapKeys)->m_new(this);
}
c_Node53* c_Map17::p_FirstNode(){
	if(!((m_root)!=0)){
		return 0;
	}
	c_Node53* t_node=m_root;
	while((t_node->m_left)!=0){
		t_node=t_node->m_left;
	}
	return t_node;
}
void c_Map17::mark(){
	Object::mark();
	gc_mark_q(m_root);
}
c_IntPointMap::c_IntPointMap(){
}
c_IntPointMap* c_IntPointMap::m_new(){
	c_Map17::m_new();
	return this;
}
int c_IntPointMap::p_Compare3(c_Point* t_lhs,c_Point* t_rhs){
	if(t_lhs->m_x>t_rhs->m_x){
		return 1;
	}
	if(t_lhs->m_x<t_rhs->m_x){
		return -1;
	}
	if(t_lhs->m_y>t_rhs->m_y){
		return 1;
	}
	if(t_lhs->m_y<t_rhs->m_y){
		return -1;
	}
	return 0;
}
void c_IntPointMap::mark(){
	c_Map17::mark();
}
c_Node53::c_Node53(){
	m_key=0;
	m_right=0;
	m_left=0;
	m_value=0;
	m_color=0;
	m_parent=0;
}
c_Node53* c_Node53::m_new(c_Point* t_key,Object* t_value,int t_color,c_Node53* t_parent){
	gc_assign(this->m_key,t_key);
	gc_assign(this->m_value,t_value);
	this->m_color=t_color;
	gc_assign(this->m_parent,t_parent);
	return this;
}
c_Node53* c_Node53::m_new2(){
	return this;
}
c_Node53* c_Node53::p_NextNode(){
	c_Node53* t_node=0;
	if((m_right)!=0){
		t_node=m_right;
		while((t_node->m_left)!=0){
			t_node=t_node->m_left;
		}
		return t_node;
	}
	t_node=this;
	c_Node53* t_parent=this->m_parent;
	while(((t_parent)!=0) && t_node==t_parent->m_right){
		t_node=t_parent;
		t_parent=t_parent->m_parent;
	}
	return t_parent;
}
void c_Node53::mark(){
	Object::mark();
	gc_mark_q(m_key);
	gc_mark_q(m_right);
	gc_mark_q(m_left);
	gc_mark_q(m_value);
	gc_mark_q(m_parent);
}
c_KeyEnumerator::c_KeyEnumerator(){
	m_node=0;
}
c_KeyEnumerator* c_KeyEnumerator::m_new(c_Node53* t_node){
	gc_assign(this->m_node,t_node);
	return this;
}
c_KeyEnumerator* c_KeyEnumerator::m_new2(){
	return this;
}
bool c_KeyEnumerator::p_HasNext(){
	return m_node!=0;
}
c_Point* c_KeyEnumerator::p_NextObject(){
	c_Node53* t_t=m_node;
	gc_assign(m_node,m_node->p_NextNode());
	return t_t->m_key;
}
void c_KeyEnumerator::mark(){
	Object::mark();
	gc_mark_q(m_node);
}
c_MapKeys::c_MapKeys(){
	m_map=0;
}
c_MapKeys* c_MapKeys::m_new(c_Map17* t_map){
	gc_assign(this->m_map,t_map);
	return this;
}
c_MapKeys* c_MapKeys::m_new2(){
	return this;
}
c_KeyEnumerator* c_MapKeys::p_ObjectEnumerator(){
	return (new c_KeyEnumerator)->m_new(m_map->p_FirstNode());
}
void c_MapKeys::mark(){
	Object::mark();
	gc_mark_q(m_map);
}
c_Stack7::c_Stack7(){
	m_data=Array<c_TileData* >();
	m_length=0;
}
c_Stack7* c_Stack7::m_new(){
	return this;
}
c_Stack7* c_Stack7::m_new2(Array<c_TileData* > t_data){
	gc_assign(this->m_data,t_data.Slice(0));
	this->m_length=t_data.Length();
	return this;
}
void c_Stack7::p_Push19(c_TileData* t_value){
	if(m_length==m_data.Length()){
		gc_assign(m_data,m_data.Resize(m_length*2+10));
	}
	gc_assign(m_data[m_length],t_value);
	m_length+=1;
}
void c_Stack7::p_Push20(Array<c_TileData* > t_values,int t_offset,int t_count){
	for(int t_i=0;t_i<t_count;t_i=t_i+1){
		p_Push19(t_values[t_offset+t_i]);
	}
}
void c_Stack7::p_Push21(Array<c_TileData* > t_values,int t_offset){
	p_Push20(t_values,t_offset,t_values.Length()-t_offset);
}
c_Enumerator22* c_Stack7::p_ObjectEnumerator(){
	return (new c_Enumerator22)->m_new(this);
}
c_TileData* c_Stack7::m_NIL;
void c_Stack7::p_Length2(int t_newlength){
	if(t_newlength<m_length){
		for(int t_i=t_newlength;t_i<m_length;t_i=t_i+1){
			gc_assign(m_data[t_i],m_NIL);
		}
	}else{
		if(t_newlength>m_data.Length()){
			gc_assign(m_data,m_data.Resize(bb_math_Max(m_length*2+10,t_newlength)));
		}
	}
	m_length=t_newlength;
}
int c_Stack7::p_Length(){
	return m_length;
}
void c_Stack7::mark(){
	Object::mark();
	gc_mark_q(m_data);
}
c_Enumerator22::c_Enumerator22(){
	m_stack=0;
	m_index=0;
}
c_Enumerator22* c_Enumerator22::m_new(c_Stack7* t_stack){
	gc_assign(this->m_stack,t_stack);
	return this;
}
c_Enumerator22* c_Enumerator22::m_new2(){
	return this;
}
bool c_Enumerator22::p_HasNext(){
	return m_index<m_stack->p_Length();
}
c_TileData* c_Enumerator22::p_NextObject(){
	m_index+=1;
	return m_stack->m_data[m_index-1];
}
void c_Enumerator22::mark(){
	Object::mark();
	gc_mark_q(m_stack);
}
c_RectRoom::c_RectRoom(){
	m_body=0;
}
c_RectRoom* c_RectRoom::m_new(c_RoomData* t_rd){
	c_RoomBase::m_new();
	gc_assign(this->m_body,(new c_Rect)->m_new(t_rd->m_x,t_rd->m_y,t_rd->m_w,t_rd->m_h));
	return this;
}
c_RectRoom* c_RectRoom::m_new2(c_Rect* t_body){
	c_RoomBase::m_new();
	gc_assign(this->m_body,t_body);
	return this;
}
c_RectRoom* c_RectRoom::m_new3(){
	c_RoomBase::m_new();
	return this;
}
c_RoomData* c_RectRoom::p_ToRoomData(int t_roomType){
	return (new c_RoomData)->m_new(this->m_body->m_x,this->m_body->m_y,this->m_body->m_w,this->m_body->m_h,t_roomType,false);
}
c_Rect* c_RectRoom::p_GetBounds(){
	return this->m_body->p_Copy();
}
c_Point* c_RectRoom::p_GetRandPoint(){
	int t_xOff=c_Util::m_RndIntRangeFromZero(this->m_body->m_w-2,true);
	int t_x=this->m_body->m_x+t_xOff+1;
	int t_yOff=c_Util::m_RndIntRangeFromZero(this->m_body->m_h-2,true);
	int t_y=this->m_body->m_y+t_yOff+1;
	return (new c_Point)->m_new(t_x,t_y);
}
bool c_RectRoom::p_IsOutside(int t_x,int t_y){
	return !this->m_body->p_Contains7(t_x,t_y);
}
bool c_RectRoom::p_IsFloor2(int t_x,int t_y){
	return !this->p_IsOutside(t_x,t_y) && !this->m_body->p_OnBorder(t_x,t_y);
}
bool c_RectRoom::p_IsWall3(int t_x,int t_y){
	return this->m_body->p_OnBorder(t_x,t_y);
}
void c_RectRoom::mark(){
	c_RoomBase::mark();
	gc_mark_q(m_body);
}
c_PortalSeg::c_PortalSeg(){
	m_length=0;
	m_origin=0;
	m_faceDir=-1;
	m_normalDir=-1;
}
c_PortalSeg* c_PortalSeg::m_new(int t_x,int t_y,int t_faceDir_,int t_normalDir_){
	gc_assign(this->m_origin,(new c_Point)->m_new(t_x,t_y));
	this->m_faceDir=t_faceDir_;
	this->m_normalDir=t_normalDir_;
	return this;
}
c_PortalSeg* c_PortalSeg::m_new2(){
	return this;
}
c_Point* c_PortalSeg::p_GetFaceVector(){
	return c_Util::m_GetPointFromDir(this->m_faceDir);
}
c_Rect* c_PortalSeg::p_GetBounds(){
	c_Point* t_vector=this->p_GetFaceVector()->p_Scale(this->m_length);
	c_Point* t_positionedVector=this->m_origin->p_Add5(t_vector);
	int t_x=bb_math_Min(this->m_origin->m_x,t_positionedVector->m_x);
	int t_y=bb_math_Min(this->m_origin->m_y,t_positionedVector->m_y);
	int t_w=bb_math_Max(this->m_origin->m_x,t_positionedVector->m_x);
	int t_h=bb_math_Max(this->m_origin->m_y,t_positionedVector->m_y);
	return c_Rect::m_MakeBounds(t_x,t_y,t_w,t_h);
}
c_Point* c_PortalSeg::p_GetOrigin(){
	return this->m_origin;
}
c_Point* c_PortalSeg::p_GetTerminus(){
	c_Point* t_scaledFaceVector=this->p_GetFaceVector()->p_Scale(this->m_length);
	return this->p_GetOrigin()->p_Add5(t_scaledFaceVector);
}
c_PortalSeg* c_PortalSeg::p_Intersect(c_PortalSeg* t_other){
	c_PortalSeg* t_intersection=(new c_PortalSeg)->m_new(this->m_origin->m_x,this->m_origin->m_y,this->m_faceDir,this->m_normalDir);
	t_intersection->m_length=this->m_length;
	if(t_intersection->m_length<0){
		return 0;
	}
	c_Rect* t_otherBounds=t_other->p_GetBounds();
	while(!t_otherBounds->p_Contains5(t_intersection->p_GetOrigin())){
		c_Point* t_faceVector=t_intersection->p_GetFaceVector();
		gc_assign(t_intersection->m_origin,t_intersection->p_GetOrigin()->p_Add5(t_faceVector));
		t_intersection->m_length-=1;
		if(t_intersection->m_length<0){
			return 0;
		}
	}
	if(t_intersection->m_length<0){
		return 0;
	}
	while(!t_otherBounds->p_Contains5(t_intersection->p_GetTerminus())){
		bb_logger_Debug->p_Assert(t_intersection->m_length>=1,String());
		t_intersection->m_length-=1;
	}
	bb_logger_Debug->p_Assert(t_intersection->m_length>=0,String());
	return t_intersection;
}
c_Point* c_PortalSeg::p_GetNormal(){
	return c_Util::m_GetPointFromDir(this->m_normalDir);
}
int c_PortalSeg::p_GetLength(){
	return this->m_length;
}
void c_PortalSeg::mark(){
	Object::mark();
	gc_mark_q(m_origin);
}
c_Stack8::c_Stack8(){
	m_data=Array<c_PortalSeg* >();
	m_length=0;
}
c_Stack8* c_Stack8::m_new(){
	return this;
}
c_Stack8* c_Stack8::m_new2(Array<c_PortalSeg* > t_data){
	gc_assign(this->m_data,t_data.Slice(0));
	this->m_length=t_data.Length();
	return this;
}
void c_Stack8::p_Push22(c_PortalSeg* t_value){
	if(m_length==m_data.Length()){
		gc_assign(m_data,m_data.Resize(m_length*2+10));
	}
	gc_assign(m_data[m_length],t_value);
	m_length+=1;
}
void c_Stack8::p_Push23(Array<c_PortalSeg* > t_values,int t_offset,int t_count){
	for(int t_i=0;t_i<t_count;t_i=t_i+1){
		p_Push22(t_values[t_offset+t_i]);
	}
}
void c_Stack8::p_Push24(Array<c_PortalSeg* > t_values,int t_offset){
	p_Push23(t_values,t_offset,t_values.Length()-t_offset);
}
c_Enumerator23* c_Stack8::p_ObjectEnumerator(){
	return (new c_Enumerator23)->m_new(this);
}
c_PortalSeg* c_Stack8::m_NIL;
void c_Stack8::p_Length2(int t_newlength){
	if(t_newlength<m_length){
		for(int t_i=t_newlength;t_i<m_length;t_i=t_i+1){
			gc_assign(m_data[t_i],m_NIL);
		}
	}else{
		if(t_newlength>m_data.Length()){
			gc_assign(m_data,m_data.Resize(bb_math_Max(m_length*2+10,t_newlength)));
		}
	}
	m_length=t_newlength;
}
int c_Stack8::p_Length(){
	return m_length;
}
c_PortalSeg* c_Stack8::p_Get2(int t_index){
	return m_data[t_index];
}
void c_Stack8::p_Set20(int t_index,c_PortalSeg* t_value){
	gc_assign(m_data[t_index],t_value);
}
void c_Stack8::mark(){
	Object::mark();
	gc_mark_q(m_data);
}
c_StackEx3::c_StackEx3(){
}
c_StackEx3* c_StackEx3::m_new(){
	c_Stack8::m_new();
	return this;
}
void c_StackEx3::p_Shuffle(bool t_useSeed){
	for(int t_i=1;t_i<this->p_Length();t_i=t_i+1){
		int t_randomValue=c_Util::m_RndIntRangeFromZero(t_i,t_useSeed);
		if(t_i!=t_randomValue){
			c_PortalSeg* t_value_at_i=this->p_Get2(t_i);
			c_PortalSeg* t_value_at_randomValue=this->p_Get2(t_randomValue);
			this->p_Set20(t_i,t_value_at_randomValue);
			this->p_Set20(t_randomValue,t_value_at_i);
		}
	}
}
void c_StackEx3::p_Extend(c_StackEx3* t_other){
	c_Enumerator23* t_=t_other->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_PortalSeg* t_item=t_->p_NextObject();
		this->p_Push22(t_item);
	}
}
void c_StackEx3::mark(){
	c_Stack8::mark();
}
c_Enumerator23::c_Enumerator23(){
	m_stack=0;
	m_index=0;
}
c_Enumerator23* c_Enumerator23::m_new(c_Stack8* t_stack){
	gc_assign(this->m_stack,t_stack);
	return this;
}
c_Enumerator23* c_Enumerator23::m_new2(){
	return this;
}
bool c_Enumerator23::p_HasNext(){
	return m_index<m_stack->p_Length();
}
c_PortalSeg* c_Enumerator23::p_NextObject(){
	m_index+=1;
	return m_stack->m_data[m_index-1];
}
void c_Enumerator23::mark(){
	Object::mark();
	gc_mark_q(m_stack);
}
c_RoomWithDoor::c_RoomWithDoor(){
	m_door=0;
}
c_RoomWithDoor* c_RoomWithDoor::m_new(c_Rect* t_body_,c_Rect* t_door_){
	c_RectRoom::m_new3();
	gc_assign(this->m_body,t_body_);
	gc_assign(this->m_door,t_door_);
	bb_logger_Debug->p_Assert(this->m_body->p_Contains6(this->m_door),String());
	return this;
}
c_RoomWithDoor* c_RoomWithDoor::m_new2(){
	c_RectRoom::m_new3();
	return this;
}
bool c_RoomWithDoor::p_IsWall3(int t_x,int t_y){
	return this->m_body->p_OnBorder(t_x,t_y) && !this->m_door->p_Contains7(t_x,t_y);
}
void c_RoomWithDoor::mark(){
	c_RectRoom::mark();
	gc_mark_q(m_door);
}
c_Enumerator24::c_Enumerator24(){
	m_stack=0;
	m_index=0;
}
c_Enumerator24* c_Enumerator24::m_new(c_Stack4* t_stack){
	gc_assign(this->m_stack,t_stack);
	return this;
}
c_Enumerator24* c_Enumerator24::m_new2(){
	return this;
}
bool c_Enumerator24::p_HasNext(){
	return m_index<m_stack->p_Length();
}
c_Point* c_Enumerator24::p_NextObject(){
	m_index+=1;
	return m_stack->m_data[m_index-1];
}
void c_Enumerator24::mark(){
	Object::mark();
	gc_mark_q(m_stack);
}
c_Stack9::c_Stack9(){
	m_data=Array<c_RoomWithDoor* >();
	m_length=0;
}
c_Stack9* c_Stack9::m_new(){
	return this;
}
c_Stack9* c_Stack9::m_new2(Array<c_RoomWithDoor* > t_data){
	gc_assign(this->m_data,t_data.Slice(0));
	this->m_length=t_data.Length();
	return this;
}
void c_Stack9::p_Push25(c_RoomWithDoor* t_value){
	if(m_length==m_data.Length()){
		gc_assign(m_data,m_data.Resize(m_length*2+10));
	}
	gc_assign(m_data[m_length],t_value);
	m_length+=1;
}
void c_Stack9::p_Push26(Array<c_RoomWithDoor* > t_values,int t_offset,int t_count){
	for(int t_i=0;t_i<t_count;t_i=t_i+1){
		p_Push25(t_values[t_offset+t_i]);
	}
}
void c_Stack9::p_Push27(Array<c_RoomWithDoor* > t_values,int t_offset){
	p_Push26(t_values,t_offset,t_values.Length()-t_offset);
}
c_RoomWithDoor* c_Stack9::m_NIL;
void c_Stack9::p_Length2(int t_newlength){
	if(t_newlength<m_length){
		for(int t_i=t_newlength;t_i<m_length;t_i=t_i+1){
			gc_assign(m_data[t_i],m_NIL);
		}
	}else{
		if(t_newlength>m_data.Length()){
			gc_assign(m_data,m_data.Resize(bb_math_Max(m_length*2+10,t_newlength)));
		}
	}
	m_length=t_newlength;
}
int c_Stack9::p_Length(){
	return m_length;
}
c_RoomWithDoor* c_Stack9::p_Get2(int t_index){
	return m_data[t_index];
}
void c_Stack9::mark(){
	Object::mark();
	gc_mark_q(m_data);
}
c_StackEx4::c_StackEx4(){
}
c_StackEx4* c_StackEx4::m_new(){
	c_Stack9::m_new();
	return this;
}
c_RoomWithDoor* c_StackEx4::p_ChooseRandom(bool t_useSeed){
	int t_randomIndex=c_Util::m_RndIntRangeFromZero(this->p_Length()-1,t_useSeed);
	return this->p_Get2(t_randomIndex);
}
void c_StackEx4::mark(){
	c_Stack9::mark();
}
c_IntPointMap2::c_IntPointMap2(){
}
c_IntPointMap2* c_IntPointMap2::m_new(){
	c_Map15::m_new();
	return this;
}
int c_IntPointMap2::p_Compare3(c_Point* t_lhs,c_Point* t_rhs){
	if(t_lhs->m_x>t_rhs->m_x){
		return 1;
	}
	if(t_lhs->m_x<t_rhs->m_x){
		return -1;
	}
	if(t_lhs->m_y>t_rhs->m_y){
		return 1;
	}
	if(t_lhs->m_y<t_rhs->m_y){
		return -1;
	}
	return 0;
}
void c_IntPointMap2::mark(){
	c_Map15::mark();
}
c_Stack10::c_Stack10(){
	m_data=Array<c_RoomBase* >();
	m_length=0;
}
c_Stack10* c_Stack10::m_new(){
	return this;
}
c_Stack10* c_Stack10::m_new2(Array<c_RoomBase* > t_data){
	gc_assign(this->m_data,t_data.Slice(0));
	this->m_length=t_data.Length();
	return this;
}
void c_Stack10::p_Push28(c_RoomBase* t_value){
	if(m_length==m_data.Length()){
		gc_assign(m_data,m_data.Resize(m_length*2+10));
	}
	gc_assign(m_data[m_length],t_value);
	m_length+=1;
}
void c_Stack10::p_Push29(Array<c_RoomBase* > t_values,int t_offset,int t_count){
	for(int t_i=0;t_i<t_count;t_i=t_i+1){
		p_Push28(t_values[t_offset+t_i]);
	}
}
void c_Stack10::p_Push30(Array<c_RoomBase* > t_values,int t_offset){
	p_Push29(t_values,t_offset,t_values.Length()-t_offset);
}
c_Enumerator25* c_Stack10::p_ObjectEnumerator(){
	return (new c_Enumerator25)->m_new(this);
}
c_RoomBase* c_Stack10::m_NIL;
void c_Stack10::p_Length2(int t_newlength){
	if(t_newlength<m_length){
		for(int t_i=t_newlength;t_i<m_length;t_i=t_i+1){
			gc_assign(m_data[t_i],m_NIL);
		}
	}else{
		if(t_newlength>m_data.Length()){
			gc_assign(m_data,m_data.Resize(bb_math_Max(m_length*2+10,t_newlength)));
		}
	}
	m_length=t_newlength;
}
int c_Stack10::p_Length(){
	return m_length;
}
c_RoomBase* c_Stack10::p_Get2(int t_index){
	return m_data[t_index];
}
void c_Stack10::mark(){
	Object::mark();
	gc_mark_q(m_data);
}
c_Enumerator25::c_Enumerator25(){
	m_stack=0;
	m_index=0;
}
c_Enumerator25* c_Enumerator25::m_new(c_Stack10* t_stack){
	gc_assign(this->m_stack,t_stack);
	return this;
}
c_Enumerator25* c_Enumerator25::m_new2(){
	return this;
}
bool c_Enumerator25::p_HasNext(){
	return m_index<m_stack->p_Length();
}
c_RoomBase* c_Enumerator25::p_NextObject(){
	m_index+=1;
	return m_stack->m_data[m_index-1];
}
void c_Enumerator25::mark(){
	Object::mark();
	gc_mark_q(m_stack);
}
c_SecretRoomData::c_SecretRoomData(){
	m_x=0;
	m_y=0;
	m_w=0;
	m_h=0;
	m_isCrackedWallAdjacent=false;
}
c_SecretRoomData* c_SecretRoomData::m_new(int t_xVal,int t_yVal,int t_width,int t_height,bool t_isCrackedWallAdjacent){
	this->m_x=t_xVal;
	this->m_y=t_yVal;
	this->m_w=t_width;
	this->m_h=t_height;
	this->m_isCrackedWallAdjacent=t_isCrackedWallAdjacent;
	return this;
}
c_SecretRoomData* c_SecretRoomData::m_new2(){
	return this;
}
void c_SecretRoomData::mark(){
	Object::mark();
}
c_Enumerator26::c_Enumerator26(){
	m__list=0;
	m__curr=0;
}
c_Enumerator26* c_Enumerator26::m_new(c_List14* t_list){
	gc_assign(m__list,t_list);
	gc_assign(m__curr,t_list->m__head->m__succ);
	return this;
}
c_Enumerator26* c_Enumerator26::m_new2(){
	return this;
}
bool c_Enumerator26::p_HasNext(){
	while(m__curr->m__succ->m__pred!=m__curr){
		gc_assign(m__curr,m__curr->m__succ);
	}
	return m__curr!=m__list->m__head;
}
c_RoomData* c_Enumerator26::p_NextObject(){
	c_RoomData* t_data=m__curr->m__data;
	gc_assign(m__curr,m__curr->m__succ);
	return t_data;
}
void c_Enumerator26::mark(){
	Object::mark();
	gc_mark_q(m__list);
	gc_mark_q(m__curr);
}
c_Poltergeist::c_Poltergeist(){
	m_alphaImage=0;
}
c_Poltergeist* c_Poltergeist::m_theGhoul;
void c_Poltergeist::p_Die(){
	if(m_theGhoul==this){
		m_theGhoul=0;
	}
	c_Enemy::p_Die();
}
c_Poltergeist* c_Poltergeist::m_new(int t_xVal,int t_yVal,int t_l){
	c_Enemy::m_new();
	this->p_Init5(t_xVal,t_yVal,t_l,String(L"ghoul",5));
	this->m_invisible=true;
	this->m_collides=false;
	this->m_blink_MIN=120;
	this->m_blink_MAX=240;
	this->m_blink_DUR=10;
	this->m_overrideAttackSound=String(L"ghoulAttack",11);
	this->m_overrideDeathSound=String(L"ghoulDeath",10);
	this->m_image->p_SetZOff(FLOAT(18.0));
	c_XMLNode* t_enemyNode=c_Enemy::m_GetEnemyXML(this->m_xmlName,this->m_level);
	c_XMLNode* t_spritesheetNode=t_enemyNode->p_GetChild2(String(L"spritesheet",11),false);
	String t_path=t_spritesheetNode->p_value();
	int t_frameW=t_spritesheetNode->p_GetAttribute3(String(L"frameW",6),0);
	int t_frameH=t_spritesheetNode->p_GetAttribute3(String(L"frameH",6),0);
	int t_numFrames=t_spritesheetNode->p_GetAttribute3(String(L"numFrames",9),1);
	gc_assign(this->m_alphaImage,(new c_Sprite)->m_new(t_path,t_frameW,t_frameH,t_numFrames,c_Image::m_DefaultFlags));
	this->m_alphaImage->p_SetAlphaValue(FLOAT(0.6));
	this->m_alphaImage->p_SetZOff(FLOAT(18.0));
	this->m_isWraithLike=true;
	gc_assign(m_theGhoul,this);
	if(c_Util::m_IsCharacterActive(4)){
		this->m_coinsToDrop=0;
		this->p_Die();
	}
	return this;
}
c_Poltergeist* c_Poltergeist::m_new2(){
	c_Enemy::m_new();
	return this;
}
bool c_Poltergeist::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Poltergeist.Hit(String, Int, Int, Entity, Bool, Int)",52));
	return false;
}
void c_Poltergeist::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Poltergeist.Update()",20));
}
void c_Poltergeist::mark(){
	c_Enemy::mark();
	gc_mark_q(m_alphaImage);
}
c_ABTeleportTrap::c_ABTeleportTrap(){
}
c_ABTeleportTrap* c_ABTeleportTrap::m_new(int t_xVal,int t_yVal){
	c_Trap::m_new(t_xVal,t_yVal,5);
	this->m_xOff=FLOAT(5.0);
	this->m_yOff=FLOAT(15.0);
	gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"traps/ab_teleporttrap.png",25),14,16,4,c_Image::m_DefaultFlags));
	this->m_image->p_SetZOff(FLOAT(-995.0));
	return this;
}
c_ABTeleportTrap* c_ABTeleportTrap::m_new2(){
	c_Trap::m_new2();
	return this;
}
void c_ABTeleportTrap::mark(){
	c_Trap::mark();
}
c_StackEx5::c_StackEx5(){
}
c_StackEx5* c_StackEx5::m_new(){
	c_Stack10::m_new();
	return this;
}
c_RoomBase* c_StackEx5::p_ChooseRandom(bool t_useSeed){
	int t_randomIndex=c_Util::m_RndIntRangeFromZero(this->p_Length()-1,t_useSeed);
	return this->p_Get2(t_randomIndex);
}
void c_StackEx5::mark(){
	c_Stack10::mark();
}
c_EnemyBaseType::c_EnemyBaseType(){
}
void c_EnemyBaseType::mark(){
	Object::mark();
}
c_ToughSarcophagus::c_ToughSarcophagus(){
}
int c_ToughSarcophagus::m_GetPerRoomCount(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ToughSarcophagus.GetPerRoomCount()",34));
	return 0;
}
c_ToughSarcophagus* c_ToughSarcophagus::m_new(int t_xVal,int t_yVal,int t_etype){
	c_Enemy::m_new();
	bb_logger_Debug->p_TraceNotImplemented(String(L"ToughSarcophagus.New(Int, Int, Int)",35));
	return this;
}
c_ToughSarcophagus* c_ToughSarcophagus::m_new2(){
	c_Enemy::m_new();
	return this;
}
bool c_ToughSarcophagus::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ToughSarcophagus.Hit(String, Int, Int, Entity, Bool, Int)",57));
	return false;
}
void c_ToughSarcophagus::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ToughSarcophagus.Update()",25));
}
void c_ToughSarcophagus::mark(){
	c_Enemy::mark();
}
c_Enumerator27::c_Enumerator27(){
	m__list=0;
	m__curr=0;
}
c_Enumerator27* c_Enumerator27::m_new(c_List32* t_list){
	gc_assign(m__list,t_list);
	gc_assign(m__curr,t_list->m__head->m__succ);
	return this;
}
c_Enumerator27* c_Enumerator27::m_new2(){
	return this;
}
bool c_Enumerator27::p_HasNext(){
	while(m__curr->m__succ->m__pred!=m__curr){
		gc_assign(m__curr,m__curr->m__succ);
	}
	return m__curr!=m__list->m__head;
}
c_Chest* c_Enumerator27::p_NextObject(){
	c_Chest* t_data=m__curr->m__data;
	gc_assign(m__curr,m__curr->m__succ);
	return t_data;
}
void c_Enumerator27::mark(){
	Object::mark();
	gc_mark_q(m__list);
	gc_mark_q(m__curr);
}
c_Enumerator28::c_Enumerator28(){
	m__list=0;
	m__curr=0;
}
c_Enumerator28* c_Enumerator28::m_new(c_List28* t_list){
	gc_assign(m__list,t_list);
	gc_assign(m__curr,t_list->m__head->m__succ);
	return this;
}
c_Enumerator28* c_Enumerator28::m_new2(){
	return this;
}
bool c_Enumerator28::p_HasNext(){
	while(m__curr->m__succ->m__pred!=m__curr){
		gc_assign(m__curr,m__curr->m__succ);
	}
	return m__curr!=m__list->m__head;
}
c_Shrine* c_Enumerator28::p_NextObject(){
	c_Shrine* t_data=m__curr->m__data;
	gc_assign(m__curr,m__curr->m__succ);
	return t_data;
}
void c_Enumerator28::mark(){
	Object::mark();
	gc_mark_q(m__list);
	gc_mark_q(m__curr);
}
c_Enumerator29::c_Enumerator29(){
	m__list=0;
	m__curr=0;
}
c_Enumerator29* c_Enumerator29::m_new(c_List22* t_list){
	gc_assign(m__list,t_list);
	gc_assign(m__curr,t_list->m__head->m__succ);
	return this;
}
c_Enumerator29* c_Enumerator29::m_new2(){
	return this;
}
bool c_Enumerator29::p_HasNext(){
	while(m__curr->m__succ->m__pred!=m__curr){
		gc_assign(m__curr,m__curr->m__succ);
	}
	return m__curr!=m__list->m__head;
}
c_NPC* c_Enumerator29::p_NextObject(){
	c_NPC* t_data=m__curr->m__data;
	gc_assign(m__curr,m__curr->m__succ);
	return t_data;
}
void c_Enumerator29::mark(){
	Object::mark();
	gc_mark_q(m__list);
	gc_mark_q(m__curr);
}
c_Weaponmaster::c_Weaponmaster(){
}
c_Weaponmaster* c_Weaponmaster::m_new(int t_xVal,int t_yVal,int t_l,bool t_captv){
	c_NPC::m_new();
	bb_logger_Debug->p_TraceNotImplemented(String(L"Weaponmaster.New(Int, Int, Int, Bool)",37));
	return this;
}
c_Weaponmaster* c_Weaponmaster::m_new2(){
	c_NPC::m_new();
	return this;
}
void c_Weaponmaster::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Weaponmaster.Update()",21));
}
void c_Weaponmaster::mark(){
	c_NPC::mark();
}
c_DiamondDealer::c_DiamondDealer(){
}
c_DiamondDealer* c_DiamondDealer::m_new(int t_xVal,int t_yVal,int t_l,bool t_captv){
	c_NPC::m_new();
	bb_logger_Debug->p_TraceNotImplemented(String(L"DiamondDealer.New(Int, Int, Int, Bool)",38));
	return this;
}
c_DiamondDealer* c_DiamondDealer::m_new2(){
	c_NPC::m_new();
	return this;
}
void c_DiamondDealer::mark(){
	c_NPC::mark();
}
c_Beastmaster::c_Beastmaster(){
}
c_Beastmaster* c_Beastmaster::m_new(int t_xVal,int t_yVal,int t_l,bool t_captv){
	c_NPC::m_new();
	this->p_NPCInit(t_xVal,t_yVal,t_l,String(L"beastmaster",11),t_captv,false);
	return this;
}
c_Beastmaster* c_Beastmaster::m_new2(){
	c_NPC::m_new();
	return this;
}
void c_Beastmaster::mark(){
	c_NPC::mark();
}
c_Merlin::c_Merlin(){
}
c_Merlin* c_Merlin::m_new(int t_xVal,int t_yVal,int t_l,bool t_captv){
	c_NPC::m_new();
	this->p_NPCInit(t_xVal,t_yVal,t_l,String(L"merlin",6),t_captv,false);
	return this;
}
c_Merlin* c_Merlin::m_new2(){
	c_NPC::m_new();
	return this;
}
void c_Merlin::mark(){
	c_NPC::mark();
}
c_Bossmaster::c_Bossmaster(){
}
c_Bossmaster* c_Bossmaster::m_new(int t_xVal,int t_yVal,int t_l,bool t_captv){
	c_NPC::m_new();
	this->p_NPCInit(t_xVal,t_yVal,t_l,String(L"bossmaster",10),t_captv,false);
	return this;
}
c_Bossmaster* c_Bossmaster::m_new2(){
	c_NPC::m_new();
	return this;
}
void c_Bossmaster::mark(){
	c_NPC::mark();
}
int bb_controller_game_runPlaytimeLastAdded;
int bb_controller_game_runPlaytimeMilliseconds;
int bb_controller_game_subRunPlaytimeMilliseconds;
c_MapKeys2::c_MapKeys2(){
	m_map=0;
}
c_MapKeys2* c_MapKeys2::m_new(c_Map3* t_map){
	gc_assign(this->m_map,t_map);
	return this;
}
c_MapKeys2* c_MapKeys2::m_new2(){
	return this;
}
c_KeyEnumerator2* c_MapKeys2::p_ObjectEnumerator(){
	return (new c_KeyEnumerator2)->m_new(m_map->p_FirstNode());
}
void c_MapKeys2::mark(){
	Object::mark();
	gc_mark_q(m_map);
}
c_KeyEnumerator2::c_KeyEnumerator2(){
	m_node=0;
}
c_KeyEnumerator2* c_KeyEnumerator2::m_new(c_Node4* t_node){
	gc_assign(this->m_node,t_node);
	return this;
}
c_KeyEnumerator2* c_KeyEnumerator2::m_new2(){
	return this;
}
bool c_KeyEnumerator2::p_HasNext(){
	return m_node!=0;
}
String c_KeyEnumerator2::p_NextObject(){
	c_Node4* t_t=m_node;
	gc_assign(m_node,m_node->p_NextNode());
	return t_t->m_key;
}
void c_KeyEnumerator2::mark(){
	Object::mark();
	gc_mark_q(m_node);
}
c_BackwardsStack::c_BackwardsStack(){
	m_stack=0;
}
c_BackwardsStack* c_BackwardsStack::m_new(c_Stack2* t_stack){
	gc_assign(this->m_stack,t_stack);
	return this;
}
c_BackwardsStack* c_BackwardsStack::m_new2(){
	return this;
}
c_BackwardsEnumerator* c_BackwardsStack::p_ObjectEnumerator(){
	return (new c_BackwardsEnumerator)->m_new(m_stack);
}
void c_BackwardsStack::mark(){
	Object::mark();
	gc_mark_q(m_stack);
}
c_BackwardsEnumerator::c_BackwardsEnumerator(){
	m_stack=0;
	m_index=0;
}
c_BackwardsEnumerator* c_BackwardsEnumerator::m_new(c_Stack2* t_stack){
	gc_assign(this->m_stack,t_stack);
	m_index=t_stack->m_length;
	return this;
}
c_BackwardsEnumerator* c_BackwardsEnumerator::m_new2(){
	return this;
}
bool c_BackwardsEnumerator::p_HasNext(){
	return m_index>0;
}
int c_BackwardsEnumerator::p_NextObject(){
	m_index-=1;
	return m_stack->m_data[m_index];
}
void c_BackwardsEnumerator::mark(){
	Object::mark();
	gc_mark_q(m_stack);
}
c_DecorativeFireTrap::c_DecorativeFireTrap(){
}
c_DecorativeFireTrap* c_DecorativeFireTrap::m_new(int t_xVal,int t_yVal){
	c_Trap::m_new(t_xVal,t_yVal,13);
	this->m_xOff=FLOAT(2.0);
	this->m_yOff=FLOAT(-36.0);
	gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"traps/firetrap_decorative.png",29),21,54,8,c_Image::m_DefaultFlags));
	this->m_image->p_SetZOff(FLOAT(80.0));
	return this;
}
c_DecorativeFireTrap* c_DecorativeFireTrap::m_new2(){
	c_Trap::m_new2();
	return this;
}
void c_DecorativeFireTrap::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"DecorativeFireTrap.Update()",27));
}
void c_DecorativeFireTrap::mark(){
	c_Trap::mark();
}
c_Switch::c_Switch(){
	m_trigger=-1;
	m_pairedSwitch=0;
}
c_List36* c_Switch::m_switches;
c_Switch* c_Switch::m_new(int t_xVal,int t_yVal,int t_triggerNum,c_Switch* t_pair){
	c_Trap::m_new(t_xVal,t_yVal,12);
	this->m_xOff=FLOAT(5.0);
	this->m_yOff=FLOAT(15.0);
	this->m_trigger=t_triggerNum;
	gc_assign(this->m_pairedSwitch,t_pair);
	gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"traps/switch.png",16),14,16,4,c_Image::m_DefaultFlags));
	this->m_image->p_SetZ(FLOAT(-995.0));
	m_switches->p_AddLast36(this);
	this->p_ActivateLight(FLOAT(1.0),FLOAT(1.5));
	return this;
}
c_Switch* c_Switch::m_new2(){
	c_Trap::m_new2();
	return this;
}
void c_Switch::p_Die(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Switch.Die()",12));
}
void c_Switch::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Switch.Update()",15));
}
void c_Switch::mark(){
	c_Trap::mark();
	gc_mark_q(m_pairedSwitch);
}
c_List36::c_List36(){
	m__head=((new c_HeadNode36)->m_new());
}
c_List36* c_List36::m_new(){
	return this;
}
c_Node54* c_List36::p_AddLast36(c_Switch* t_data){
	return (new c_Node54)->m_new(m__head,m__head->m__pred,t_data);
}
c_List36* c_List36::m_new2(Array<c_Switch* > t_data){
	Array<c_Switch* > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		c_Switch* t_t=t_[t_2];
		t_2=t_2+1;
		p_AddLast36(t_t);
	}
	return this;
}
void c_List36::mark(){
	Object::mark();
	gc_mark_q(m__head);
}
c_Node54::c_Node54(){
	m__succ=0;
	m__pred=0;
	m__data=0;
}
c_Node54* c_Node54::m_new(c_Node54* t_succ,c_Node54* t_pred,c_Switch* t_data){
	gc_assign(m__succ,t_succ);
	gc_assign(m__pred,t_pred);
	gc_assign(m__succ->m__pred,this);
	gc_assign(m__pred->m__succ,this);
	gc_assign(m__data,t_data);
	return this;
}
c_Node54* c_Node54::m_new2(){
	return this;
}
void c_Node54::mark(){
	Object::mark();
	gc_mark_q(m__succ);
	gc_mark_q(m__pred);
	gc_mark_q(m__data);
}
c_HeadNode36::c_HeadNode36(){
}
c_HeadNode36* c_HeadNode36::m_new(){
	c_Node54::m_new2();
	gc_assign(m__succ,(this));
	gc_assign(m__pred,(this));
	return this;
}
void c_HeadNode36::mark(){
	c_Node54::mark();
}
c_ControllerPopUp::c_ControllerPopUp(){
	m_cachedScaleVal=false;
	m_cGame=0;
	m_option1Default=true;
	m_option2Exists=false;
	m_popupTextVal=String();
	m_popupText2Val=String();
	m_popupText3Val=String();
	m_ignoreInput=false;
	m_popupText4Val=String();
	m_overlayBlack=0;
	m_popupText=(new c_TextSprite)->m_new(2,FLOAT(2.0),-1,10000,true,-16777216,1,1);
	m_popupText2=(new c_TextSprite)->m_new(2,FLOAT(2.0),-1,10000,true,-16777216,1,1);
	m_option1Text=(new c_TextLabel)->m_new(String(L"DEFAULT1",8),2,FLOAT(2.0),false);
	m_option2Text=(new c_TextLabel)->m_new(String(L"DEFAULT2",8),2,FLOAT(2.0),false);
	m_gui=0;
	m_retval=-1;
	m_bestiaryImage=0;
}
c_ControllerPopUp* c_ControllerPopUp::m_new(c_Controller* t_game,String t_pText,String t_pText2,String t_pText3,String t_option1,String t_option2,bool t_opt1Default,bool t_ignoreInpt,String t_pText4){
	c_Controller::m_new();
	this->m_cachedScaleVal=c_Sprite::m_scaleToFitScreen;
	c_Sprite::m_scaleToFitScreen=false;
	gc_assign(this->m_cGame,t_game);
	this->m_option1Default=t_opt1Default;
	this->m_option2Exists=t_option2!=String();
	this->m_popupTextVal=t_pText;
	this->m_popupText2Val=t_pText2;
	this->m_popupText3Val=t_pText3;
	this->m_ignoreInput=t_ignoreInpt;
	this->m_popupText4Val=t_pText4;
	gc_assign(this->m_overlayBlack,(new c_Sprite)->m_new2(String(L"gui/TEMP_overlay_black.png",26),1,c_Image::m_DefaultFlags));
	this->m_overlayBlack->p_SetZ(FLOAT(20000.0));
	this->m_overlayBlack->p_InWorld(false);
	this->m_popupText->m_zVal=20002;
	this->m_popupText2->m_zVal=20002;
	this->m_option1Text->p_SetText2(t_option1);
	this->m_option1Text->m_selectedSpr->m_scaleVal*=FLOAT(1.25);
	if(this->m_option2Exists){
		this->m_option2Text->p_SetText2(t_option2);
		this->m_option2Text->m_selectedSpr->m_scaleVal*=FLOAT(1.25);
	}
	gc_assign(this->m_gui,(new c_OptionList)->m_new((this),false,0));
	this->m_gui->p_Add7(this->m_option1Text);
	if(this->m_option2Exists){
		this->m_gui->p_Add7(this->m_option2Text);
	}
	return this;
}
c_ControllerPopUp* c_ControllerPopUp::m_new2(){
	c_Controller::m_new();
	return this;
}
void c_ControllerPopUp::p_RegainFocus(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ControllerPopUp.RegainFocus()",29));
}
void c_ControllerPopUp::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ControllerPopUp.Update()",24));
}
void c_ControllerPopUp::mark(){
	c_Controller::mark();
	gc_mark_q(m_cGame);
	gc_mark_q(m_overlayBlack);
	gc_mark_q(m_popupText);
	gc_mark_q(m_popupText2);
	gc_mark_q(m_option1Text);
	gc_mark_q(m_option2Text);
	gc_mark_q(m_gui);
	gc_mark_q(m_bestiaryImage);
}
c_GuiComponent::c_GuiComponent(){
}
c_GuiComponent* c_GuiComponent::m_new(){
	c_GuiContainer::m_new();
	return this;
}
void c_GuiComponent::mark(){
	c_GuiContainer::mark();
}
c_TextLabel::c_TextLabel(){
	m_selectedSpr=0;
}
c_TextLabel* c_TextLabel::m_new(String t_t,int t_j,Float t_sc,bool t_left){
	c_GuiComponent::m_new();
	bb_logger_Debug->p_TraceNotImplemented(String(L"TextLabel.New(String, Int, Float, Bool)",39));
	return this;
}
c_TextLabel* c_TextLabel::m_new2(){
	c_GuiComponent::m_new();
	return this;
}
c_TextLabel* c_TextLabel::p_SetText2(String t_t){
	bb_logger_Debug->p_TraceNotImplemented(String(L"TextLabel.SetText(String)",25));
	return 0;
}
void c_TextLabel::mark(){
	c_GuiComponent::mark();
	gc_mark_q(m_selectedSpr);
}
c_OptionList::c_OptionList(){
}
c_OptionList* c_OptionList::m_new(Object* t_c,bool t_w,int t_cOff){
	bb_logger_Debug->p_TraceNotImplemented(String(L"OptionList.New(Object, Bool, Int)",33));
	return this;
}
c_OptionList* c_OptionList::m_new2(){
	return this;
}
void c_OptionList::p_Add7(c_GuiComponent* t_g){
	bb_logger_Debug->p_TraceNotImplemented(String(L"OptionList.Add(GuiComponent)",28));
}
void c_OptionList::mark(){
	Object::mark();
}
c_ControllerPostGame::c_ControllerPostGame(){
}
c_ControllerPostGame* c_ControllerPostGame::m_new(c_ControllerGame* t_game,bool t_hardcore,bool t_daily,bool t_allChars,bool t_deathless,bool t_died,int t_coinVal,int t_timeVal){
	c_Controller::m_new();
	bb_logger_Debug->p_TraceNotImplemented(String(L"ControllerPostGame.New(ControllerGame, Bool, Bool, Bool, Bool, Bool, Int, Int)",78));
	return this;
}
c_ControllerPostGame* c_ControllerPostGame::m_new2(){
	c_Controller::m_new();
	return this;
}
void c_ControllerPostGame::p_RegainFocus(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ControllerPostGame.RegainFocus()",32));
}
void c_ControllerPostGame::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ControllerPostGame.Update()",27));
}
void c_ControllerPostGame::mark(){
	c_Controller::mark();
}
c_ControllerBossIntro::c_ControllerBossIntro(){
}
c_ControllerBossIntro* c_ControllerBossIntro::m_new(Object* t_game,int t_bossNum){
	c_Controller::m_new();
	bb_logger_Debug->p_TraceNotImplemented(String(L"ControllerBossIntro.New(Object, Int)",36));
	return this;
}
c_ControllerBossIntro* c_ControllerBossIntro::m_new2(){
	c_Controller::m_new();
	return this;
}
void c_ControllerBossIntro::p_RegainFocus(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ControllerBossIntro.RegainFocus()",33));
}
void c_ControllerBossIntro::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ControllerBossIntro.Update()",28));
}
void c_ControllerBossIntro::mark(){
	c_Controller::mark();
}
c_ControllerMainMenu::c_ControllerMainMenu(){
	m_showCloudSavePopup=false;
	m_mainmenuSongName=String(L"zone1_3",7);
	m_mainmenuTitlescreen=String(L"mainmenu/mainmenu.png",21);
	m_mainMenu=0;
	m_continueImage=0;
	m_alphaWarning=0;
	m_haveShownAlphaWarning=false;
	m_seizureWarning=0;
	m_haveShownSeizureWarning=false;
}
c_ControllerMainMenu* c_ControllerMainMenu::m_new(){
	c_Controller::m_new();
	c_Sprite::m_scaleToFitScreen=true;
	c_GameData::m_LoadGameDataXML(false);
	this->m_showCloudSavePopup=c_GameData::m_LoadPlayerDataXML(true);
	if(String(c_GameData::m_GetDefaultMod())!=String()){
		c_GameData::m_activeMod=String(c_GameData::m_GetDefaultMod());
		c_GameData::m_LoadGameDataXML(false);
	}
	if(c_GameData::m_GetShownNocturnaIntro() || !c_GameData::m_GetDLCPlayed() && c_GameData::m_GetZone2Unlocked(0) || c_GameData::m_IsCharUnlocked(1)){
		c_GameData::m_SetShownNocturnaIntro(true);
		this->m_mainmenuSongName=String(L"zone5_3",7);
		this->m_mainmenuTitlescreen=String(L"mainmenu/amplified_titlescreen.png",34);
	}
	bb_util_SetVSync((c_GameData::m_GetVSync())?1:0);
	c_GameData::m_GetFullscreen();
	if(c_GameData::m_GetResolutionW()>0){
		c_GameData::m_GetResolutionH();
		c_GameData::m_GetResolutionW();
	}
	if(bb_steam_g_SteamLeaderboards!=0){
		c_Util::m_GetLeaderboardScores(1,1,0,String(),true,false,true);
	}
	c_TextSprite::m_Init();
	c_ControllerCutscene::m_InitSubtitles();
	c_TextLog::m_Message(String(L"ControllerMainMenu: Loading images1...",38));
	gc_assign(this->m_mainMenu,(new c_Sprite)->m_new2(this->m_mainmenuTitlescreen,1,c_Image::m_DefaultFlags));
	this->m_mainMenu->p_SetZ(FLOAT(9998.0));
	this->m_mainMenu->p_InWorld(false);
	c_TextLog::m_Message(String(L"ControllerMainMenu: Loading images3...",38));
	gc_assign(this->m_continueImage,(new c_Sprite)->m_new2(String(L"mainmenu/continue.png",21),1,c_Image::m_DefaultFlags));
	this->m_continueImage->p_SetZ(FLOAT(9999.0));
	this->m_continueImage->p_InWorld(false);
	if(bb_steam_SteamApps()!=0 && bb_steam_SteamApps()->p_BIsDlcInstalled(379400)){
		gc_assign(this->m_alphaWarning,(new c_Sprite)->m_new2(String(L"mainmenu/collectors_edition.png",31),1,c_Image::m_DefaultFlags));
	}else{
		if(bb_steam_SteamApps()!=0 && bb_steam_SteamApps()->p_BIsDlcInstalled(314680)){
			gc_assign(this->m_alphaWarning,(new c_Sprite)->m_new2(String(L"mainmenu/soundtrack_edition.png",31),1,c_Image::m_DefaultFlags));
		}else{
			this->m_haveShownAlphaWarning=true;
		}
	}
	if(this->m_alphaWarning!=0){
		this->m_alphaWarning->p_SetZ(FLOAT(10000.0));
		this->m_alphaWarning->p_InWorld(false);
	}
	gc_assign(this->m_seizureWarning,(new c_Sprite)->m_new2(String(L"mainmenu/seizure_warning.png",28),1,c_Image::m_DefaultFlags));
	if(c_GameData::m_GetShownSeizureWarning()){
		this->m_haveShownSeizureWarning=true;
	}
	c_TextLog::m_Message(String(L"ControllerMainMenu: Loading ControllerIntro...",46));
	(new c_ControllerIntro)->m_new();
	return this;
}
void c_ControllerMainMenu::p_RegainFocus(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ControllerMainMenu.RegainFocus()",32));
}
void c_ControllerMainMenu::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ControllerMainMenu.Update()",27));
}
void c_ControllerMainMenu::mark(){
	c_Controller::mark();
	gc_mark_q(m_mainMenu);
	gc_mark_q(m_continueImage);
	gc_mark_q(m_alphaWarning);
	gc_mark_q(m_seizureWarning);
}
void bb_util_SetVSync(int t_v){
	bb_logger_Debug->p_TraceNotImplemented(String(L"SetVSync(Int)",13));
}
Object* bb_steam_g_SteamLeaderboards;
c_ISteamApps* bb_steam_SteamApps(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"SteamApps()",11));
	return 0;
}
c_ControllerIntro::c_ControllerIntro(){
	m_splashScreen=0;
	m_videoImg=0;
	m_introVideoName=String(L"intro_silent",12);
	m_introSongName=String(L"intro",5);
}
c_Sprite* c_ControllerIntro::m_videoSpr;
c_ControllerIntro* c_ControllerIntro::m_new(){
	c_Controller::m_new();
	c_Sprite::m_scaleToFitScreen=true;
	gc_assign(this->m_splashScreen,(new c_Sprite)->m_new2(String(L"mainmenu/splash_screen.png",26),1,c_Image::m_DefaultFlags));
	this->m_splashScreen->p_SetZ(FLOAT(10002.0));
	this->m_splashScreen->p_InWorld(false);
	c_TextLog::m_Message(String(L"ControllerIntro: Loading images1...",35));
	gc_assign(this->m_videoImg,bb_graphics_CreateImage(960,640,1,c_Image::m_DefaultFlags));
	c_TextLog::m_Message(String(L"ControllerIntro: Loading images2...",35));
	gc_assign(m_videoSpr,(new c_Sprite)->m_new3(this->m_videoImg));
	m_videoSpr->p_InWorld(false);
	m_videoSpr->p_SetZ(FLOAT(10000.0));
	m_videoSpr->p_SetScale(FLOAT(0.5));
	c_TextLog::m_Message(String(L"ControllerIntro: Initializing Audio...",38));
	c_Audio::m_Init();
	if(c_GameData::m_GetShownNocturnaIntro() || !c_GameData::m_GetDLCPlayed() && c_GameData::m_GetZone2Unlocked(0) || c_GameData::m_IsCharUnlocked(1)){
		c_GameData::m_SetShownNocturnaIntro(true);
		this->m_introVideoName=String(L"intro_dlc_silent",16);
		this->m_introSongName=String(L"intro_dlc",9);
	}
	c_TextLog::m_Message(String(L"ControllerIntro: Loading video...",33));
	bb_logger_Debug->p_TraceNotImplemented(String(L"ControllerIntro.New() (Video)",29));
	return this;
}
void c_ControllerIntro::p_RegainFocus(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ControllerIntro.RegainFocus()",29));
}
void c_ControllerIntro::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ControllerIntro.Update()",24));
}
void c_ControllerIntro::mark(){
	c_Controller::mark();
	gc_mark_q(m_splashScreen);
	gc_mark_q(m_videoImg);
}
c_Image* bb_graphics_CreateImage(int t_width,int t_height,int t_frameCount,int t_flags){
	gxtkSurface* t_surf=bb_graphics_device->CreateSurface(t_width*t_frameCount,t_height);
	if((t_surf)!=0){
		return ((new c_Image)->m_new())->p_Init(t_surf,t_frameCount,t_flags);
	}
	return 0;
}
int bb_necrodancergame_lastFrameTimeUpdate;
int bb_necrodancergame_globalFrameCounter;
int bb_necrodancergame_lastFrameCountUpdate;
int bb_necrodancergame_lastFPSUpdate;
bool bb_controller_game_DEBUG_MOUSE_COORDS;
int bb_necrodancergame_FIXED_HEIGHT;
int bb_necrodancergame_FIXED_WIDTH;
c_ControllerInputPopup::c_ControllerInputPopup(){
	m_result=String();
	m_cGame=0;
	m_text1=String();
	m_text2=String();
	m_isDebug=false;
	m_inputText=0;
	m_inputText2=0;
	m_overlayBlack=0;
	m_popupText=(new c_TextSprite)->m_new(2,FLOAT(2.0),-1,10000,true,-16777216,1,1);
	m_popupText2=(new c_TextSprite)->m_new(2,FLOAT(2.0),-1,10000,true,-16777216,1,1);
}
c_ControllerInputPopup* c_ControllerInputPopup::m_new(c_Controller* t_game,String t_txt1,String t_txt2,bool t_dbg){
	c_Controller::m_new();
	gc_assign(this->m_cGame,t_game);
	this->m_text1=t_txt1;
	this->m_text2=t_txt2;
	this->m_isDebug=t_dbg;
	if(t_dbg){
		gc_assign(this->m_inputText,(new c_TextInput)->m_new(String(),2,FLOAT(2.0),100));
		gc_assign(this->m_inputText2,(new c_TextInput)->m_new(String(),2,FLOAT(2.0),100));
	}else{
		gc_assign(this->m_inputText,(new c_TextInput)->m_new(String(),2,FLOAT(2.0),10));
		gc_assign(this->m_inputText2,(new c_TextInput)->m_new(String(),2,FLOAT(2.0),100));
	}
	gc_assign(this->m_overlayBlack,(new c_Sprite)->m_new2(String(L"gui/TEMP_overlay_black.png",26),1,c_Image::m_DefaultFlags));
	this->m_overlayBlack->p_SetZ(FLOAT(20000.0));
	this->m_overlayBlack->p_InWorld(false);
	gc_assign(this->m_popupText,((new c_TextSprite)->m_new4(20002)));
	gc_assign(this->m_popupText2,((new c_TextSprite)->m_new4(20002)));
	return this;
}
c_ControllerInputPopup* c_ControllerInputPopup::m_new2(){
	c_Controller::m_new();
	return this;
}
void c_ControllerInputPopup::p_RegainFocus(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ControllerInputPopup.RegainFocus()",34));
}
void c_ControllerInputPopup::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ControllerInputPopup.Update()",29));
}
void c_ControllerInputPopup::mark(){
	c_Controller::mark();
	gc_mark_q(m_cGame);
	gc_mark_q(m_inputText);
	gc_mark_q(m_inputText2);
	gc_mark_q(m_overlayBlack);
	gc_mark_q(m_popupText);
	gc_mark_q(m_popupText2);
}
bool bb_controller_game_incrementFixedBeatNum;
c_Enumerator30::c_Enumerator30(){
	m__list=0;
	m__curr=0;
}
c_Enumerator30* c_Enumerator30::m_new(c_List27* t_list){
	gc_assign(m__list,t_list);
	gc_assign(m__curr,t_list->m__head->m__succ);
	return this;
}
c_Enumerator30* c_Enumerator30::m_new2(){
	return this;
}
bool c_Enumerator30::p_HasNext(){
	while(m__curr->m__succ->m__pred!=m__curr){
		gc_assign(m__curr,m__curr->m__succ);
	}
	return m__curr!=m__list->m__head;
}
c_SaleItem* c_Enumerator30::p_NextObject(){
	c_SaleItem* t_data=m__curr->m__data;
	gc_assign(m__curr,m__curr->m__succ);
	return t_data;
}
void c_Enumerator30::mark(){
	Object::mark();
	gc_mark_q(m__list);
	gc_mark_q(m__curr);
}
c_TextInput::c_TextInput(){
}
c_TextInput* c_TextInput::m_new(String t_t,int t_j,Float t_sc,int t_size){
	c_TextLabel::m_new2();
	bb_logger_Debug->p_TraceNotImplemented(String(L"TextInput.New(String, Int, Float, Int)",38));
	return this;
}
c_TextInput* c_TextInput::m_new2(){
	c_TextLabel::m_new2();
	return this;
}
void c_TextInput::mark(){
	c_TextLabel::mark();
}
int bb_input_KeyHit(int t_key){
	return bb_input_device->p_KeyHit(t_key);
}
c_InputValue::c_InputValue(){
}
void c_InputValue::mark(){
	Object::mark();
}
c_ControllerPause::c_ControllerPause(){
}
c_ControllerPause* c_ControllerPause::m_new(Object* t_game){
	c_Controller::m_new();
	bb_logger_Debug->p_TraceNotImplemented(String(L"ControllerPause.New(Object)",27));
	return this;
}
c_ControllerPause* c_ControllerPause::m_new2(){
	c_Controller::m_new();
	return this;
}
void c_ControllerPause::p_RegainFocus(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ControllerPause.RegainFocus()",29));
}
void c_ControllerPause::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ControllerPause.Update()",24));
}
void c_ControllerPause::mark(){
	c_Controller::mark();
}
c_Doppelganger::c_Doppelganger(){
}
c_List37* c_Doppelganger::m_doppelgangers;
void c_Doppelganger::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Doppelganger.Update()",21));
}
void c_Doppelganger::m_UpdateAll(){
	c_Enumerator31* t_=m_doppelgangers->p_ObjectEnumerator();
	while(t_->p_HasNext()){
		c_Doppelganger* t_doppelganger=t_->p_NextObject();
		t_doppelganger->p_Update();
	}
}
void c_Doppelganger::mark(){
	Object::mark();
}
c_List37::c_List37(){
	m__head=((new c_HeadNode37)->m_new());
}
c_List37* c_List37::m_new(){
	return this;
}
c_Node55* c_List37::p_AddLast37(c_Doppelganger* t_data){
	return (new c_Node55)->m_new(m__head,m__head->m__pred,t_data);
}
c_List37* c_List37::m_new2(Array<c_Doppelganger* > t_data){
	Array<c_Doppelganger* > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		c_Doppelganger* t_t=t_[t_2];
		t_2=t_2+1;
		p_AddLast37(t_t);
	}
	return this;
}
c_Enumerator31* c_List37::p_ObjectEnumerator(){
	return (new c_Enumerator31)->m_new(this);
}
void c_List37::mark(){
	Object::mark();
	gc_mark_q(m__head);
}
c_Node55::c_Node55(){
	m__succ=0;
	m__pred=0;
	m__data=0;
}
c_Node55* c_Node55::m_new(c_Node55* t_succ,c_Node55* t_pred,c_Doppelganger* t_data){
	gc_assign(m__succ,t_succ);
	gc_assign(m__pred,t_pred);
	gc_assign(m__succ->m__pred,this);
	gc_assign(m__pred->m__succ,this);
	gc_assign(m__data,t_data);
	return this;
}
c_Node55* c_Node55::m_new2(){
	return this;
}
void c_Node55::mark(){
	Object::mark();
	gc_mark_q(m__succ);
	gc_mark_q(m__pred);
	gc_mark_q(m__data);
}
c_HeadNode37::c_HeadNode37(){
}
c_HeadNode37* c_HeadNode37::m_new(){
	c_Node55::m_new2();
	gc_assign(m__succ,(this));
	gc_assign(m__pred,(this));
	return this;
}
void c_HeadNode37::mark(){
	c_Node55::mark();
}
c_Enumerator31::c_Enumerator31(){
	m__list=0;
	m__curr=0;
}
c_Enumerator31* c_Enumerator31::m_new(c_List37* t_list){
	gc_assign(m__list,t_list);
	gc_assign(m__curr,t_list->m__head->m__succ);
	return this;
}
c_Enumerator31* c_Enumerator31::m_new2(){
	return this;
}
bool c_Enumerator31::p_HasNext(){
	while(m__curr->m__succ->m__pred!=m__curr){
		gc_assign(m__curr,m__curr->m__succ);
	}
	return m__curr!=m__list->m__head;
}
c_Doppelganger* c_Enumerator31::p_NextObject(){
	c_Doppelganger* t_data=m__curr->m__data;
	gc_assign(m__curr,m__curr->m__succ);
	return t_data;
}
void c_Enumerator31::mark(){
	Object::mark();
	gc_mark_q(m__list);
	gc_mark_q(m__curr);
}
c_List38::c_List38(){
	m__head=((new c_HeadNode38)->m_new());
}
c_List38* c_List38::m_new(){
	return this;
}
c_Node56* c_List38::p_AddLast38(c_Flyaway* t_data){
	return (new c_Node56)->m_new(m__head,m__head->m__pred,t_data);
}
c_List38* c_List38::m_new2(Array<c_Flyaway* > t_data){
	Array<c_Flyaway* > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		c_Flyaway* t_t=t_[t_2];
		t_2=t_2+1;
		p_AddLast38(t_t);
	}
	return this;
}
c_Enumerator32* c_List38::p_ObjectEnumerator(){
	return (new c_Enumerator32)->m_new(this);
}
void c_List38::mark(){
	Object::mark();
	gc_mark_q(m__head);
}
c_Node56::c_Node56(){
	m__succ=0;
	m__pred=0;
	m__data=0;
}
c_Node56* c_Node56::m_new(c_Node56* t_succ,c_Node56* t_pred,c_Flyaway* t_data){
	gc_assign(m__succ,t_succ);
	gc_assign(m__pred,t_pred);
	gc_assign(m__succ->m__pred,this);
	gc_assign(m__pred->m__succ,this);
	gc_assign(m__data,t_data);
	return this;
}
c_Node56* c_Node56::m_new2(){
	return this;
}
void c_Node56::mark(){
	Object::mark();
	gc_mark_q(m__succ);
	gc_mark_q(m__pred);
	gc_mark_q(m__data);
}
c_HeadNode38::c_HeadNode38(){
}
c_HeadNode38* c_HeadNode38::m_new(){
	c_Node56::m_new2();
	gc_assign(m__succ,(this));
	gc_assign(m__pred,(this));
	return this;
}
void c_HeadNode38::mark(){
	c_Node56::mark();
}
c_Enumerator32::c_Enumerator32(){
	m__list=0;
	m__curr=0;
}
c_Enumerator32* c_Enumerator32::m_new(c_List38* t_list){
	gc_assign(m__list,t_list);
	gc_assign(m__curr,t_list->m__head->m__succ);
	return this;
}
c_Enumerator32* c_Enumerator32::m_new2(){
	return this;
}
bool c_Enumerator32::p_HasNext(){
	while(m__curr->m__succ->m__pred!=m__curr){
		gc_assign(m__curr,m__curr->m__succ);
	}
	return m__curr!=m__list->m__head;
}
c_Flyaway* c_Enumerator32::p_NextObject(){
	c_Flyaway* t_data=m__curr->m__data;
	gc_assign(m__curr,m__curr->m__succ);
	return t_data;
}
void c_Enumerator32::mark(){
	Object::mark();
	gc_mark_q(m__list);
	gc_mark_q(m__curr);
}
c_Enumerator33::c_Enumerator33(){
	m__list=0;
	m__curr=0;
}
c_Enumerator33* c_Enumerator33::m_new(c_List16* t_list){
	gc_assign(m__list,t_list);
	gc_assign(m__curr,t_list->m__head->m__succ);
	return this;
}
c_Enumerator33* c_Enumerator33::m_new2(){
	return this;
}
bool c_Enumerator33::p_HasNext(){
	while(m__curr->m__succ->m__pred!=m__curr){
		gc_assign(m__curr,m__curr->m__succ);
	}
	return m__curr!=m__list->m__head;
}
c_ParticleSystem* c_Enumerator33::p_NextObject(){
	c_ParticleSystem* t_data=m__curr->m__data;
	gc_assign(m__curr,m__curr->m__succ);
	return t_data;
}
void c_Enumerator33::mark(){
	Object::mark();
	gc_mark_q(m__list);
	gc_mark_q(m__curr);
}
c_Swarm::c_Swarm(){
}
void c_Swarm::m_Move(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Swarm.Move()",12));
}
void c_Swarm::mark(){
	Object::mark();
}
c_CrystalShards::c_CrystalShards(){
}
void c_CrystalShards::m_MoveAll(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"CrystalShards.MoveAll()",23));
}
c_List41* c_CrystalShards::m_shardsList;
c_CrystalShards* c_CrystalShards::m_new(int t_x_,int t_y_){
	c_Entity::m_new();
	m_shardsList->p_AddLast41(this);
	gc_assign(this->m_image,(new c_Sprite)->m_new(String(L"entities/crystal_shards.png",27),24,24,2,c_Image::m_DefaultFlags));
	this->m_image->p_SetZOff(FLOAT(-19.0));
	return this;
}
c_CrystalShards* c_CrystalShards::m_new2(){
	c_Entity::m_new();
	return this;
}
void c_CrystalShards::p_Die(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"CrystalShards.Die()",19));
}
bool c_CrystalShards::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"CrystalShards.Hit(String, Int, Int, Entity, Bool, Int)",54));
	return false;
}
void c_CrystalShards::mark(){
	c_Entity::mark();
}
c_Minimap::c_Minimap(){
}
void c_Minimap::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Minimap.Update()",16));
}
void c_Minimap::m_AddDirty(c_Point* t_p){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Minimap.AddDirty(Point)",23));
}
void c_Minimap::m_AddDirty2(int t_x,int t_y){
	bb_logger_Debug->p_TraceNotImplemented(String(L"Minimap.AddDirty(Int, Int)",26));
}
void c_Minimap::mark(){
	Object::mark();
}
bool bb_controller_game_DEBUG_ALL_TILES_VISIBLE;
c_List39::c_List39(){
	m__head=((new c_HeadNode39)->m_new());
}
c_List39* c_List39::m_new(){
	return this;
}
c_Node57* c_List39::p_AddLast39(c_Player* t_data){
	return (new c_Node57)->m_new(m__head,m__head->m__pred,t_data);
}
c_List39* c_List39::m_new2(Array<c_Player* > t_data){
	Array<c_Player* > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		c_Player* t_t=t_[t_2];
		t_2=t_2+1;
		p_AddLast39(t_t);
	}
	return this;
}
c_Enumerator34* c_List39::p_ObjectEnumerator(){
	return (new c_Enumerator34)->m_new(this);
}
bool c_List39::p_IsEmpty(){
	return m__head->m__succ==m__head;
}
void c_List39::mark(){
	Object::mark();
	gc_mark_q(m__head);
}
c_Node57::c_Node57(){
	m__succ=0;
	m__pred=0;
	m__data=0;
}
c_Node57* c_Node57::m_new(c_Node57* t_succ,c_Node57* t_pred,c_Player* t_data){
	gc_assign(m__succ,t_succ);
	gc_assign(m__pred,t_pred);
	gc_assign(m__succ->m__pred,this);
	gc_assign(m__pred->m__succ,this);
	gc_assign(m__data,t_data);
	return this;
}
c_Node57* c_Node57::m_new2(){
	return this;
}
void c_Node57::mark(){
	Object::mark();
	gc_mark_q(m__succ);
	gc_mark_q(m__pred);
	gc_mark_q(m__data);
}
c_HeadNode39::c_HeadNode39(){
}
c_HeadNode39* c_HeadNode39::m_new(){
	c_Node57::m_new2();
	gc_assign(m__succ,(this));
	gc_assign(m__pred,(this));
	return this;
}
void c_HeadNode39::mark(){
	c_Node57::mark();
}
c_Enumerator34::c_Enumerator34(){
	m__list=0;
	m__curr=0;
}
c_Enumerator34* c_Enumerator34::m_new(c_List39* t_list){
	gc_assign(m__list,t_list);
	gc_assign(m__curr,t_list->m__head->m__succ);
	return this;
}
c_Enumerator34* c_Enumerator34::m_new2(){
	return this;
}
bool c_Enumerator34::p_HasNext(){
	while(m__curr->m__succ->m__pred!=m__curr){
		gc_assign(m__curr,m__curr->m__succ);
	}
	return m__curr!=m__list->m__head;
}
c_Player* c_Enumerator34::p_NextObject(){
	c_Player* t_data=m__curr->m__data;
	gc_assign(m__curr,m__curr->m__succ);
	return t_data;
}
void c_Enumerator34::mark(){
	Object::mark();
	gc_mark_q(m__list);
	gc_mark_q(m__curr);
}
c_List40::c_List40(){
	m__head=((new c_HeadNode40)->m_new());
}
c_List40* c_List40::m_new(){
	return this;
}
c_Node58* c_List40::p_AddLast40(c_Bomb* t_data){
	return (new c_Node58)->m_new(m__head,m__head->m__pred,t_data);
}
c_List40* c_List40::m_new2(Array<c_Bomb* > t_data){
	Array<c_Bomb* > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		c_Bomb* t_t=t_[t_2];
		t_2=t_2+1;
		p_AddLast40(t_t);
	}
	return this;
}
void c_List40::mark(){
	Object::mark();
	gc_mark_q(m__head);
}
c_Node58::c_Node58(){
	m__succ=0;
	m__pred=0;
	m__data=0;
}
c_Node58* c_Node58::m_new(c_Node58* t_succ,c_Node58* t_pred,c_Bomb* t_data){
	gc_assign(m__succ,t_succ);
	gc_assign(m__pred,t_pred);
	gc_assign(m__succ->m__pred,this);
	gc_assign(m__pred->m__succ,this);
	gc_assign(m__data,t_data);
	return this;
}
c_Node58* c_Node58::m_new2(){
	return this;
}
void c_Node58::mark(){
	Object::mark();
	gc_mark_q(m__succ);
	gc_mark_q(m__pred);
	gc_mark_q(m__data);
}
c_HeadNode40::c_HeadNode40(){
}
c_HeadNode40* c_HeadNode40::m_new(){
	c_Node58::m_new2();
	gc_assign(m__succ,(this));
	gc_assign(m__pred,(this));
	return this;
}
void c_HeadNode40::mark(){
	c_Node58::mark();
}
c_List41::c_List41(){
	m__head=((new c_HeadNode41)->m_new());
}
c_List41* c_List41::m_new(){
	return this;
}
c_Node59* c_List41::p_AddLast41(c_CrystalShards* t_data){
	return (new c_Node59)->m_new(m__head,m__head->m__pred,t_data);
}
c_List41* c_List41::m_new2(Array<c_CrystalShards* > t_data){
	Array<c_CrystalShards* > t_=t_data;
	int t_2=0;
	while(t_2<t_.Length()){
		c_CrystalShards* t_t=t_[t_2];
		t_2=t_2+1;
		p_AddLast41(t_t);
	}
	return this;
}
void c_List41::mark(){
	Object::mark();
	gc_mark_q(m__head);
}
c_Node59::c_Node59(){
	m__succ=0;
	m__pred=0;
	m__data=0;
}
c_Node59* c_Node59::m_new(c_Node59* t_succ,c_Node59* t_pred,c_CrystalShards* t_data){
	gc_assign(m__succ,t_succ);
	gc_assign(m__pred,t_pred);
	gc_assign(m__succ->m__pred,this);
	gc_assign(m__pred->m__succ,this);
	gc_assign(m__data,t_data);
	return this;
}
c_Node59* c_Node59::m_new2(){
	return this;
}
void c_Node59::mark(){
	Object::mark();
	gc_mark_q(m__succ);
	gc_mark_q(m__pred);
	gc_mark_q(m__data);
}
c_HeadNode41::c_HeadNode41(){
}
c_HeadNode41* c_HeadNode41::m_new(){
	c_Node59::m_new2();
	gc_assign(m__succ,(this));
	gc_assign(m__pred,(this));
	return this;
}
void c_HeadNode41::mark(){
	c_Node59::mark();
}
c_ConductorBattery::c_ConductorBattery(){
}
void c_ConductorBattery::m_WaterBallDeath(c_WaterBall* t_enemy){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ConductorBattery.WaterBallDeath(WaterBall)",42));
}
void c_ConductorBattery::p_Die(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ConductorBattery.Die()",22));
}
bool c_ConductorBattery::p_Hit(String t_damageSource,int t_damage,int t_dir,c_Entity* t_hitter,bool t_hitAtLastTile,int t_hitType){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ConductorBattery.Hit(String, Int, Int, Entity, Bool, Int)",57));
	return false;
}
void c_ConductorBattery::p_Update(){
	bb_logger_Debug->p_TraceNotImplemented(String(L"ConductorBattery.Update()",25));
}
void c_ConductorBattery::mark(){
	c_Enemy::mark();
}
int bbInit(){
	GC_CTOR
	bb_app__app=0;
	bb_app__delegate=0;
	bb_app__game=BBGame::Game();
	bb_graphics_device=0;
	bb_graphics_context=(new c_GraphicsContext)->m_new();
	c_Image::m_DefaultFlags=0;
	bb_audio2_device=0;
	bb_input_device=0;
	bb_app__devWidth=0;
	bb_app__devHeight=0;
	bb_app__displayModes=Array<c_DisplayMode* >();
	bb_app__desktopMode=0;
	bb_graphics_renderDevice=0;
	bb_logger_Debug=(new c_Logger)->m_new();
	bb_necrodancergame_DEBUG_LOG_OUTPUT=true;
	bb_textlog_logTimestamp=String();
	bb_necrodancergame_FRAMES_PER_SEC=60;
	bb_app__updateRate=0;
	bb_necrodancergame_GLOBAL_SCALE_FACTOR=FLOAT(1.0);
	c_GameData::m_modGamedataChanges=false;
	c_GameData::m_activeMod=String();
	bb_necrodancergame_xmlData=0;
	c_GameData::m_gameDataLoaded=false;
	c_Controller::m_currentController=0;
	bb_controller_game_totalPlaytimeLastAdded=0;
	bb_controller_game_controllerGamePointer=0;
	c_Sprite::m_scaleToFitScreen=false;
	bb_controller_game_lastPlayerMoveBeat=Array<int >(4);
	c_GUI_gameplay::m_errorKey=0;
	c_Input::m_stickLeft=Array<bool >(4);
	c_Input::m_stickRight=Array<bool >(4);
	c_Input::m_stickUp=Array<bool >(4);
	c_Input::m_stickDown=Array<bool >(4);
	c_Input::m_lastJoyX=Array<Float >(4);
	c_Input::m_lastJoyY=Array<Float >(4);
	c_Input::m_stickLeft2=Array<bool >(4);
	c_Input::m_stickRight2=Array<bool >(4);
	c_Input::m_stickUp2=Array<bool >(4);
	c_Input::m_stickDown2=Array<bool >(4);
	c_Input::m_lastJoyX2=Array<Float >(4);
	c_Input::m_lastJoyY2=Array<Float >(4);
	c_Input::m_movementBuffer=Array<int >(4);
	c_Input::m_movementBufferFrame=Array<int >(4);
	c_Input::m_offbeatMovementBuffer=Array<int >(4);
	c_Input::m_offbeatMovementBufferFrame=Array<int >(4);
	c_Input::m_lastBeatMovedOn=Array<int >(4);
	c_Input::m_lastOffbeatMovedOn=Array<int >(4);
	c_Input::m_lastBeatMissed=Array<int >(4);
	c_Input::m_punishmentBeatToSkip=Array<int >(4);
	c_Input::m_punishmentBeatToSkipQueue=Array<int >(4);
	c_Input::m_keysHitLastFrame=Array<bool >(512);
	c_Input::m_keysHit2FramesAgo=Array<bool >(512);
	bb_controller_game_gamePaused=false;
	c_Spells::m_spellCoolKills=(new c_StringMap3)->m_new();
	c_Spells::m_fireballInWorld=Array<c_Sprite* >(5);
	c_Spells::m_pulseInWorld=0;
	c_Spells::m_pulseAnim=(new c_Stack2)->m_new();
	c_Stack2::m_NIL=0;
	c_Spells::m_spellSlot1=String(L"spell_none",10);
	c_Spells::m_spellSlot2=String(L"spell_none",10);
	bb_controller_game_currentLevel=1;
	bb_controller_game_currentZone=1;
	bb_controller_game_currentDepth=1;
	c_Player::m_numCoins=0;
	c_Player::m_coinXOR=0;
	c_Player::m_sessionMaxCoins=0;
	c_ControllerLevelEditor::m_playingLevel=-1;
	c_ControllerLevelEditor::m_playingWholeDungeon=false;
	c_ControllerLevelEditor::m_storedEditor=0;
	bb_controller_game_hasWon=false;
	bb_controller_game_showScoreMessage=false;
	c_Level::m_outsideBossChamber=false;
	c_Level::m_pacifismModeOn=false;
	c_Level::m_shopkeeperDead=false;
	c_Level::m_shopkeeperFell=false;
	c_Level::m_placeLordOnLevel=-1;
	c_Level::m_placeShrineOnLevel=(new c_IntMap3)->m_new();
	c_Level::m_placeTransmogrifierOnDepth=-1;
	c_Level::m_placeTransmogrifierOnLevel=-1;
	c_Level::m_placeArenaOnLevel=-1;
	c_Level::m_placeArenaOnDepth=-1;
	c_Level::m_placedArena=false;
	c_Level::m_placeGlassShopOnLevel=-1;
	c_Level::m_placeGlassShopOnDepth=-1;
	c_Level::m_placeBloodShopOnLevel=-1;
	c_Level::m_placeBloodShopOnDepth=-1;
	c_Level::m_placeFoodShopOnLevel=-1;
	c_Level::m_placeFoodShopOnDepth=-1;
	c_Level::m_placeConjurerOnLevel=-1;
	c_Level::m_placeConjurerOnDepth=-1;
	c_Level::m_placeShrinerOnLevel=-1;
	c_Level::m_placeShrinerOnDepth=-1;
	c_Level::m_placePawnbrokerOnLevel=-1;
	c_Level::m_placePawnbrokerOnDepth=-1;
	c_Shrine::m_darknessShrineActive=false;
	c_Shrine::m_rhythmShrineActive=false;
	c_Shrine::m_riskShrineActive=false;
	c_Shrine::m_riskShrinePlayer=0;
	c_Shrine::m_spaceShrineActive=false;
	c_Shrine::m_warShrineActive=false;
	c_Shrine::m_noReturnShrineActive=false;
	c_Shrine::m_noReturnShrinePlayer=0;
	c_Shrine::m_paceShrineActive=false;
	c_Shrine::m_bossShrineActive=false;
	c_Shrine::m_usedShrines=(new c_IntSet)->m_new();
	c_Shrine::m_usedShrinerInZone=-1;
	c_Level::m_randSeed=-1;
	c_Level::m_nonDeterministicMSStart=-1;
	c_Level::m_wholeRunRNG=0;
	c_Level::m_currentFloorRNG=0;
	c_Level::m_usedBosses=(new c_IntSet)->m_new();
	c_Level::m_isSeededMode=false;
	c_Level::m_isHardcoreMode=false;
	c_Level::m_isDailyChallenge=false;
	c_Level::m_isDDRMode=false;
	c_Level::m_isSwarmMode=false;
	c_Level::m_isNoReturnMode=false;
	c_Level::m_isSoulMode=false;
	c_Level::m_isFloorIsLavaMode=false;
	c_Level::m_isPhasingMode=false;
	c_Level::m_isRandomizerMode=false;
	c_Level::m_isMysteryMode=false;
	c_Level::m_isReplaying=false;
	c_Level::m_isTrainingMode=false;
	c_Level::m_isBeastmaster=false;
	c_Level::m_playedVictoryCutscene=false;
	c_Level::m_mentorLevel=-1;
	c_Level::m_isStoryMode=false;
	c_Level::m_isDeathlessMode=false;
	c_Level::m_deathlessWinCount=0;
	c_Level::m_isAllCharactersMode=false;
	c_Level::m_isAllCharactersDLCMode=false;
	bb_controller_game_numPlayers=1;
	bb_controller_game_players=Array<c_Player* >(4);
	bb_controller_game_player1=0;
	c_RenderableObject::m_renderableObjectList=(new c_List2)->m_new();
	c_RenderableObject::m_lightSourceList=(new c_List2)->m_new();
	c_Entity::m_entityList=(new c_List3)->m_new();
	c_Entity::m_deadEntityList=(new c_List3)->m_new();
	c_Level::m_continuedRunCoinScore=0;
	c_Level::m_lockedShopPlaced=false;
	c_Level::m_secretRockRoomPlaced=false;
	c_SaleItem::m_lastSaleItemClass1=String();
	c_SaleItem::m_lastSaleItemClass2=String();
	c_Item::m_lastChestItemClass1=String();
	c_Item::m_lastChestItemClass2=String();
	c_Chest::m_lastChestColor=0;
	c_Chest::m_lastChestColor2=0;
	c_Crate::m_fallenCrates=(new c_List5)->m_new();
	c_Crate::m_fallenGargoyles=(new c_List6)->m_new();
	c_SaleItem::m_randomSaleItemList=(new c_List7)->m_new();
	c_Leprechaun::m_seenLeprechaun=false;
	c_Chain::m_kills=0;
	c_Level::m_isRunNoItemsNoShrines=true;
	c_Level::m_placedUrnThisRun=false;
	c_Level::m_usedCustomMusic=false;
	c_Level::m_shopkeeperGhostLevel=-1;
	c_Level::m_shopkeeperGhostDepth=-1;
	c_Camera::m_fadeOutDuration=0;
	c_Camera::m_fadeOutCurrent=0;
	c_Camera::m_fadeOutCallback=0;
	c_Camera::m_fadeInDuration=0;
	c_Camera::m_fadeInCurrent=0;
	c_Camera::m_fadeInCallback=0;
	c_Level::m_forceBoss=-1;
	c_Stairs_callback::m_levelVal=-1;
	c_Stairs_callback::m_zoneVal=-1;
	c_Stairs_callback::m_playerVal=-1;
	c_Stairs_callback::m_continuedRun=false;
	c_Item::m_itemImages=(new c_StringMap7)->m_new();
	c_Entity::m_entityCount=0;
	c_Familiar::m_familiarList=(new c_List10)->m_new();
	c_Level::m_isLevelEditor=false;
	bb_controller_game_dailyChallengeSuccessScore=-1;
	bb_controller_game_speedrunSuccessScore=-1;
	bb_controller_game_hardcoreModeSuccessScore=-1;
	c_Level::m_isLevelEnding=false;
	c_Player::m_numDiamonds=0;
	c_Audio::m_songShopOpen=false;
	c_Player::m_playerTempCount=0;
	c_Camera::m_x=0;
	c_Camera::m_y=0;
	c_Player::m_hudCoins=0;
	c_Player::m_hudDiamonds=0;
	c_Util::m_storedSeed=0;
	bb_random_Seed=1234;
	c_Level::m_creatingMap=false;
	c_Level::m_replay=0;
	c_Player::m_heartsLoaded=0;
	c_Player::m_heart=0;
	c_Player::m_heartEmpty=0;
	c_Player::m_heartHalf=0;
	c_Player::m_cursedHeart=0;
	c_Player::m_cursedHeartEmpty=0;
	c_Player::m_cursedHeartHalf=0;
	c_Level::m_previousLevelUnkilledStairLockingMinibosses=(new c_StackEx)->m_new();
	c_Enemy::m_enemyList=(new c_EnemyList)->m_new();
	c_RenderableObject::m_deletingAll=false;
	c_Level::m_randSeedString=String();
	c_Level::m_allCharsCompletion=Array<bool >(9);
	c_Level::m_isAllCharsRunNoItemsNoShrines=true;
	c_Level::m_allCharsCompletionDLC=Array<bool >(13);
	c_Level::m_bossNumber=1;
	c_Camera::m_seekX=FLOAT(.0);
	c_Camera::m_seekY=FLOAT(.0);
	c_Camera::m_fixed=false;
	bb_controller_game_lastEnemyMoveBeat=0;
	c_Enemy::m_movesBehind=0;
	c_Enemy::m_lastWraithSpawnBeat=0;
	c_Audio::m_fixedBeatNum=-64;
	c_Input::m_lastBeatSkippedFlyaway=-1;
	c_Level::m_tiles=(new c_IntMap7)->m_new();
	c_Tile::m_floorRisingList=(new c_List12)->m_new();
	c_Tile::m_floorRecededList=(new c_List12)->m_new();
	c_Tile::m_totalTilesCreatedOrDestroyed=0;
	c_Level::m_minibossFormerWall=(new c_List13)->m_new();
	c_Level::m_rooms=(new c_List14)->m_new();
	c_Trap::m_trapList=(new c_TrapList)->m_new();
	c_Level::m_addKeyInSecretChest=false;
	c_Level::m_startedShrinerFight=false;
	c_ParticleSystem::m_systems=(new c_List16)->m_new();
	c_Level::m_triggerList=(new c_IntList)->m_new2();
	c_Enemy::m_enemiesPaused=false;
	c_Enemy::m_enemiesFearfulDuration=0;
	c_Level::m_mapLightValuesInitialized=false;
	c_Level::m_mapLightValuesCachedFrame=-1;
	c_Level::m_carveX=0;
	c_Level::m_carveY=0;
	c_Level::m_placedAdditionalRedChest=false;
	c_Level::m_placedAdditionalWhiteChest=false;
	c_Level::m_placedAdditionalBlackChest=false;
	c_Level::m_flawlessVictory=true;
	c_Level::m_wasMinibossLockedInBattle=false;
	c_Level::m_transmogrifier=0;
	c_Level::m_conjurer=0;
	c_Level::m_shriner=0;
	c_Level::m_pawnbroker=0;
	c_Level::m_enemiesDropSingleCoinForThisLevel=false;
	c_Level::m_firstRoom=0;
	c_Level::m_levelConstraintX=0;
	c_Level::m_levelConstraintY=0;
	c_Level::m_levelConstraintW=0;
	c_Level::m_levelConstraintH=0;
	c_Level::m_levelConstraintNum=0;
	c_Level::m_exits=(new c_ExitMap)->m_new();
	c_Level::m_isAnyTar=false;
	c_Level::m_isConductorLevel=false;
	c_Level::m_levelJustStarted=false;
	c_Level::m_shopX=0;
	c_Level::m_shopY=0;
	c_Level::m_shopW=0;
	c_Level::m_shopH=0;
	c_Level::m_zone3DividingLineX=FLOAT(.0);
	c_Level::m_zone3DividingLineY=FLOAT(.0);
	c_Level::m_pendingTiles=(new c_IntMap7)->m_new();
	c_Tile::m_pendingTilesList=(new c_List12)->m_new();
	c_Level::m_lastCreatedRoomType=-1;
	c_Level::m_skipNextPenaltyBox=false;
	c_Enemy::m_randomizerXML=0;
	c_Enemy::m_heartSmall=0;
	c_Enemy::m_heartEmptySmall=0;
	c_Sarcophagus::m_sarcophagi=(new c_List19)->m_new();
	c_KingConga::m_theKing=0;
	c_Audio::m_debugEnablePlaceholders=true;
	c_Enemy::m_killingAllEnemies=false;
	bb_controller_game_beatData=Array<int >();
	c_Audio::m_songLoops=0;
	c_Audio::m_numLoops=0;
	c_Audio::m_songDuration=0;
	c_Item::m_pickupList=(new c_List20)->m_new();
	c_Item::m_seenItems=(new c_StringMap3)->m_new();
	c_FamiliarFixed::m_familiarList=(new c_List4)->m_new();
	c_Wraith::m_theCursedWraith=0;
	c_Item::m_itemPoolRandom=(new c_List)->m_new();
	c_Item::m_itemPoolRandom2=(new c_List)->m_new();
	c_List* t_[]={(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new()};
	c_Item::m_itemPoolChest=Array<c_List* >(t_,7);
	c_List* t_2[]={(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new()};
	c_Item::m_itemPoolChest2=Array<c_List* >(t_2,7);
	c_List* t_3[]={(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new()};
	c_Item::m_itemPoolLockedChest=Array<c_List* >(t_3,7);
	c_List* t_4[]={(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new()};
	c_Item::m_itemPoolLockedChest2=Array<c_List* >(t_4,7);
	c_List* t_5[]={(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new()};
	c_Item::m_itemPoolAnyChest=Array<c_List* >(t_5,7);
	c_List* t_6[]={(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new()};
	c_Item::m_itemPoolAnyChest2=Array<c_List* >(t_6,7);
	c_List* t_7[]={(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new()};
	c_Item::m_itemPoolShop=Array<c_List* >(t_7,7);
	c_List* t_8[]={(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new()};
	c_Item::m_itemPoolShop2=Array<c_List* >(t_8,7);
	c_List* t_9[]={(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new()};
	c_Item::m_itemPoolLockedShop=Array<c_List* >(t_9,7);
	c_List* t_10[]={(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new()};
	c_Item::m_itemPoolLockedShop2=Array<c_List* >(t_10,7);
	c_List* t_11[]={(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new()};
	c_Item::m_itemPoolUrn=Array<c_List* >(t_11,7);
	c_List* t_12[]={(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new(),(new c_List)->m_new()};
	c_Item::m_itemPoolUrn2=Array<c_List* >(t_12,7);
	c_ParticleSystemData::m_MOLE_DIG=0;
	c_Necrodancer::m_necrodancer=0;
	c_Nightmare::m_nightmare=0;
	c_NPC::m_npcList=(new c_List22)->m_new();
	c_Shopkeeper::m_shopkeeperStartX=0;
	c_Shopkeeper::m_shopkeeperStartY=0;
	c_Shopkeeper::m_isMonstrous=false;
	c_Bell::m_bells=(new c_List23)->m_new();
	c_Level::m_charactersJustUnlocked=(new c_List17)->m_new();
	c_Stack3::m_NIL=String();
	c_Stack5::m_NIL=0;
	c_Item::m_debugTrailerMode=false;
	bb_controller_game_debugEnablePrototypes=true;
	c_Level::m_previousLevelMinibosses=(new c_StackEx)->m_new();
	c_Level::m_arenaNum=-1;
	c_Level::m_secretAtX=0;
	c_Level::m_secretAtY=0;
	c_Level::m_specialRoomEntranceX=0;
	c_Level::m_specialRoomEntranceY=0;
	c_SaleItem::m_currentSaleItems=(new c_List27)->m_new();
	c_Stack6::m_NIL=false;
	c_Shrine::m_shrineList=(new c_List28)->m_new();
	c_Chest::m_chestList=(new c_List32)->m_new();
	c_SaleChest::m_currentSaleChests=(new c_List33)->m_new();
	c_Crate::m_crateList=(new c_List5)->m_new();
	c_Stack7::m_NIL=0;
	c_Stack8::m_NIL=0;
	c_Level::m_debugForceMonstrousShop=false;
	c_Stack4::m_NIL=0;
	c_Stack9::m_NIL=0;
	c_Stack10::m_NIL=0;
	c_Level::m_tempTileWalk=(new c_List26)->m_new();
	c_Level::m_chestsStillToPlace=0;
	c_Poltergeist::m_theGhoul=0;
	c_Level::m_hallwayZone5=0;
	c_Level::m_isHardMode=false;
	bb_controller_game_runPlaytimeLastAdded=0;
	bb_controller_game_runPlaytimeMilliseconds=0;
	bb_controller_game_subRunPlaytimeMilliseconds=0;
	c_Level::m_zoneOrder=0;
	c_Level::m_quickRestart=false;
	c_Necrodancer::m_wallsStep=0;
	c_Switch::m_switches=(new c_List36)->m_new();
	c_Level::m_justUnlocked=String();
	c_Level::m_popUpController=0;
	c_Level::m_popUpType=-1;
	c_Level::m_practiceEnemyNum=-1;
	c_Tile::m_anyPlayerHaveRingOfShadowsCachedFrame=0;
	c_Tile::m_anyPlayerHaveCompassCachedFrame=0;
	c_Tile::m_anyPlayerHaveZoneMapCachedFrame=0;
	c_Tile::m_anyPlayerHaveMonocleCachedFrame=0;
	c_Tile::m_anyPlayerHaveRingOfLuckCachedFrame=0;
	c_Tile::m_anyPlayerHaveSunglassesCachedFrame=0;
	c_Entity::m_anyPlayerHaveCircletCachedFrame=0;
	c_Entity::m_anyPlayerHaveGlassTorchCachedFrame=0;
	c_Entity::m_anyPlayerHaveForesightTorchCachedFrame=0;
	c_Entity::m_anyPlayerHaveWallsTorchCachedFrame=0;
	c_Entity::m_anyPlayerHaveNazarCharmCachedFrame=0;
	c_Level::m_todaysRandSeedString=String();
	c_Chain::m_waitingForFirstMovement=Array<bool >(4);
	bb_steam_g_SteamLeaderboards=0;
	c_ControllerIntro::m_videoSpr=0;
	bb_necrodancergame_lastFrameTimeUpdate=0;
	bb_necrodancergame_globalFrameCounter=0;
	bb_necrodancergame_lastFrameCountUpdate=0;
	bb_necrodancergame_lastFPSUpdate=0;
	bb_controller_game_DEBUG_MOUSE_COORDS=false;
	c_Input::m_popUpController=0;
	c_Input::m_popupFrame=-1;
	c_Tile::m_anyPlayerHaveMonocleCached=false;
	c_Tile::m_anyPlayerHaveRingOfShadowsCached=false;
	c_Level::m_lastTileCount=-1;
	bb_necrodancergame_FIXED_HEIGHT=0;
	bb_necrodancergame_FIXED_WIDTH=0;
	c_Level::m_tileObstructionList=(new c_IntPointList)->m_new();
	c_ParticleSystemData::m_WATER_SPLASH_IN=0;
	c_ParticleSystemData::m_TAR_SPLASH_IN=0;
	c_Audio::m_cheatingDetected=false;
	bb_controller_game_incrementFixedBeatNum=false;
	c_Player::m_lobbySaleItemMinCost=999999;
	c_Audio::m_fadeFrames=-1;
	c_Audio::m_startFadeFrames=-1;
	c_Audio::m_startSong=false;
	c_Doppelganger::m_doppelgangers=(new c_List37)->m_new();
	c_Flyaway::m_temporarilyDisableNewFlyaways=0;
	c_Flyaway::m_activeFlyaways=(new c_List38)->m_new();
	c_Level::m_minimap=0;
	bb_controller_game_DEBUG_ALL_TILES_VISIBLE=false;
	c_Camera::m_shakeOffX=FLOAT(.0);
	c_Camera::m_shakeOffY=FLOAT(.0);
	c_Camera::m_overlayWhiteDuration=0;
	c_ParticleSystemData::m_GEYSER=0;
	c_Audio::m_includeVideoLatency=false;
	c_Level::m_maxLevelX=0;
	c_Level::m_minLevelX=0;
	c_Level::m_maxLevelY=0;
	c_Level::m_minLevelY=0;
	c_Level::m_mapLightValues=Array<Float >();
	c_Level::m_constMapLightValues=Array<Float >();
	c_Tile::m_anyPlayerHaveZoneMapCached=false;
	c_Entity::m_anyPlayerHaveWallsTorchCached=false;
	c_Tile::m_anyPlayerHaveCompassCached=false;
	c_Bomb::m_bombList=(new c_List40)->m_new();
	c_CrystalShards::m_shardsList=(new c_List41)->m_new();
	return 0;
}
void gc_mark(){
	gc_mark_q(bb_app__app);
	gc_mark_q(bb_app__delegate);
	gc_mark_q(bb_graphics_device);
	gc_mark_q(bb_graphics_context);
	gc_mark_q(bb_audio2_device);
	gc_mark_q(bb_input_device);
	gc_mark_q(bb_app__displayModes);
	gc_mark_q(bb_app__desktopMode);
	gc_mark_q(bb_graphics_renderDevice);
	gc_mark_q(bb_logger_Debug);
	gc_mark_q(bb_necrodancergame_xmlData);
	gc_mark_q(c_Controller::m_currentController);
	gc_mark_q(bb_controller_game_controllerGamePointer);
	gc_mark_q(bb_controller_game_lastPlayerMoveBeat);
	gc_mark_q(c_GUI_gameplay::m_errorKey);
	gc_mark_q(c_Input::m_stickLeft);
	gc_mark_q(c_Input::m_stickRight);
	gc_mark_q(c_Input::m_stickUp);
	gc_mark_q(c_Input::m_stickDown);
	gc_mark_q(c_Input::m_lastJoyX);
	gc_mark_q(c_Input::m_lastJoyY);
	gc_mark_q(c_Input::m_stickLeft2);
	gc_mark_q(c_Input::m_stickRight2);
	gc_mark_q(c_Input::m_stickUp2);
	gc_mark_q(c_Input::m_stickDown2);
	gc_mark_q(c_Input::m_lastJoyX2);
	gc_mark_q(c_Input::m_lastJoyY2);
	gc_mark_q(c_Input::m_movementBuffer);
	gc_mark_q(c_Input::m_movementBufferFrame);
	gc_mark_q(c_Input::m_offbeatMovementBuffer);
	gc_mark_q(c_Input::m_offbeatMovementBufferFrame);
	gc_mark_q(c_Input::m_lastBeatMovedOn);
	gc_mark_q(c_Input::m_lastOffbeatMovedOn);
	gc_mark_q(c_Input::m_lastBeatMissed);
	gc_mark_q(c_Input::m_punishmentBeatToSkip);
	gc_mark_q(c_Input::m_punishmentBeatToSkipQueue);
	gc_mark_q(c_Input::m_keysHitLastFrame);
	gc_mark_q(c_Input::m_keysHit2FramesAgo);
	gc_mark_q(c_Spells::m_spellCoolKills);
	gc_mark_q(c_Spells::m_fireballInWorld);
	gc_mark_q(c_Spells::m_pulseInWorld);
	gc_mark_q(c_Spells::m_pulseAnim);
	gc_mark_q(c_ControllerLevelEditor::m_storedEditor);
	gc_mark_q(c_Level::m_placeShrineOnLevel);
	gc_mark_q(c_Shrine::m_riskShrinePlayer);
	gc_mark_q(c_Shrine::m_noReturnShrinePlayer);
	gc_mark_q(c_Shrine::m_usedShrines);
	gc_mark_q(c_Level::m_wholeRunRNG);
	gc_mark_q(c_Level::m_currentFloorRNG);
	gc_mark_q(c_Level::m_usedBosses);
	gc_mark_q(bb_controller_game_players);
	gc_mark_q(c_RenderableObject::m_renderableObjectList);
	gc_mark_q(c_RenderableObject::m_lightSourceList);
	gc_mark_q(c_Entity::m_entityList);
	gc_mark_q(c_Entity::m_deadEntityList);
	gc_mark_q(c_Crate::m_fallenCrates);
	gc_mark_q(c_Crate::m_fallenGargoyles);
	gc_mark_q(c_SaleItem::m_randomSaleItemList);
	gc_mark_q(c_Camera::m_fadeOutCallback);
	gc_mark_q(c_Camera::m_fadeInCallback);
	gc_mark_q(c_Item::m_itemImages);
	gc_mark_q(c_Familiar::m_familiarList);
	gc_mark_q(c_Player::m_hudCoins);
	gc_mark_q(c_Player::m_hudDiamonds);
	gc_mark_q(c_Level::m_replay);
	gc_mark_q(c_Player::m_heart);
	gc_mark_q(c_Player::m_heartEmpty);
	gc_mark_q(c_Player::m_heartHalf);
	gc_mark_q(c_Player::m_cursedHeart);
	gc_mark_q(c_Player::m_cursedHeartEmpty);
	gc_mark_q(c_Player::m_cursedHeartHalf);
	gc_mark_q(c_Level::m_previousLevelUnkilledStairLockingMinibosses);
	gc_mark_q(c_Enemy::m_enemyList);
	gc_mark_q(c_Level::m_allCharsCompletion);
	gc_mark_q(c_Level::m_allCharsCompletionDLC);
	gc_mark_q(c_Level::m_tiles);
	gc_mark_q(c_Tile::m_floorRisingList);
	gc_mark_q(c_Tile::m_floorRecededList);
	gc_mark_q(c_Level::m_minibossFormerWall);
	gc_mark_q(c_Level::m_rooms);
	gc_mark_q(c_Trap::m_trapList);
	gc_mark_q(c_ParticleSystem::m_systems);
	gc_mark_q(c_Level::m_triggerList);
	gc_mark_q(c_Level::m_transmogrifier);
	gc_mark_q(c_Level::m_conjurer);
	gc_mark_q(c_Level::m_shriner);
	gc_mark_q(c_Level::m_pawnbroker);
	gc_mark_q(c_Level::m_firstRoom);
	gc_mark_q(c_Level::m_exits);
	gc_mark_q(c_Level::m_pendingTiles);
	gc_mark_q(c_Tile::m_pendingTilesList);
	gc_mark_q(c_Enemy::m_randomizerXML);
	gc_mark_q(c_Enemy::m_heartSmall);
	gc_mark_q(c_Enemy::m_heartEmptySmall);
	gc_mark_q(c_Sarcophagus::m_sarcophagi);
	gc_mark_q(c_KingConga::m_theKing);
	gc_mark_q(bb_controller_game_beatData);
	gc_mark_q(c_Item::m_pickupList);
	gc_mark_q(c_Item::m_seenItems);
	gc_mark_q(c_FamiliarFixed::m_familiarList);
	gc_mark_q(c_Wraith::m_theCursedWraith);
	gc_mark_q(c_Item::m_itemPoolRandom);
	gc_mark_q(c_Item::m_itemPoolRandom2);
	gc_mark_q(c_Item::m_itemPoolChest);
	gc_mark_q(c_Item::m_itemPoolChest2);
	gc_mark_q(c_Item::m_itemPoolLockedChest);
	gc_mark_q(c_Item::m_itemPoolLockedChest2);
	gc_mark_q(c_Item::m_itemPoolAnyChest);
	gc_mark_q(c_Item::m_itemPoolAnyChest2);
	gc_mark_q(c_Item::m_itemPoolShop);
	gc_mark_q(c_Item::m_itemPoolShop2);
	gc_mark_q(c_Item::m_itemPoolLockedShop);
	gc_mark_q(c_Item::m_itemPoolLockedShop2);
	gc_mark_q(c_Item::m_itemPoolUrn);
	gc_mark_q(c_Item::m_itemPoolUrn2);
	gc_mark_q(c_ParticleSystemData::m_MOLE_DIG);
	gc_mark_q(c_Necrodancer::m_necrodancer);
	gc_mark_q(c_Nightmare::m_nightmare);
	gc_mark_q(c_NPC::m_npcList);
	gc_mark_q(c_Bell::m_bells);
	gc_mark_q(c_Level::m_charactersJustUnlocked);
	gc_mark_q(c_Stack5::m_NIL);
	gc_mark_q(c_Level::m_previousLevelMinibosses);
	gc_mark_q(c_SaleItem::m_currentSaleItems);
	gc_mark_q(c_Shrine::m_shrineList);
	gc_mark_q(c_Chest::m_chestList);
	gc_mark_q(c_SaleChest::m_currentSaleChests);
	gc_mark_q(c_Crate::m_crateList);
	gc_mark_q(c_Stack7::m_NIL);
	gc_mark_q(c_Stack8::m_NIL);
	gc_mark_q(c_Stack4::m_NIL);
	gc_mark_q(c_Stack9::m_NIL);
	gc_mark_q(c_Stack10::m_NIL);
	gc_mark_q(c_Level::m_tempTileWalk);
	gc_mark_q(c_Poltergeist::m_theGhoul);
	gc_mark_q(c_Level::m_hallwayZone5);
	gc_mark_q(c_Level::m_zoneOrder);
	gc_mark_q(c_Switch::m_switches);
	gc_mark_q(c_Level::m_popUpController);
	gc_mark_q(c_Chain::m_waitingForFirstMovement);
	gc_mark_q(bb_steam_g_SteamLeaderboards);
	gc_mark_q(c_ControllerIntro::m_videoSpr);
	gc_mark_q(c_Input::m_popUpController);
	gc_mark_q(c_Level::m_tileObstructionList);
	gc_mark_q(c_ParticleSystemData::m_WATER_SPLASH_IN);
	gc_mark_q(c_ParticleSystemData::m_TAR_SPLASH_IN);
	gc_mark_q(c_Doppelganger::m_doppelgangers);
	gc_mark_q(c_Flyaway::m_activeFlyaways);
	gc_mark_q(c_Level::m_minimap);
	gc_mark_q(c_ParticleSystemData::m_GEYSER);
	gc_mark_q(c_Level::m_mapLightValues);
	gc_mark_q(c_Level::m_constMapLightValues);
	gc_mark_q(c_Bomb::m_bombList);
	gc_mark_q(c_CrystalShards::m_shardsList);
}
//${TRANSCODE_END}

int main( int argc,const char *argv[] ){

	BBMonkeyGame::Main( argc,argv );
}
